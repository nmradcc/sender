
V4-563.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026728  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b8c  08026978  08026978  00027978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c504  0802c504  0002f918  2**0
                  CONTENTS
  4 .ARM          00000008  0802c504  0802c504  0002d504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c50c  0802c50c  0002f918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802c50c  0802c50c  0002d50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000010  0802c51c  0802c51c  0002d51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001918  20000000  0802c52c  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ddc8  20001918  0802de44  0002f918  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f6e0  0802de44  000306e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002f918  2**0
                  CONTENTS, READONLY
 12 .debug_info   00069e55  00000000  00000000  0002f94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e02c  00000000  00000000  000997a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004980  00000000  00000000  000a77d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000037c5  00000000  00000000  000ac150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5bf  00000000  00000000  000af915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0006b06e  00000000  00000000  000c9ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00196540  00000000  00000000  00134f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002cb482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014578  00000000  00000000  002cb4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  002dfa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20001918 	.word	0x20001918
 800026c:	00000000 	.word	0x00000000
 8000270:	08026960 	.word	0x08026960

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000191c 	.word	0x2000191c
 800028c:	08026960 	.word	0x08026960

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	@ 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b97e 	b.w	8000f64 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c84:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c86:	460c      	mov	r4, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14d      	bne.n	8000d28 <__udivmoddi4+0xa8>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	460f      	mov	r7, r1
 8000c90:	4684      	mov	ip, r0
 8000c92:	4696      	mov	lr, r2
 8000c94:	fab2 f382 	clz	r3, r2
 8000c98:	d960      	bls.n	8000d5c <__udivmoddi4+0xdc>
 8000c9a:	b14b      	cbz	r3, 8000cb0 <__udivmoddi4+0x30>
 8000c9c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ca0:	f1c3 0220 	rsb	r2, r3, #32
 8000ca4:	409f      	lsls	r7, r3
 8000ca6:	fa00 fc03 	lsl.w	ip, r0, r3
 8000caa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000cb4:	fa1f f48e 	uxth.w	r4, lr
 8000cb8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cbc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cc0:	fb06 7711 	mls	r7, r6, r1, r7
 8000cc4:	fb01 f004 	mul.w	r0, r1, r4
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x62>
 8000cd0:	eb1e 0202 	adds.w	r2, lr, r2
 8000cd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x60>
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	f200 812d 	bhi.w	8000f3a <__udivmoddi4+0x2ba>
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	1a12      	subs	r2, r2, r0
 8000ce4:	fa1f fc8c 	uxth.w	ip, ip
 8000ce8:	fbb2 f0f6 	udiv	r0, r2, r6
 8000cec:	fb06 2210 	mls	r2, r6, r0, r2
 8000cf0:	fb00 f404 	mul.w	r4, r0, r4
 8000cf4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cf8:	4564      	cmp	r4, ip
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x8e>
 8000cfc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x8c>
 8000d06:	4564      	cmp	r4, ip
 8000d08:	f200 811a 	bhi.w	8000f40 <__udivmoddi4+0x2c0>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d12:	ebac 0c04 	sub.w	ip, ip, r4
 8000d16:	2100      	movs	r1, #0
 8000d18:	b125      	cbz	r5, 8000d24 <__udivmoddi4+0xa4>
 8000d1a:	fa2c f303 	lsr.w	r3, ip, r3
 8000d1e:	2200      	movs	r2, #0
 8000d20:	e9c5 3200 	strd	r3, r2, [r5]
 8000d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d905      	bls.n	8000d38 <__udivmoddi4+0xb8>
 8000d2c:	b10d      	cbz	r5, 8000d32 <__udivmoddi4+0xb2>
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	4608      	mov	r0, r1
 8000d36:	e7f5      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d14d      	bne.n	8000ddc <__udivmoddi4+0x15c>
 8000d40:	42a3      	cmp	r3, r4
 8000d42:	f0c0 80f2 	bcc.w	8000f2a <__udivmoddi4+0x2aa>
 8000d46:	4290      	cmp	r0, r2
 8000d48:	f080 80ef 	bcs.w	8000f2a <__udivmoddi4+0x2aa>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	4623      	mov	r3, r4
 8000d50:	4608      	mov	r0, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0e6      	beq.n	8000d24 <__udivmoddi4+0xa4>
 8000d56:	e9c5 6300 	strd	r6, r3, [r5]
 8000d5a:	e7e3      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 80a2 	bne.w	8000ea6 <__udivmoddi4+0x226>
 8000d62:	1a8a      	subs	r2, r1, r2
 8000d64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d68:	fa1f f68e 	uxth.w	r6, lr
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d72:	fb07 2014 	mls	r0, r7, r4, r2
 8000d76:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d7e:	fb06 f004 	mul.w	r0, r6, r4
 8000d82:	4290      	cmp	r0, r2
 8000d84:	d90f      	bls.n	8000da6 <__udivmoddi4+0x126>
 8000d86:	eb1e 0202 	adds.w	r2, lr, r2
 8000d8a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0901 	movcs.w	r9, #1
 8000d94:	f04f 0900 	movcc.w	r9, #0
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x124>
 8000d9c:	f1b9 0f00 	cmp.w	r9, #0
 8000da0:	f000 80c8 	beq.w	8000f34 <__udivmoddi4+0x2b4>
 8000da4:	4644      	mov	r4, r8
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	fa1f fc8c 	uxth.w	ip, ip
 8000dac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db0:	fb07 2210 	mls	r2, r7, r0, r2
 8000db4:	fb00 f606 	mul.w	r6, r0, r6
 8000db8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dbc:	4566      	cmp	r6, ip
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x152>
 8000dc0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x150>
 8000dca:	4566      	cmp	r6, ip
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2c6>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	ebac 0c06 	sub.w	ip, ip, r6
 8000dd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dda:	e79d      	b.n	8000d18 <__udivmoddi4+0x98>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa04 fe01 	lsl.w	lr, r4, r1
 8000de6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dea:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dee:	40f4      	lsrs	r4, r6
 8000df0:	408a      	lsls	r2, r1
 8000df2:	431f      	orrs	r7, r3
 8000df4:	ea4e 030c 	orr.w	r3, lr, ip
 8000df8:	fa00 fe01 	lsl.w	lr, r0, r1
 8000dfc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e00:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0c:	fb08 4410 	mls	r4, r8, r0, r4
 8000e10:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e14:	fb00 f90c 	mul.w	r9, r0, ip
 8000e18:	45a1      	cmp	r9, r4
 8000e1a:	d90e      	bls.n	8000e3a <__udivmoddi4+0x1ba>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e22:	bf2c      	ite	cs
 8000e24:	f04f 0b01 	movcs.w	fp, #1
 8000e28:	f04f 0b00 	movcc.w	fp, #0
 8000e2c:	45a1      	cmp	r9, r4
 8000e2e:	d903      	bls.n	8000e38 <__udivmoddi4+0x1b8>
 8000e30:	f1bb 0f00 	cmp.w	fp, #0
 8000e34:	f000 8093 	beq.w	8000f5e <__udivmoddi4+0x2de>
 8000e38:	4650      	mov	r0, sl
 8000e3a:	eba4 0409 	sub.w	r4, r4, r9
 8000e3e:	fa1f f983 	uxth.w	r9, r3
 8000e42:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e46:	fb08 4413 	mls	r4, r8, r3, r4
 8000e4a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d906      	bls.n	8000e64 <__udivmoddi4+0x1e4>
 8000e56:	193c      	adds	r4, r7, r4
 8000e58:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x1e2>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d87a      	bhi.n	8000f58 <__udivmoddi4+0x2d8>
 8000e62:	4643      	mov	r3, r8
 8000e64:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e68:	eba4 040c 	sub.w	r4, r4, ip
 8000e6c:	fba0 9802 	umull	r9, r8, r0, r2
 8000e70:	4544      	cmp	r4, r8
 8000e72:	46cc      	mov	ip, r9
 8000e74:	4643      	mov	r3, r8
 8000e76:	d302      	bcc.n	8000e7e <__udivmoddi4+0x1fe>
 8000e78:	d106      	bne.n	8000e88 <__udivmoddi4+0x208>
 8000e7a:	45ce      	cmp	lr, r9
 8000e7c:	d204      	bcs.n	8000e88 <__udivmoddi4+0x208>
 8000e7e:	3801      	subs	r0, #1
 8000e80:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e84:	eb68 0307 	sbc.w	r3, r8, r7
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x222>
 8000e8a:	ebbe 020c 	subs.w	r2, lr, ip
 8000e8e:	eb64 0403 	sbc.w	r4, r4, r3
 8000e92:	fa04 f606 	lsl.w	r6, r4, r6
 8000e96:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9a:	40cc      	lsrs	r4, r1
 8000e9c:	431e      	orrs	r6, r3
 8000e9e:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e73e      	b.n	8000d24 <__udivmoddi4+0xa4>
 8000ea6:	fa02 fe03 	lsl.w	lr, r2, r3
 8000eaa:	f1c3 0120 	rsb	r1, r3, #32
 8000eae:	fa04 f203 	lsl.w	r2, r4, r3
 8000eb2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ebc:	fa20 f101 	lsr.w	r1, r0, r1
 8000ec0:	fa1f f68e 	uxth.w	r6, lr
 8000ec4:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	fb07 4410 	mls	r4, r7, r0, r4
 8000ece:	0c11      	lsrs	r1, r2, #16
 8000ed0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000ed4:	fb00 f406 	mul.w	r4, r0, r6
 8000ed8:	428c      	cmp	r4, r1
 8000eda:	d90e      	bls.n	8000efa <__udivmoddi4+0x27a>
 8000edc:	eb1e 0101 	adds.w	r1, lr, r1
 8000ee0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee4:	bf2c      	ite	cs
 8000ee6:	f04f 0901 	movcs.w	r9, #1
 8000eea:	f04f 0900 	movcc.w	r9, #0
 8000eee:	428c      	cmp	r4, r1
 8000ef0:	d902      	bls.n	8000ef8 <__udivmoddi4+0x278>
 8000ef2:	f1b9 0f00 	cmp.w	r9, #0
 8000ef6:	d02c      	beq.n	8000f52 <__udivmoddi4+0x2d2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	1b09      	subs	r1, r1, r4
 8000efc:	b292      	uxth	r2, r2
 8000efe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f02:	fb07 1114 	mls	r1, r7, r4, r1
 8000f06:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0a:	fb04 f106 	mul.w	r1, r4, r6
 8000f0e:	4291      	cmp	r1, r2
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x2a2>
 8000f12:	eb1e 0202 	adds.w	r2, lr, r2
 8000f16:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f1a:	d201      	bcs.n	8000f20 <__udivmoddi4+0x2a0>
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	d815      	bhi.n	8000f4c <__udivmoddi4+0x2cc>
 8000f20:	4644      	mov	r4, r8
 8000f22:	1a52      	subs	r2, r2, r1
 8000f24:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f28:	e721      	b.n	8000d6e <__udivmoddi4+0xee>
 8000f2a:	1a86      	subs	r6, r0, r2
 8000f2c:	eb64 0303 	sbc.w	r3, r4, r3
 8000f30:	2001      	movs	r0, #1
 8000f32:	e70e      	b.n	8000d52 <__udivmoddi4+0xd2>
 8000f34:	3c02      	subs	r4, #2
 8000f36:	4472      	add	r2, lr
 8000f38:	e735      	b.n	8000da6 <__udivmoddi4+0x126>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4472      	add	r2, lr
 8000f3e:	e6d0      	b.n	8000ce2 <__udivmoddi4+0x62>
 8000f40:	44f4      	add	ip, lr
 8000f42:	3802      	subs	r0, #2
 8000f44:	e6e3      	b.n	8000d0e <__udivmoddi4+0x8e>
 8000f46:	44f4      	add	ip, lr
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x152>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e7e7      	b.n	8000f22 <__udivmoddi4+0x2a2>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4471      	add	r1, lr
 8000f56:	e7d0      	b.n	8000efa <__udivmoddi4+0x27a>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e782      	b.n	8000e64 <__udivmoddi4+0x1e4>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	443c      	add	r4, r7
 8000f62:	e76a      	b.n	8000e3a <__udivmoddi4+0x1ba>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__io_putchar>:
}



int __io_putchar(int ch)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	//uint8_t c[1];
	//c[0] = ch & 0x00FF;
	if(ch == '\n')
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d103      	bne.n	8000f7e <__io_putchar+0x16>
	{
		ShCharOut(ALL_PORTS, '\r');
 8000f76:	210d      	movs	r1, #13
 8000f78:	2085      	movs	r0, #133	@ 0x85
 8000f7a:	f020 fad5 	bl	8021528 <ShCharOut>
	}
	ShCharOut(ALL_PORTS, ch);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4619      	mov	r1, r3
 8000f84:	2085      	movs	r0, #133	@ 0x85
 8000f86:	f020 facf 	bl	8021528 <ShCharOut>
	return ch;
 8000f8a:	687b      	ldr	r3, [r7, #4]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <NewAccessory>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned int NewAccessory(unsigned int nAddress)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	unsigned short i;
	
	for(i = 0; i < MAX_ACCESSORIES; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	81fb      	strh	r3, [r7, #14]
 8000fa0:	e017      	b.n	8000fd2 <NewAccessory+0x3e>
	{
		if(0 == aAccessory[i].Address)
 8000fa2:	89fa      	ldrh	r2, [r7, #14]
 8000fa4:	4910      	ldr	r1, [pc, #64]	@ (8000fe8 <NewAccessory+0x54>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10a      	bne.n	8000fcc <NewAccessory+0x38>
		{
			aAccessory[i].Address = nAddress;
 8000fb6:	89fa      	ldrh	r2, [r7, #14]
 8000fb8:	490b      	ldr	r1, [pc, #44]	@ (8000fe8 <NewAccessory+0x54>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
			return i;
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	e007      	b.n	8000fdc <NewAccessory+0x48>
	for(i = 0; i < MAX_ACCESSORIES; i++)
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	81fb      	strh	r3, [r7, #14]
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d9e4      	bls.n	8000fa2 <NewAccessory+0xe>
		}
	}
	return ACC_EMPTY;
 8000fd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20001934 	.word	0x20001934

08000fec <FindAccessory>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned int FindAccessory(unsigned int nAddress)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	unsigned short i;
	
	for(i = 0; i < MAX_ACCESSORIES; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	81fb      	strh	r3, [r7, #14]
 8000ff8:	e00f      	b.n	800101a <FindAccessory+0x2e>
	{
		if(nAddress == aAccessory[i].Address)
 8000ffa:	89fa      	ldrh	r2, [r7, #14]
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <FindAccessory+0x44>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	d101      	bne.n	8001014 <FindAccessory+0x28>
		{
			return i;
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	e007      	b.n	8001024 <FindAccessory+0x38>
	for(i = 0; i < MAX_ACCESSORIES; i++)
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	3301      	adds	r3, #1
 8001018:	81fb      	strh	r3, [r7, #14]
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d9ec      	bls.n	8000ffa <FindAccessory+0xe>
		}
	}
	return ACC_EMPTY;
 8001020:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20001934 	.word	0x20001934

08001034 <GetAccessoryState>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned char GetAccessoryState(unsigned int nAccessory)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

	return aAccessory[nAccessory].State;
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <GetAccessoryState+0x28>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3304      	adds	r3, #4
 800104c:	781b      	ldrb	r3, [r3, #0]
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20001934 	.word	0x20001934

08001060 <SetAccessoryState>:
*
* RESTRICTIONS:
*
**********************************************************************/
void SetAccessoryState(unsigned int nAccessory, unsigned char nState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
//k	unsigned char baPacket[8];


	aAccessory[nAccessory].State = nState;
 800106c:	4907      	ldr	r1, [pc, #28]	@ (800108c <SetAccessoryState+0x2c>)
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3304      	adds	r3, #4
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	701a      	strb	r2, [r3, #0]
//k	PutProgrammingPacket((unsigned char*)baPacket);
//k	PutProgrammingPacket((unsigned char*)baPacket);
//k	PutProgrammingPacket((unsigned char*)baPacket);
//k	PutProgrammingPacket((unsigned char*)baPacket);
//k	PutProgrammingPacket((unsigned char*)baPacket);
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20001934 	.word	0x20001934

08001090 <CommandStationTask>:
*
* RESTRICTIONS:
*
**********************************************************************/
void CommandStationTask(void* argument)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	VIRTUAL_CAB* pVirtualCab;
	int	nEvent;
	uint8_t bMessageType;
	//uint8_t work[_MAX_SS];
	//FRESULT res;
	uint8_t ExpirationCount = 10;
 8001098:	230a      	movs	r3, #10
 800109a:	75fb      	strb	r3, [r7, #23]
	//TRACK_RESOURCE tl;

	InitMessageQueue();
 800109c:	f000 fe3e 	bl	8001d1c <InitMessageQueue>

	InitLoco();
 80010a0:	f000 fb02 	bl	80016a8 <InitLoco>
	InitVirtualCab();
 80010a4:	f000 f964 	bl	8001370 <InitVirtualCab>
	InitLocoList();
 80010a8:	f000 ff1c 	bl	8001ee4 <InitLocoList>
	StopAllLocos();
 80010ac:	f000 fd50 	bl	8001b50 <StopAllLocos>

	InitCabCommunication(0);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f001 fd87 	bl	8002bc4 <InitCabCommunication>
	//k	InitXpressNet();

	// set the clock update callback function
	RegisterClockUpdate(UpdateWangrowClock);
 80010b6:	4821      	ldr	r0, [pc, #132]	@ (800113c <CommandStationTask+0xac>)
 80010b8:	f000 f966 	bl	8001388 <RegisterClockUpdate>
	//RegisterClockUpdate(UpdateXpressnetClock);

	InitState(STATE_IDLE);
 80010bc:	2000      	movs	r0, #0
 80010be:	f005 fdc3 	bl	8006c48 <InitState>

	// ************ Wangrow / NCE state machine

	while(1)
	{
		HandleCabCommunication();
 80010c2:	f000 f84d 	bl	8001160 <HandleCabCommunication>
		HandlePackets();
 80010c6:	f000 f83b 	bl	8001140 <HandlePackets>
		Acknowledge();
 80010ca:	f005 fe5b 	bl	8006d84 <Acknowledge>
		ServiceMode();
 80010ce:	f000 fecd 	bl	8001e6c <ServiceMode>

		pVirtualCab = GetMessage(&bMessageType, &nEvent);
 80010d2:	f107 020c 	add.w	r2, r7, #12
 80010d6:	f107 030b 	add.w	r3, r7, #11
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fdb9 	bl	8001c54 <GetMessage>
 80010e2:	6138      	str	r0, [r7, #16]
		if(pVirtualCab != NULL)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d017      	beq.n	800111a <CommandStationTask+0x8a>
		{
			nEvent = pVirtualCab->nEvent;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	60fb      	str	r3, [r7, #12]
			if(nEvent & EVENT_SPEED_TYPE)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <CommandStationTask+0x76>
			{
				RunOperate(pVirtualCab, nEvent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4619      	mov	r1, r3
 80010fe:	6938      	ldr	r0, [r7, #16]
 8001100:	f004 fbc6 	bl	8005890 <RunOperate>
 8001104:	e009      	b.n	800111a <CommandStationTask+0x8a>
			}
			else
			{
				RunState(pVirtualCab, nEvent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4619      	mov	r1, r3
 800110a:	6938      	ldr	r0, [r7, #16]
 800110c:	f005 fd20 	bl	8006b50 <RunState>
				RunOperate(pVirtualCab, nEvent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4619      	mov	r1, r3
 8001114:	6938      	ldr	r0, [r7, #16]
 8001116:	f004 fbbb 	bl	8005890 <RunOperate>
			}
		}

		ExpirationCount--;
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	3b01      	subs	r3, #1
 800111e:	75fb      	strb	r3, [r7, #23]
		if(ExpirationCount == 0)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <CommandStationTask+0xa2>
		{
			ExpirationCount = 10;
 8001126:	230a      	movs	r3, #10
 8001128:	75fb      	strb	r3, [r7, #23]
			HandleExpiration();
 800112a:	f000 f8c5 	bl	80012b8 <HandleExpiration>

			CheckClockUpdate();
 800112e:	f000 f94d 	bl	80013cc <CheckClockUpdate>
		}

		osDelay(pdMS_TO_TICKS(10));
 8001132:	200a      	movs	r0, #10
 8001134:	f01a fef8 	bl	801bf28 <osDelay>
		HandleCabCommunication();
 8001138:	e7c3      	b.n	80010c2 <CommandStationTask+0x32>
 800113a:	bf00      	nop
 800113c:	08003cd9 	.word	0x08003cd9

08001140 <HandlePackets>:
*
* RESTRICTIONS:
*
**********************************************************************/
void HandlePackets(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
	uint8_t* pPacket = PacketBuf;
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HandlePackets+0x1c>)
 8001148:	603b      	str	r3, [r7, #0]
	//static BOOL fWhich;
	//static BOOL fWhichFunction;
	uint32_t len = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
		}
#ifdef TRACK_LOCK_NOT_USED
	}
#endif
	}
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200019f4 	.word	0x200019f4

08001160 <HandleCabCommunication>:
*
* RESTRICTIONS:	none
*
*********************************************************************/
void HandleCabCommunication(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

	// WiThrottleTask();

#else

	HandleNCECabCommunication();
 8001164:	f001 ff02 	bl	8002f6c <HandleNCECabCommunication>
//k	XpressNetUpdate();

#endif
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <WM_RegisterCab>:
*
* RESTRICTIONS:	none
*
*********************************************************************/
VIRTUAL_CAB* WM_RegisterCab(int Cab, int CabType, int CabSubType, void* CabHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	603b      	str	r3, [r7, #0]
	unsigned char i;
	
	// Iterate to find an empty cab
	for(i = 0; i < MAX_VIRTUAL_CABS; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	75fb      	strb	r3, [r7, #23]
 800117e:	e00c      	b.n	800119a <WM_RegisterCab+0x2e>
	{
		if(aVirtualCab[i].Cab == 0)
 8001180:	7dfa      	ldrb	r2, [r7, #23]
 8001182:	4945      	ldr	r1, [pc, #276]	@ (8001298 <WM_RegisterCab+0x12c>)
 8001184:	4613      	mov	r3, r2
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <WM_RegisterCab+0x36>
	for(i = 0; i < MAX_VIRTUAL_CABS; i++)
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	3301      	adds	r3, #1
 8001198:	75fb      	strb	r3, [r7, #23]
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d9ef      	bls.n	8001180 <WM_RegisterCab+0x14>
 80011a0:	e000      	b.n	80011a4 <WM_RegisterCab+0x38>
		{
			break;
 80011a2:	bf00      	nop
		}
	}
	
	if(i == MAX_VIRTUAL_CABS)
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d101      	bne.n	80011ae <WM_RegisterCab+0x42>
	{
		// no more virtual cabs
		return NULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e070      	b.n	8001290 <WM_RegisterCab+0x124>
	}
	else
	{
		// setup defaults
		aVirtualCab[Cab].Cab = Cab;
 80011ae:	493a      	ldr	r1, [pc, #232]	@ (8001298 <WM_RegisterCab+0x12c>)
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4613      	mov	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	601a      	str	r2, [r3, #0]
		aVirtualCab[Cab].CabType = CabType;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	4934      	ldr	r1, [pc, #208]	@ (8001298 <WM_RegisterCab+0x12c>)
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4613      	mov	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	3304      	adds	r3, #4
 80011d4:	4602      	mov	r2, r0
 80011d6:	701a      	strb	r2, [r3, #0]
		aVirtualCab[Cab].CabSubType = CabSubType;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	492e      	ldr	r1, [pc, #184]	@ (8001298 <WM_RegisterCab+0x12c>)
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4613      	mov	r3, r2
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	3305      	adds	r3, #5
 80011ec:	4602      	mov	r2, r0
 80011ee:	701a      	strb	r2, [r3, #0]
		aVirtualCab[Cab].CabHandle = CabHandle;
 80011f0:	4929      	ldr	r1, [pc, #164]	@ (8001298 <WM_RegisterCab+0x12c>)
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4613      	mov	r3, r2
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	440b      	add	r3, r1
 80011fe:	3308      	adds	r3, #8
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	601a      	str	r2, [r3, #0]

		//if(IsTrackOpen(TR_NONE) || IsTrackOpen(TR_COMMAND_STATION))
		//if(IsTrackOpen(TR_COMMAND_STATION))
		//{
			aVirtualCab[Cab].nState = STATE_IDLE;
 8001204:	4924      	ldr	r1, [pc, #144]	@ (8001298 <WM_RegisterCab+0x12c>)
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4613      	mov	r3, r2
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	3306      	adds	r3, #6
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
		//else
		//{
		//	aVirtualCab[Cab].nState = STATE_TRACK;
		//}

		aVirtualCab[Cab].nCursor = 0;
 8001218:	491f      	ldr	r1, [pc, #124]	@ (8001298 <WM_RegisterCab+0x12c>)
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4613      	mov	r3, r2
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	3320      	adds	r3, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

		// Display the default screen
		for(i = 0; i < 8; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	75fb      	strb	r3, [r7, #23]
 8001230:	e00e      	b.n	8001250 <WM_RegisterCab+0xe4>
		{
			aVirtualCab[Cab].pRecall[i] = (Loco*)NULL;
 8001232:	7df9      	ldrb	r1, [r7, #23]
 8001234:	4818      	ldr	r0, [pc, #96]	@ (8001298 <WM_RegisterCab+0x12c>)
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4613      	mov	r3, r2
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	440b      	add	r3, r1
 8001242:	3314      	adds	r3, #20
 8001244:	2200      	movs	r2, #0
 8001246:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(i = 0; i < 8; i++)
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	3301      	adds	r3, #1
 800124e:	75fb      	strb	r3, [r7, #23]
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b07      	cmp	r3, #7
 8001254:	d9ed      	bls.n	8001232 <WM_RegisterCab+0xc6>
		}
		aVirtualCab[Cab].nWhichRecall = 0;
 8001256:	4910      	ldr	r1, [pc, #64]	@ (8001298 <WM_RegisterCab+0x12c>)
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4613      	mov	r3, r2
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	334c      	adds	r3, #76	@ 0x4c
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]

		RestoreOperateScreen(&aVirtualCab[Cab], 1, 1);
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4613      	mov	r3, r2
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <WM_RegisterCab+0x12c>)
 8001276:	4413      	add	r3, r2
 8001278:	2201      	movs	r2, #1
 800127a:	2101      	movs	r1, #1
 800127c:	4618      	mov	r0, r3
 800127e:	f005 fbf7 	bl	8006a70 <RestoreOperateScreen>

		return &aVirtualCab[Cab];
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4613      	mov	r3, r2
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4a02      	ldr	r2, [pc, #8]	@ (8001298 <WM_RegisterCab+0x12c>)
 800128e:	4413      	add	r3, r2
	}
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000305c 	.word	0x2000305c

0800129c <SetExpiration>:
*
* RESTRICTIONS:
*
**********************************************************************/
void SetExpiration(VIRTUAL_CAB* pVirtualCab, int nTime)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]

	pVirtualCab->ExpirationTimer = nTime;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HandleExpiration>:
*
* RESTRICTIONS:
*
**********************************************************************/
void HandleExpiration(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	int i;

	for(i = 0; i < MAX_VIRTUAL_CABS; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	e04b      	b.n	800135c <HandleExpiration+0xa4>
	{
		if(aVirtualCab[i].Cab != 0)
 80012c4:	4929      	ldr	r1, [pc, #164]	@ (800136c <HandleExpiration+0xb4>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03e      	beq.n	8001356 <HandleExpiration+0x9e>
		{
			if(aVirtualCab[i].ExpirationTimer)
 80012d8:	4924      	ldr	r1, [pc, #144]	@ (800136c <HandleExpiration+0xb4>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	3370      	adds	r3, #112	@ 0x70
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d033      	beq.n	8001356 <HandleExpiration+0x9e>
			{
				if(--aVirtualCab[i].ExpirationTimer == 0)
 80012ee:	491f      	ldr	r1, [pc, #124]	@ (800136c <HandleExpiration+0xb4>)
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	3370      	adds	r3, #112	@ 0x70
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1e59      	subs	r1, r3, #1
 8001302:	481a      	ldr	r0, [pc, #104]	@ (800136c <HandleExpiration+0xb4>)
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4403      	add	r3, r0
 8001310:	3370      	adds	r3, #112	@ 0x70
 8001312:	6019      	str	r1, [r3, #0]
 8001314:	4915      	ldr	r1, [pc, #84]	@ (800136c <HandleExpiration+0xb4>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3370      	adds	r3, #112	@ 0x70
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d115      	bne.n	8001356 <HandleExpiration+0x9e>
				{
					aVirtualCab[i].nEvent = EVENT_TIMER_EXPIRED;
 800132a:	4910      	ldr	r1, [pc, #64]	@ (800136c <HandleExpiration+0xb4>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	3314      	adds	r3, #20
 800133a:	22d3      	movs	r2, #211	@ 0xd3
 800133c:	601a      	str	r2, [r3, #0]
					QueueMessage(0, &aVirtualCab[i], EVENT_TIMER_EXPIRED);
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HandleExpiration+0xb4>)
 800134a:	4413      	add	r3, r2
 800134c:	22d3      	movs	r2, #211	@ 0xd3
 800134e:	4619      	mov	r1, r3
 8001350:	2000      	movs	r0, #0
 8001352:	f000 fc27 	bl	8001ba4 <QueueMessage>
	for(i = 0; i < MAX_VIRTUAL_CABS; i++)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b03      	cmp	r3, #3
 8001360:	ddb0      	ble.n	80012c4 <HandleExpiration+0xc>
				}
			}
		}
	}
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000305c 	.word	0x2000305c

08001370 <InitVirtualCab>:
*
* RESTRICTIONS:
*
**********************************************************************/
void InitVirtualCab(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

	//if(InitializedVirtualCab != 0x5a5a)
	//{
	//	InitializedVirtualCab = 0x5a5a;
		memset(aVirtualCab, 0, sizeof(aVirtualCab));
 8001374:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001378:	2100      	movs	r1, #0
 800137a:	4802      	ldr	r0, [pc, #8]	@ (8001384 <InitVirtualCab+0x14>)
 800137c:	f024 ff50 	bl	8026220 <memset>
	//}
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000305c 	.word	0x2000305c

08001388 <RegisterClockUpdate>:
*
* RESTRICTIONS:
*
**********************************************************************/
void RegisterClockUpdate(void (*ClockUpdateCallback)(void))
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	int i;

	for(i = 0; i < NO_OF_CLOCK_UPDATERS; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e00e      	b.n	80013b4 <RegisterClockUpdate+0x2c>
	{
		if(ClockUpdate[i] == NULL)
 8001396:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <RegisterClockUpdate+0x40>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d105      	bne.n	80013ae <RegisterClockUpdate+0x26>
		{
			ClockUpdate[i] = ClockUpdateCallback;
 80013a2:	4909      	ldr	r1, [pc, #36]	@ (80013c8 <RegisterClockUpdate+0x40>)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80013ac:	e006      	b.n	80013bc <RegisterClockUpdate+0x34>
	for(i = 0; i < NO_OF_CLOCK_UPDATERS; i++)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	dded      	ble.n	8001396 <RegisterClockUpdate+0xe>
		}
	}
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	200019fc 	.word	0x200019fc

080013cc <CheckClockUpdate>:
*
* RESTRICTIONS:
*
**********************************************************************/
void CheckClockUpdate(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	static uint8_t OldMinute = 0;
	static int ClockCount = 100;

	ClockCount--;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <CheckClockUpdate+0x74>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <CheckClockUpdate+0x74>)
 80013da:	6013      	str	r3, [r2, #0]
	if(ClockCount == 0)
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <CheckClockUpdate+0x74>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d129      	bne.n	8001438 <CheckClockUpdate+0x6c>
	{
		ClockCount = 100;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <CheckClockUpdate+0x74>)
 80013e6:	2264      	movs	r2, #100	@ 0x64
 80013e8:	601a      	str	r2, [r3, #0]

		if(HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) == HAL_OK)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4814      	ldr	r0, [pc, #80]	@ (8001444 <CheckClockUpdate+0x78>)
 80013f4:	f012 fe8c 	bl	8014110 <HAL_RTC_GetTime>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <CheckClockUpdate+0x60>
		{
			if(time.Minutes != OldMinute);
			OldMinute = time.Minutes;
 80013fe:	7a7a      	ldrb	r2, [r7, #9]
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <CheckClockUpdate+0x7c>)
 8001402:	701a      	strb	r2, [r3, #0]

			for(i = 0; i < NO_OF_CLOCK_UPDATERS; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e00d      	b.n	8001426 <CheckClockUpdate+0x5a>
			{
				if(ClockUpdate[i] != NULL)
 800140a:	4a10      	ldr	r2, [pc, #64]	@ (800144c <CheckClockUpdate+0x80>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <CheckClockUpdate+0x54>
				{
					ClockUpdate[i]();
 8001416:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <CheckClockUpdate+0x80>)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	4798      	blx	r3
			for(i = 0; i < NO_OF_CLOCK_UPDATERS; i++)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	3301      	adds	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	2b03      	cmp	r3, #3
 800142a:	ddee      	ble.n	800140a <CheckClockUpdate+0x3e>
				}
			}

		}
		// call the date read to unlock the clock
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	4804      	ldr	r0, [pc, #16]	@ (8001444 <CheckClockUpdate+0x78>)
 8001434:	f012 ff54 	bl	80142e0 <HAL_RTC_GetDate>
	}
}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000000 	.word	0x20000000
 8001444:	2001c1b4 	.word	0x2001c1b4
 8001448:	20001a0c 	.word	0x20001a0c
 800144c:	200019fc 	.word	0x200019fc

08001450 <GetKey>:
/**********************************************************************
*
*							CODE
*
**********************************************************************/
  	int GetKey(Link *myLink) { return myLink->m_key; }
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <GetNext>:
	Link *isInList(LList *myList, Link *it);
	unsigned char isFull(LList *myList);
  	Link * GetNext(Link *myLink) { return myLink->m_pnext; }
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SetNext>:
  	void SetNext(Link *myLink, Link *pNext) { myLink->m_pnext = pNext; }
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <setup>:
	myLink->m_pnext = NULL;
}


void setup(LList *myList)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
   //build all the elements and link them...
   //head = curr = First, Tail = last
	myList->head = NULL;		//points to first (or null)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
	myList->tail = NULL;    //points to last (its next is null) (or null)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <InsertAtTop>:

// the insert method.
void InsertAtTop(LList *myList, Link *it)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	Link *temp;

	if(NULL == myList->tail) myList->tail = it; //the first
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <InsertAtTop+0x18>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	605a      	str	r2, [r3, #4]
	temp = myList->head;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
	myList->head = it;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	601a      	str	r2, [r3, #0]
	SetNext(it, temp);
 80014e0:	68f9      	ldr	r1, [r7, #12]
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f7ff ffcc 	bl	8001480 <SetNext>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <Remove>:



//remove a link 
void Remove(LList *myList, Link *it)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	Link *temp;

	if(myList->head == it)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d106      	bne.n	8001512 <Remove+0x22>
	{
		myList->head = GetNext(it);
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f7ff ffaf 	bl	8001468 <GetNext>
 800150a:	4602      	mov	r2, r0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e011      	b.n	8001536 <Remove+0x46>
	}
	else
	{
		if ((temp = isInList(myList, it)) == NULL) 
 8001512:	6839      	ldr	r1, [r7, #0]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f84b 	bl	80015b0 <isInList>
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <Remove+0x44>
		{
			return;
		}
		else 
		{
			SetNext(temp, GetNext(it));	//link round removed
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f7ff ffa0 	bl	8001468 <GetNext>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff ffa7 	bl	8001480 <SetNext>
 8001532:	e000      	b.n	8001536 <Remove+0x46>
			return;
 8001534:	bf00      	nop
		}
	}
	//InsertAtTop(&FreeLocos, it);		//put away in free list
}
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <BringToTop>:


//removed a link and put it at the top of the list
void BringToTop(LList *myList, Link *it)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	Link *temp;

	if(myList->head != it)	//NOT already at top
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d01b      	beq.n	8001588 <BringToTop+0x4c>
	{
		if ((temp = isInList(myList, it)) == NULL) return;
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f82c 	bl	80015b0 <isInList>
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d012      	beq.n	8001586 <BringToTop+0x4a>
		SetNext(temp, GetNext(it)); //link round removed
 8001560:	6838      	ldr	r0, [r7, #0]
 8001562:	f7ff ff81 	bl	8001468 <GetNext>
 8001566:	4603      	mov	r3, r0
 8001568:	4619      	mov	r1, r3
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff ff88 	bl	8001480 <SetNext>
		temp = myList->head;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
		myList->head = it;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]
		SetNext(it, temp);
 800157c:	68f9      	ldr	r1, [r7, #12]
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f7ff ff7e 	bl	8001480 <SetNext>
 8001584:	e000      	b.n	8001588 <BringToTop+0x4c>
		if ((temp = isInList(myList, it)) == NULL) return;
 8001586:	bf00      	nop
	}
}
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <isEmpty>:


//isEmpty()
unsigned char isEmpty(LList *myList)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return (myList->head == NULL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <isInList>:
//}


//returns the link that points to the 'it' (will fail if 'it' is first)
Link *isInList(LList *myList, Link *it)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	Link *temp;

	if(isEmpty(myList)) return NULL;
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffe7 	bl	800158e <isEmpty>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <isInList+0x1a>
 80015c6:	2300      	movs	r3, #0
 80015c8:	e017      	b.n	80015fa <isInList+0x4a>
	temp = myList->head;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]
	while(it != GetNext(temp))
 80015d0:	e00b      	b.n	80015ea <isInList+0x3a>
	{
		if(GetNext(temp) == NULL)
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ff48 	bl	8001468 <GetNext>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <isInList+0x32>
		{
   			return NULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	e00b      	b.n	80015fa <isInList+0x4a>
		}
   		temp = GetNext(temp);
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff ff40 	bl	8001468 <GetNext>
 80015e8:	60f8      	str	r0, [r7, #12]
	while(it != GetNext(temp))
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff ff3c 	bl	8001468 <GetNext>
 80015f0:	4602      	mov	r2, r0
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d1ec      	bne.n	80015d2 <isInList+0x22>
	}
	return temp;
 80015f8:	68fb      	ldr	r3, [r7, #12]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <First>:


//Iterator functions...
Link *First(ListIterator* myIter)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	myIter->m_curr = myIter->m_List->head;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	601a      	str	r2, [r3, #0]
   return myIter->m_curr;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <Next>:


Link *Next(ListIterator* myIter)			//returns NULL if no more in list
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(myIter->m_curr == myIter->m_List->tail)	//already done last one
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	d101      	bne.n	800163e <Next+0x1a>
   	return NULL;
 800163a:	2300      	movs	r3, #0
 800163c:	e009      	b.n	8001652 <Next+0x2e>
	myIter->m_curr = GetNext(myIter->m_curr);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff10 	bl	8001468 <GetNext>
 8001648:	4602      	mov	r2, r0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
	return myIter->m_curr;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <FindByKey>:


Link *FindByKey(ListIterator* myIter, int iKey)		//returns NULL if not found
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
	First(myIter);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffcc 	bl	8001602 <First>
	if(myIter->m_List->head == NULL)	//empty list
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <FindByKey+0x2e>
	{
		return NULL;
 8001674:	2300      	movs	r3, #0
 8001676:	e012      	b.n	800169e <FindByKey+0x44>
	}
	while(iKey != GetKey(myIter->m_curr))
	{
   		if(NULL == Next(myIter))
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ffd3 	bl	8001624 <Next>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <FindByKey+0x2e>
		{
      		return NULL;
 8001684:	2300      	movs	r3, #0
 8001686:	e00a      	b.n	800169e <FindByKey+0x44>
	while(iKey != GetKey(myIter->m_curr))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fedf 	bl	8001450 <GetKey>
 8001692:	4602      	mov	r2, r0
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4293      	cmp	r3, r2
 8001698:	d1ee      	bne.n	8001678 <FindByKey+0x1e>
		}
	}
	return myIter->m_curr;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <InitLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
void InitLoco(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	int i;

	memset(ActiveLocos, 0, sizeof(ActiveLocos));
 80016ae:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80016b2:	2100      	movs	r1, #0
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <InitLoco+0x40>)
 80016b6:	f024 fdb3 	bl	8026220 <memset>

	//ReadLocoState();		// read loco data from a file

	// ToDo - this should come from a file
	for(i = 0; i <= 28; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	e00b      	b.n	80016d8 <InitLoco+0x30>
	{
		abAnalogSpeedTable[i] = i * 8;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	b2d9      	uxtb	r1, r3
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <InitLoco+0x44>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	460a      	mov	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i <= 28; i++)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3301      	adds	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b1c      	cmp	r3, #28
 80016dc:	ddf0      	ble.n	80016c0 <InitLoco+0x18>
	}
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20001a10 	.word	0x20001a10
 80016ec:	20002910 	.word	0x20002910

080016f0 <NewLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
Loco* NewLoco(unsigned int nAddress)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	word i;
   
	for(i = 0; i < MAX_LOCOS; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	81fb      	strh	r3, [r7, #14]
 80016fc:	e04a      	b.n	8001794 <NewLoco+0xa4>
	{
		if(0 == ActiveLocos[i].Address)
 80016fe:	89fa      	ldrh	r2, [r7, #14]
 8001700:	4928      	ldr	r1, [pc, #160]	@ (80017a4 <NewLoco+0xb4>)
 8001702:	4613      	mov	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13d      	bne.n	800178e <NewLoco+0x9e>
		{
			memset(&ActiveLocos[i], 0, sizeof(ActiveLocos[i]));
 8001712:	89fa      	ldrh	r2, [r7, #14]
 8001714:	4613      	mov	r3, r2
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <NewLoco+0xb4>)
 800171e:	4413      	add	r3, r2
 8001720:	2278      	movs	r2, #120	@ 0x78
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f024 fd7b 	bl	8026220 <memset>
			ActiveLocos[i].Address = nAddress;
 800172a:	89fa      	ldrh	r2, [r7, #14]
 800172c:	491d      	ldr	r1, [pc, #116]	@ (80017a4 <NewLoco+0xb4>)
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
			ActiveLocos[i].bfStateDirty = true;
 800173c:	89fa      	ldrh	r2, [r7, #14]
 800173e:	4919      	ldr	r1, [pc, #100]	@ (80017a4 <NewLoco+0xb4>)
 8001740:	4613      	mov	r3, r2
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800174e:	7913      	ldrb	r3, [r2, #4]
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	7113      	strb	r3, [r2, #4]

			ActiveLocos[i].SpeedFcnMode = SPEED_MODE_NORMAL;
 8001756:	89fa      	ldrh	r2, [r7, #14]
 8001758:	4912      	ldr	r1, [pc, #72]	@ (80017a4 <NewLoco+0xb4>)
 800175a:	4613      	mov	r3, r2
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	3355      	adds	r3, #85	@ 0x55
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
//			ActiveLocos[i].SpeedFcnMode = SPEED_MODE_STOP;
//			ActiveLocos[i].SpeedFcnMode = SPEED_MODE_GTZ;

			ActiveLocos[i].MaxSpeed = 100;
 800176a:	89fa      	ldrh	r2, [r7, #14]
 800176c:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <NewLoco+0xb4>)
 800176e:	4613      	mov	r3, r2
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3356      	adds	r3, #86	@ 0x56
 800177a:	2264      	movs	r2, #100	@ 0x64
 800177c:	801a      	strh	r2, [r3, #0]
//			ActiveLocos[i].MaxSpeed = 80 | SPEED_UNITS_MASK;

//k			SendWMIntMessage(WM_USER_NEW_LOCO, 0);

			return &ActiveLocos[i];
 800177e:	89fa      	ldrh	r2, [r7, #14]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <NewLoco+0xb4>)
 800178a:	4413      	add	r3, r2
 800178c:	e006      	b.n	800179c <NewLoco+0xac>
	for(i = 0; i < MAX_LOCOS; i++)
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	3301      	adds	r3, #1
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	2b1f      	cmp	r3, #31
 8001798:	d9b1      	bls.n	80016fe <NewLoco+0xe>
		}
	}
	return NULL;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20001a10 	.word	0x20001a10

080017a8 <FindLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
Loco* FindLoco(unsigned int nAddress)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	word i;
   
	for(i = 0; i < MAX_LOCOS; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	81fb      	strh	r3, [r7, #14]
 80017b4:	e015      	b.n	80017e2 <FindLoco+0x3a>
	{
		if(nAddress == ActiveLocos[i].Address)
 80017b6:	89fa      	ldrh	r2, [r7, #14]
 80017b8:	490f      	ldr	r1, [pc, #60]	@ (80017f8 <FindLoco+0x50>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d107      	bne.n	80017dc <FindLoco+0x34>
		{
			return &ActiveLocos[i];
 80017cc:	89fa      	ldrh	r2, [r7, #14]
 80017ce:	4613      	mov	r3, r2
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <FindLoco+0x50>)
 80017d8:	4413      	add	r3, r2
 80017da:	e006      	b.n	80017ea <FindLoco+0x42>
	for(i = 0; i < MAX_LOCOS; i++)
 80017dc:	89fb      	ldrh	r3, [r7, #14]
 80017de:	3301      	adds	r3, #1
 80017e0:	81fb      	strh	r3, [r7, #14]
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	2b1f      	cmp	r3, #31
 80017e6:	d9e6      	bls.n	80017b6 <FindLoco+0xe>
		}
	}
	return NULL;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20001a10 	.word	0x20001a10

080017fc <DeleteRecallLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DeleteRecallLoco(VIRTUAL_CAB* pVirtualCab, unsigned int nLocoIndex)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	word i;

	for(i = nLocoIndex; i < 7; i++)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	81fb      	strh	r3, [r7, #14]
 800180a:	e014      	b.n	8001836 <DeleteRecallLoco+0x3a>
	{
		if(pVirtualCab->pRecall[i] == NULL)
 800180c:	89fa      	ldrh	r2, [r7, #14]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3214      	adds	r2, #20
 8001812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d011      	beq.n	800183e <DeleteRecallLoco+0x42>
		{
			break;
		}
		pVirtualCab->pRecall[i] = pVirtualCab->pRecall[i + 1];
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	1c59      	adds	r1, r3, #1
 800181e:	89fa      	ldrh	r2, [r7, #14]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3114      	adds	r1, #20
 8001824:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3214      	adds	r2, #20
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = nLocoIndex; i < 7; i++)
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	3301      	adds	r3, #1
 8001834:	81fb      	strh	r3, [r7, #14]
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	2b06      	cmp	r3, #6
 800183a:	d9e7      	bls.n	800180c <DeleteRecallLoco+0x10>
 800183c:	e000      	b.n	8001840 <DeleteRecallLoco+0x44>
			break;
 800183e:	bf00      	nop
	}
	pVirtualCab->pRecall[i] = NULL;
 8001840:	89fa      	ldrh	r2, [r7, #14]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3214      	adds	r2, #20
 8001846:	2100      	movs	r1, #0
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// make sure we are pointed to a good loco - if any (allow the queue to completly clear)
	if(pVirtualCab->pRecall[pVirtualCab->nWhichRecall] == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3214      	adds	r2, #20
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d108      	bne.n	800186e <DeleteRecallLoco+0x72>
	{
		if(pVirtualCab->nWhichRecall != 0)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <DeleteRecallLoco+0x72>
		{
			pVirtualCab->nWhichRecall--;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}

//	pVirtualCab->nActiveLoco = pVirtualCab->nRecall[pVirtualCab->nWhichRecall];
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <GetLocoSpeed>:
*
* RESTRICTIONS:
*
**********************************************************************/
word GetLocoSpeed(Loco* pLoco)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]

	return pLoco->Speed;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SetLocoSpeed>:
*
* RESTRICTIONS:
*
**********************************************************************/
void SetLocoSpeed(Loco* pLoco, word nSpeed)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]

	pLoco->Speed = nSpeed;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

	if(pLoco->Address == ANALOG_LOCO)
	{
//k		SetZeroStretch(nSpeed, pLoco->Direction);
	}
	pLoco->bChange = CH_SPEED;
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	f892 3075 	ldrb.w	r3, [r2, #117]	@ 0x75
 80018ae:	f36f 0300 	bfc	r3, #0, #1
 80018b2:	f882 3075 	strb.w	r3, [r2, #117]	@ 0x75
	MakeMostRecentLoco(pLoco);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb6c 	bl	8001f94 <MakeMostRecentLoco>

	if(nSpeed)
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <SetLocoSpeed+0x36>
	{
		pLoco->bNumStopPackets = 25;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2219      	movs	r2, #25
 80018c6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	}

//k	SendWMIntMessage(WM_USER_SPEED_CHANGE, 0);
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <GetLocoMaxSpeed>:
*
* RESTRICTIONS:
*
**********************************************************************/
word GetLocoMaxSpeed(Loco* pLoco)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]

	return pLoco->MaxSpeed & ~SPEED_UNITS_MASK;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80018e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018e4:	b29b      	uxth	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <GetLocoSpeedUnits>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned char GetLocoSpeedUnits(Loco* pLoco)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]

	return (pLoco->MaxSpeed & SPEED_UNITS_MASK) != 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001900:	b21b      	sxth	r3, r3
 8001902:	b29b      	uxth	r3, r3
 8001904:	0bdb      	lsrs	r3, r3, #15
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <GetLocoSpeedMode>:
*
* RESTRICTIONS:
*
**********************************************************************/
word GetLocoSpeedMode(Loco* pLoco)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

	return pLoco->SpeedMode;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <SetLocoSpeedMode>:
*
* RESTRICTIONS:
*
**********************************************************************/
void SetLocoSpeedMode(Loco* pLoco, word nSpeedMode)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	807b      	strh	r3, [r7, #2]

	pLoco->SpeedMode = nSpeedMode;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	pLoco->bfStateDirty = true;
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	f892 3074 	ldrb.w	r3, [r2, #116]	@ 0x74
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	f882 3074 	strb.w	r3, [r2, #116]	@ 0x74
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <GetLocoDirection>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned char GetLocoDirection(Loco* pLoco)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]

	return pLoco->Direction;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SetLocoDirection>:
*
* RESTRICTIONS:
*
**********************************************************************/
void SetLocoDirection(Loco* pLoco, unsigned char fDirection)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]

	pLoco->Direction = fDirection;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

	if(pLoco->Address == ANALOG_LOCO)
	{
//k		SetZeroStretch(pLoco->Speed, fDirection);
	}
	pLoco->bChange = CH_SPEED;
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	f892 3075 	ldrb.w	r3, [r2, #117]	@ 0x75
 8001992:	f36f 0300 	bfc	r3, #0, #1
 8001996:	f882 3075 	strb.w	r3, [r2, #117]	@ 0x75
	MakeMostRecentLoco(pLoco);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fafa 	bl	8001f94 <MakeMostRecentLoco>
	pLoco->bfStateDirty = true;
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f892 3074 	ldrb.w	r3, [r2, #116]	@ 0x74
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	f882 3074 	strb.w	r3, [r2, #116]	@ 0x74

//k	SendWMIntMessage(WM_USER_DIRECTION, 0);
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <GetLocoFunctionOverride>:
*
* RESTRICTIONS:
*
**********************************************************************/
word GetLocoFunctionOverride(Loco* pLoco)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

	return pLoco->FunctionOverrideMap;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019c2:	b29b      	uxth	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <GetLocoFunctions>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned long GetLocoFunctions(Loco* pLoco)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

	return pLoco->FunctionMap;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SetLocoFunctions>:
	pLoco->bfStateDirty = true;
}
#endif

void SetLocoFunctions(Loco* pLoco, unsigned long nFunctionMap)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]

	if((pLoco->FunctionMap & 0x000000FF) != (nFunctionMap & 0x000000FF))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4053      	eors	r3, r2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <SetLocoFunctions+0x26>
	{
		pLoco->bChange |= CH_FUNCTION_1;
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	f892 3075 	ldrb.w	r3, [r2, #117]	@ 0x75
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f882 3075 	strb.w	r3, [r2, #117]	@ 0x75
	}
	if((pLoco->FunctionMap & 0x0000FF00) != (nFunctionMap & 0x0000FF00))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4053      	eors	r3, r2
 8001a16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d013      	beq.n	8001a46 <SetLocoFunctions+0x5e>
	{
		pLoco->bChange |= CH_FUNCTION_2;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001a24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	b2d9      	uxtb	r1, r3
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	f892 3075 	ldrb.w	r3, [r2, #117]	@ 0x75
 8001a3e:	f361 0300 	bfi	r3, r1, #0, #1
 8001a42:	f882 3075 	strb.w	r3, [r2, #117]	@ 0x75
	}
	if((pLoco->FunctionMap & 0x00FF0000) != (nFunctionMap & 0x00FF0000))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4053      	eors	r3, r2
 8001a4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d013      	beq.n	8001a7e <SetLocoFunctions+0x96>
	{
		pLoco->bChange |= CH_FUNCTION_3;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001a5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f043 0303 	orr.w	r3, r3, #3
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	b2d9      	uxtb	r1, r3
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	f892 3075 	ldrb.w	r3, [r2, #117]	@ 0x75
 8001a76:	f361 0300 	bfi	r3, r1, #0, #1
 8001a7a:	f882 3075 	strb.w	r3, [r2, #117]	@ 0x75
	}
	if((pLoco->FunctionMap & 0xFF000000) != (nFunctionMap & 0xFF000000))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	4053      	eors	r3, r2
 8001a86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a8a:	d313      	bcc.n	8001ab4 <SetLocoFunctions+0xcc>
	{
		pLoco->bChange |= CH_FUNCTION_4;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001a92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	b2d9      	uxtb	r1, r3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	f892 3075 	ldrb.w	r3, [r2, #117]	@ 0x75
 8001aac:	f361 0300 	bfi	r3, r1, #0, #1
 8001ab0:	f882 3075 	strb.w	r3, [r2, #117]	@ 0x75
	}

	pLoco->FunctionMap = nFunctionMap;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	665a      	str	r2, [r3, #100]	@ 0x64
	MakeMostRecentLoco(pLoco);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fa6a 	bl	8001f94 <MakeMostRecentLoco>
	pLoco->bNumFunctionPackets = 10;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	220a      	movs	r2, #10
 8001ac4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	pLoco->bfStateDirty = true;
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	f892 3074 	ldrb.w	r3, [r2, #116]	@ 0x74
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	f882 3074 	strb.w	r3, [r2, #116]	@ 0x74
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <GetLocoAddress>:
*
* RESTRICTIONS:
*
**********************************************************************/
word GetLocoAddress(Loco* pLoco)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]

	return pLoco->Address;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <GetLocoAlias>:
*
* RESTRICTIONS:
*
**********************************************************************/
word GetLocoAlias(Loco* pLoco)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

	return pLoco->Alias & 0x7f;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b0a:	b29b      	uxth	r3, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <GetLocoAliasDirection>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned char GetLocoAliasDirection(Loco* pLoco)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

	return (unsigned char)pLoco->Alias & 0x80;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b2a:	b2db      	uxtb	r3, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <IsLeadLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned char IsLeadLoco(Loco* pLoco)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

	return (unsigned char)(pLoco->Alias & 0x8000);
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <StopAllLocos>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StopAllLocos(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
   word i;

	for(i = 0; i < MAX_LOCOS; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	80fb      	strh	r3, [r7, #6]
 8001b5a:	e016      	b.n	8001b8a <StopAllLocos+0x3a>
	{
		if(0 != ActiveLocos[i].Address)
 8001b5c:	88fa      	ldrh	r2, [r7, #6]
 8001b5e:	4910      	ldr	r1, [pc, #64]	@ (8001ba0 <StopAllLocos+0x50>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <StopAllLocos+0x34>
		{
			//SetLocoSpeed(&ActiveLocos[i], 0); ToDo - should this be used instead
			ActiveLocos[i].Speed = 0;
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	490b      	ldr	r1, [pc, #44]	@ (8001ba0 <StopAllLocos+0x50>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3372      	adds	r3, #114	@ 0x72
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < MAX_LOCOS; i++)
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	3301      	adds	r3, #1
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	2b1f      	cmp	r3, #31
 8001b8e:	d9e5      	bls.n	8001b5c <StopAllLocos+0xc>
		}
	}
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20001a10 	.word	0x20001a10

08001ba4 <QueueMessage>:
*		q_ptr(in_ptr) = messege_to_be_queued
*		inc in_ptr (accounting for wrap)
*
*************************************************************************/
unsigned char QueueMessage(unsigned char bMessageType, VIRTUAL_CAB* pMessagePointer, int nEvent)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	73fb      	strb	r3, [r7, #15]

	if((message_queue_in == message_queue_out) && (MessageQueue[message_queue_in].bMessageType != '\0'))
 8001bb2:	4b25      	ldr	r3, [pc, #148]	@ (8001c48 <QueueMessage+0xa4>)
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <QueueMessage+0xa8>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d10d      	bne.n	8001bda <QueueMessage+0x36>
 8001bbe:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <QueueMessage+0xa4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4a22      	ldr	r2, [pc, #136]	@ (8001c50 <QueueMessage+0xac>)
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	440b      	add	r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <QueueMessage+0x36>
	{
		/* queue is full */
		return 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e030      	b.n	8001c3c <QueueMessage+0x98>
	}
	else
	{
		/* queue is not full */
		MessageQueue[message_queue_in].pMessagePointer = pMessagePointer;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <QueueMessage+0xa4>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <QueueMessage+0xac>)
 8001be2:	460b      	mov	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	440b      	add	r3, r1
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3308      	adds	r3, #8
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
		MessageQueue[message_queue_in].bMessageType = bMessageType;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <QueueMessage+0xa4>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4a15      	ldr	r2, [pc, #84]	@ (8001c50 <QueueMessage+0xac>)
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	440b      	add	r3, r1
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	701a      	strb	r2, [r3, #0]
		MessageQueue[message_queue_in].nEvent = nEvent;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <QueueMessage+0xa4>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <QueueMessage+0xac>)
 8001c10:	460b      	mov	r3, r1
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	440b      	add	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	601a      	str	r2, [r3, #0]

		++message_queue_in;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <QueueMessage+0xa4>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <QueueMessage+0xa4>)
 8001c2a:	701a      	strb	r2, [r3, #0]
		if(message_queue_in == MESSAGE_QUEUE_DEPTH)
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <QueueMessage+0xa4>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b14      	cmp	r3, #20
 8001c32:	d102      	bne.n	8001c3a <QueueMessage+0x96>
		{
			message_queue_in = 0;
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <QueueMessage+0xa4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 8001c3a:	2301      	movs	r3, #1
	}
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20002a20 	.word	0x20002a20
 8001c4c:	20002a21 	.word	0x20002a21
 8001c50:	20002930 	.word	0x20002930

08001c54 <GetMessage>:
*
* RESTRICTIONS:	*
*
*********************************************************************/
VIRTUAL_CAB* GetMessage(unsigned char* bMessageType, int* nEvent)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	VIRTUAL_CAB* pMessagePointer;

	if((message_queue_in == message_queue_out) && (MessageQueue[message_queue_out].bMessageType == '\0'))
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <GetMessage+0xbc>)
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <GetMessage+0xc0>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d10d      	bne.n	8001c86 <GetMessage+0x32>
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <GetMessage+0xc0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4a29      	ldr	r2, [pc, #164]	@ (8001d18 <GetMessage+0xc4>)
 8001c72:	460b      	mov	r3, r1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	440b      	add	r3, r1
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <GetMessage+0x32>
	{
		/* queue is empty */
		return NULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e03d      	b.n	8001d02 <GetMessage+0xae>
	}
	else
	{
		/* queue is not empty */
		pMessagePointer = MessageQueue[message_queue_out].pMessagePointer;
 8001c86:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <GetMessage+0xc0>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <GetMessage+0xc4>)
 8001c8e:	460b      	mov	r3, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	440b      	add	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3308      	adds	r3, #8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
		*bMessageType = MessageQueue[message_queue_out].bMessageType;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <GetMessage+0xc0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <GetMessage+0xc4>)
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	440b      	add	r3, r1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	701a      	strb	r2, [r3, #0]
		*nEvent = MessageQueue[message_queue_out].nEvent;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <GetMessage+0xc0>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <GetMessage+0xc4>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	601a      	str	r2, [r3, #0]
		MessageQueue[message_queue_out].bMessageType = '\0';
 8001cd0:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <GetMessage+0xc0>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <GetMessage+0xc4>)
 8001cd8:	460b      	mov	r3, r1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]

		++message_queue_out;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <GetMessage+0xc0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <GetMessage+0xc0>)
 8001cf0:	701a      	strb	r2, [r3, #0]
		if(message_queue_out == MESSAGE_QUEUE_DEPTH)
 8001cf2:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <GetMessage+0xc0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b14      	cmp	r3, #20
 8001cf8:	d102      	bne.n	8001d00 <GetMessage+0xac>
		{
			message_queue_out = 0;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <GetMessage+0xc0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
		}
		return pMessagePointer;
 8001d00:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20002a20 	.word	0x20002a20
 8001d14:	20002a21 	.word	0x20002a21
 8001d18:	20002930 	.word	0x20002930

08001d1c <InitMessageQueue>:
*
* RESTRICTIONS:	none
*
*********************************************************************/
void InitMessageQueue(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
	int index;


	message_queue_in = 0;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <InitMessageQueue+0x44>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
	message_queue_out = 0;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <InitMessageQueue+0x48>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]

	for(index = 0; index < MESSAGE_QUEUE_DEPTH; ++index)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	e00b      	b.n	8001d4c <InitMessageQueue+0x30>
	{
		MessageQueue[index].bMessageType = 0;
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <InitMessageQueue+0x4c>)
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
	for(index = 0; index < MESSAGE_QUEUE_DEPTH; ++index)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b13      	cmp	r3, #19
 8001d50:	ddf0      	ble.n	8001d34 <InitMessageQueue+0x18>
	}
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20002a20 	.word	0x20002a20
 8001d64:	20002a21 	.word	0x20002a21
 8001d68:	20002930 	.word	0x20002930

08001d6c <BuildWriteCVPacket>:
*
* RESTRICTIONS:
*
**********************************************************************/
int BuildWriteCVPacket(unsigned char* pPacket, unsigned short nCV, unsigned char bValue, unsigned char Mode)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	807b      	strh	r3, [r7, #2]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	707b      	strb	r3, [r7, #1]
 8001d82:	4613      	mov	r3, r2
 8001d84:	703b      	strb	r3, [r7, #0]
	unsigned char bChecksum = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
	unsigned char bTemp;
	unsigned char bLength;
	//unsigned char* pTemp;

	bLength = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73bb      	strb	r3, [r7, #14]

	if(Mode == MODE_DIRECT)
 8001d8e:	783b      	ldrb	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d138      	bne.n	8001e06 <BuildWriteCVPacket+0x9a>
	{
		//pTemp = pPacket++;				// leave room for the length byte

		if(nCV != 0)
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <BuildWriteCVPacket+0x36>
		{
			nCV--;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	807b      	strh	r3, [r7, #2]
		}
		
		bTemp = (BYTE1(nCV) & 0x03) | 0x7c;
 8001da2:	1cbb      	adds	r3, r7, #2
 8001da4:	3301      	adds	r3, #1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	f043 037c 	orr.w	r3, r3, #124	@ 0x7c
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	737b      	strb	r3, [r7, #13]
		*pPacket++ = bTemp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	7b7a      	ldrb	r2, [r7, #13]
 8001dc0:	701a      	strb	r2, [r3, #0]
		bChecksum = bChecksum ^ bTemp;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	4053      	eors	r3, r2
 8001dc8:	73fb      	strb	r3, [r7, #15]
		
		bTemp = BYTE0(nCV);
 8001dca:	1cbb      	adds	r3, r7, #2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	737b      	strb	r3, [r7, #13]
		*pPacket++ = bTemp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	7b7a      	ldrb	r2, [r7, #13]
 8001dd8:	701a      	strb	r2, [r3, #0]
		bChecksum = bChecksum ^ bTemp;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	4053      	eors	r3, r2
 8001de0:	73fb      	strb	r3, [r7, #15]
		
		*pPacket++ = bValue;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	787a      	ldrb	r2, [r7, #1]
 8001dea:	701a      	strb	r2, [r3, #0]
		bChecksum = bChecksum ^ bValue;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	787b      	ldrb	r3, [r7, #1]
 8001df0:	4053      	eors	r3, r2
 8001df2:	73fb      	strb	r3, [r7, #15]
		
		*pPacket++ = bChecksum;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	701a      	strb	r2, [r3, #0]
		*pPacket = '\0';
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e029      	b.n	8001e5a <BuildWriteCVPacket+0xee>
	}
	else
	{
		//pTemp = pPacket++;				// leave room for the length byte
		
		if(nCV != 0)
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <BuildWriteCVPacket+0xa8>
		{
			nCV--;
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	807b      	strh	r3, [r7, #2]
		}

		bTemp = ((nCV % 4) & 0x07) | 0x78;
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	737b      	strb	r3, [r7, #13]
		*pPacket++ = bTemp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	7b7a      	ldrb	r2, [r7, #13]
 8001e2e:	701a      	strb	r2, [r3, #0]
		bChecksum = bChecksum ^ bTemp;
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	7b7b      	ldrb	r3, [r7, #13]
 8001e34:	4053      	eors	r3, r2
 8001e36:	73fb      	strb	r3, [r7, #15]
		
		*pPacket++ = bValue;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	787a      	ldrb	r2, [r7, #1]
 8001e40:	701a      	strb	r2, [r3, #0]
		bChecksum = bChecksum ^ bValue;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	787b      	ldrb	r3, [r7, #1]
 8001e46:	4053      	eors	r3, r2
 8001e48:	73fb      	strb	r3, [r7, #15]
		
		*pPacket++ = bChecksum;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	701a      	strb	r2, [r3, #0]
		*pPacket = '\0';
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
		//*pTemp = bLength + 4;
	}
	return bLength + 4;
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	3304      	adds	r3, #4
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <ServiceMode>:
	PT_ACK,
};


void ServiceMode(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0

	// get the ACK status, overcurrent status, and the state of the Prog Track state machine and set status accordingly
	//if()
	//status = GetProgTrackStatus();

	status = PT_NO_MESSAGE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]



	switch(SmState)
 8001e76:	4b18      	ldr	r3, [pc, #96]	@ (8001ed8 <ServiceMode+0x6c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d827      	bhi.n	8001ece <ServiceMode+0x62>
 8001e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e84 <ServiceMode+0x18>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001ec9 	.word	0x08001ec9
 8001e88:	08001e95 	.word	0x08001e95
 8001e8c:	08001ec9 	.word	0x08001ec9
 8001e90:	08001eb1 	.word	0x08001eb1
	{
		case SM_IDLE:
		break;

		case SM_WAIT_FOR_ACK:
			if(status == PT_ALL_PACKETS_SENT)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d103      	bne.n	8001ea2 <ServiceMode+0x36>
			{
				// EQ = error
				SmState = SM_IDLE;
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <ServiceMode+0x6c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
			{
				// EQ =  operation OK
				//SmState = SmNextState;
				SmState = SM_IDLE;
			}
		break;
 8001ea0:	e014      	b.n	8001ecc <ServiceMode+0x60>
			else if(status == PT_ACK)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d111      	bne.n	8001ecc <ServiceMode+0x60>
				SmState = SM_IDLE;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <ServiceMode+0x6c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
		break;
 8001eae:	e00d      	b.n	8001ecc <ServiceMode+0x60>


		break;

		case SM_VERIFY:
			BuildWriteCVPacket(packet, SmCV, SmValue, MODE_DIRECT);
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <ServiceMode+0x70>)
 8001eb2:	8819      	ldrh	r1, [r3, #0]
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <ServiceMode+0x74>)
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	1d38      	adds	r0, r7, #4
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f7ff ff56 	bl	8001d6c <BuildWriteCVPacket>
//k			if(QueueProgPacket(11, packet) == 0)
//k			{
//k				// error
//k			}
			SmState = SM_WAIT_FOR_ACK;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <ServiceMode+0x6c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
		break;
 8001ec6:	e002      	b.n	8001ece <ServiceMode+0x62>
		break;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <ServiceMode+0x62>
		break;
 8001ecc:	bf00      	nop
	}
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20002a24 	.word	0x20002a24
 8001edc:	20002a28 	.word	0x20002a28
 8001ee0:	20002a2a 	.word	0x20002a2a

08001ee4 <InitLocoList>:
*
*							CODE
*
**********************************************************************/
void InitLocoList(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
	word i;

	setup(&FreeLocos);
 8001eea:	4822      	ldr	r0, [pc, #136]	@ (8001f74 <InitLocoList+0x90>)
 8001eec:	f7ff fad6 	bl	800149c <setup>
	for (i = 0; i < MAX_LOCOS; i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	80fb      	strh	r3, [r7, #6]
 8001ef4:	e00d      	b.n	8001f12 <InitLocoList+0x2e>
	{
		InsertAtTop(&FreeLocos, &FreeLinks[i]);
 8001ef6:	88fa      	ldrh	r2, [r7, #6]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <InitLocoList+0x94>)
 8001f02:	4413      	add	r3, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	481b      	ldr	r0, [pc, #108]	@ (8001f74 <InitLocoList+0x90>)
 8001f08:	f7ff fad8 	bl	80014bc <InsertAtTop>
	for (i = 0; i < MAX_LOCOS; i++)
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	80fb      	strh	r3, [r7, #6]
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	2b1f      	cmp	r3, #31
 8001f16:	d9ee      	bls.n	8001ef6 <InitLocoList+0x12>
	}
	setup(&TrackLocos);
 8001f18:	4818      	ldr	r0, [pc, #96]	@ (8001f7c <InitLocoList+0x98>)
 8001f1a:	f7ff fabf 	bl	800149c <setup>
	trackSequence.m_List = &TrackLocos; 
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <InitLocoList+0x9c>)
 8001f20:	4a16      	ldr	r2, [pc, #88]	@ (8001f7c <InitLocoList+0x98>)
 8001f22:	605a      	str	r2, [r3, #4]
	First(&trackSequence);
 8001f24:	4816      	ldr	r0, [pc, #88]	@ (8001f80 <InitLocoList+0x9c>)
 8001f26:	f7ff fb6c 	bl	8001602 <First>
	//functionSequence1.m_List = &TrackLocos;
	//First(&functionSequence1);
	//functionSequence2.m_List = &TrackLocos;
	//First(&functionSequence2);

	setup(&FreeAccys);
 8001f2a:	4816      	ldr	r0, [pc, #88]	@ (8001f84 <InitLocoList+0xa0>)
 8001f2c:	f7ff fab6 	bl	800149c <setup>
	for (i = 0; i < MAX_ACCESSORIES; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	80fb      	strh	r3, [r7, #6]
 8001f34:	e00d      	b.n	8001f52 <InitLocoList+0x6e>
	{
		InsertAtTop(&FreeAccys, &FreeAccyLinks[i]);
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <InitLocoList+0xa4>)
 8001f42:	4413      	add	r3, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	480f      	ldr	r0, [pc, #60]	@ (8001f84 <InitLocoList+0xa0>)
 8001f48:	f7ff fab8 	bl	80014bc <InsertAtTop>
	for (i = 0; i < MAX_ACCESSORIES; i++)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	80fb      	strh	r3, [r7, #6]
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d9ee      	bls.n	8001f36 <InitLocoList+0x52>
	}
	setup(&TrackAccys);
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <InitLocoList+0xa8>)
 8001f5a:	f7ff fa9f 	bl	800149c <setup>
	accySequence.m_List = &TrackAccys; 
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <InitLocoList+0xac>)
 8001f60:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <InitLocoList+0xa8>)
 8001f62:	605a      	str	r2, [r3, #4]
	First(&accySequence);
 8001f64:	480a      	ldr	r0, [pc, #40]	@ (8001f90 <InitLocoList+0xac>)
 8001f66:	f7ff fb4c 	bl	8001602 <First>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20002c6c 	.word	0x20002c6c
 8001f78:	20002a2c 	.word	0x20002a2c
 8001f7c:	20002c74 	.word	0x20002c74
 8001f80:	20002c7c 	.word	0x20002c7c
 8001f84:	20002c84 	.word	0x20002c84
 8001f88:	20002bac 	.word	0x20002bac
 8001f8c:	20002c8c 	.word	0x20002c8c
 8001f90:	20002c94 	.word	0x20002c94

08001f94 <MakeMostRecentLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
void MakeMostRecentLoco(Loco *testLoco)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
		testLoco->bNumStopPackets = 10;
	}
#endif

	//is the loco in the track sequence list?
	testIter.m_List = trackSequence.m_List;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <MakeMostRecentLoco+0x68>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	613b      	str	r3, [r7, #16]
	if(0 == (pnext = FindByKey(&testIter, testLoco->Address)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fb53 	bl	800165a <FindByKey>
 8001fb4:	6178      	str	r0, [r7, #20]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <MakeMostRecentLoco+0x4c>
	{
		//not found, a new loco...
		pnext = GetFree();
 8001fbc:	f000 f854 	bl	8002068 <GetFree>
 8001fc0:	6178      	str	r0, [r7, #20]
		pnext->m_index = (void*)testLoco;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	601a      	str	r2, [r3, #0]
		pnext->m_key = testLoco->Address; 
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	605a      	str	r2, [r3, #4]
		InsertAtTop(trackSequence.m_List, pnext);
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <MakeMostRecentLoco+0x68>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fa6f 	bl	80014bc <InsertAtTop>
 8001fde:	e005      	b.n	8001fec <MakeMostRecentLoco+0x58>
	}
	else
	{
		//yes, update to top of list
		BringToTop(trackSequence.m_List, pnext);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <MakeMostRecentLoco+0x68>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	6979      	ldr	r1, [r7, #20]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff faa8 	bl	800153c <BringToTop>
	}
	First(&trackSequence);	//reset the track sequence iterator
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <MakeMostRecentLoco+0x68>)
 8001fee:	f7ff fb08 	bl	8001602 <First>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20002c7c 	.word	0x20002c7c

08002000 <OldestLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
Loco *OldestLoco(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
	Link			*pnext;
	Link			*pcurr = NULL;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
	ListIterator	testIter;
	Loco			*testLoco;

	testIter.m_List = trackSequence.m_List;
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <OldestLoco+0x60>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60bb      	str	r3, [r7, #8]
	pnext = First(&testIter);
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff faf5 	bl	8001602 <First>
 8002018:	6178      	str	r0, [r7, #20]
	while(pnext)
 800201a:	e00e      	b.n	800203a <OldestLoco+0x3a>
	{
		testLoco = (Loco*)pnext->m_index;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
		pnext->m_key = testLoco->Address;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	605a      	str	r2, [r3, #4]
		pcurr = pnext;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
		pnext = Next(&testIter);
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff faf6 	bl	8001624 <Next>
 8002038:	6178      	str	r0, [r7, #20]
	while(pnext)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ed      	bne.n	800201c <OldestLoco+0x1c>
	}
	if(pcurr != NULL)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <OldestLoco+0x4c>
	{
		pcurr->m_pnext = NULL;	//unlink it
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
	}
	InsertAtTop(&FreeLocos, pnext);
 800204c:	6979      	ldr	r1, [r7, #20]
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <OldestLoco+0x64>)
 8002050:	f7ff fa34 	bl	80014bc <InsertAtTop>
	return (Loco*)pnext->m_index;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20002c7c 	.word	0x20002c7c
 8002064:	20002c6c 	.word	0x20002c6c

08002068 <GetFree>:
*
* RESTRICTIONS:
*
**********************************************************************/
Link *GetFree(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	Link *temp;

	if(isEmpty(&FreeLocos)) return NULL;
 800206e:	480b      	ldr	r0, [pc, #44]	@ (800209c <GetFree+0x34>)
 8002070:	f7ff fa8d 	bl	800158e <isEmpty>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <GetFree+0x16>
 800207a:	2300      	movs	r3, #0
 800207c:	e009      	b.n	8002092 <GetFree+0x2a>
	temp = FreeLocos.head;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <GetFree+0x34>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	607b      	str	r3, [r7, #4]
	Remove(&FreeLocos, FreeLocos.head);
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <GetFree+0x34>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4804      	ldr	r0, [pc, #16]	@ (800209c <GetFree+0x34>)
 800208c:	f7ff fa30 	bl	80014f0 <Remove>
	return temp;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20002c6c 	.word	0x20002c6c

080020a0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 0201 	bic.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	e853 3f00 	ldrex	r3, [r3]
 80020f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f023 030c 	bic.w	r3, r3, #12
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	61ba      	str	r2, [r7, #24]
 8002108:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210a:	6979      	ldr	r1, [r7, #20]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	e841 2300 	strex	r3, r2, [r1]
 8002112:	613b      	str	r3, [r7, #16]
   return(result);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e7      	bne.n	80020ea <LL_USART_SetTransferDirection+0xa>
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	3724      	adds	r7, #36	@ 0x24
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_USART_SetOverSampling>:
  *         @arg @ref LL_USART_OVERSAMPLING_16
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_USART_ConfigCharacter>:
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002164:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	430a      	orrs	r2, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	601a      	str	r2, [r3, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	431a      	orrs	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0b      	cmp	r3, #11
 80021ca:	d83c      	bhi.n	8002246 <LL_USART_SetBaudRate+0x8e>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d039      	beq.n	8002246 <LL_USART_SetBaudRate+0x8e>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021d8:	d122      	bne.n	8002220 <LL_USART_SetBaudRate+0x68>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <LL_USART_SetBaudRate+0x9c>)
 80021e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	005a      	lsls	r2, r3, #1
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	441a      	add	r2, r3
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	b29b      	uxth	r3, r3
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 800221e:	e012      	b.n	8002246 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <LL_USART_SetBaudRate+0x9c>)
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	441a      	add	r2, r3
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	60da      	str	r2, [r3, #12]
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0802b268 	.word	0x0802b268

08002258 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b10      	cmp	r3, #16
 800226a:	d101      	bne.n	8002270 <LL_USART_IsActiveFlag_IDLE+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b20      	cmp	r3, #32
 8002290:	d101      	bne.n	8002296 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b4:	2b40      	cmp	r3, #64	@ 0x40
 80022b6:	d101      	bne.n	80022bc <LL_USART_IsActiveFlag_TC+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_USART_IsActiveFlag_TC+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022da:	2b80      	cmp	r3, #128	@ 0x80
 80022dc:	d101      	bne.n	80022e2 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	621a      	str	r2, [r3, #32]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	621a      	str	r2, [r3, #32]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2208      	movs	r2, #8
 800234a:	621a      	str	r2, [r3, #32]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2210      	movs	r2, #16
 8002364:	621a      	str	r2, [r3, #32]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2240      	movs	r2, #64	@ 0x40
 800237e:	621a      	str	r2, [r3, #32]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	@ 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	e853 3f00 	ldrex	r3, [r3]
 800239e:	60bb      	str	r3, [r7, #8]
   return(result);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	61ba      	str	r2, [r7, #24]
 80023ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	e841 2300 	strex	r3, r2, [r1]
 80023b8:	613b      	str	r3, [r7, #16]
   return(result);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e9      	bne.n	8002394 <LL_USART_EnableIT_IDLE+0x8>
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b089      	sub	sp, #36	@ 0x24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f043 0320 	orr.w	r3, r3, #32
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	61ba      	str	r2, [r7, #24]
 80023f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	613b      	str	r3, [r7, #16]
   return(result);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e9      	bne.n	80023d6 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	3724      	adds	r7, #36	@ 0x24
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	@ 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	e853 3f00 	ldrex	r3, [r3]
 8002422:	60bb      	str	r3, [r7, #8]
   return(result);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	61ba      	str	r2, [r7, #24]
 8002432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002434:	6979      	ldr	r1, [r7, #20]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	e841 2300 	strex	r3, r2, [r1]
 800243c:	613b      	str	r3, [r7, #16]
   return(result);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e9      	bne.n	8002418 <LL_USART_EnableIT_TC+0x8>
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8002452:	b480      	push	{r7}
 8002454:	b089      	sub	sp, #36	@ 0x24
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	e853 3f00 	ldrex	r3, [r3]
 8002464:	60bb      	str	r3, [r7, #8]
   return(result);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	61ba      	str	r2, [r7, #24]
 8002474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002476:	6979      	ldr	r1, [r7, #20]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	e841 2300 	strex	r3, r2, [r1]
 800247e:	613b      	str	r3, [r7, #16]
   return(result);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1e9      	bne.n	800245a <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	3724      	adds	r7, #36	@ 0x24
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	e853 3f00 	ldrex	r3, [r3]
 80024a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	61ba      	str	r2, [r7, #24]
 80024b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b8:	6979      	ldr	r1, [r7, #20]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	613b      	str	r3, [r7, #16]
   return(result);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e9      	bne.n	800249c <LL_USART_DisableIT_TC+0x8>
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b089      	sub	sp, #36	@ 0x24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	61ba      	str	r2, [r7, #24]
 80024f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	6979      	ldr	r1, [r7, #20]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	613b      	str	r3, [r7, #16]
   return(result);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e9      	bne.n	80024de <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	3724      	adds	r7, #36	@ 0x24
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b10      	cmp	r3, #16
 800252a:	d101      	bne.n	8002530 <LL_USART_IsEnabledIT_IDLE+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_USART_IsEnabledIT_IDLE+0x1a>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b20      	cmp	r3, #32
 8002550:	d101      	bne.n	8002556 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002574:	2b80      	cmp	r3, #128	@ 0x80
 8002576:	d101      	bne.n	800257c <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	b2db      	uxtb	r3, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b6:	b29b      	uxth	r3, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_USART_TransmitData9>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0x1FF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData9(USART_TypeDef *USARTx, uint16_t Value)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
  USARTx->TDR = (uint16_t)(Value & 0x1FFUL);
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <Uart2_Init>:
*
* RESTRICTIONS:
*
**********************************************************************/
HAL_StatusTypeDef Uart2_Init(UART_DEF* uart_def)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	@ 0x28
 8002608:	af02      	add	r7, sp, #8
 800260a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;


	// save the uart definition in a local store
	memcpy(&mUartDef, uart_def, sizeof(UART_DEF));
 800260c:	221c      	movs	r2, #28
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4842      	ldr	r0, [pc, #264]	@ (800271c <Uart2_Init+0x118>)
 8002612:	f023 ff3c 	bl	802648e <memcpy>


	THIS_CLK_ENABLE();
 8002616:	4b42      	ldr	r3, [pc, #264]	@ (8002720 <Uart2_Init+0x11c>)
 8002618:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800261c:	4a40      	ldr	r2, [pc, #256]	@ (8002720 <Uart2_Init+0x11c>)
 800261e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002622:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002626:	4b3e      	ldr	r3, [pc, #248]	@ (8002720 <Uart2_Init+0x11c>)
 8002628:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]

	LL_USART_Disable(THIS_UART);
 8002634:	483b      	ldr	r0, [pc, #236]	@ (8002724 <Uart2_Init+0x120>)
 8002636:	f7ff fd43 	bl	80020c0 <LL_USART_Disable>

    /* TX/RX direction */
    LL_USART_SetTransferDirection(THIS_UART, LL_USART_DIRECTION_TX_RX);
 800263a:	210c      	movs	r1, #12
 800263c:	4839      	ldr	r0, [pc, #228]	@ (8002724 <Uart2_Init+0x120>)
 800263e:	f7ff fd4f 	bl	80020e0 <LL_USART_SetTransferDirection>

    /* 8 data bit, 1 start bit, 1 stop bit, no parity */
    LL_USART_ConfigCharacter(THIS_UART, uart_def->bits, uart_def->parity, uart_def->stop_bits);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4835      	ldr	r0, [pc, #212]	@ (8002724 <Uart2_Init+0x120>)
 8002650:	f7ff fd7d 	bl	800214e <LL_USART_ConfigCharacter>

    /* No Hardware Flow control */
    LL_USART_SetHWFlowCtrl(THIS_UART, LL_USART_HWCONTROL_NONE);
 8002654:	2100      	movs	r1, #0
 8002656:	4833      	ldr	r0, [pc, #204]	@ (8002724 <Uart2_Init+0x120>)
 8002658:	f7ff fd9a 	bl	8002190 <LL_USART_SetHWFlowCtrl>

    /* Oversampling by 16 */
    LL_USART_SetOverSampling(THIS_UART, LL_USART_OVERSAMPLING_16);
 800265c:	2100      	movs	r1, #0
 800265e:	4831      	ldr	r0, [pc, #196]	@ (8002724 <Uart2_Init+0x120>)
 8002660:	f7ff fd62 	bl	8002128 <LL_USART_SetOverSampling>

        In this example, Peripheral Clock is expected to be equal to
        100000000/APB_Div Hz => equal to SystemCoreClock/APB_Div
    */

    LL_USART_SetBaudRate(THIS_UART, PCLK1Freq, LL_USART_PRESCALER_DIV1, LL_USART_OVERSAMPLING_16, uart_def->baud);
 8002664:	4b30      	ldr	r3, [pc, #192]	@ (8002728 <Uart2_Init+0x124>)
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	2200      	movs	r2, #0
 8002672:	482c      	ldr	r0, [pc, #176]	@ (8002724 <Uart2_Init+0x120>)
 8002674:	f7ff fda0 	bl	80021b8 <LL_USART_SetBaudRate>
//	if(uart_def->mode == U_MATCH)
//	{
//		LL_USART_ConfigNodeAddress(THIS_UART, LL_USART_ADDRESS_DETECT_7B, uart_def->match);
//		LL_USART_EnableIT_CM(THIS_UART);
//	}
	if(uart_def->mode == U_IDLE || uart_def->mode == U_IDLE_9B)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <Uart2_Init+0x84>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d102      	bne.n	800268e <Uart2_Init+0x8a>
	{
		LL_USART_EnableIT_IDLE(THIS_UART);
 8002688:	4826      	ldr	r0, [pc, #152]	@ (8002724 <Uart2_Init+0x120>)
 800268a:	f7ff fe7f 	bl	800238c <LL_USART_EnableIT_IDLE>
	}

	LL_USART_EnableIT_RXNE(THIS_UART);
 800268e:	4825      	ldr	r0, [pc, #148]	@ (8002724 <Uart2_Init+0x120>)
 8002690:	f7ff fe9d 	bl	80023ce <LL_USART_EnableIT_RXNE_RXFNE>

    LL_USART_Enable(THIS_UART);
 8002694:	4823      	ldr	r0, [pc, #140]	@ (8002724 <Uart2_Init+0x120>)
 8002696:	f7ff fd03 	bl	80020a0 <LL_USART_Enable>

    tx_restart = 1;
 800269a:	4b24      	ldr	r3, [pc, #144]	@ (800272c <Uart2_Init+0x128>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]

	GPIO_InitStruct.Pin = CAB_TX_PIN;
 80026a0:	2320      	movs	r3, #32
 80026a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = CAB_TX_MODE;
 80026a4:	2302      	movs	r3, #2
 80026a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = CAB_TX_PU_PD;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = CAB_TX_SPEED;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = CAB_TX_AF;
 80026b0:	2307      	movs	r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAB_TX_PORT, &GPIO_InitStruct);
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	481d      	ldr	r0, [pc, #116]	@ (8002730 <Uart2_Init+0x12c>)
 80026bc:	f00b f93a 	bl	800d934 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = CAB_RX_PIN;
 80026c0:	2340      	movs	r3, #64	@ 0x40
 80026c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = CAB_RX_MODE;
 80026c4:	2302      	movs	r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = CAB_RX_PU_PD;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = CAB_RX_SPEED;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = CAB_RX_AF;
 80026d0:	2307      	movs	r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAB_RX_PORT, &GPIO_InitStruct);
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	4619      	mov	r1, r3
 80026da:	4815      	ldr	r0, [pc, #84]	@ (8002730 <Uart2_Init+0x12c>)
 80026dc:	f00b f92a 	bl	800d934 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = CAB_DIR_PIN;
 80026e0:	2310      	movs	r3, #16
 80026e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = CAB_DIR_MODE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = CAB_DIR_PU_PD;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = CAB_DIR_SPEED;
 80026ec:	2302      	movs	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = CAB_DIR_AF;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAB_DIR_PORT, &GPIO_InitStruct);
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4619      	mov	r1, r3
 80026fa:	480d      	ldr	r0, [pc, #52]	@ (8002730 <Uart2_Init+0x12c>)
 80026fc:	f00b f91a 	bl	800d934 <HAL_GPIO_Init>

	/* Peripheral interrupt init*/
	HAL_NVIC_SetPriority(THIS_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	203b      	movs	r0, #59	@ 0x3b
 8002706:	f00a faa5 	bl	800cc54 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(THIS_IRQn);
 800270a:	203b      	movs	r0, #59	@ 0x3b
 800270c:	f00a fabc 	bl	800cc88 <HAL_NVIC_EnableIRQ>

	return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20002c9c 	.word	0x20002c9c
 8002720:	44020c00 	.word	0x44020c00
 8002724:	40004400 	.word	0x40004400
 8002728:	2001c5ec 	.word	0x2001c5ec
 800272c:	20002cd9 	.word	0x20002cd9
 8002730:	42020c00 	.word	0x42020c00

08002734 <GetRxChar>:
*
* RESTRICTIONS:
*
**********************************************************************///
static uint8_t GetRxChar(uint8_t* c)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	if(rload_ptr == rx_index)
 800273c:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <GetRxChar+0x4c>)
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <GetRxChar+0x50>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d101      	bne.n	800274c <GetRxChar+0x18>
	{
	    return 0;
 8002748:	2300      	movs	r3, #0
 800274a:	e012      	b.n	8002772 <GetRxChar+0x3e>
	}

	*c = rx_buf[rload_ptr++];
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <GetRxChar+0x4c>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	b291      	uxth	r1, r2
 8002754:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <GetRxChar+0x4c>)
 8002756:	8011      	strh	r1, [r2, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <GetRxChar+0x54>)
 800275c:	5c9a      	ldrb	r2, [r3, r2]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	701a      	strb	r2, [r3, #0]
	if(rload_ptr > MAXRXBUFLEN - 1)
 8002762:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <GetRxChar+0x4c>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	2b7f      	cmp	r3, #127	@ 0x7f
 8002768:	d902      	bls.n	8002770 <GetRxChar+0x3c>
	{
	  rload_ptr = 0;
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <GetRxChar+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	801a      	strh	r2, [r3, #0]
	}
	return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20002cde 	.word	0x20002cde
 8002784:	20002ce0 	.word	0x20002ce0
 8002788:	20002d64 	.word	0x20002d64

0800278c <USART2_IRQHandler>:
*
* RESTRICTIONS:
*
**********************************************************************///
void USART2_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
	uint8_t c;
	uint16_t w;

	if(LL_USART_IsActiveFlag_RXNE(THIS_UART) && LL_USART_IsEnabledIT_RXNE(THIS_UART))
 8002792:	4890      	ldr	r0, [pc, #576]	@ (80029d4 <USART2_IRQHandler+0x248>)
 8002794:	f7ff fd73 	bl	800227e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8081 	beq.w	80028a2 <USART2_IRQHandler+0x116>
 80027a0:	488c      	ldr	r0, [pc, #560]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80027a2:	f7ff fecc 	bl	800253e <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d07a      	beq.n	80028a2 <USART2_IRQHandler+0x116>
	{
		if(mUartDef.mode == U_IDLE_9B)
 80027ac:	4b8a      	ldr	r3, [pc, #552]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d146      	bne.n	8002842 <USART2_IRQHandler+0xb6>
		{
			w = LL_USART_ReceiveData9(THIS_UART);
 80027b4:	4887      	ldr	r0, [pc, #540]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80027b6:	f7ff fef5 	bl	80025a4 <LL_USART_ReceiveData9>
 80027ba:	4603      	mov	r3, r0
 80027bc:	80bb      	strh	r3, [r7, #4]

			if(mUartDef.mode == U_CHAR)
 80027be:	4b86      	ldr	r3, [pc, #536]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d113      	bne.n	80027ee <USART2_IRQHandler+0x62>
			{
				rx_buf[0] = BYTE0(w);
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	4b84      	ldr	r3, [pc, #528]	@ (80029dc <USART2_IRQHandler+0x250>)
 80027cc:	701a      	strb	r2, [r3, #0]
		        rx_buf[1] = BYTE1(w);
 80027ce:	797a      	ldrb	r2, [r7, #5]
 80027d0:	4b82      	ldr	r3, [pc, #520]	@ (80029dc <USART2_IRQHandler+0x250>)
 80027d2:	705a      	strb	r2, [r3, #1]
				RxNumberChars = 2;
 80027d4:	4b82      	ldr	r3, [pc, #520]	@ (80029e0 <USART2_IRQHandler+0x254>)
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
				if(mUartDef.UartRxCallback != NULL)
 80027da:	4b7f      	ldr	r3, [pc, #508]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d05f      	beq.n	80028a2 <USART2_IRQHandler+0x116>
				{
					(*mUartDef.UartRxCallback)(RxBuf, &RxNumberChars);
 80027e2:	4b7d      	ldr	r3, [pc, #500]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	497e      	ldr	r1, [pc, #504]	@ (80029e0 <USART2_IRQHandler+0x254>)
 80027e8:	487e      	ldr	r0, [pc, #504]	@ (80029e4 <USART2_IRQHandler+0x258>)
 80027ea:	4798      	blx	r3
 80027ec:	e059      	b.n	80028a2 <USART2_IRQHandler+0x116>
				}
			}
			else
			{
				rx_buf[rx_index++] = BYTE0(w);
 80027ee:	1d3a      	adds	r2, r7, #4
 80027f0:	4b7d      	ldr	r3, [pc, #500]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	1c59      	adds	r1, r3, #1
 80027f6:	b288      	uxth	r0, r1
 80027f8:	497b      	ldr	r1, [pc, #492]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 80027fa:	8008      	strh	r0, [r1, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	4b76      	ldr	r3, [pc, #472]	@ (80029dc <USART2_IRQHandler+0x250>)
 8002802:	545a      	strb	r2, [r3, r1]
		        if( rx_index > MAXRXBUFLEN - 1 )
 8002804:	4b78      	ldr	r3, [pc, #480]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	2b7f      	cmp	r3, #127	@ 0x7f
 800280a:	d902      	bls.n	8002812 <USART2_IRQHandler+0x86>
		        {
		            rx_index = 0;
 800280c:	4b76      	ldr	r3, [pc, #472]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 800280e:	2200      	movs	r2, #0
 8002810:	801a      	strh	r2, [r3, #0]
		        }
		        rx_buf[rx_index++] = BYTE1(w);
 8002812:	4b75      	ldr	r3, [pc, #468]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	b291      	uxth	r1, r2
 800281a:	4a73      	ldr	r2, [pc, #460]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 800281c:	8011      	strh	r1, [r2, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	7979      	ldrb	r1, [r7, #5]
 8002822:	4b6e      	ldr	r3, [pc, #440]	@ (80029dc <USART2_IRQHandler+0x250>)
 8002824:	5499      	strb	r1, [r3, r2]
		        if( rx_index > MAXRXBUFLEN - 1 )
 8002826:	4b70      	ldr	r3, [pc, #448]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	2b7f      	cmp	r3, #127	@ 0x7f
 800282c:	d902      	bls.n	8002834 <USART2_IRQHandler+0xa8>
		        {
		            rx_index = 0;
 800282e:	4b6e      	ldr	r3, [pc, #440]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 8002830:	2200      	movs	r2, #0
 8002832:	801a      	strh	r2, [r3, #0]
		        }
		        RxNumberChars++;
 8002834:	4b6a      	ldr	r3, [pc, #424]	@ (80029e0 <USART2_IRQHandler+0x254>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <USART2_IRQHandler+0x254>)
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e02f      	b.n	80028a2 <USART2_IRQHandler+0x116>
			}
		}
		else
		{
			c = LL_USART_ReceiveData8(THIS_UART);
 8002842:	4864      	ldr	r0, [pc, #400]	@ (80029d4 <USART2_IRQHandler+0x248>)
 8002844:	f7ff fea1 	bl	800258a <LL_USART_ReceiveData8>
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]

			if(mUartDef.mode == U_CHAR)
 800284c:	4b62      	ldr	r3, [pc, #392]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10f      	bne.n	8002874 <USART2_IRQHandler+0xe8>
			{
				RxBuf[0] = c;
 8002854:	79fa      	ldrb	r2, [r7, #7]
 8002856:	4b63      	ldr	r3, [pc, #396]	@ (80029e4 <USART2_IRQHandler+0x258>)
 8002858:	701a      	strb	r2, [r3, #0]
				RxNumberChars = 1;
 800285a:	4b61      	ldr	r3, [pc, #388]	@ (80029e0 <USART2_IRQHandler+0x254>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
				if(mUartDef.UartRxCallback != NULL)
 8002860:	4b5d      	ldr	r3, [pc, #372]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01c      	beq.n	80028a2 <USART2_IRQHandler+0x116>
				{
					(*mUartDef.UartRxCallback)(RxBuf, &RxNumberChars);
 8002868:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	495c      	ldr	r1, [pc, #368]	@ (80029e0 <USART2_IRQHandler+0x254>)
 800286e:	485d      	ldr	r0, [pc, #372]	@ (80029e4 <USART2_IRQHandler+0x258>)
 8002870:	4798      	blx	r3
 8002872:	e016      	b.n	80028a2 <USART2_IRQHandler+0x116>
				}
			}
			else
			{
				rx_buf[rx_index++] = c; // store data in buffer
 8002874:	4b5c      	ldr	r3, [pc, #368]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	b291      	uxth	r1, r2
 800287c:	4a5a      	ldr	r2, [pc, #360]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 800287e:	8011      	strh	r1, [r2, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	79f9      	ldrb	r1, [r7, #7]
 8002884:	4b55      	ldr	r3, [pc, #340]	@ (80029dc <USART2_IRQHandler+0x250>)
 8002886:	5499      	strb	r1, [r3, r2]
				// check if we are on the buffer wrap
				if( rx_index > MAXRXBUFLEN - 1 )
 8002888:	4b57      	ldr	r3, [pc, #348]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b7f      	cmp	r3, #127	@ 0x7f
 800288e:	d902      	bls.n	8002896 <USART2_IRQHandler+0x10a>
				{
					rx_index = 0;
 8002890:	4b55      	ldr	r3, [pc, #340]	@ (80029e8 <USART2_IRQHandler+0x25c>)
 8002892:	2200      	movs	r2, #0
 8002894:	801a      	strh	r2, [r3, #0]
				}
				RxNumberChars++;
 8002896:	4b52      	ldr	r3, [pc, #328]	@ (80029e0 <USART2_IRQHandler+0x254>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b50      	ldr	r3, [pc, #320]	@ (80029e0 <USART2_IRQHandler+0x254>)
 80028a0:	701a      	strb	r2, [r3, #0]
//				(*mUartDef.UartRxCallback)(RxBuf, &RxNumberChars);
//			}
//		}
//	}

	if(LL_USART_IsActiveFlag_IDLE(THIS_UART) && LL_USART_IsEnabledIT_IDLE(THIS_UART))
 80028a2:	484c      	ldr	r0, [pc, #304]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80028a4:	f7ff fcd8 	bl	8002258 <LL_USART_IsActiveFlag_IDLE>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02e      	beq.n	800290c <USART2_IRQHandler+0x180>
 80028ae:	4849      	ldr	r0, [pc, #292]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80028b0:	f7ff fe32 	bl	8002518 <LL_USART_IsEnabledIT_IDLE>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <USART2_IRQHandler+0x180>
	{
		LL_USART_ClearFlag_IDLE(THIS_UART);
 80028ba:	4846      	ldr	r0, [pc, #280]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80028bc:	f7ff fd4c 	bl	8002358 <LL_USART_ClearFlag_IDLE>
		if(mUartDef.mode == U_IDLE || mUartDef.mode == U_IDLE_9B)
 80028c0:	4b45      	ldr	r3, [pc, #276]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <USART2_IRQHandler+0x144>
 80028c8:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d11d      	bne.n	800290c <USART2_IRQHandler+0x180>
		{
			RxNumberChars = 0;
 80028d0:	4b43      	ldr	r3, [pc, #268]	@ (80029e0 <USART2_IRQHandler+0x254>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
			while(GetRxChar(&c))
 80028d6:	e009      	b.n	80028ec <USART2_IRQHandler+0x160>
			{
				RxBuf[RxNumberChars++] = c;
 80028d8:	4b41      	ldr	r3, [pc, #260]	@ (80029e0 <USART2_IRQHandler+0x254>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	b2d1      	uxtb	r1, r2
 80028e0:	4a3f      	ldr	r2, [pc, #252]	@ (80029e0 <USART2_IRQHandler+0x254>)
 80028e2:	7011      	strb	r1, [r2, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	79f9      	ldrb	r1, [r7, #7]
 80028e8:	4b3e      	ldr	r3, [pc, #248]	@ (80029e4 <USART2_IRQHandler+0x258>)
 80028ea:	5499      	strb	r1, [r3, r2]
			while(GetRxChar(&c))
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff20 	bl	8002734 <GetRxChar>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ee      	bne.n	80028d8 <USART2_IRQHandler+0x14c>
			}
			if(mUartDef.UartRxCallback != NULL)
 80028fa:	4b37      	ldr	r3, [pc, #220]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <USART2_IRQHandler+0x180>
			{
				(*mUartDef.UartRxCallback)(RxBuf, &RxNumberChars);
 8002902:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4936      	ldr	r1, [pc, #216]	@ (80029e0 <USART2_IRQHandler+0x254>)
 8002908:	4836      	ldr	r0, [pc, #216]	@ (80029e4 <USART2_IRQHandler+0x258>)
 800290a:	4798      	blx	r3
			}
		}
	}

	if(LL_USART_IsActiveFlag_TXE(THIS_UART) && LL_USART_IsEnabledIT_TXE(THIS_UART))
 800290c:	4831      	ldr	r0, [pc, #196]	@ (80029d4 <USART2_IRQHandler+0x248>)
 800290e:	f7ff fcdc 	bl	80022ca <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d038      	beq.n	800298a <USART2_IRQHandler+0x1fe>
 8002918:	482e      	ldr	r0, [pc, #184]	@ (80029d4 <USART2_IRQHandler+0x248>)
 800291a:	f7ff fe23 	bl	8002564 <LL_USART_IsEnabledIT_TXE_TXFNF>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d032      	beq.n	800298a <USART2_IRQHandler+0x1fe>
	{

	    if( tstore_ptr != tload_ptr ){    // check if we have data in the buffer
 8002924:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <USART2_IRQHandler+0x260>)
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <USART2_IRQHandler+0x264>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d019      	beq.n	8002964 <USART2_IRQHandler+0x1d8>
	        c = tx_buf[tload_ptr++];
 8002930:	4b2f      	ldr	r3, [pc, #188]	@ (80029f0 <USART2_IRQHandler+0x264>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	b291      	uxth	r1, r2
 8002938:	4a2d      	ldr	r2, [pc, #180]	@ (80029f0 <USART2_IRQHandler+0x264>)
 800293a:	8011      	strh	r1, [r2, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b2d      	ldr	r3, [pc, #180]	@ (80029f4 <USART2_IRQHandler+0x268>)
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	71fb      	strb	r3, [r7, #7]
	        if( tload_ptr > MAXTXBUFLEN - 1 ){
 8002944:	4b2a      	ldr	r3, [pc, #168]	@ (80029f0 <USART2_IRQHandler+0x264>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	2b7f      	cmp	r3, #127	@ 0x7f
 800294a:	d902      	bls.n	8002952 <USART2_IRQHandler+0x1c6>
	            tload_ptr = 0;
 800294c:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <USART2_IRQHandler+0x264>)
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]
	        }
			LL_USART_TransmitData8(THIS_UART, c);
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	4619      	mov	r1, r3
 8002956:	481f      	ldr	r0, [pc, #124]	@ (80029d4 <USART2_IRQHandler+0x248>)
 8002958:	f7ff fe34 	bl	80025c4 <LL_USART_TransmitData8>
	        tx_restart = 0;
 800295c:	4b26      	ldr	r3, [pc, #152]	@ (80029f8 <USART2_IRQHandler+0x26c>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e012      	b.n	800298a <USART2_IRQHandler+0x1fe>
	    }
	    else
	    {
	        // reset pointers
			LL_USART_DisableIT_TXE(THIS_UART);
 8002964:	481b      	ldr	r0, [pc, #108]	@ (80029d4 <USART2_IRQHandler+0x248>)
 8002966:	f7ff fdb6 	bl	80024d6 <LL_USART_DisableIT_TXE_TXFNF>
	        tx_restart = 1;
 800296a:	4b23      	ldr	r3, [pc, #140]	@ (80029f8 <USART2_IRQHandler+0x26c>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]

			if(mUartDef.UartTxCallback != NULL)
 8002970:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <USART2_IRQHandler+0x1f2>
			{
				(*mUartDef.UartTxCallback)();
 8002978:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <USART2_IRQHandler+0x24c>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4798      	blx	r3
			}

			LL_USART_ClearFlag_TC(THIS_UART);
 800297e:	4815      	ldr	r0, [pc, #84]	@ (80029d4 <USART2_IRQHandler+0x248>)
 8002980:	f7ff fcf7 	bl	8002372 <LL_USART_ClearFlag_TC>
			LL_USART_EnableIT_TC(THIS_UART);
 8002984:	4813      	ldr	r0, [pc, #76]	@ (80029d4 <USART2_IRQHandler+0x248>)
 8002986:	f7ff fd43 	bl	8002410 <LL_USART_EnableIT_TC>
	    }
	}


	if(LL_USART_IsActiveFlag_TC(THIS_UART))
 800298a:	4812      	ldr	r0, [pc, #72]	@ (80029d4 <USART2_IRQHandler+0x248>)
 800298c:	f7ff fc8a 	bl	80022a4 <LL_USART_IsActiveFlag_TC>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <USART2_IRQHandler+0x21a>
	{
		HAL_GPIO_WritePin(CAB_DIR_PORT, CAB_DIR_PIN, GPIO_PIN_RESET);
 8002996:	2200      	movs	r2, #0
 8002998:	2110      	movs	r1, #16
 800299a:	4818      	ldr	r0, [pc, #96]	@ (80029fc <USART2_IRQHandler+0x270>)
 800299c:	f00b f934 	bl	800dc08 <HAL_GPIO_WritePin>
		LL_USART_DisableIT_TC(THIS_UART);
 80029a0:	480c      	ldr	r0, [pc, #48]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80029a2:	f7ff fd77 	bl	8002494 <LL_USART_DisableIT_TC>

//		LL_USART_DisableIT_TXE(THIS_UART);
//        tx_restart = 1;
	}

	LL_USART_ClearFlag_PE(THIS_UART);
 80029a6:	480b      	ldr	r0, [pc, #44]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80029a8:	f7ff fca2 	bl	80022f0 <LL_USART_ClearFlag_PE>
	LL_USART_ClearFlag_FE(THIS_UART);
 80029ac:	4809      	ldr	r0, [pc, #36]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80029ae:	f7ff fcac 	bl	800230a <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(THIS_UART);
 80029b2:	4808      	ldr	r0, [pc, #32]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80029b4:	f7ff fcb6 	bl	8002324 <LL_USART_ClearFlag_NE>
	LL_USART_ClearFlag_ORE(THIS_UART);
 80029b8:	4806      	ldr	r0, [pc, #24]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80029ba:	f7ff fcc0 	bl	800233e <LL_USART_ClearFlag_ORE>
	LL_USART_ClearFlag_IDLE(THIS_UART);
 80029be:	4805      	ldr	r0, [pc, #20]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80029c0:	f7ff fcca 	bl	8002358 <LL_USART_ClearFlag_IDLE>
	LL_USART_ClearFlag_TC(THIS_UART);
 80029c4:	4803      	ldr	r0, [pc, #12]	@ (80029d4 <USART2_IRQHandler+0x248>)
 80029c6:	f7ff fcd4 	bl	8002372 <LL_USART_ClearFlag_TC>
//	LL_USART_ClearFlag_CM(THIS_UART);
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40004400 	.word	0x40004400
 80029d8:	20002c9c 	.word	0x20002c9c
 80029dc:	20002d64 	.word	0x20002d64
 80029e0:	20002cd8 	.word	0x20002cd8
 80029e4:	20002cb8 	.word	0x20002cb8
 80029e8:	20002ce0 	.word	0x20002ce0
 80029ec:	20002cda 	.word	0x20002cda
 80029f0:	20002cdc 	.word	0x20002cdc
 80029f4:	20002ce4 	.word	0x20002ce4
 80029f8:	20002cd9 	.word	0x20002cd9
 80029fc:	42020c00 	.word	0x42020c00

08002a00 <Uart2_SendChar>:
* DESCRIPTION:	Put a character in the send FIFO and make the transmit
* 				interrupt is on
*
*********************************************************************/
static void Uart2_SendChar(const char c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
	int j=0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(CAB_DIR_PORT, CAB_DIR_PIN, GPIO_PIN_SET);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2110      	movs	r1, #16
 8002a12:	483c      	ldr	r0, [pc, #240]	@ (8002b04 <Uart2_SendChar+0x104>)
 8002a14:	f00b f8f8 	bl	800dc08 <HAL_GPIO_WritePin>

	// check if we on the buffer wrap
    while((tstore_ptr+1) == tload_ptr)
 8002a18:	e002      	b.n	8002a20 <Uart2_SendChar+0x20>
    {
        j++;// allow bytes to get clear
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
    while((tstore_ptr+1) == tload_ptr)
 8002a20:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	4a39      	ldr	r2, [pc, #228]	@ (8002b0c <Uart2_SendChar+0x10c>)
 8002a28:	8812      	ldrh	r2, [r2, #0]
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d0f5      	beq.n	8002a1a <Uart2_SendChar+0x1a>
    }
    while(((tstore_ptr+1) == MAXTXBUFLEN) && (tload_ptr==0))
 8002a2e:	e002      	b.n	8002a36 <Uart2_SendChar+0x36>
    {
        j++;// allow bytes to get clear
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3301      	adds	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
    while(((tstore_ptr+1) == MAXTXBUFLEN) && (tload_ptr==0))
 8002a36:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a3c:	d103      	bne.n	8002a46 <Uart2_SendChar+0x46>
 8002a3e:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <Uart2_SendChar+0x10c>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f4      	beq.n	8002a30 <Uart2_SendChar+0x30>
    }
    if( tstore_ptr < tload_ptr ){
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <Uart2_SendChar+0x10c>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d219      	bcs.n	8002a86 <Uart2_SendChar+0x86>
        if( tload_ptr - tstore_ptr > OVERFLOW ){
 8002a52:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <Uart2_SendChar+0x10c>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	dd43      	ble.n	8002aea <Uart2_SendChar+0xea>
            tx_buf[tstore_ptr++] = c;
 8002a62:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	b291      	uxth	r1, r2
 8002a6a:	4a27      	ldr	r2, [pc, #156]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a6c:	8011      	strh	r1, [r2, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4a27      	ldr	r2, [pc, #156]	@ (8002b10 <Uart2_SendChar+0x110>)
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	5453      	strb	r3, [r2, r1]
            if( tstore_ptr > MAXTXBUFLEN - 1 ){
 8002a76:	4b24      	ldr	r3, [pc, #144]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a7c:	d935      	bls.n	8002aea <Uart2_SendChar+0xea>
                tstore_ptr = 0;
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	e031      	b.n	8002aea <Uart2_SendChar+0xea>
            }
        }
    }else{
        if( tstore_ptr > tload_ptr ){
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <Uart2_SendChar+0x10c>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d91a      	bls.n	8002ac8 <Uart2_SendChar+0xc8>
            if( (( tload_ptr - tstore_ptr ) + MAXTXBUFLEN ) > OVERFLOW ){
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <Uart2_SendChar+0x10c>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f113 0f7e 	cmn.w	r3, #126	@ 0x7e
 8002aa2:	db22      	blt.n	8002aea <Uart2_SendChar+0xea>
                tx_buf[tstore_ptr++] = c;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	b291      	uxth	r1, r2
 8002aac:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002aae:	8011      	strh	r1, [r2, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4a17      	ldr	r2, [pc, #92]	@ (8002b10 <Uart2_SendChar+0x110>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	5453      	strb	r3, [r2, r1]
                if( tstore_ptr > MAXTXBUFLEN - 1 ){
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002abe:	d914      	bls.n	8002aea <Uart2_SendChar+0xea>
                    tstore_ptr = 0;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	e010      	b.n	8002aea <Uart2_SendChar+0xea>
                }
            }
        }else{
            tx_buf[tstore_ptr++] = c;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	b291      	uxth	r1, r2
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002ad2:	8011      	strh	r1, [r2, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8002b10 <Uart2_SendChar+0x110>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	5453      	strb	r3, [r2, r1]
            if( tstore_ptr > MAXTXBUFLEN - 1 ){
 8002adc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ae2:	d902      	bls.n	8002aea <Uart2_SendChar+0xea>
                tstore_ptr = 0;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <Uart2_SendChar+0x108>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    // Start the interrupt
    if( tx_restart )
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <Uart2_SendChar+0x114>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <Uart2_SendChar+0xfa>
    {
		LL_USART_EnableIT_TXE(THIS_UART);
 8002af2:	4809      	ldr	r0, [pc, #36]	@ (8002b18 <Uart2_SendChar+0x118>)
 8002af4:	f7ff fcad 	bl	8002452 <LL_USART_EnableIT_TXE_TXFNF>
//		LL_USART_EnableIT_TC(THIS_UART);
    }
    return;
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
}
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	42020c00 	.word	0x42020c00
 8002b08:	20002cda 	.word	0x20002cda
 8002b0c:	20002cdc 	.word	0x20002cdc
 8002b10:	20002ce4 	.word	0x20002ce4
 8002b14:	20002cd9 	.word	0x20002cd9
 8002b18:	40004400 	.word	0x40004400

08002b1c <Uart2_SendPacket>:
* DESCRIPTION:	Sends a message by looping through the buffer for the
* 				number of bytes using the Uart_SendChar function
*
*********************************************************************/
void Uart2_SendPacket(uint8_t *data, uint8_t size)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
    int i = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]

    // sanity check
    if(size > MAXTXBUFLEN)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	2b80      	cmp	r3, #128	@ 0x80
 8002b30:	d811      	bhi.n	8002b56 <Uart2_SendPacket+0x3a>
    {
        return;
    }

    // Loop through the buffer
    for( i = 0; i < size; i++ )
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e009      	b.n	8002b4c <Uart2_SendPacket+0x30>
    {
        Uart2_SendChar(data[i]);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff5d 	bl	8002a00 <Uart2_SendChar>
    for( i = 0; i < size; i++ )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	dbf1      	blt.n	8002b38 <Uart2_SendPacket+0x1c>
 8002b54:	e000      	b.n	8002b58 <Uart2_SendPacket+0x3c>
        return;
 8002b56:	bf00      	nop
    }
}
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <Uart2_SendToken>:
*
* RESTRICTIONS:		This does not check for transmitter not busy
*
**********************************************************************///
void Uart2_SendToken(uint8_t token)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CAB_DIR_PORT, CAB_DIR_PIN, GPIO_PIN_SET);
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	4811      	ldr	r0, [pc, #68]	@ (8002bb4 <Uart2_SendToken+0x54>)
 8002b70:	f00b f84a 	bl	800dc08 <HAL_GPIO_WritePin>
	if(mUartDef.bits == U_DATAWIDTH_9B)
 8002b74:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <Uart2_SendToken+0x58>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7c:	d10a      	bne.n	8002b94 <Uart2_SendToken+0x34>
	{
		LL_USART_TransmitData9(THIS_UART, token | 0x100);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480b      	ldr	r0, [pc, #44]	@ (8002bbc <Uart2_SendToken+0x5c>)
 8002b8e:	f7ff fd28 	bl	80025e2 <LL_USART_TransmitData9>
 8002b92:	e004      	b.n	8002b9e <Uart2_SendToken+0x3e>
	}
	else
	{
		LL_USART_TransmitData8(THIS_UART, token);
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4619      	mov	r1, r3
 8002b98:	4808      	ldr	r0, [pc, #32]	@ (8002bbc <Uart2_SendToken+0x5c>)
 8002b9a:	f7ff fd13 	bl	80025c4 <LL_USART_TransmitData8>
	}

    if( tx_restart )
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <Uart2_SendToken+0x60>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <Uart2_SendToken+0x4c>
    {
		LL_USART_EnableIT_TXE(THIS_UART);
 8002ba6:	4805      	ldr	r0, [pc, #20]	@ (8002bbc <Uart2_SendToken+0x5c>)
 8002ba8:	f7ff fc53 	bl	8002452 <LL_USART_EnableIT_TXE_TXFNF>
//		LL_USART_EnableIT_TC(THIS_UART);
    }
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	42020c00 	.word	0x42020c00
 8002bb8:	20002c9c 	.word	0x20002c9c
 8002bbc:	40004400 	.word	0x40004400
 8002bc0:	20002cd9 	.word	0x20002cd9

08002bc4 <InitCabCommunication>:
*
* RESTRICTIONS:
*
**********************************************************************/
void InitCabCommunication(unsigned char Ports)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	UART_DEF uart_def;

	uart_def.mode = U_CHAR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	723b      	strb	r3, [r7, #8]
	uart_def.bits = U_DATAWIDTH_8B;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
	uart_def.parity = U_PARITY_NONE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
	uart_def.stop_bits = U_STOPBITS_2;
 8002bda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bde:	617b      	str	r3, [r7, #20]
	uart_def.baud = 9600;
 8002be0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002be4:	61bb      	str	r3, [r7, #24]
	uart_def.UartRxCallback = RxCabResponse;
 8002be6:	4b68      	ldr	r3, [pc, #416]	@ (8002d88 <InitCabCommunication+0x1c4>)
 8002be8:	61fb      	str	r3, [r7, #28]
	uart_def.UartTxCallback = TxCabResponse;
 8002bea:	4b68      	ldr	r3, [pc, #416]	@ (8002d8c <InitCabCommunication+0x1c8>)
 8002bec:	623b      	str	r3, [r7, #32]
	if(Uart2_Init(&uart_def) != HAL_OK)
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fd06 	bl	8002604 <Uart2_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <InitCabCommunication+0x3e>
	{
		Error_Handler();
 8002bfe:	f008 f9d9 	bl	800afb4 <Error_Handler>
	}


	memset(abCabActiveQueue, 0, MAX_CABS);
 8002c02:	220a      	movs	r2, #10
 8002c04:	2100      	movs	r1, #0
 8002c06:	4862      	ldr	r0, [pc, #392]	@ (8002d90 <InitCabCommunication+0x1cc>)
 8002c08:	f023 fb0a 	bl	8026220 <memset>

	for(i = 0; i < MAX_CABS - 1; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c12:	e0a0      	b.n	8002d56 <InitCabCommunication+0x192>
	{
		abCabInactiveQueue[i] = i + 1;
 8002c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c18:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c1c:	3201      	adds	r2, #1
 8002c1e:	b2d1      	uxtb	r1, r2
 8002c20:	4a5c      	ldr	r2, [pc, #368]	@ (8002d94 <InitCabCommunication+0x1d0>)
 8002c22:	54d1      	strb	r1, [r2, r3]

		memset(CabBus, 0, sizeof(CabBus));
 8002c24:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8002c28:	2100      	movs	r1, #0
 8002c2a:	485b      	ldr	r0, [pc, #364]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002c2c:	f023 faf8 	bl	8026220 <memset>

		CabBus[i].TextQuadrant1 = 0;
 8002c30:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c34:	4958      	ldr	r1, [pc, #352]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002c44:	7913      	ldrb	r3, [r2, #4]
 8002c46:	f36f 0341 	bfc	r3, #1, #1
 8002c4a:	7113      	strb	r3, [r2, #4]
		CabBus[i].TextQuadrant2 = 0;
 8002c4c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c50:	4951      	ldr	r1, [pc, #324]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002c60:	7913      	ldrb	r3, [r2, #4]
 8002c62:	f36f 0382 	bfc	r3, #2, #1
 8002c66:	7113      	strb	r3, [r2, #4]
		CabBus[i].TextQuadrant3 = 0;
 8002c68:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c6c:	494a      	ldr	r1, [pc, #296]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002c7c:	7913      	ldrb	r3, [r2, #4]
 8002c7e:	f36f 03c3 	bfc	r3, #3, #1
 8002c82:	7113      	strb	r3, [r2, #4]
		CabBus[i].TextQuadrant4 = 0;
 8002c84:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c88:	4943      	ldr	r1, [pc, #268]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002c98:	7913      	ldrb	r3, [r2, #4]
 8002c9a:	f36f 1304 	bfc	r3, #4, #1
 8002c9e:	7113      	strb	r3, [r2, #4]
		CabBus[i].CursonOn = 0;
 8002ca0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002ca4:	493c      	ldr	r1, [pc, #240]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002cb4:	7913      	ldrb	r3, [r2, #4]
 8002cb6:	f36f 0300 	bfc	r3, #0, #1
 8002cba:	7113      	strb	r3, [r2, #4]
		CabBus[i].NewCab = 0;
 8002cbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002cc0:	4935      	ldr	r1, [pc, #212]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002cd0:	7913      	ldrb	r3, [r2, #4]
 8002cd2:	f36f 1345 	bfc	r3, #5, #1
 8002cd6:	7113      	strb	r3, [r2, #4]
		CabBus[i].VersionReturn = 0;
 8002cd8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002cdc:	492e      	ldr	r1, [pc, #184]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002cec:	7913      	ldrb	r3, [r2, #4]
 8002cee:	f36f 1386 	bfc	r3, #6, #1
 8002cf2:	7113      	strb	r3, [r2, #4]

		CabBus[i].nQueue1 = 0;
 8002cf4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002cf8:	4927      	ldr	r1, [pc, #156]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3326      	adds	r3, #38	@ 0x26
 8002d06:	2200      	movs	r2, #0
 8002d08:	801a      	strh	r2, [r3, #0]
		CabBus[i].nQueue2 = 0;
 8002d0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002d0e:	4922      	ldr	r1, [pc, #136]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	3328      	adds	r3, #40	@ 0x28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	801a      	strh	r2, [r3, #0]
		CabBus[i].nQueue3 = 0;
 8002d20:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002d24:	491c      	ldr	r1, [pc, #112]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	332a      	adds	r3, #42	@ 0x2a
 8002d32:	2200      	movs	r2, #0
 8002d34:	801a      	strh	r2, [r3, #0]
		CabBus[i].nQueue4 = 0;
 8002d36:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002d3a:	4917      	ldr	r1, [pc, #92]	@ (8002d98 <InitCabCommunication+0x1d4>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	332c      	adds	r3, #44	@ 0x2c
 8002d48:	2200      	movs	r2, #0
 8002d4a:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < MAX_CABS - 1; i++)
 8002d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d50:	3301      	adds	r3, #1
 8002d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	f67f af5a 	bls.w	8002c14 <InitCabCommunication+0x50>
	}

	GotCabResponse = 0;
 8002d60:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <InitCabCommunication+0x1d8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
	CabRxIndex = 0;
 8002d66:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <InitCabCommunication+0x1dc>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]

	bCabIndex = MAX_CABS;
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <InitCabCommunication+0x1e0>)
 8002d6e:	220a      	movs	r2, #10
 8002d70:	701a      	strb	r2, [r3, #0]
	bInactiveCabIndex = 0;
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <InitCabCommunication+0x1e4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
	bCab = 1;					// anything non-zero
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <InitCabCommunication+0x1e8>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	@ 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	0800395d 	.word	0x0800395d
 8002d8c:	080039a9 	.word	0x080039a9
 8002d90:	20002de4 	.word	0x20002de4
 8002d94:	20002df0 	.word	0x20002df0
 8002d98:	20002dfc 	.word	0x20002dfc
 8002d9c:	20003035 	.word	0x20003035
 8002da0:	20003036 	.word	0x20003036
 8002da4:	20002dfa 	.word	0x20002dfa
 8002da8:	20002dfb 	.word	0x20002dfb
 8002dac:	2000303a 	.word	0x2000303a

08002db0 <SelectNextCab>:


void SelectNextCab(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0

	if(bCab == 0)
 8002db4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e28 <SelectNextCab+0x78>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11b      	bne.n	8002df4 <SelectNextCab+0x44>
	{
		bInactiveCabIndex++;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <SelectNextCab+0x7c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <SelectNextCab+0x7c>)
 8002dc6:	701a      	strb	r2, [r3, #0]
		bCab = abCabInactiveQueue[bInactiveCabIndex];
 8002dc8:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <SelectNextCab+0x7c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <SelectNextCab+0x80>)
 8002dd0:	5c9a      	ldrb	r2, [r3, r2]
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <SelectNextCab+0x78>)
 8002dd4:	701a      	strb	r2, [r3, #0]
		if(bCab == 0)
 8002dd6:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <SelectNextCab+0x78>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11e      	bne.n	8002e1c <SelectNextCab+0x6c>
		{
			bInactiveCabIndex = 0;
 8002dde:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <SelectNextCab+0x7c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
			bCab = abCabInactiveQueue[bInactiveCabIndex];
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <SelectNextCab+0x7c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <SelectNextCab+0x80>)
 8002dec:	5c9a      	ldrb	r2, [r3, r2]
 8002dee:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <SelectNextCab+0x78>)
 8002df0:	701a      	strb	r2, [r3, #0]
			bCabIndex = 0;
		}

		bCab = abCabActiveQueue[bCabIndex];
	}
}
 8002df2:	e013      	b.n	8002e1c <SelectNextCab+0x6c>
		bCabIndex++;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <SelectNextCab+0x84>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <SelectNextCab+0x84>)
 8002dfe:	701a      	strb	r2, [r3, #0]
		if(bCabIndex >= MAX_CABS)
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <SelectNextCab+0x84>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d902      	bls.n	8002e0e <SelectNextCab+0x5e>
			bCabIndex = 0;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <SelectNextCab+0x84>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
		bCab = abCabActiveQueue[bCabIndex];
 8002e0e:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <SelectNextCab+0x84>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <SelectNextCab+0x88>)
 8002e16:	5c9a      	ldrb	r2, [r3, r2]
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <SelectNextCab+0x78>)
 8002e1a:	701a      	strb	r2, [r3, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	2000303a 	.word	0x2000303a
 8002e2c:	20002dfb 	.word	0x20002dfb
 8002e30:	20002df0 	.word	0x20002df0
 8002e34:	20002dfa 	.word	0x20002dfa
 8002e38:	20002de4 	.word	0x20002de4

08002e3c <MakeCabActive>:


void MakeCabActive(unsigned char bCab)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
	unsigned char i;

	// take it out of the inactive list
	for(i = bInactiveCabIndex; i < MAX_CABS - 1; i++)
 8002e46:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <MakeCabActive+0x6c>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e009      	b.n	8002e62 <MakeCabActive+0x26>
	{
		abCabInactiveQueue[i] = abCabInactiveQueue[i + 1];
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	4915      	ldr	r1, [pc, #84]	@ (8002eac <MakeCabActive+0x70>)
 8002e56:	5c89      	ldrb	r1, [r1, r2]
 8002e58:	4a14      	ldr	r2, [pc, #80]	@ (8002eac <MakeCabActive+0x70>)
 8002e5a:	54d1      	strb	r1, [r2, r3]
	for(i = bInactiveCabIndex; i < MAX_CABS - 1; i++)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d9f2      	bls.n	8002e4e <MakeCabActive+0x12>
	}
	abCabInactiveQueue[i] = 0;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	4a10      	ldr	r2, [pc, #64]	@ (8002eac <MakeCabActive+0x70>)
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	54d1      	strb	r1, [r2, r3]

	// put it in the active list
	//abCabActiveQueue[bCabIndex] = bCab;
	for(i = 0; i < MAX_CABS; i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e00c      	b.n	8002e90 <MakeCabActive+0x54>
	{
		if(abCabActiveQueue[i] == 0)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <MakeCabActive+0x74>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <MakeCabActive+0x4e>
		{
			abCabActiveQueue[i] = bCab;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	490b      	ldr	r1, [pc, #44]	@ (8002eb0 <MakeCabActive+0x74>)
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	54ca      	strb	r2, [r1, r3]
			break;
 8002e88:	e005      	b.n	8002e96 <MakeCabActive+0x5a>
	for(i = 0; i < MAX_CABS; i++)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	d9ef      	bls.n	8002e76 <MakeCabActive+0x3a>
		}
	}
	// reset to beginning of list
	bCabIndex = 0;
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <MakeCabActive+0x78>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]

	//bCab = abCabActiveQueue[bCabIndex];
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	20002dfb 	.word	0x20002dfb
 8002eac:	20002df0 	.word	0x20002df0
 8002eb0:	20002de4 	.word	0x20002de4
 8002eb4:	20002dfa 	.word	0x20002dfa

08002eb8 <MakeCabInactive>:
	//bCab = abCabActiveQueue[bCabIndex];
}
#endif

void MakeCabInactive(unsigned char bCab)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	unsigned char i;

	// cab has timed-out, remove from active list
	for(i = bCabIndex; i < MAX_CABS - 1; i++)
 8002ec2:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <MakeCabInactive+0x68>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e009      	b.n	8002ede <MakeCabInactive+0x26>
	{
		abCabActiveQueue[i] = abCabActiveQueue[i + 1];
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	4914      	ldr	r1, [pc, #80]	@ (8002f24 <MakeCabInactive+0x6c>)
 8002ed2:	5c89      	ldrb	r1, [r1, r2]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	@ (8002f24 <MakeCabInactive+0x6c>)
 8002ed6:	54d1      	strb	r1, [r2, r3]
	for(i = bCabIndex; i < MAX_CABS - 1; i++)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	3301      	adds	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d9f2      	bls.n	8002eca <MakeCabInactive+0x12>
	}
	abCabActiveQueue[i] = 0;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f24 <MakeCabInactive+0x6c>)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	54d1      	strb	r1, [r2, r3]

	// put it in the inactive list
	for(i = 0; i < MAX_CABS; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	e007      	b.n	8002f02 <MakeCabInactive+0x4a>
	{
		if(abCabInactiveQueue[i] == 0)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f28 <MakeCabInactive+0x70>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <MakeCabInactive+0x52>
	for(i = 0; i < MAX_CABS; i++)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	3301      	adds	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d9f4      	bls.n	8002ef2 <MakeCabInactive+0x3a>
 8002f08:	e000      	b.n	8002f0c <MakeCabInactive+0x54>
		{
			break;
 8002f0a:	bf00      	nop
		}
	}
	abCabInactiveQueue[i] = bCab;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	4906      	ldr	r1, [pc, #24]	@ (8002f28 <MakeCabInactive+0x70>)
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	54ca      	strb	r2, [r1, r3]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	20002dfa 	.word	0x20002dfa
 8002f24:	20002de4 	.word	0x20002de4
 8002f28:	20002df0 	.word	0x20002df0

08002f2c <IsCabActive>:


int IsCabActive(unsigned char bCab)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
	unsigned char i;

	for(i = 0; i < MAX_CABS; i++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	e00a      	b.n	8002f52 <IsCabActive+0x26>
	{
		if(abCabActiveQueue[i] == bCab)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <IsCabActive+0x3c>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	79fa      	ldrb	r2, [r7, #7]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d101      	bne.n	8002f4c <IsCabActive+0x20>
		{
			return 1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e006      	b.n	8002f5a <IsCabActive+0x2e>
	for(i = 0; i < MAX_CABS; i++)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b09      	cmp	r3, #9
 8002f56:	d9f1      	bls.n	8002f3c <IsCabActive+0x10>
		}
	}
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20002de4 	.word	0x20002de4

08002f6c <HandleNCECabCommunication>:
*
* RESTRICTIONS:
*
**********************************************************************/
void HandleNCECabCommunication(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
	//byte i;
	static int iPollTime;
	//static byte bNewCab;
	unsigned char poll;

	switch(iCabBusState)
 8002f72:	4ba3      	ldr	r3, [pc, #652]	@ (8003200 <HandleNCECabCommunication+0x294>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	f200 8133 	bhi.w	80031e2 <HandleNCECabCommunication+0x276>
 8002f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <HandleNCECabCommunication+0x18>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002f99 	.word	0x08002f99
 8002f88:	08002fb9 	.word	0x08002fb9
 8002f8c:	080031af 	.word	0x080031af
 8002f90:	08003093 	.word	0x08003093
 8002f94:	0800312f 	.word	0x0800312f
	{
	 	case CAB_BUS_STARTUP:
			bCabIndex = 0;
 8002f98:	4b9a      	ldr	r3, [pc, #616]	@ (8003204 <HandleNCECabCommunication+0x298>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
			bInactiveCabIndex = 0;
 8002f9e:	4b9a      	ldr	r3, [pc, #616]	@ (8003208 <HandleNCECabCommunication+0x29c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
			iPollTime = 1;
 8002fa4:	4b99      	ldr	r3, [pc, #612]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
			bCab = 0;
 8002faa:	4b99      	ldr	r3, [pc, #612]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
			iCabBusState = CAB_BUS_POLLING;
 8002fb0:	4b93      	ldr	r3, [pc, #588]	@ (8003200 <HandleNCECabCommunication+0x294>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
	 	break;
 8002fb6:	e11f      	b.n	80031f8 <HandleNCECabCommunication+0x28c>

	 	case CAB_BUS_POLLING:
			if(--iPollTime == 0)
 8002fb8:	4b94      	ldr	r3, [pc, #592]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	4a93      	ldr	r2, [pc, #588]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b92      	ldr	r3, [pc, #584]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 810f 	bne.w	80031ea <HandleNCECabCommunication+0x27e>
			{
				poll = bCab + 0x80;
 8002fcc:	4b90      	ldr	r3, [pc, #576]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	3b80      	subs	r3, #128	@ 0x80
 8002fd2:	71fb      	strb	r3, [r7, #7]
				Uart2_SendToken(poll);
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fdc2 	bl	8002b60 <Uart2_SendToken>
				GotCabResponse = 0;
 8002fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8003214 <HandleNCECabCommunication+0x2a8>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
				CabRxIndex = 0;
 8002fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8003218 <HandleNCECabCommunication+0x2ac>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]

				if(bCab == 0)
 8002fe8:	4b89      	ldr	r3, [pc, #548]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d123      	bne.n	8003038 <HandleNCECabCommunication+0xcc>
				{
					// Cab is zero
					if(HandleCabOutput(bCab))
 8002ff0:	4b87      	ldr	r3, [pc, #540]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fb31 	bl	800365c <HandleCabOutput>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HandleNCECabCommunication+0x9c>
					{
						iCabBusState = CAB_BUS_TRANSMIT_WAIT;
 8003000:	4b7f      	ldr	r3, [pc, #508]	@ (8003200 <HandleNCECabCommunication+0x294>)
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
						iPollTime = CAB_POLL_TIME;
						iCabBusState = CAB_BUS_EXSISTING_CAB;
					}
				}
			}
	 	break;
 8003006:	e0f0      	b.n	80031ea <HandleNCECabCommunication+0x27e>
						SelectNextCab();
 8003008:	f7ff fed2 	bl	8002db0 <SelectNextCab>
						CabBus[bCab].NewCab = 1;
 800300c:	4b80      	ldr	r3, [pc, #512]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	4a82      	ldr	r2, [pc, #520]	@ (800321c <HandleNCECabCommunication+0x2b0>)
 8003014:	460b      	mov	r3, r1
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a5b      	subs	r3, r3, r1
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003022:	7913      	ldrb	r3, [r2, #4]
 8003024:	f043 0320 	orr.w	r3, r3, #32
 8003028:	7113      	strb	r3, [r2, #4]
						iPollTime = CAB_POLL_TIME;
 800302a:	4b78      	ldr	r3, [pc, #480]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 800302c:	2205      	movs	r2, #5
 800302e:	601a      	str	r2, [r3, #0]
						iCabBusState = CAB_BUS_POLLING;
 8003030:	4b73      	ldr	r3, [pc, #460]	@ (8003200 <HandleNCECabCommunication+0x294>)
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
	 	break;
 8003036:	e0d8      	b.n	80031ea <HandleNCECabCommunication+0x27e>
					if(CabBus[bCab].NewCab)
 8003038:	4b75      	ldr	r3, [pc, #468]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	4a77      	ldr	r2, [pc, #476]	@ (800321c <HandleNCECabCommunication+0x2b0>)
 8003040:	460b      	mov	r3, r1
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a5b      	subs	r3, r3, r1
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	3330      	adds	r3, #48	@ 0x30
 800304c:	791b      	ldrb	r3, [r3, #4]
 800304e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HandleNCECabCommunication+0x118>
						CabBus[bCab].NewCab = 0;
 8003058:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4a6f      	ldr	r2, [pc, #444]	@ (800321c <HandleNCECabCommunication+0x2b0>)
 8003060:	460b      	mov	r3, r1
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1a5b      	subs	r3, r3, r1
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800306e:	7913      	ldrb	r3, [r2, #4]
 8003070:	f36f 1345 	bfc	r3, #5, #1
 8003074:	7113      	strb	r3, [r2, #4]
						iPollTime = CAB_POLL_TIME;
 8003076:	4b65      	ldr	r3, [pc, #404]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8003078:	2205      	movs	r2, #5
 800307a:	601a      	str	r2, [r3, #0]
						iCabBusState = CAB_BUS_NEW_CAB;
 800307c:	4b60      	ldr	r3, [pc, #384]	@ (8003200 <HandleNCECabCommunication+0x294>)
 800307e:	2204      	movs	r2, #4
 8003080:	701a      	strb	r2, [r3, #0]
	 	break;
 8003082:	e0b2      	b.n	80031ea <HandleNCECabCommunication+0x27e>
						iPollTime = CAB_POLL_TIME;
 8003084:	4b61      	ldr	r3, [pc, #388]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8003086:	2205      	movs	r2, #5
 8003088:	601a      	str	r2, [r3, #0]
						iCabBusState = CAB_BUS_EXSISTING_CAB;
 800308a:	4b5d      	ldr	r3, [pc, #372]	@ (8003200 <HandleNCECabCommunication+0x294>)
 800308c:	2203      	movs	r2, #3
 800308e:	701a      	strb	r2, [r3, #0]
	 	break;
 8003090:	e0ab      	b.n	80031ea <HandleNCECabCommunication+0x27e>

	    case CAB_BUS_EXSISTING_CAB:
			if(GotCabResponse)
 8003092:	4b60      	ldr	r3, [pc, #384]	@ (8003214 <HandleNCECabCommunication+0x2a8>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d023      	beq.n	80030e2 <HandleNCECabCommunication+0x176>
			{
				GotCabResponse = 0 ;
 800309a:	4b5e      	ldr	r3, [pc, #376]	@ (8003214 <HandleNCECabCommunication+0x2a8>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]

		    	// this cab responded - queue a 'cab' message
				HandleCabResponse(bCab);
 80030a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f8c1 	bl	800322c <HandleCabResponse>


				if(HandleCabOutput(bCab))
 80030aa:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fad4 	bl	800365c <HandleCabOutput>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HandleNCECabCommunication+0x156>
				{
					iCabBusState = CAB_BUS_TRANSMIT_WAIT;
 80030ba:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <HandleNCECabCommunication+0x294>)
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
					bCab = abCabActiveQueue[bCabIndex];
					iPollTime = CAB_POLL_TIME;
					iCabBusState = CAB_BUS_POLLING;
				}
			}
	    break;
 80030c0:	e095      	b.n	80031ee <HandleNCECabCommunication+0x282>
					SelectNextCab();
 80030c2:	f7ff fe75 	bl	8002db0 <SelectNextCab>
					bCab = abCabActiveQueue[bCabIndex];
 80030c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003204 <HandleNCECabCommunication+0x298>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b54      	ldr	r3, [pc, #336]	@ (8003220 <HandleNCECabCommunication+0x2b4>)
 80030ce:	5c9a      	ldrb	r2, [r3, r2]
 80030d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 80030d2:	701a      	strb	r2, [r3, #0]
					iPollTime = CAB_POLL_TIME;
 80030d4:	4b4d      	ldr	r3, [pc, #308]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 80030d6:	2205      	movs	r2, #5
 80030d8:	601a      	str	r2, [r3, #0]
					iCabBusState = CAB_BUS_POLLING;
 80030da:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <HandleNCECabCommunication+0x294>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
	    break;
 80030e0:	e085      	b.n	80031ee <HandleNCECabCommunication+0x282>
				if(--iPollTime == 0)
 80030e2:	4b4a      	ldr	r3, [pc, #296]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	4a48      	ldr	r2, [pc, #288]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b47      	ldr	r3, [pc, #284]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d17c      	bne.n	80031ee <HandleNCECabCommunication+0x282>
					if(IsCabActive(bCab))
 80030f4:	4b46      	ldr	r3, [pc, #280]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff17 	bl	8002f2c <IsCabActive>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <HandleNCECabCommunication+0x1a2>
						MakeCabInactive(bCab);
 8003104:	4b42      	ldr	r3, [pc, #264]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fed5 	bl	8002eb8 <MakeCabInactive>
					SelectNextCab();
 800310e:	f7ff fe4f 	bl	8002db0 <SelectNextCab>
					bCab = abCabActiveQueue[bCabIndex];
 8003112:	4b3c      	ldr	r3, [pc, #240]	@ (8003204 <HandleNCECabCommunication+0x298>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <HandleNCECabCommunication+0x2b4>)
 800311a:	5c9a      	ldrb	r2, [r3, r2]
 800311c:	4b3c      	ldr	r3, [pc, #240]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 800311e:	701a      	strb	r2, [r3, #0]
					iPollTime = CAB_POLL_TIME;
 8003120:	4b3a      	ldr	r3, [pc, #232]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8003122:	2205      	movs	r2, #5
 8003124:	601a      	str	r2, [r3, #0]
					iCabBusState = CAB_BUS_POLLING;
 8003126:	4b36      	ldr	r3, [pc, #216]	@ (8003200 <HandleNCECabCommunication+0x294>)
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
	    break;
 800312c:	e05f      	b.n	80031ee <HandleNCECabCommunication+0x282>

	    case CAB_BUS_NEW_CAB:
		    if(GotCabResponse)
 800312e:	4b39      	ldr	r3, [pc, #228]	@ (8003214 <HandleNCECabCommunication+0x2a8>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d023      	beq.n	800317e <HandleNCECabCommunication+0x212>
			{
		    	GotCabResponse = 0 ;
 8003136:	4b37      	ldr	r3, [pc, #220]	@ (8003214 <HandleNCECabCommunication+0x2a8>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]

				// this cab responded - queue a 'cab' message
				HandleCabResponse(bCab);
 800313c:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f873 	bl	800322c <HandleCabResponse>

//				MakeCabActive(bCab);

				if(HandleCabOutput(bCab))
 8003146:	4b32      	ldr	r3, [pc, #200]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fa86 	bl	800365c <HandleCabOutput>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HandleNCECabCommunication+0x1f2>
				{
					//iCabBusState = CAB_BUS_TRANSMIT_DELAY;
					iCabBusState = CAB_BUS_TRANSMIT_WAIT;
 8003156:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <HandleNCECabCommunication+0x294>)
 8003158:	2202      	movs	r2, #2
 800315a:	701a      	strb	r2, [r3, #0]

					iPollTime = CAB_POLL_TIME;
					iCabBusState = CAB_BUS_POLLING;
				}
			}
	    break;
 800315c:	e049      	b.n	80031f2 <HandleNCECabCommunication+0x286>
					SelectNextCab();
 800315e:	f7ff fe27 	bl	8002db0 <SelectNextCab>
					bCab = abCabActiveQueue[bCabIndex];
 8003162:	4b28      	ldr	r3, [pc, #160]	@ (8003204 <HandleNCECabCommunication+0x298>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b2d      	ldr	r3, [pc, #180]	@ (8003220 <HandleNCECabCommunication+0x2b4>)
 800316a:	5c9a      	ldrb	r2, [r3, r2]
 800316c:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 800316e:	701a      	strb	r2, [r3, #0]
					iPollTime = CAB_POLL_TIME;
 8003170:	4b26      	ldr	r3, [pc, #152]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8003172:	2205      	movs	r2, #5
 8003174:	601a      	str	r2, [r3, #0]
					iCabBusState = CAB_BUS_POLLING;
 8003176:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <HandleNCECabCommunication+0x294>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
	    break;
 800317c:	e039      	b.n	80031f2 <HandleNCECabCommunication+0x286>
				if(--iPollTime == 0)
 800317e:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a21      	ldr	r2, [pc, #132]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d130      	bne.n	80031f2 <HandleNCECabCommunication+0x286>
					bCabIndex = 0;
 8003190:	4b1c      	ldr	r3, [pc, #112]	@ (8003204 <HandleNCECabCommunication+0x298>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
					bCab = 0;		// force a cab from the inactive queue
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <HandleNCECabCommunication+0x2a4>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
					SelectNextCab();
 800319c:	f7ff fe08 	bl	8002db0 <SelectNextCab>
					iPollTime = CAB_POLL_TIME;
 80031a0:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 80031a2:	2205      	movs	r2, #5
 80031a4:	601a      	str	r2, [r3, #0]
					iCabBusState = CAB_BUS_POLLING;
 80031a6:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <HandleNCECabCommunication+0x294>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
	    break;
 80031ac:	e021      	b.n	80031f2 <HandleNCECabCommunication+0x286>

	 	case CAB_BUS_TRANSMIT_WAIT:
	 		TxTimeout++;
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <HandleNCECabCommunication+0x2b8>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <HandleNCECabCommunication+0x2b8>)
 80031b8:	701a      	strb	r2, [r3, #0]
			if(TxComplete || TxTimeout > TX_TIMEOUT)
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HandleNCECabCommunication+0x2bc>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HandleNCECabCommunication+0x25e>
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <HandleNCECabCommunication+0x2b8>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b0a      	cmp	r3, #10
 80031c8:	d915      	bls.n	80031f6 <HandleNCECabCommunication+0x28a>
			{
				TxComplete = 0;
 80031ca:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HandleNCECabCommunication+0x2bc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]

				//bCab = abCabInactiveQueue[bInactiveCabIndex];
				SelectNextCab();
 80031d0:	f7ff fdee 	bl	8002db0 <SelectNextCab>

				iPollTime = CAB_POLL_TIME;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <HandleNCECabCommunication+0x2a0>)
 80031d6:	2205      	movs	r2, #5
 80031d8:	601a      	str	r2, [r3, #0]
				iCabBusState = CAB_BUS_POLLING;
 80031da:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HandleNCECabCommunication+0x294>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
			}
	 	break;
 80031e0:	e009      	b.n	80031f6 <HandleNCECabCommunication+0x28a>

	    default:
	    	iCabBusState = CAB_BUS_STARTUP;
 80031e2:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <HandleNCECabCommunication+0x294>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
	    break;
 80031e8:	e006      	b.n	80031f8 <HandleNCECabCommunication+0x28c>
	 	break;
 80031ea:	bf00      	nop
 80031ec:	e004      	b.n	80031f8 <HandleNCECabCommunication+0x28c>
	    break;
 80031ee:	bf00      	nop
 80031f0:	e002      	b.n	80031f8 <HandleNCECabCommunication+0x28c>
	    break;
 80031f2:	bf00      	nop
 80031f4:	e000      	b.n	80031f8 <HandleNCECabCommunication+0x28c>
	 	break;
 80031f6:	bf00      	nop
	}
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	2000302c 	.word	0x2000302c
 8003204:	20002dfa 	.word	0x20002dfa
 8003208:	20002dfb 	.word	0x20002dfb
 800320c:	2000303c 	.word	0x2000303c
 8003210:	2000303a 	.word	0x2000303a
 8003214:	20003035 	.word	0x20003035
 8003218:	20003036 	.word	0x20003036
 800321c:	20002dfc 	.word	0x20002dfc
 8003220:	20002de4 	.word	0x20002de4
 8003224:	20003038 	.word	0x20003038
 8003228:	20003037 	.word	0x20003037

0800322c <HandleCabResponse>:
*
* RESTRICTIONS:
*
**********************************************************************/
void HandleCabResponse(unsigned char bCab)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
	unsigned char Speed;
	unsigned char bCabType;
	short nEvent;

	// get response data
	if(CabBus[bCab].VersionReturn == 1)
 8003236:	79fa      	ldrb	r2, [r7, #7]
 8003238:	49b8      	ldr	r1, [pc, #736]	@ (800351c <HandleCabResponse+0x2f0>)
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	3330      	adds	r3, #48	@ 0x30
 8003246:	791b      	ldrb	r3, [r3, #4]
 8003248:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d141      	bne.n	80032d6 <HandleCabResponse+0xaa>
	{
		// This is a new cab, get a Virtual Cab (Context)
		bCabType = CabResponse[0];
 8003252:	4bb3      	ldr	r3, [pc, #716]	@ (8003520 <HandleCabResponse+0x2f4>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	737b      	strb	r3, [r7, #13]
		if(bCabType != CabBus[bCab].bCabType)
 8003258:	79fa      	ldrb	r2, [r7, #7]
 800325a:	49b0      	ldr	r1, [pc, #704]	@ (800351c <HandleCabResponse+0x2f0>)
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	332e      	adds	r3, #46	@ 0x2e
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	7b7a      	ldrb	r2, [r7, #13]
 800326c:	429a      	cmp	r2, r3
 800326e:	d024      	beq.n	80032ba <HandleCabResponse+0x8e>
		{
			CabBus[bCab].bCabType = bCabType;
 8003270:	79fa      	ldrb	r2, [r7, #7]
 8003272:	49aa      	ldr	r1, [pc, #680]	@ (800351c <HandleCabResponse+0x2f0>)
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	332e      	adds	r3, #46	@ 0x2e
 8003280:	7b7a      	ldrb	r2, [r7, #13]
 8003282:	701a      	strb	r2, [r3, #0]
			CabBus[bCab].pVirtualCab = WM_RegisterCab((int)bCab, CAB_TYPE_NCE, bCabType, (void *)&CabBus[bCab]);
 8003284:	79f8      	ldrb	r0, [r7, #7]
 8003286:	7b79      	ldrb	r1, [r7, #13]
 8003288:	79fa      	ldrb	r2, [r7, #7]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4aa2      	ldr	r2, [pc, #648]	@ (800351c <HandleCabResponse+0x2f0>)
 8003294:	4413      	add	r3, r2
 8003296:	79fc      	ldrb	r4, [r7, #7]
 8003298:	460a      	mov	r2, r1
 800329a:	2101      	movs	r1, #1
 800329c:	f7fd ff66 	bl	800116c <WM_RegisterCab>
 80032a0:	4602      	mov	r2, r0
 80032a2:	499e      	ldr	r1, [pc, #632]	@ (800351c <HandleCabResponse+0x2f0>)
 80032a4:	4623      	mov	r3, r4
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	1b1b      	subs	r3, r3, r4
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3330      	adds	r3, #48	@ 0x30
 80032b0:	601a      	str	r2, [r3, #0]

			MakeCabActive(bCab);
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fdc1 	bl	8002e3c <MakeCabActive>

		}
		CabBus[bCab].VersionReturn = 0;
 80032ba:	79fa      	ldrb	r2, [r7, #7]
 80032bc:	4997      	ldr	r1, [pc, #604]	@ (800351c <HandleCabResponse+0x2f0>)
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80032cc:	7913      	ldrb	r3, [r2, #4]
 80032ce:	f36f 1386 	bfc	r3, #6, #1
 80032d2:	7113      	strb	r3, [r2, #4]
 80032d4:	e0cf      	b.n	8003476 <HandleCabResponse+0x24a>
	}
	else if(CabResponse[0] == CAB_REFRESH_DISPLAY)
 80032d6:	4b92      	ldr	r3, [pc, #584]	@ (8003520 <HandleCabResponse+0x2f4>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b7e      	cmp	r3, #126	@ 0x7e
 80032dc:	d14a      	bne.n	8003374 <HandleCabResponse+0x148>
	{
		CabBus[bCab].TextQuadrant1 = 1;
 80032de:	79fa      	ldrb	r2, [r7, #7]
 80032e0:	498e      	ldr	r1, [pc, #568]	@ (800351c <HandleCabResponse+0x2f0>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80032f0:	7913      	ldrb	r3, [r2, #4]
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	7113      	strb	r3, [r2, #4]
		CabBus[bCab].TextQuadrant2 = 1;
 80032f8:	79fa      	ldrb	r2, [r7, #7]
 80032fa:	4988      	ldr	r1, [pc, #544]	@ (800351c <HandleCabResponse+0x2f0>)
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800330a:	7913      	ldrb	r3, [r2, #4]
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	7113      	strb	r3, [r2, #4]
		CabBus[bCab].TextQuadrant3 = 1;
 8003312:	79fa      	ldrb	r2, [r7, #7]
 8003314:	4981      	ldr	r1, [pc, #516]	@ (800351c <HandleCabResponse+0x2f0>)
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003324:	7913      	ldrb	r3, [r2, #4]
 8003326:	f043 0308 	orr.w	r3, r3, #8
 800332a:	7113      	strb	r3, [r2, #4]
		CabBus[bCab].TextQuadrant4 = 1;
 800332c:	79fa      	ldrb	r2, [r7, #7]
 800332e:	497b      	ldr	r1, [pc, #492]	@ (800351c <HandleCabResponse+0x2f0>)
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800333e:	7913      	ldrb	r3, [r2, #4]
 8003340:	f043 0310 	orr.w	r3, r3, #16
 8003344:	7113      	strb	r3, [r2, #4]
		NCE_DisplayChar(bCab, GET_VERSION);
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	21d2      	movs	r1, #210	@ 0xd2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fc3a 	bl	8003bc4 <NCE_DisplayChar>
		NCE_CursorOff(bCab);
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fca2 	bl	8003c9c <NCE_CursorOff>
		CabBus[bCab].VersionReturn = 1;
 8003358:	79fa      	ldrb	r2, [r7, #7]
 800335a:	4970      	ldr	r1, [pc, #448]	@ (800351c <HandleCabResponse+0x2f0>)
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800336a:	7913      	ldrb	r3, [r2, #4]
 800336c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003370:	7113      	strb	r3, [r2, #4]
 8003372:	e080      	b.n	8003476 <HandleCabResponse+0x24a>
	}
	else if(CabResponse[0] != CAB_NO_KEY)
 8003374:	4b6a      	ldr	r3, [pc, #424]	@ (8003520 <HandleCabResponse+0x2f4>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b7d      	cmp	r3, #125	@ 0x7d
 800337a:	d07c      	beq.n	8003476 <HandleCabResponse+0x24a>
	{
		// if we don't have a virtual cab at this point - get one (error condition)
		if(CabBus[bCab].pVirtualCab == 0)
 800337c:	79fa      	ldrb	r2, [r7, #7]
 800337e:	4967      	ldr	r1, [pc, #412]	@ (800351c <HandleCabResponse+0x2f0>)
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3330      	adds	r3, #48	@ 0x30
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d14a      	bne.n	8003428 <HandleCabResponse+0x1fc>
		{
			CabBus[bCab].TextQuadrant1 = 1;
 8003392:	79fa      	ldrb	r2, [r7, #7]
 8003394:	4961      	ldr	r1, [pc, #388]	@ (800351c <HandleCabResponse+0x2f0>)
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80033a4:	7913      	ldrb	r3, [r2, #4]
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	7113      	strb	r3, [r2, #4]
			CabBus[bCab].TextQuadrant2 = 1;
 80033ac:	79fa      	ldrb	r2, [r7, #7]
 80033ae:	495b      	ldr	r1, [pc, #364]	@ (800351c <HandleCabResponse+0x2f0>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80033be:	7913      	ldrb	r3, [r2, #4]
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	7113      	strb	r3, [r2, #4]
			CabBus[bCab].TextQuadrant3 = 1;
 80033c6:	79fa      	ldrb	r2, [r7, #7]
 80033c8:	4954      	ldr	r1, [pc, #336]	@ (800351c <HandleCabResponse+0x2f0>)
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80033d8:	7913      	ldrb	r3, [r2, #4]
 80033da:	f043 0308 	orr.w	r3, r3, #8
 80033de:	7113      	strb	r3, [r2, #4]
			CabBus[bCab].TextQuadrant4 = 1;
 80033e0:	79fa      	ldrb	r2, [r7, #7]
 80033e2:	494e      	ldr	r1, [pc, #312]	@ (800351c <HandleCabResponse+0x2f0>)
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80033f2:	7913      	ldrb	r3, [r2, #4]
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	7113      	strb	r3, [r2, #4]
			NCE_CursorOff(bCab);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fc4d 	bl	8003c9c <NCE_CursorOff>
			NCE_DisplayChar(bCab, GET_VERSION);
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	21d2      	movs	r1, #210	@ 0xd2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fbdc 	bl	8003bc4 <NCE_DisplayChar>
			CabBus[bCab].VersionReturn = 1;
 800340c:	79fa      	ldrb	r2, [r7, #7]
 800340e:	4943      	ldr	r1, [pc, #268]	@ (800351c <HandleCabResponse+0x2f0>)
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800341e:	7913      	ldrb	r3, [r2, #4]
 8003420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003424:	7113      	strb	r3, [r2, #4]
 8003426:	e026      	b.n	8003476 <HandleCabResponse+0x24a>
		}
		else
		{
			// send Cab message to Cab Handler
			nEvent = abCabKeyTranslate[CabResponse[0] - CAB_KEY_OFFSET];
 8003428:	4b3d      	ldr	r3, [pc, #244]	@ (8003520 <HandleCabResponse+0x2f4>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	3b40      	subs	r3, #64	@ 0x40
 800342e:	4a3d      	ldr	r2, [pc, #244]	@ (8003524 <HandleCabResponse+0x2f8>)
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	81fb      	strh	r3, [r7, #14]
			if(nEvent != -1)
 8003436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d01a      	beq.n	8003476 <HandleCabResponse+0x24a>
			{
				CabBus[bCab].pVirtualCab->nEvent = nEvent;
 8003440:	79fa      	ldrb	r2, [r7, #7]
 8003442:	4936      	ldr	r1, [pc, #216]	@ (800351c <HandleCabResponse+0x2f0>)
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	3330      	adds	r3, #48	@ 0x30
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003456:	615a      	str	r2, [r3, #20]
				//x CabBus[bCab].nEvent = nEvent;
				//SendNCECabKey(bCab, nEvent);
				QueueMessage(MSG_CAB_KEY_MESSAGE, CabBus[bCab].pVirtualCab, nEvent);
 8003458:	79fa      	ldrb	r2, [r7, #7]
 800345a:	4930      	ldr	r1, [pc, #192]	@ (800351c <HandleCabResponse+0x2f0>)
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	3330      	adds	r3, #48	@ 0x30
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800346e:	4619      	mov	r1, r3
 8003470:	2001      	movs	r0, #1
 8003472:	f7fe fb97 	bl	8001ba4 <QueueMessage>
			}
		}
	}

	// Send the speed, if any, and if changed, to the foreground
	Speed = CabResponse[1];
 8003476:	4b2a      	ldr	r3, [pc, #168]	@ (8003520 <HandleCabResponse+0x2f4>)
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	733b      	strb	r3, [r7, #12]

	if(Speed > (CabBus[bCab].OldSpeed + CabBus[bCab].UpLimit) || Speed < (CabBus[bCab].OldSpeed - CabBus[bCab].DownLimit))
 800347c:	7b39      	ldrb	r1, [r7, #12]
 800347e:	79fa      	ldrb	r2, [r7, #7]
 8003480:	4826      	ldr	r0, [pc, #152]	@ (800351c <HandleCabResponse+0x2f0>)
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4403      	add	r3, r0
 800348c:	3323      	adds	r3, #35	@ 0x23
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	461c      	mov	r4, r3
 8003492:	79fa      	ldrb	r2, [r7, #7]
 8003494:	4821      	ldr	r0, [pc, #132]	@ (800351c <HandleCabResponse+0x2f0>)
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4403      	add	r3, r0
 80034a0:	3324      	adds	r3, #36	@ 0x24
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4423      	add	r3, r4
 80034a6:	4299      	cmp	r1, r3
 80034a8:	dc17      	bgt.n	80034da <HandleCabResponse+0x2ae>
 80034aa:	7b39      	ldrb	r1, [r7, #12]
 80034ac:	79fa      	ldrb	r2, [r7, #7]
 80034ae:	481b      	ldr	r0, [pc, #108]	@ (800351c <HandleCabResponse+0x2f0>)
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4403      	add	r3, r0
 80034ba:	3323      	adds	r3, #35	@ 0x23
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461c      	mov	r4, r3
 80034c0:	79fa      	ldrb	r2, [r7, #7]
 80034c2:	4816      	ldr	r0, [pc, #88]	@ (800351c <HandleCabResponse+0x2f0>)
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4403      	add	r3, r0
 80034ce:	3325      	adds	r3, #37	@ 0x25
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	1ae3      	subs	r3, r4, r3
 80034d4:	4299      	cmp	r1, r3
 80034d6:	f280 80bb 	bge.w	8003650 <HandleCabResponse+0x424>
	{
		if(Speed > CabBus[bCab].OldSpeed)
 80034da:	79fa      	ldrb	r2, [r7, #7]
 80034dc:	490f      	ldr	r1, [pc, #60]	@ (800351c <HandleCabResponse+0x2f0>)
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	3323      	adds	r3, #35	@ 0x23
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	7b3a      	ldrb	r2, [r7, #12]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d91a      	bls.n	8003528 <HandleCabResponse+0x2fc>
		{
			CabBus[bCab].UpLimit = 0;
 80034f2:	79fa      	ldrb	r2, [r7, #7]
 80034f4:	4909      	ldr	r1, [pc, #36]	@ (800351c <HandleCabResponse+0x2f0>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	3324      	adds	r3, #36	@ 0x24
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
			CabBus[bCab].DownLimit = 1;
 8003506:	79fa      	ldrb	r2, [r7, #7]
 8003508:	4904      	ldr	r1, [pc, #16]	@ (800351c <HandleCabResponse+0x2f0>)
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	3325      	adds	r3, #37	@ 0x25
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e019      	b.n	8003550 <HandleCabResponse+0x324>
 800351c:	20002dfc 	.word	0x20002dfc
 8003520:	20003030 	.word	0x20003030
 8003524:	20000004 	.word	0x20000004
		}
		else
		{
			CabBus[bCab].UpLimit = 1;
 8003528:	79fa      	ldrb	r2, [r7, #7]
 800352a:	494b      	ldr	r1, [pc, #300]	@ (8003658 <HandleCabResponse+0x42c>)
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3324      	adds	r3, #36	@ 0x24
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
			CabBus[bCab].DownLimit = 0;
 800353c:	79fa      	ldrb	r2, [r7, #7]
 800353e:	4946      	ldr	r1, [pc, #280]	@ (8003658 <HandleCabResponse+0x42c>)
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3325      	adds	r3, #37	@ 0x25
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
		}
		CabBus[bCab].OldSpeed = Speed;
 8003550:	79fa      	ldrb	r2, [r7, #7]
 8003552:	4941      	ldr	r1, [pc, #260]	@ (8003658 <HandleCabResponse+0x42c>)
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3323      	adds	r3, #35	@ 0x23
 8003560:	7b3a      	ldrb	r2, [r7, #12]
 8003562:	701a      	strb	r2, [r3, #0]

		// if we don't have a virtual cab at this point - get one (error condition)
		if(CabBus[bCab].pVirtualCab == 0)
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	493c      	ldr	r1, [pc, #240]	@ (8003658 <HandleCabResponse+0x42c>)
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	3330      	adds	r3, #48	@ 0x30
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d14a      	bne.n	8003610 <HandleCabResponse+0x3e4>
		{
			CabBus[bCab].TextQuadrant1 = 1;
 800357a:	79fa      	ldrb	r2, [r7, #7]
 800357c:	4936      	ldr	r1, [pc, #216]	@ (8003658 <HandleCabResponse+0x42c>)
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800358c:	7913      	ldrb	r3, [r2, #4]
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	7113      	strb	r3, [r2, #4]
			CabBus[bCab].TextQuadrant2 = 1;
 8003594:	79fa      	ldrb	r2, [r7, #7]
 8003596:	4930      	ldr	r1, [pc, #192]	@ (8003658 <HandleCabResponse+0x42c>)
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80035a6:	7913      	ldrb	r3, [r2, #4]
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	7113      	strb	r3, [r2, #4]
			CabBus[bCab].TextQuadrant3 = 1;
 80035ae:	79fa      	ldrb	r2, [r7, #7]
 80035b0:	4929      	ldr	r1, [pc, #164]	@ (8003658 <HandleCabResponse+0x42c>)
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80035c0:	7913      	ldrb	r3, [r2, #4]
 80035c2:	f043 0308 	orr.w	r3, r3, #8
 80035c6:	7113      	strb	r3, [r2, #4]
			CabBus[bCab].TextQuadrant4 = 1;
 80035c8:	79fa      	ldrb	r2, [r7, #7]
 80035ca:	4923      	ldr	r1, [pc, #140]	@ (8003658 <HandleCabResponse+0x42c>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80035da:	7913      	ldrb	r3, [r2, #4]
 80035dc:	f043 0310 	orr.w	r3, r3, #16
 80035e0:	7113      	strb	r3, [r2, #4]
			NCE_CursorOff(bCab);
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fb59 	bl	8003c9c <NCE_CursorOff>
			NCE_DisplayChar(bCab, GET_VERSION);
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	21d2      	movs	r1, #210	@ 0xd2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fae8 	bl	8003bc4 <NCE_DisplayChar>
			CabBus[bCab].VersionReturn = 1;
 80035f4:	79fa      	ldrb	r2, [r7, #7]
 80035f6:	4918      	ldr	r1, [pc, #96]	@ (8003658 <HandleCabResponse+0x42c>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003606:	7913      	ldrb	r3, [r2, #4]
 8003608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800360c:	7113      	strb	r3, [r2, #4]
			QueueMessage(MSG_CAB_KEY_MESSAGE, CabBus[bCab].pVirtualCab, nEvent);
		}
	}

//	abCabTimeout[bCab] = CAB_TIMEOUT;
}
 800360e:	e01f      	b.n	8003650 <HandleCabResponse+0x424>
			nEvent = Speed | EVENT_SPEED_TYPE;
 8003610:	7b3b      	ldrb	r3, [r7, #12]
 8003612:	b21b      	sxth	r3, r3
 8003614:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003618:	81fb      	strh	r3, [r7, #14]
			CabBus[bCab].pVirtualCab->nEvent = nEvent;
 800361a:	79fa      	ldrb	r2, [r7, #7]
 800361c:	490e      	ldr	r1, [pc, #56]	@ (8003658 <HandleCabResponse+0x42c>)
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	3330      	adds	r3, #48	@ 0x30
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003630:	615a      	str	r2, [r3, #20]
			QueueMessage(MSG_CAB_KEY_MESSAGE, CabBus[bCab].pVirtualCab, nEvent);
 8003632:	79fa      	ldrb	r2, [r7, #7]
 8003634:	4908      	ldr	r1, [pc, #32]	@ (8003658 <HandleCabResponse+0x42c>)
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	3330      	adds	r3, #48	@ 0x30
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003648:	4619      	mov	r1, r3
 800364a:	2001      	movs	r0, #1
 800364c:	f7fe faaa 	bl	8001ba4 <QueueMessage>
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bd90      	pop	{r4, r7, pc}
 8003658:	20002dfc 	.word	0x20002dfc

0800365c <HandleCabOutput>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned char HandleCabOutput(unsigned char bCab)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
	unsigned char bTemp;
	unsigned char Packet[9];
	unsigned char PacketLength;

	// Handle the single/two byte commands from the "queue"
	if(CabBus[bCab].nQueue1)
 8003666:	79fa      	ldrb	r2, [r7, #7]
 8003668:	4978      	ldr	r1, [pc, #480]	@ (800384c <HandleCabOutput+0x1f0>)
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	440b      	add	r3, r1
 8003674:	3326      	adds	r3, #38	@ 0x26
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d079      	beq.n	8003770 <HandleCabOutput+0x114>
	{
		bTemp = CabBus[bCab].nQueue1 & 0xff;
 800367c:	79fa      	ldrb	r2, [r7, #7]
 800367e:	4973      	ldr	r1, [pc, #460]	@ (800384c <HandleCabOutput+0x1f0>)
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	3326      	adds	r3, #38	@ 0x26
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	75fb      	strb	r3, [r7, #23]
		Packet[0] = bTemp;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	733b      	strb	r3, [r7, #12]
		PacketLength = 1;
 8003694:	2301      	movs	r3, #1
 8003696:	75bb      	strb	r3, [r7, #22]

		if(bTemp == MOVE_CURSOR || bTemp == TTY_BACK || bTemp == TTY_NEXT)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2bc8      	cmp	r3, #200	@ 0xc8
 800369c:	d005      	beq.n	80036aa <HandleCabOutput+0x4e>
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	2bc9      	cmp	r3, #201	@ 0xc9
 80036a2:	d002      	beq.n	80036aa <HandleCabOutput+0x4e>
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2bca      	cmp	r3, #202	@ 0xca
 80036a8:	d110      	bne.n	80036cc <HandleCabOutput+0x70>
		{
			bTemp = CabBus[bCab].nQueue1 >> 8;
 80036aa:	79fa      	ldrb	r2, [r7, #7]
 80036ac:	4967      	ldr	r1, [pc, #412]	@ (800384c <HandleCabOutput+0x1f0>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	3326      	adds	r3, #38	@ 0x26
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	0a1b      	lsrs	r3, r3, #8
 80036be:	b29b      	uxth	r3, r3
 80036c0:	75fb      	strb	r3, [r7, #23]
			Packet[1] = bTemp;
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	737b      	strb	r3, [r7, #13]
			PacketLength++;
 80036c6:	7dbb      	ldrb	r3, [r7, #22]
 80036c8:	3301      	adds	r3, #1
 80036ca:	75bb      	strb	r3, [r7, #22]
		}

		// send to the correct context
		Uart2_SendPacket(Packet, PacketLength);
 80036cc:	7dba      	ldrb	r2, [r7, #22]
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fa21 	bl	8002b1c <Uart2_SendPacket>
		TxComplete = 0;
 80036da:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <HandleCabOutput+0x1f4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
		TxTimeout = 0;
 80036e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003854 <HandleCabOutput+0x1f8>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]

		// pop the "queue"
		CabBus[bCab].nQueue1 = CabBus[bCab].nQueue2;
 80036e6:	79f9      	ldrb	r1, [r7, #7]
 80036e8:	79fa      	ldrb	r2, [r7, #7]
 80036ea:	4858      	ldr	r0, [pc, #352]	@ (800384c <HandleCabOutput+0x1f0>)
 80036ec:	460b      	mov	r3, r1
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	1a5b      	subs	r3, r3, r1
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4403      	add	r3, r0
 80036f6:	3328      	adds	r3, #40	@ 0x28
 80036f8:	8818      	ldrh	r0, [r3, #0]
 80036fa:	4954      	ldr	r1, [pc, #336]	@ (800384c <HandleCabOutput+0x1f0>)
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	440b      	add	r3, r1
 8003706:	3326      	adds	r3, #38	@ 0x26
 8003708:	4602      	mov	r2, r0
 800370a:	801a      	strh	r2, [r3, #0]
		CabBus[bCab].nQueue2 = CabBus[bCab].nQueue3;
 800370c:	79f9      	ldrb	r1, [r7, #7]
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	484e      	ldr	r0, [pc, #312]	@ (800384c <HandleCabOutput+0x1f0>)
 8003712:	460b      	mov	r3, r1
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	1a5b      	subs	r3, r3, r1
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4403      	add	r3, r0
 800371c:	332a      	adds	r3, #42	@ 0x2a
 800371e:	8818      	ldrh	r0, [r3, #0]
 8003720:	494a      	ldr	r1, [pc, #296]	@ (800384c <HandleCabOutput+0x1f0>)
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	440b      	add	r3, r1
 800372c:	3328      	adds	r3, #40	@ 0x28
 800372e:	4602      	mov	r2, r0
 8003730:	801a      	strh	r2, [r3, #0]
		CabBus[bCab].nQueue3 = CabBus[bCab].nQueue4;
 8003732:	79f9      	ldrb	r1, [r7, #7]
 8003734:	79fa      	ldrb	r2, [r7, #7]
 8003736:	4845      	ldr	r0, [pc, #276]	@ (800384c <HandleCabOutput+0x1f0>)
 8003738:	460b      	mov	r3, r1
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a5b      	subs	r3, r3, r1
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4403      	add	r3, r0
 8003742:	332c      	adds	r3, #44	@ 0x2c
 8003744:	8818      	ldrh	r0, [r3, #0]
 8003746:	4941      	ldr	r1, [pc, #260]	@ (800384c <HandleCabOutput+0x1f0>)
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	332a      	adds	r3, #42	@ 0x2a
 8003754:	4602      	mov	r2, r0
 8003756:	801a      	strh	r2, [r3, #0]
		CabBus[bCab].nQueue4 = 0;
 8003758:	79fa      	ldrb	r2, [r7, #7]
 800375a:	493c      	ldr	r1, [pc, #240]	@ (800384c <HandleCabOutput+0x1f0>)
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	440b      	add	r3, r1
 8003766:	332c      	adds	r3, #44	@ 0x2c
 8003768:	2200      	movs	r2, #0
 800376a:	801a      	strh	r2, [r3, #0]
		return 1;
 800376c:	2301      	movs	r3, #1
 800376e:	e068      	b.n	8003842 <HandleCabOutput+0x1e6>
	}
	else
	{
		bQuadrant = IsAnyCabText(bCab);
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f870 	bl	8003858 <IsAnyCabText>
 8003778:	4603      	mov	r3, r0
 800377a:	757b      	strb	r3, [r7, #21]
		if(bQuadrant)
 800377c:	7d7b      	ldrb	r3, [r7, #21]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d05e      	beq.n	8003840 <HandleCabOutput+0x1e4>
		{
			bQuadrant--;
 8003782:	7d7b      	ldrb	r3, [r7, #21]
 8003784:	3b01      	subs	r3, #1
 8003786:	757b      	strb	r3, [r7, #21]

			switch(bQuadrant)
 8003788:	7d7b      	ldrb	r3, [r7, #21]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d816      	bhi.n	80037bc <HandleCabOutput+0x160>
 800378e:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <HandleCabOutput+0x138>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037ab 	.word	0x080037ab
 800379c:	080037b1 	.word	0x080037b1
 80037a0:	080037b7 	.word	0x080037b7
			{
				case 0:
					bTemp = CAB_TEXT_1;
 80037a4:	23c0      	movs	r3, #192	@ 0xc0
 80037a6:	75fb      	strb	r3, [r7, #23]
				break;
 80037a8:	e00b      	b.n	80037c2 <HandleCabOutput+0x166>
				case 1:
					bTemp = CAB_TEXT_2;
 80037aa:	23c1      	movs	r3, #193	@ 0xc1
 80037ac:	75fb      	strb	r3, [r7, #23]
				break;
 80037ae:	e008      	b.n	80037c2 <HandleCabOutput+0x166>
				case 2:
					bTemp = CAB_TEXT_3;
 80037b0:	23c2      	movs	r3, #194	@ 0xc2
 80037b2:	75fb      	strb	r3, [r7, #23]
				break;
 80037b4:	e005      	b.n	80037c2 <HandleCabOutput+0x166>
				case 3:
					bTemp = CAB_TEXT_4;
 80037b6:	23c3      	movs	r3, #195	@ 0xc3
 80037b8:	75fb      	strb	r3, [r7, #23]
				break;
 80037ba:	e002      	b.n	80037c2 <HandleCabOutput+0x166>
				default:
					bTemp = CAB_TEXT_1;
 80037bc:	23c0      	movs	r3, #192	@ 0xc0
 80037be:	75fb      	strb	r3, [r7, #23]
				break;
 80037c0:	bf00      	nop
			}
			Packet[0] = bTemp;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	733b      	strb	r3, [r7, #12]
			memcpy(&Packet[1], CabBus[bCab].TextQuadrant[bQuadrant], 8);
 80037c6:	79fa      	ldrb	r2, [r7, #7]
 80037c8:	7d79      	ldrb	r1, [r7, #21]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HandleCabOutput+0x1f0>)
 80037d6:	1899      	adds	r1, r3, r2
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	3301      	adds	r3, #1
 80037de:	2208      	movs	r2, #8
 80037e0:	4618      	mov	r0, r3
 80037e2:	f022 fe54 	bl	802648e <memcpy>

			// send to the correct context
			Uart2_SendPacket(Packet, 9);
 80037e6:	f107 030c 	add.w	r3, r7, #12
 80037ea:	2109      	movs	r1, #9
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff f995 	bl	8002b1c <Uart2_SendPacket>
			TxComplete = 0;
 80037f2:	4b17      	ldr	r3, [pc, #92]	@ (8003850 <HandleCabOutput+0x1f4>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
			TxTimeout = 0;
 80037f8:	4b16      	ldr	r3, [pc, #88]	@ (8003854 <HandleCabOutput+0x1f8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]

			if(CabBus[bCab].CursonOn)
 80037fe:	79fa      	ldrb	r2, [r7, #7]
 8003800:	4912      	ldr	r1, [pc, #72]	@ (800384c <HandleCabOutput+0x1f0>)
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	3330      	adds	r3, #48	@ 0x30
 800380e:	791b      	ldrb	r3, [r3, #4]
 8003810:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HandleCabOutput+0x1e0>
			{
				NCE_PutQueue(bCab, MOVE_CURSOR | (CabBus[bCab].nCursor << 8));
 800381a:	79fa      	ldrb	r2, [r7, #7]
 800381c:	490b      	ldr	r1, [pc, #44]	@ (800384c <HandleCabOutput+0x1f0>)
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	3322      	adds	r3, #34	@ 0x22
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	f043 02c8 	orr.w	r2, r3, #200	@ 0xc8
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f970 	bl	8003b1c <NCE_PutQueue>
			}
			return 1;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HandleCabOutput+0x1e6>
		}
	}
	return 0;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20002dfc 	.word	0x20002dfc
 8003850:	20003037 	.word	0x20003037
 8003854:	20003038 	.word	0x20003038

08003858 <IsAnyCabText>:
*
* RESTRICTIONS:
*
**********************************************************************/
unsigned char IsAnyCabText(unsigned char bCab)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]

   if(CabBus[bCab].TextQuadrant1)
 8003862:	79fa      	ldrb	r2, [r7, #7]
 8003864:	493c      	ldr	r1, [pc, #240]	@ (8003958 <IsAnyCabText+0x100>)
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	3330      	adds	r3, #48	@ 0x30
 8003872:	791b      	ldrb	r3, [r3, #4]
 8003874:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00e      	beq.n	800389c <IsAnyCabText+0x44>
   {
	   CabBus[bCab].TextQuadrant1 = 0;
 800387e:	79fa      	ldrb	r2, [r7, #7]
 8003880:	4935      	ldr	r1, [pc, #212]	@ (8003958 <IsAnyCabText+0x100>)
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003890:	7913      	ldrb	r3, [r2, #4]
 8003892:	f36f 0341 	bfc	r3, #1, #1
 8003896:	7113      	strb	r3, [r2, #4]
	   return 1;
 8003898:	2301      	movs	r3, #1
 800389a:	e057      	b.n	800394c <IsAnyCabText+0xf4>
   }
   else if(CabBus[bCab].TextQuadrant2)
 800389c:	79fa      	ldrb	r2, [r7, #7]
 800389e:	492e      	ldr	r1, [pc, #184]	@ (8003958 <IsAnyCabText+0x100>)
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	3330      	adds	r3, #48	@ 0x30
 80038ac:	791b      	ldrb	r3, [r3, #4]
 80038ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00e      	beq.n	80038d6 <IsAnyCabText+0x7e>
   {
	   CabBus[bCab].TextQuadrant2 = 0;
 80038b8:	79fa      	ldrb	r2, [r7, #7]
 80038ba:	4927      	ldr	r1, [pc, #156]	@ (8003958 <IsAnyCabText+0x100>)
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80038ca:	7913      	ldrb	r3, [r2, #4]
 80038cc:	f36f 0382 	bfc	r3, #2, #1
 80038d0:	7113      	strb	r3, [r2, #4]
	   return 2;
 80038d2:	2302      	movs	r3, #2
 80038d4:	e03a      	b.n	800394c <IsAnyCabText+0xf4>
   }
   else if(CabBus[bCab].TextQuadrant3)
 80038d6:	79fa      	ldrb	r2, [r7, #7]
 80038d8:	491f      	ldr	r1, [pc, #124]	@ (8003958 <IsAnyCabText+0x100>)
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	3330      	adds	r3, #48	@ 0x30
 80038e6:	791b      	ldrb	r3, [r3, #4]
 80038e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00e      	beq.n	8003910 <IsAnyCabText+0xb8>
   {
	   CabBus[bCab].TextQuadrant3 = 0;
 80038f2:	79fa      	ldrb	r2, [r7, #7]
 80038f4:	4918      	ldr	r1, [pc, #96]	@ (8003958 <IsAnyCabText+0x100>)
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	440b      	add	r3, r1
 8003900:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003904:	7913      	ldrb	r3, [r2, #4]
 8003906:	f36f 03c3 	bfc	r3, #3, #1
 800390a:	7113      	strb	r3, [r2, #4]
	   return 3;
 800390c:	2303      	movs	r3, #3
 800390e:	e01d      	b.n	800394c <IsAnyCabText+0xf4>
   }
   else if(CabBus[bCab].TextQuadrant4)
 8003910:	79fa      	ldrb	r2, [r7, #7]
 8003912:	4911      	ldr	r1, [pc, #68]	@ (8003958 <IsAnyCabText+0x100>)
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	3330      	adds	r3, #48	@ 0x30
 8003920:	791b      	ldrb	r3, [r3, #4]
 8003922:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <IsAnyCabText+0xf2>
   {
	   CabBus[bCab].TextQuadrant4 = 0;
 800392c:	79fa      	ldrb	r2, [r7, #7]
 800392e:	490a      	ldr	r1, [pc, #40]	@ (8003958 <IsAnyCabText+0x100>)
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800393e:	7913      	ldrb	r3, [r2, #4]
 8003940:	f36f 1304 	bfc	r3, #4, #1
 8003944:	7113      	strb	r3, [r2, #4]
	   return 4;
 8003946:	2304      	movs	r3, #4
 8003948:	e000      	b.n	800394c <IsAnyCabText+0xf4>
   }
   return 0;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	20002dfc 	.word	0x20002dfc

0800395c <RxCabResponse>:
*
* RESTRICTIONS:
*
**********************************************************************/
void RxCabResponse(unsigned char* Response, unsigned char* ResponseLength)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]

	CabResponse[CabRxIndex++] = Response[0];
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <RxCabResponse+0x40>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	b2d1      	uxtb	r1, r2
 800396e:	4a0b      	ldr	r2, [pc, #44]	@ (800399c <RxCabResponse+0x40>)
 8003970:	7011      	strb	r1, [r2, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7819      	ldrb	r1, [r3, #0]
 8003978:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <RxCabResponse+0x44>)
 800397a:	5499      	strb	r1, [r3, r2]
	if(CabRxIndex >= 2)
 800397c:	4b07      	ldr	r3, [pc, #28]	@ (800399c <RxCabResponse+0x40>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d905      	bls.n	8003990 <RxCabResponse+0x34>
	{
		CabRxIndex = 2;	// guard
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <RxCabResponse+0x40>)
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
		GotCabResponse = 1;
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <RxCabResponse+0x48>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
	}
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20003036 	.word	0x20003036
 80039a0:	20003030 	.word	0x20003030
 80039a4:	20003035 	.word	0x20003035

080039a8 <TxCabResponse>:
*
* RESTRICTIONS:
*
**********************************************************************/
void TxCabResponse(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
	TxComplete = 1;
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <TxCabResponse+0x14>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20003037 	.word	0x20003037

080039c0 <NCE_DisplayMessage>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NCE_DisplayMessage(unsigned char bCab, unsigned char x, unsigned char y, char* pcMessage)
{
 80039c0:	b4b0      	push	{r4, r5, r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4603      	mov	r3, r0
 80039ca:	71fb      	strb	r3, [r7, #7]
 80039cc:	460b      	mov	r3, r1
 80039ce:	71bb      	strb	r3, [r7, #6]
 80039d0:	4613      	mov	r3, r2
 80039d2:	717b      	strb	r3, [r7, #5]
	unsigned char c;
	unsigned char i;
	unsigned char w;

	//while(*pcMessage)
	for(i = 0; i < 32; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	75bb      	strb	r3, [r7, #22]
 80039d8:	e091      	b.n	8003afe <NCE_DisplayMessage+0x13e>
	{
		if(*pcMessage == 0)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8092 	beq.w	8003b08 <NCE_DisplayMessage+0x148>
		{
			break;
		}

		c = *pcMessage++;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	603a      	str	r2, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	75fb      	strb	r3, [r7, #23]
		if(c == 0x0a)
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	2b0a      	cmp	r3, #10
 80039f2:	d109      	bne.n	8003a08 <NCE_DisplayMessage+0x48>
		{
			y++;
 80039f4:	797b      	ldrb	r3, [r7, #5]
 80039f6:	3301      	adds	r3, #1
 80039f8:	717b      	strb	r3, [r7, #5]
			x = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	71bb      	strb	r3, [r7, #6]
			c = *pcMessage++;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	603a      	str	r2, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	75fb      	strb	r3, [r7, #23]
		}

		// convert to uppercase
		c = (char)toupper((int)c);
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a40      	ldr	r2, [pc, #256]	@ (8003b14 <NCE_DisplayMessage+0x154>)
 8003a12:	4413      	add	r3, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d102      	bne.n	8003a24 <NCE_DisplayMessage+0x64>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3b20      	subs	r3, #32
 8003a22:	e000      	b.n	8003a26 <NCE_DisplayMessage+0x66>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	75fb      	strb	r3, [r7, #23]

		CabBus[bCab].TextQuadrant[y * 2][x] = c | 0xc0;
 8003a28:	79fa      	ldrb	r2, [r7, #7]
 8003a2a:	797b      	ldrb	r3, [r7, #5]
 8003a2c:	0058      	lsls	r0, r3, #1
 8003a2e:	79b9      	ldrb	r1, [r7, #6]
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003a36:	b2dd      	uxtb	r5, r3
 8003a38:	4c37      	ldr	r4, [pc, #220]	@ (8003b18 <NCE_DisplayMessage+0x158>)
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	4403      	add	r3, r0
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4423      	add	r3, r4
 8003a46:	440b      	add	r3, r1
 8003a48:	462a      	mov	r2, r5
 8003a4a:	701a      	strb	r2, [r3, #0]

		//CabBus[bCab].Flags |= bBitMask[(x / 8) + (y * 2)];
		w = (x / 8) + (y * 2);
 8003a4c:	79bb      	ldrb	r3, [r7, #6]
 8003a4e:	08db      	lsrs	r3, r3, #3
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	797b      	ldrb	r3, [r7, #5]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	73fb      	strb	r3, [r7, #15]
		if(w == 0)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <NCE_DisplayMessage+0xbe>
		{
			CabBus[bCab].TextQuadrant1 = 1;
 8003a62:	79fa      	ldrb	r2, [r7, #7]
 8003a64:	492c      	ldr	r1, [pc, #176]	@ (8003b18 <NCE_DisplayMessage+0x158>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003a74:	7913      	ldrb	r3, [r2, #4]
 8003a76:	f043 0302 	orr.w	r3, r3, #2
 8003a7a:	7113      	strb	r3, [r2, #4]
 8003a7c:	e031      	b.n	8003ae2 <NCE_DisplayMessage+0x122>
		}
		else if(w == 1)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d10d      	bne.n	8003aa0 <NCE_DisplayMessage+0xe0>
		{
			CabBus[bCab].TextQuadrant2 = 1;
 8003a84:	79fa      	ldrb	r2, [r7, #7]
 8003a86:	4924      	ldr	r1, [pc, #144]	@ (8003b18 <NCE_DisplayMessage+0x158>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	440b      	add	r3, r1
 8003a92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003a96:	7913      	ldrb	r3, [r2, #4]
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	7113      	strb	r3, [r2, #4]
 8003a9e:	e020      	b.n	8003ae2 <NCE_DisplayMessage+0x122>
		}
		else if(w == 2)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d10d      	bne.n	8003ac2 <NCE_DisplayMessage+0x102>
		{
			CabBus[bCab].TextQuadrant3 = 1;
 8003aa6:	79fa      	ldrb	r2, [r7, #7]
 8003aa8:	491b      	ldr	r1, [pc, #108]	@ (8003b18 <NCE_DisplayMessage+0x158>)
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003ab8:	7913      	ldrb	r3, [r2, #4]
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	7113      	strb	r3, [r2, #4]
 8003ac0:	e00f      	b.n	8003ae2 <NCE_DisplayMessage+0x122>
		}
		else if(w == 3)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d10c      	bne.n	8003ae2 <NCE_DisplayMessage+0x122>
		{
			CabBus[bCab].TextQuadrant4 = 1;
 8003ac8:	79fa      	ldrb	r2, [r7, #7]
 8003aca:	4913      	ldr	r1, [pc, #76]	@ (8003b18 <NCE_DisplayMessage+0x158>)
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003ada:	7913      	ldrb	r3, [r2, #4]
 8003adc:	f043 0310 	orr.w	r3, r3, #16
 8003ae0:	7113      	strb	r3, [r2, #4]
		}

		x++;
 8003ae2:	79bb      	ldrb	r3, [r7, #6]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	71bb      	strb	r3, [r7, #6]
		if(x > 15)
 8003ae8:	79bb      	ldrb	r3, [r7, #6]
 8003aea:	2b0f      	cmp	r3, #15
 8003aec:	d904      	bls.n	8003af8 <NCE_DisplayMessage+0x138>
		{
			y++;
 8003aee:	797b      	ldrb	r3, [r7, #5]
 8003af0:	3301      	adds	r3, #1
 8003af2:	717b      	strb	r3, [r7, #5]
			x = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 32; i++)
 8003af8:	7dbb      	ldrb	r3, [r7, #22]
 8003afa:	3301      	adds	r3, #1
 8003afc:	75bb      	strb	r3, [r7, #22]
 8003afe:	7dbb      	ldrb	r3, [r7, #22]
 8003b00:	2b1f      	cmp	r3, #31
 8003b02:	f67f af6a 	bls.w	80039da <NCE_DisplayMessage+0x1a>
		}
	}
}
 8003b06:	e000      	b.n	8003b0a <NCE_DisplayMessage+0x14a>
			break;
 8003b08:	bf00      	nop
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bcb0      	pop	{r4, r5, r7}
 8003b12:	4770      	bx	lr
 8003b14:	0802c3d0 	.word	0x0802c3d0
 8003b18:	20002dfc 	.word	0x20002dfc

08003b1c <NCE_PutQueue>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NCE_PutQueue(unsigned char bCab, int nMsg)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]

	CabBus[bCab].nQueue4 = CabBus[bCab].nQueue3;
 8003b28:	79f9      	ldrb	r1, [r7, #7]
 8003b2a:	79fa      	ldrb	r2, [r7, #7]
 8003b2c:	4824      	ldr	r0, [pc, #144]	@ (8003bc0 <NCE_PutQueue+0xa4>)
 8003b2e:	460b      	mov	r3, r1
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	1a5b      	subs	r3, r3, r1
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4403      	add	r3, r0
 8003b38:	332a      	adds	r3, #42	@ 0x2a
 8003b3a:	8818      	ldrh	r0, [r3, #0]
 8003b3c:	4920      	ldr	r1, [pc, #128]	@ (8003bc0 <NCE_PutQueue+0xa4>)
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	332c      	adds	r3, #44	@ 0x2c
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	801a      	strh	r2, [r3, #0]
	CabBus[bCab].nQueue3 = CabBus[bCab].nQueue2;
 8003b4e:	79f9      	ldrb	r1, [r7, #7]
 8003b50:	79fa      	ldrb	r2, [r7, #7]
 8003b52:	481b      	ldr	r0, [pc, #108]	@ (8003bc0 <NCE_PutQueue+0xa4>)
 8003b54:	460b      	mov	r3, r1
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	1a5b      	subs	r3, r3, r1
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4403      	add	r3, r0
 8003b5e:	3328      	adds	r3, #40	@ 0x28
 8003b60:	8818      	ldrh	r0, [r3, #0]
 8003b62:	4917      	ldr	r1, [pc, #92]	@ (8003bc0 <NCE_PutQueue+0xa4>)
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	332a      	adds	r3, #42	@ 0x2a
 8003b70:	4602      	mov	r2, r0
 8003b72:	801a      	strh	r2, [r3, #0]
	CabBus[bCab].nQueue2 = CabBus[bCab].nQueue1;
 8003b74:	79f9      	ldrb	r1, [r7, #7]
 8003b76:	79fa      	ldrb	r2, [r7, #7]
 8003b78:	4811      	ldr	r0, [pc, #68]	@ (8003bc0 <NCE_PutQueue+0xa4>)
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	1a5b      	subs	r3, r3, r1
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4403      	add	r3, r0
 8003b84:	3326      	adds	r3, #38	@ 0x26
 8003b86:	8818      	ldrh	r0, [r3, #0]
 8003b88:	490d      	ldr	r1, [pc, #52]	@ (8003bc0 <NCE_PutQueue+0xa4>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	3328      	adds	r3, #40	@ 0x28
 8003b96:	4602      	mov	r2, r0
 8003b98:	801a      	strh	r2, [r3, #0]
  	CabBus[bCab].nQueue1 = nMsg;
 8003b9a:	79fa      	ldrb	r2, [r7, #7]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	b298      	uxth	r0, r3
 8003ba0:	4907      	ldr	r1, [pc, #28]	@ (8003bc0 <NCE_PutQueue+0xa4>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	3326      	adds	r3, #38	@ 0x26
 8003bae:	4602      	mov	r2, r0
 8003bb0:	801a      	strh	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20002dfc 	.word	0x20002dfc

08003bc4 <NCE_DisplayChar>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NCE_DisplayChar(unsigned char bCab, unsigned char c)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	460a      	mov	r2, r1
 8003bce:	71fb      	strb	r3, [r7, #7]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71bb      	strb	r3, [r7, #6]

	// convert to uppercase
	c = (char)toupper((int)c);
 8003bd4:	79bb      	ldrb	r3, [r7, #6]
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8003c10 <NCE_DisplayChar+0x4c>)
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d102      	bne.n	8003bf0 <NCE_DisplayChar+0x2c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b20      	subs	r3, #32
 8003bee:	e000      	b.n	8003bf2 <NCE_DisplayChar+0x2e>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	71bb      	strb	r3, [r7, #6]
	NCE_PutQueue(bCab, TTY_NEXT | (c << 8));
 8003bf4:	79bb      	ldrb	r3, [r7, #6]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	f043 02ca 	orr.w	r2, r3, #202	@ 0xca
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff8b 	bl	8003b1c <NCE_PutQueue>
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	0802c3d0 	.word	0x0802c3d0

08003c14 <NCE_SetCursorPosition>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NCE_SetCursorPosition(unsigned char bCab, unsigned char x, unsigned char y)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	71bb      	strb	r3, [r7, #6]
 8003c22:	4613      	mov	r3, r2
 8003c24:	717b      	strb	r3, [r7, #5]

	CabBus[bCab].nCursor = ((y * CAB_KEY_OFFSET) + x) | 0x80;
 8003c26:	797b      	ldrb	r3, [r7, #5]
 8003c28:	019b      	lsls	r3, r3, #6
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	79bb      	ldrb	r3, [r7, #6]
 8003c2e:	4413      	add	r3, r2
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	79fa      	ldrb	r2, [r7, #7]
 8003c3c:	b2d8      	uxtb	r0, r3
 8003c3e:	4907      	ldr	r1, [pc, #28]	@ (8003c5c <NCE_SetCursorPosition+0x48>)
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	440b      	add	r3, r1
 8003c4a:	3322      	adds	r3, #34	@ 0x22
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	701a      	strb	r2, [r3, #0]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	20002dfc 	.word	0x20002dfc

08003c60 <NCE_CursorOn>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NCE_CursorOn(unsigned char bCab)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]

	NCE_PutQueue(bCab, CURSOR_ON);
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	21cf      	movs	r1, #207	@ 0xcf
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff54 	bl	8003b1c <NCE_PutQueue>
	CabBus[bCab].CursonOn = 1;
 8003c74:	79fa      	ldrb	r2, [r7, #7]
 8003c76:	4908      	ldr	r1, [pc, #32]	@ (8003c98 <NCE_CursorOn+0x38>)
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003c86:	7913      	ldrb	r3, [r2, #4]
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	7113      	strb	r3, [r2, #4]
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20002dfc 	.word	0x20002dfc

08003c9c <NCE_CursorOff>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NCE_CursorOff(unsigned char bCab)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]

	NCE_PutQueue(bCab, CURSOR_OFF);
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	21ce      	movs	r1, #206	@ 0xce
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff ff36 	bl	8003b1c <NCE_PutQueue>
	CabBus[bCab].CursonOn = 0;
 8003cb0:	79fa      	ldrb	r2, [r7, #7]
 8003cb2:	4908      	ldr	r1, [pc, #32]	@ (8003cd4 <NCE_CursorOff+0x38>)
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003cc2:	7913      	ldrb	r3, [r2, #4]
 8003cc4:	f36f 0300 	bfc	r3, #0, #1
 8003cc8:	7113      	strb	r3, [r2, #4]
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20002dfc 	.word	0x20002dfc

08003cd8 <UpdateWangrowClock>:
*
* RESTRICTIONS:	Move this to someplace more sane
*
**********************************************************************/
void UpdateWangrowClock(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	@ 0x28
 8003cdc:	af00      	add	r7, sp, #0
	char szTime[16];
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	if(SuppressClock == 0)
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <UpdateWangrowClock+0x88>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d137      	bne.n	8003d56 <UpdateWangrowClock+0x7e>
	{
		if(HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) == HAL_OK)
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4619      	mov	r1, r3
 8003cec:	481d      	ldr	r0, [pc, #116]	@ (8003d64 <UpdateWangrowClock+0x8c>)
 8003cee:	f010 fa0f 	bl	8014110 <HAL_RTC_GetTime>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d121      	bne.n	8003d3c <UpdateWangrowClock+0x64>
		{
			if(bTimeFmt)
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <UpdateWangrowClock+0x90>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <UpdateWangrowClock+0x3a>
			{
				sprintf(szTime, "   %2d:%02d", time.Hours, time.Minutes);
 8003d00:	793b      	ldrb	r3, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	797b      	ldrb	r3, [r7, #5]
 8003d06:	f107 0018 	add.w	r0, r7, #24
 8003d0a:	4918      	ldr	r1, [pc, #96]	@ (8003d6c <UpdateWangrowClock+0x94>)
 8003d0c:	f022 f976 	bl	8025ffc <siprintf>
 8003d10:	e014      	b.n	8003d3c <UpdateWangrowClock+0x64>
			}
			else
			{
				if(time.Hours > 12)
 8003d12:	793b      	ldrb	r3, [r7, #4]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	d909      	bls.n	8003d2c <UpdateWangrowClock+0x54>
				{
					sprintf(szTime, "  %2d:%02dP", time.Hours-12, time.Minutes);
 8003d18:	793b      	ldrb	r3, [r7, #4]
 8003d1a:	f1a3 020c 	sub.w	r2, r3, #12
 8003d1e:	797b      	ldrb	r3, [r7, #5]
 8003d20:	f107 0018 	add.w	r0, r7, #24
 8003d24:	4912      	ldr	r1, [pc, #72]	@ (8003d70 <UpdateWangrowClock+0x98>)
 8003d26:	f022 f969 	bl	8025ffc <siprintf>
 8003d2a:	e007      	b.n	8003d3c <UpdateWangrowClock+0x64>
				}
				else
				{
					sprintf(szTime, "  %2d:%02dA", time.Hours, time.Minutes);
 8003d2c:	793b      	ldrb	r3, [r7, #4]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	797b      	ldrb	r3, [r7, #5]
 8003d32:	f107 0018 	add.w	r0, r7, #24
 8003d36:	490f      	ldr	r1, [pc, #60]	@ (8003d74 <UpdateWangrowClock+0x9c>)
 8003d38:	f022 f960 	bl	8025ffc <siprintf>
				}
			}
		}
		// call the date read to unlock the clock
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4619      	mov	r1, r3
 8003d42:	4808      	ldr	r0, [pc, #32]	@ (8003d64 <UpdateWangrowClock+0x8c>)
 8003d44:	f010 facc 	bl	80142e0 <HAL_RTC_GetDate>

		NCE_DisplayMessage(0, 8, 0, szTime);
 8003d48:	f107 0318 	add.w	r3, r7, #24
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2108      	movs	r1, #8
 8003d50:	2000      	movs	r0, #0
 8003d52:	f7ff fe35 	bl	80039c0 <NCE_DisplayMessage>
	}
}
 8003d56:	bf00      	nop
 8003d58:	3728      	adds	r7, #40	@ 0x28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20003039 	.word	0x20003039
 8003d64:	2001c1b4 	.word	0x2001c1b4
 8003d68:	2001b564 	.word	0x2001b564
 8003d6c:	08026978 	.word	0x08026978
 8003d70:	08026984 	.word	0x08026984
 8003d74:	08026990 	.word	0x08026990

08003d78 <NCE_SuppressClock>:

void NCE_SuppressClock(unsigned char bClock)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
	SuppressClock = bClock;
 8003d82:	4a04      	ldr	r2, [pc, #16]	@ (8003d94 <NCE_SuppressClock+0x1c>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	7013      	strb	r3, [r2, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	20003039 	.word	0x20003039

08003d98 <FormatLen>:
*
* RESTRICTIONS:
*
**********************************************************************/
int FormatLen(char* szFormat)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

	while(*szFormat && !isdigit(*szFormat))
 8003da0:	e002      	b.n	8003da8 <FormatLen+0x10>
	{
		szFormat++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3301      	adds	r3, #1
 8003da6:	607b      	str	r3, [r7, #4]
	while(*szFormat && !isdigit(*szFormat))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <FormatLen+0x2c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <FormatLen+0x3c>)
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ee      	beq.n	8003da2 <FormatLen+0xa>
	}
	
	return atoi(szFormat);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f021 fafb 	bl	80253c0 <atoi>
 8003dca:	4603      	mov	r3, r0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	0802c3d0 	.word	0x0802c3d0

08003dd8 <EditNumeric>:
*
* RESTRICTIONS:
*
**********************************************************************/
void EditNumeric(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	@ 0x30
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
	char szPrintBuffer[17];
	char *format;
	int *var_ptr;
	unsigned char i;
	unsigned char len;
	unsigned char fUpdate = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	
	var_ptr = (int*)pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].variable;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4619      	mov	r1, r3
 8003df4:	460b      	mov	r3, r1
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
	format = (char *)pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].format;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	460b      	mov	r3, r1
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
	pEditBuffer = pVirtualCab->szEditBuffer;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3326      	adds	r3, #38	@ 0x26
 8003e20:	623b      	str	r3, [r7, #32]
	
	if(var_ptr)
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80cf 	beq.w	8003fc8 <EditNumeric+0x1f0>
	{
		switch(nEvent)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2bd2      	cmp	r3, #210	@ 0xd2
 8003e2e:	d03c      	beq.n	8003eaa <EditNumeric+0xd2>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2bd2      	cmp	r3, #210	@ 0xd2
 8003e34:	dc40      	bgt.n	8003eb8 <EditNumeric+0xe0>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2bd1      	cmp	r3, #209	@ 0xd1
 8003e3a:	d016      	beq.n	8003e6a <EditNumeric+0x92>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2bd1      	cmp	r3, #209	@ 0xd1
 8003e40:	dc3a      	bgt.n	8003eb8 <EditNumeric+0xe0>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b90      	cmp	r3, #144	@ 0x90
 8003e46:	d002      	beq.n	8003e4e <EditNumeric+0x76>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2bd0      	cmp	r3, #208	@ 0xd0
 8003e4c:	d134      	bne.n	8003eb8 <EditNumeric+0xe0>
		{
			case EVENT_CLEAR_DATA:
			case EVENT_EXPANSION:
				pEditBuffer[0] = 0;			// set variable to 0
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
				pVirtualCab->nCursor = 0;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	621a      	str	r2, [r3, #32]
				pVirtualCab->bFirstTime = 1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				fUpdate = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				break;
 8003e68:	e079      	b.n	8003f5e <EditNumeric+0x186>
		
			case EVENT_GET_DATA:
				pVirtualCab->nCursor = 0;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	621a      	str	r2, [r3, #32]
				pVirtualCab->bFirstTime = 1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				
				// get the data
				sprintf(pEditBuffer, "%d", *var_ptr);
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4954      	ldr	r1, [pc, #336]	@ (8003fd0 <EditNumeric+0x1f8>)
 8003e80:	6a38      	ldr	r0, [r7, #32]
 8003e82:	f022 f8bb 	bl	8025ffc <siprintf>
				
				NCE_SetCursorPosition(pVirtualCab->Cab, 15, 1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	210f      	movs	r1, #15
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff febf 	bl	8003c14 <NCE_SetCursorPosition>
				NCE_CursorOn(pVirtualCab->Cab);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fedf 	bl	8003c60 <NCE_CursorOn>
				fUpdate = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				break;
 8003ea8:	e059      	b.n	8003f5e <EditNumeric+0x186>
		
			case EVENT_STORE_DATA:
				// convert string to number
				*var_ptr = atoi(pEditBuffer);
 8003eaa:	6a38      	ldr	r0, [r7, #32]
 8003eac:	f021 fa88 	bl	80253c0 <atoi>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	601a      	str	r2, [r3, #0]
				//				NCE_CursorOff(pVirtualCab->Cab);
				break;
 8003eb6:	e052      	b.n	8003f5e <EditNumeric+0x186>
		
			default:
				if(isdigit((char)nEvent))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a45      	ldr	r2, [pc, #276]	@ (8003fd4 <EditNumeric+0x1fc>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d047      	beq.n	8003f5c <EditNumeric+0x184>
					//{
					//	QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_HEADLIGHT);
					//	return;
					//}
				
					len = FormatLen(format);
 8003ecc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ece:	f7ff ff63 	bl	8003d98 <FormatLen>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	77fb      	strb	r3, [r7, #31]
					
					if(strlen(pEditBuffer) == len || pVirtualCab->bFirstTime == 1)
 8003ed6:	6a38      	ldr	r0, [r7, #32]
 8003ed8:	f7fc f9e4 	bl	80002a4 <strlen>
 8003edc:	4602      	mov	r2, r0
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d004      	beq.n	8003eee <EditNumeric+0x116>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d109      	bne.n	8003f02 <EditNumeric+0x12a>
					{
						pVirtualCab->bFirstTime = 0;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
						pVirtualCab->nCursor = 0;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	621a      	str	r2, [r3, #32]
						pEditBuffer[0] = '\0';
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
					}
					
					// push remaining characters
					i = strlen(pEditBuffer) + 1;		// include the '\0'
 8003f02:	6a38      	ldr	r0, [r7, #32]
 8003f04:	f7fc f9ce 	bl	80002a4 <strlen>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					
					while(i != pVirtualCab->nCursor)
 8003f12:	e00f      	b.n	8003f34 <EditNumeric+0x15c>
					{
						pEditBuffer[i] = pEditBuffer[i - 1];
 8003f14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	6a3a      	ldr	r2, [r7, #32]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f22:	6a39      	ldr	r1, [r7, #32]
 8003f24:	440b      	add	r3, r1
 8003f26:	7812      	ldrb	r2, [r2, #0]
 8003f28:	701a      	strb	r2, [r3, #0]
						--i;
 8003f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					while(i != pVirtualCab->nCursor)
 8003f34:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1e9      	bne.n	8003f14 <EditNumeric+0x13c>
					}
					
					pEditBuffer[pVirtualCab->nCursor++] = (char)nEvent;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	1c59      	adds	r1, r3, #1
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6211      	str	r1, [r2, #32]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	4413      	add	r3, r2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]
					fUpdate = 1;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				}
				break;
 8003f5c:	bf00      	nop
		}

		if(fUpdate)
 8003f5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d030      	beq.n	8003fc8 <EditNumeric+0x1f0>
		{
			if(atoi(pEditBuffer) == 0 && pVirtualCab->bFirstTime == 1)
 8003f66:	6a38      	ldr	r0, [r7, #32]
 8003f68:	f021 fa2a 	bl	80253c0 <atoi>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10d      	bne.n	8003f8e <EditNumeric+0x1b6>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d108      	bne.n	8003f8e <EditNumeric+0x1b6>
			{
				NCE_DisplayMessage(pVirtualCab->Cab, 16 - 4, 1, "    ");
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b2d8      	uxtb	r0, r3
 8003f82:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <EditNumeric+0x200>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	210c      	movs	r1, #12
 8003f88:	f7ff fd1a 	bl	80039c0 <NCE_DisplayMessage>
				len = strlen(szPrintBuffer);
				NCE_DisplayMessage(pVirtualCab->Cab, 16 - len, 1, szPrintBuffer);
			}
		}
	}
}
 8003f8c:	e01c      	b.n	8003fc8 <EditNumeric+0x1f0>
				sprintf(szPrintBuffer, format, atoi(pEditBuffer));
 8003f8e:	6a38      	ldr	r0, [r7, #32]
 8003f90:	f021 fa16 	bl	80253c0 <atoi>
 8003f94:	4602      	mov	r2, r0
 8003f96:	f107 030c 	add.w	r3, r7, #12
 8003f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f022 f82d 	bl	8025ffc <siprintf>
				len = strlen(szPrintBuffer);
 8003fa2:	f107 030c 	add.w	r3, r7, #12
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fc f97c 	bl	80002a4 <strlen>
 8003fac:	4603      	mov	r3, r0
 8003fae:	77fb      	strb	r3, [r7, #31]
				NCE_DisplayMessage(pVirtualCab->Cab, 16 - len, 1, szPrintBuffer);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b2d8      	uxtb	r0, r3
 8003fb6:	7ffb      	ldrb	r3, [r7, #31]
 8003fb8:	f1c3 0310 	rsb	r3, r3, #16
 8003fbc:	b2d9      	uxtb	r1, r3
 8003fbe:	f107 030c 	add.w	r3, r7, #12
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f7ff fcfc 	bl	80039c0 <NCE_DisplayMessage>
}
 8003fc8:	bf00      	nop
 8003fca:	3730      	adds	r7, #48	@ 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	0802699c 	.word	0x0802699c
 8003fd4:	0802c3d0 	.word	0x0802c3d0
 8003fd8:	080269a0 	.word	0x080269a0

08003fdc <EditList>:
*
* RESTRICTIONS:
*
**********************************************************************/
void EditList(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	unsigned char fUpdate;
	char **List;
	int nTemp;
	
	
	fUpdate = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
	
	var_ptr = pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].variable;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	613b      	str	r3, [r7, #16]
	List = (char **)pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].format;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	4619      	mov	r1, r3
 8004010:	460b      	mov	r3, r1
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
	
	switch(nEvent)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2bd2      	cmp	r3, #210	@ 0xd2
 8004022:	d034      	beq.n	800408e <EditList+0xb2>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2bd2      	cmp	r3, #210	@ 0xd2
 8004028:	dc52      	bgt.n	80040d0 <EditList+0xf4>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b82      	cmp	r3, #130	@ 0x82
 800402e:	d038      	beq.n	80040a2 <EditList+0xc6>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2bd1      	cmp	r3, #209	@ 0xd1
 8004034:	d14c      	bne.n	80040d0 <EditList+0xf4>
	{
		case EVENT_GET_DATA:
			pVirtualCab->nListCount = 0;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
			while(List[pVirtualCab->nListCount])
 800403c:	e004      	b.n	8004048 <EditList+0x6c>
			{
				pVirtualCab->nListCount++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
			while(List[pVirtualCab->nListCount])
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f2      	bne.n	800403e <EditList+0x62>
			}

			if(var_ptr == NULL)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <EditList+0x8a>
			{
				pVirtualCab->nEditVar = 0;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004064:	e00a      	b.n	800407c <EditList+0xa0>
			}
			else
			{
				pVirtualCab->nEditVar = (*var_ptr) % pVirtualCab->nListCount;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800406e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004072:	fb01 f202 	mul.w	r2, r1, r2
 8004076:	1a9a      	subs	r2, r3, r2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	@ 0x2c
			}

			NCE_CursorOff(pVirtualCab->Cab);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fe0a 	bl	8003c9c <NCE_CursorOff>

			fUpdate = 1;
 8004088:	2301      	movs	r3, #1
 800408a:	75fb      	strb	r3, [r7, #23]
			break;
 800408c:	e03e      	b.n	800410c <EditList+0x130>

		case EVENT_STORE_DATA:
			if(var_ptr != NULL)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <EditList+0xc0>
			{
				*var_ptr = pVirtualCab->nEditVar;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	601a      	str	r2, [r3, #0]
			}
			fUpdate = 1;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
			break;
 80040a0:	e034      	b.n	800410c <EditList+0x130>

		case EVENT_PROG_MODE:
			pVirtualCab->nEditVar++;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(pVirtualCab->nEditVar == pVirtualCab->nListCount)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d108      	bne.n	80040ca <EditList+0xee>
			{
				pVirtualCab->nEvent = EVENT_EXPANSION;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2290      	movs	r2, #144	@ 0x90
 80040bc:	615a      	str	r2, [r3, #20]
				QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_EXPANSION);
 80040be:	2290      	movs	r2, #144	@ 0x90
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	2001      	movs	r0, #1
 80040c4:	f7fd fd6e 	bl	8001ba4 <QueueMessage>
			}
			else
			{
				fUpdate = 1;
			}
			break;
 80040c8:	e020      	b.n	800410c <EditList+0x130>
				fUpdate = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
			break;
 80040ce:	e01d      	b.n	800410c <EditList+0x130>

		default:
			if(isdigit((char)nEvent))
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <EditList+0x158>)
 80040d8:	4413      	add	r3, r2
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <EditList+0x12e>
			{
				nTemp = (nEvent - '1');
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	3b31      	subs	r3, #49	@ 0x31
 80040e8:	60bb      	str	r3, [r7, #8]
				if(nTemp < pVirtualCab->nListCount)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	da0a      	bge.n	800410a <EditList+0x12e>
				{
					pVirtualCab->nEditVar = nTemp;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					pVirtualCab->nEvent = EVENT_ENTER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2281      	movs	r2, #129	@ 0x81
 80040fe:	615a      	str	r2, [r3, #20]
					QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_ENTER);
 8004100:	2281      	movs	r2, #129	@ 0x81
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	2001      	movs	r0, #1
 8004106:	f7fd fd4d 	bl	8001ba4 <QueueMessage>
				}
			}
			break;
 800410a:	bf00      	nop
	}

	if(fUpdate)
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00c      	beq.n	800412c <EditList+0x150>
	{
		// display it
		NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, List[pVirtualCab->nEditVar]);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b2d8      	uxtb	r0, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	2100      	movs	r1, #0
 8004128:	f7ff fc4a 	bl	80039c0 <NCE_DisplayMessage>
	}
}
 800412c:	bf00      	nop
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	0802c3d0 	.word	0x0802c3d0

08004138 <SetFunctionCursor>:
*
* RESTRICTIONS:
*
**********************************************************************/
void SetFunctionCursor(int bCab, int pos)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]

	if(pos >= 20)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b13      	cmp	r3, #19
 8004146:	dd0a      	ble.n	800415e <SetFunctionCursor+0x26>
	{
		NCE_SetCursorPosition(bCab, pos-14, 1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	b2d8      	uxtb	r0, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3b0e      	subs	r3, #14
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2201      	movs	r2, #1
 8004156:	4619      	mov	r1, r3
 8004158:	f7ff fd5c 	bl	8003c14 <NCE_SetCursorPosition>
 800415c:	e017      	b.n	800418e <SetFunctionCursor+0x56>
	}
	else if(pos >= 10)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b09      	cmp	r3, #9
 8004162:	dd0a      	ble.n	800417a <SetFunctionCursor+0x42>
	{
		NCE_SetCursorPosition(bCab, pos-4, 0);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	b2d8      	uxtb	r0, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3b04      	subs	r3, #4
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2200      	movs	r2, #0
 8004172:	4619      	mov	r1, r3
 8004174:	f7ff fd4e 	bl	8003c14 <NCE_SetCursorPosition>
 8004178:	e009      	b.n	800418e <SetFunctionCursor+0x56>
	}
	else
	{
		NCE_SetCursorPosition(bCab, pos+6, 0);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	b2d8      	uxtb	r0, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3306      	adds	r3, #6
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2200      	movs	r2, #0
 8004188:	4619      	mov	r1, r3
 800418a:	f7ff fd43 	bl	8003c14 <NCE_SetCursorPosition>
	}
	NCE_CursorOn(bCab);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fd64 	bl	8003c60 <NCE_CursorOn>
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <StateFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
	Loco* pLoco;


	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3214      	adds	r2, #20
 80041b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b6:	60fb      	str	r3, [r7, #12]

	if(nEvent == EVENT_STATE_ENTER)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80041bc:	d132      	bne.n	8004224 <StateFunction+0x84>
	{
		NCE_SuppressClock(1);
 80041be:	2001      	movs	r0, #1
 80041c0:	f7ff fdda 	bl	8003d78 <NCE_SuppressClock>

		if(pVirtualCab->nCursor < 10)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	dc02      	bgt.n	80041d2 <StateFunction+0x32>
		{
			pVirtualCab->nCursor = 10;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	220a      	movs	r2, #10
 80041d0:	621a      	str	r2, [r3, #32]
		}
		if(pLoco != NULL && GetLocoAddress(pLoco) != ANALOG_LOCO)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <StateFunction+0x7a>
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7fd fc80 	bl	8001ade <GetLocoAddress>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d017      	beq.n	800421a <StateFunction+0x7a>
		{
			SetExpiration(pVirtualCab, 0);		// cancel the timeout if timeout is pending
 80041ea:	2100      	movs	r1, #0
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fd f855 	bl	800129c <SetExpiration>
			NewMenu(pVirtualCab, &FunctionMenu);
 80041f2:	4927      	ldr	r1, [pc, #156]	@ (8004290 <StateFunction+0xf0>)
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 fa55 	bl	80056a4 <NewMenu>
			pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_1L | MENU_SHOWING_LINE_1R | MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R | MENU_SHOWING_FUNCTIONS;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	222f      	movs	r2, #47	@ 0x2f
 80041fe:	635a      	str	r2, [r3, #52]	@ 0x34

			SetFunctionCursor(pVirtualCab->Cab, pVirtualCab->nCursor);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7ff ff94 	bl	8004138 <SetFunctionCursor>
			pVirtualCab->CursorState = 1;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
		{
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
		}
	}
}
 8004218:	e036      	b.n	8004288 <StateFunction+0xe8>
			ChangeState(pVirtualCab, STATE_IDLE);
 800421a:	2100      	movs	r1, #0
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f002 fd1f 	bl	8006c60 <ChangeState>
}
 8004222:	e031      	b.n	8004288 <StateFunction+0xe8>
	else if(nEvent == EVENT_STATE_EXIT)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2bc1      	cmp	r3, #193	@ 0xc1
 8004228:	d109      	bne.n	800423e <StateFunction+0x9e>
		NCE_CursorOff(pVirtualCab->Cab);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd33 	bl	8003c9c <NCE_CursorOff>
		NCE_SuppressClock(0);
 8004236:	2000      	movs	r0, #0
 8004238:	f7ff fd9e 	bl	8003d78 <NCE_SuppressClock>
}
 800423c:	e024      	b.n	8004288 <StateFunction+0xe8>
	else if(!DispatchEvent(pVirtualCab, nEvent, FunctionMap))
 800423e:	4a15      	ldr	r2, [pc, #84]	@ (8004294 <StateFunction+0xf4>)
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f002 fd21 	bl	8006c8a <DispatchEvent>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11c      	bne.n	8004288 <StateFunction+0xe8>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	4619      	mov	r1, r3
 800425a:	460b      	mov	r3, r1
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <StateFunction+0xe8>
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	4619      	mov	r1, r3
 8004276:	460b      	mov	r3, r1
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	0802b398 	.word	0x0802b398
 8004294:	0802b298 	.word	0x0802b298

08004298 <ExitFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]

	//ExitMenu(pVirtualCab);

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	635a      	str	r2, [r3, #52]	@ 0x34
	//NCE_CursorOff(pVirtualCab->Cab);
	RestoreOperateScreen(pVirtualCab, 1, 1);
 80042a8:	2201      	movs	r2, #1
 80042aa:	2101      	movs	r1, #1
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f002 fbdf 	bl	8006a70 <RestoreOperateScreen>

	ChangeState(pVirtualCab, STATE_IDLE);
 80042b2:	2100      	movs	r1, #0
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f002 fcd3 	bl	8006c60 <ChangeState>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <DisplayFunctions>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplayFunctions(VIRTUAL_CAB* pVirtualCab, unsigned long FunctionMap)
{
 80042c4:	b5b0      	push	{r4, r5, r7, lr}
 80042c6:	b08a      	sub	sp, #40	@ 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
	int StrIndex;

	// 10-19:0123456789
	// 20-28:012345678

	if(pVirtualCab->nCursor < 10)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	dc68      	bgt.n	80043a8 <DisplayFunctions+0xe4>
	{
		//if((pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_2R) == 0)
		{
			strcpy(szFunctionList, "  0-9:L123456789");
 80042d6:	4b68      	ldr	r3, [pc, #416]	@ (8004478 <DisplayFunctions+0x1b4>)
 80042d8:	f107 0408 	add.w	r4, r7, #8
 80042dc:	461d      	mov	r5, r3
 80042de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	7023      	strb	r3, [r4, #0]

			// ToDo - make this programmable
			szFunctionList[8] = 'B';
 80042e6:	2342      	movs	r3, #66	@ 0x42
 80042e8:	743b      	strb	r3, [r7, #16]
			szFunctionList[9] = 'H';
 80042ea:	2348      	movs	r3, #72	@ 0x48
 80042ec:	747b      	strb	r3, [r7, #17]

			MapIndex = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	623b      	str	r3, [r7, #32]
			StrIndex = 6;
 80042f2:	2306      	movs	r3, #6
 80042f4:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < 10; i++)
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fa:	e016      	b.n	800432a <DisplayFunctions+0x66>
			{
				if((FunctionMap & lBitMask[MapIndex]) == 0)
 80042fc:	4a5f      	ldr	r2, [pc, #380]	@ (800447c <DisplayFunctions+0x1b8>)
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <DisplayFunctions+0x54>
				{
					szFunctionList[StrIndex] = '-';
 800430c:	f107 0208 	add.w	r2, r7, #8
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	222d      	movs	r2, #45	@ 0x2d
 8004316:	701a      	strb	r2, [r3, #0]
				}
				MapIndex++;
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	3301      	adds	r3, #1
 800431c:	623b      	str	r3, [r7, #32]
				StrIndex++;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3301      	adds	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < 10; i++)
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	3301      	adds	r3, #1
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	2b09      	cmp	r3, #9
 800432e:	dde5      	ble.n	80042fc <DisplayFunctions+0x38>
			}
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, szFunctionList);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b2d8      	uxtb	r0, r3
 8004336:	f107 0308 	add.w	r3, r7, #8
 800433a:	2200      	movs	r2, #0
 800433c:	2100      	movs	r1, #0
 800433e:	f7ff fb3f 	bl	80039c0 <NCE_DisplayMessage>

			strcpy(szFunctionList, "10-19:0123456789");
 8004342:	4b4f      	ldr	r3, [pc, #316]	@ (8004480 <DisplayFunctions+0x1bc>)
 8004344:	f107 0408 	add.w	r4, r7, #8
 8004348:	461d      	mov	r5, r3
 800434a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800434c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	7023      	strb	r3, [r4, #0]
			MapIndex = 10;
 8004352:	230a      	movs	r3, #10
 8004354:	623b      	str	r3, [r7, #32]
			StrIndex = 6;
 8004356:	2306      	movs	r3, #6
 8004358:	61fb      	str	r3, [r7, #28]

			for(i = 0; i < 10; i++)
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
 800435e:	e016      	b.n	800438e <DisplayFunctions+0xca>
			{
				if((FunctionMap & lBitMask[MapIndex]) == 0)
 8004360:	4a46      	ldr	r2, [pc, #280]	@ (800447c <DisplayFunctions+0x1b8>)
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <DisplayFunctions+0xb8>
				{
					szFunctionList[StrIndex] = '-';
 8004370:	f107 0208 	add.w	r2, r7, #8
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	222d      	movs	r2, #45	@ 0x2d
 800437a:	701a      	strb	r2, [r3, #0]
				}
				MapIndex++;
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	3301      	adds	r3, #1
 8004380:	623b      	str	r3, [r7, #32]
				StrIndex++;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3301      	adds	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < 10; i++)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	3301      	adds	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	2b09      	cmp	r3, #9
 8004392:	dde5      	ble.n	8004360 <DisplayFunctions+0x9c>
			}
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, szFunctionList);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2d8      	uxtb	r0, r3
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	2201      	movs	r2, #1
 80043a0:	2100      	movs	r1, #0
 80043a2:	f7ff fb0d 	bl	80039c0 <NCE_DisplayMessage>
				StrIndex++;
			}
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, szFunctionList);
		}
	}
}
 80043a6:	e063      	b.n	8004470 <DisplayFunctions+0x1ac>
			strcpy(szFunctionList, "10-19:0123456789");
 80043a8:	4b35      	ldr	r3, [pc, #212]	@ (8004480 <DisplayFunctions+0x1bc>)
 80043aa:	f107 0408 	add.w	r4, r7, #8
 80043ae:	461d      	mov	r5, r3
 80043b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	7023      	strb	r3, [r4, #0]
			MapIndex = 10;
 80043b8:	230a      	movs	r3, #10
 80043ba:	623b      	str	r3, [r7, #32]
			StrIndex = 6;
 80043bc:	2306      	movs	r3, #6
 80043be:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < 10; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c4:	e016      	b.n	80043f4 <DisplayFunctions+0x130>
				if((FunctionMap & lBitMask[MapIndex]) == 0)
 80043c6:	4a2d      	ldr	r2, [pc, #180]	@ (800447c <DisplayFunctions+0x1b8>)
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <DisplayFunctions+0x11e>
					szFunctionList[StrIndex] = '-';
 80043d6:	f107 0208 	add.w	r2, r7, #8
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	222d      	movs	r2, #45	@ 0x2d
 80043e0:	701a      	strb	r2, [r3, #0]
				MapIndex++;
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	3301      	adds	r3, #1
 80043e6:	623b      	str	r3, [r7, #32]
				StrIndex++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < 10; i++)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	3301      	adds	r3, #1
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	dde5      	ble.n	80043c6 <DisplayFunctions+0x102>
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, szFunctionList);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	b2d8      	uxtb	r0, r3
 8004400:	f107 0308 	add.w	r3, r7, #8
 8004404:	2200      	movs	r2, #0
 8004406:	2100      	movs	r1, #0
 8004408:	f7ff fada 	bl	80039c0 <NCE_DisplayMessage>
			strcpy(szFunctionList, "20-28:012345678 ");
 800440c:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <DisplayFunctions+0x1c0>)
 800440e:	f107 0408 	add.w	r4, r7, #8
 8004412:	461d      	mov	r5, r3
 8004414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	7023      	strb	r3, [r4, #0]
			MapIndex = 20;
 800441c:	2314      	movs	r3, #20
 800441e:	623b      	str	r3, [r7, #32]
			StrIndex = 6;
 8004420:	2306      	movs	r3, #6
 8004422:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < 9; i++)
 8004424:	2300      	movs	r3, #0
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
 8004428:	e016      	b.n	8004458 <DisplayFunctions+0x194>
				if((FunctionMap & lBitMask[MapIndex]) == 0)
 800442a:	4a14      	ldr	r2, [pc, #80]	@ (800447c <DisplayFunctions+0x1b8>)
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <DisplayFunctions+0x182>
					szFunctionList[StrIndex] = '-';
 800443a:	f107 0208 	add.w	r2, r7, #8
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	222d      	movs	r2, #45	@ 0x2d
 8004444:	701a      	strb	r2, [r3, #0]
				MapIndex++;
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	3301      	adds	r3, #1
 800444a:	623b      	str	r3, [r7, #32]
				StrIndex++;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	3301      	adds	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < 9; i++)
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	3301      	adds	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	2b08      	cmp	r3, #8
 800445c:	dde5      	ble.n	800442a <DisplayFunctions+0x166>
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, szFunctionList);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b2d8      	uxtb	r0, r3
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	2201      	movs	r2, #1
 800446a:	2100      	movs	r1, #0
 800446c:	f7ff faa8 	bl	80039c0 <NCE_DisplayMessage>
}
 8004470:	bf00      	nop
 8004472:	3728      	adds	r7, #40	@ 0x28
 8004474:	46bd      	mov	sp, r7
 8004476:	bdb0      	pop	{r4, r5, r7, pc}
 8004478:	080269a8 	.word	0x080269a8
 800447c:	0802ba48 	.word	0x0802ba48
 8004480:	080269bc 	.word	0x080269bc
 8004484:	080269d0 	.word	0x080269d0

08004488 <EditFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void EditFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
	unsigned long Mask;
	unsigned long FunctionMap;
	unsigned char fUpdate = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	74fb      	strb	r3, [r7, #19]
	Loco* pLoco;


	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3214      	adds	r2, #20
 800449e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a2:	60fb      	str	r3, [r7, #12]

	switch(nEvent)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2bd1      	cmp	r3, #209	@ 0xd1
 80044a8:	d106      	bne.n	80044b8 <EditFunction+0x30>
	{
		case EVENT_GET_DATA:
			FunctionMap = GetLocoFunctions(pLoco);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7fd fa90 	bl	80019d0 <GetLocoFunctions>
 80044b0:	6178      	str	r0, [r7, #20]
			//NCE_CursorOff(pVirtualCab->Cab);
			fUpdate = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	74fb      	strb	r3, [r7, #19]
		break;
 80044b6:	e0b3      	b.n	8004620 <EditFunction+0x198>

		default:
			//if(isdigit((char)nEvent))
			{
				FunctionMap = GetLocoFunctions(pLoco);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7fd fa89 	bl	80019d0 <GetLocoFunctions>
 80044be:	6178      	str	r0, [r7, #20]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	3b81      	subs	r3, #129	@ 0x81
 80044c4:	2b1b      	cmp	r3, #27
 80044c6:	f200 8095 	bhi.w	80045f4 <EditFunction+0x16c>
 80044ca:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <EditFunction+0x48>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080045bf 	.word	0x080045bf
 80044d4:	080045f5 	.word	0x080045f5
 80044d8:	080045f5 	.word	0x080045f5
 80044dc:	080045f5 	.word	0x080045f5
 80044e0:	080045f5 	.word	0x080045f5
 80044e4:	080045f5 	.word	0x080045f5
 80044e8:	080045f5 	.word	0x080045f5
 80044ec:	080045f5 	.word	0x080045f5
 80044f0:	080045f5 	.word	0x080045f5
 80044f4:	080045f5 	.word	0x080045f5
 80044f8:	08004541 	.word	0x08004541
 80044fc:	0800455b 	.word	0x0800455b
 8004500:	080045f5 	.word	0x080045f5
 8004504:	080045f5 	.word	0x080045f5
 8004508:	080045f5 	.word	0x080045f5
 800450c:	080045f5 	.word	0x080045f5
 8004510:	080045f5 	.word	0x080045f5
 8004514:	080045f5 	.word	0x080045f5
 8004518:	080045f5 	.word	0x080045f5
 800451c:	080045f5 	.word	0x080045f5
 8004520:	080045f5 	.word	0x080045f5
 8004524:	080045f5 	.word	0x080045f5
 8004528:	080045f5 	.word	0x080045f5
 800452c:	080045f5 	.word	0x080045f5
 8004530:	080045f5 	.word	0x080045f5
 8004534:	080045f5 	.word	0x080045f5
 8004538:	08004577 	.word	0x08004577
 800453c:	0800459b 	.word	0x0800459b

				switch(nEvent)
				{
					case EVENT_SPEED_INC:
						pVirtualCab->nCursor++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]
						if(pVirtualCab->nCursor > 28)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	2b1c      	cmp	r3, #28
 8004550:	dd4f      	ble.n	80045f2 <EditFunction+0x16a>
						{
							pVirtualCab->nCursor = 0;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	621a      	str	r2, [r3, #32]
						}
					break;
 8004558:	e04b      	b.n	80045f2 <EditFunction+0x16a>

					case EVENT_SPEED_DEC:
						if(pVirtualCab->nCursor == 0)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <EditFunction+0xe2>
						{
							pVirtualCab->nCursor = 28;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	221c      	movs	r2, #28
 8004566:	621a      	str	r2, [r3, #32]
						}
						else
						{
							pVirtualCab->nCursor--;
						}
					break;
 8004568:	e044      	b.n	80045f4 <EditFunction+0x16c>
							pVirtualCab->nCursor--;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	1e5a      	subs	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	621a      	str	r2, [r3, #32]
					break;
 8004574:	e03e      	b.n	80045f4 <EditFunction+0x16c>

					case EVENT_SPEED_INC_FAST:
						if(pVirtualCab->nCursor < 10)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	2b09      	cmp	r3, #9
 800457c:	dc06      	bgt.n	800458c <EditFunction+0x104>
						{
							pVirtualCab->nCursor += 20;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f103 0214 	add.w	r2, r3, #20
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	621a      	str	r2, [r3, #32]
						}
						else
						{
							pVirtualCab->nCursor -= 10;
						}
					break;
 800458a:	e033      	b.n	80045f4 <EditFunction+0x16c>
							pVirtualCab->nCursor -= 10;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f1a3 020a 	sub.w	r2, r3, #10
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	621a      	str	r2, [r3, #32]
					break;
 8004598:	e02c      	b.n	80045f4 <EditFunction+0x16c>

					case EVENT_SPEED_DEC_FAST:
						if(pVirtualCab->nCursor < 20)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	2b13      	cmp	r3, #19
 80045a0:	dc06      	bgt.n	80045b0 <EditFunction+0x128>
						{
							pVirtualCab->nCursor += 10;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f103 020a 	add.w	r2, r3, #10
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]
						}
						else
						{
							pVirtualCab->nCursor -= 20;
						}
					break;
 80045ae:	e021      	b.n	80045f4 <EditFunction+0x16c>
							pVirtualCab->nCursor -= 20;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f1a3 0214 	sub.w	r2, r3, #20
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]
					break;
 80045bc:	e01a      	b.n	80045f4 <EditFunction+0x16c>
						//}
						//else
						//{
						//	Mask = lBitMask[pVirtualCab->nCursor+10];
						//}
						Mask = lBitMask[pVirtualCab->nCursor];
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a20      	ldr	r2, [pc, #128]	@ (8004644 <EditFunction+0x1bc>)
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	60bb      	str	r3, [r7, #8]
						if(FunctionMap & Mask)
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <EditFunction+0x158>
						{
							FunctionMap &= ~Mask;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4013      	ands	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e003      	b.n	80045e8 <EditFunction+0x160>
						}
						else
						{
							FunctionMap |= Mask;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
						}
						//SetLocoFunctions2(pLoco, FunctionMap);
						SetLocoFunctions(pLoco, FunctionMap);
 80045e8:	6979      	ldr	r1, [r7, #20]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7fd f9fc 	bl	80019e8 <SetLocoFunctions>
					break;
 80045f0:	e000      	b.n	80045f4 <EditFunction+0x16c>
					break;
 80045f2:	bf00      	nop
				}

				if(pVirtualCab->nCursor > 28)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	2b1c      	cmp	r3, #28
 80045fa:	dd06      	ble.n	800460a <EditFunction+0x182>
				{
					SetFunctionCursor(pVirtualCab->Cab, 28);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	211c      	movs	r1, #28
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fd98 	bl	8004138 <SetFunctionCursor>
 8004608:	e007      	b.n	800461a <EditFunction+0x192>
				}
				else
				{
					SetFunctionCursor(pVirtualCab->Cab, pVirtualCab->nCursor);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7ff fd8f 	bl	8004138 <SetFunctionCursor>
				}

//				SetExpiration(pVirtualCab, EPIRATION_2_SECONDS);

				fUpdate = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	74fb      	strb	r3, [r7, #19]
			}
		break;
 800461e:	bf00      	nop
	}

	if(fUpdate)
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <EditFunction+0x1b2>
	{
		// display it
		pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	635a      	str	r2, [r3, #52]	@ 0x34
		DisplayFunctions(pVirtualCab, FunctionMap);
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fe48 	bl	80042c4 <DisplayFunctions>
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_1L | MENU_SHOWING_LINE_1R | MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R | MENU_SHOWING_FUNCTIONS;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	222f      	movs	r2, #47	@ 0x2f
 8004638:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	0802ba48 	.word	0x0802ba48

08004648 <DoFunctionRefresh>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoFunctionRefresh(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	unsigned long FunctionMap;
	int nMenuShowingSave;
	Loco* pLoco;

	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3214      	adds	r2, #20
 800465a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465e:	617b      	str	r3, [r7, #20]
	FunctionMap = GetLocoFunctions(pLoco);
 8004660:	6978      	ldr	r0, [r7, #20]
 8004662:	f7fd f9b5 	bl	80019d0 <GetLocoFunctions>
 8004666:	6138      	str	r0, [r7, #16]

	nMenuShowingSave = pVirtualCab->nMenuShowing;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800466c:	60fb      	str	r3, [r7, #12]
	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	635a      	str	r2, [r3, #52]	@ 0x34
	DisplayFunctions(pVirtualCab, FunctionMap);
 8004674:	6939      	ldr	r1, [r7, #16]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe24 	bl	80042c4 <DisplayFunctions>
	pVirtualCab->nMenuShowing = nMenuShowingSave;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	635a      	str	r2, [r3, #52]	@ 0x34
	NCE_CursorOn(pVirtualCab->Cab);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fae9 	bl	8003c60 <NCE_CursorOn>
	pVirtualCab->CursorState = 1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <DoNormalFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoNormalFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	unsigned int Mask;
	unsigned int FunctionMap;
	int nMenuShowingSave;
	Loco* pLoco;

	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3214      	adds	r2, #20
 80046b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b6:	613b      	str	r3, [r7, #16]
	FunctionMap = GetLocoFunctions(pLoco);
 80046b8:	6938      	ldr	r0, [r7, #16]
 80046ba:	f7fd f989 	bl	80019d0 <GetLocoFunctions>
 80046be:	6178      	str	r0, [r7, #20]

	if(nEvent == EVENT_BELL)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b8e      	cmp	r3, #142	@ 0x8e
 80046c4:	d112      	bne.n	80046ec <DoNormalFunction+0x4c>
	{
		// ToDo - Make this programmable
		Mask = wBitMask[2];
 80046c6:	4b30      	ldr	r3, [pc, #192]	@ (8004788 <DoNormalFunction+0xe8>)
 80046c8:	889b      	ldrh	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]
		if(FunctionMap & Mask)
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <DoNormalFunction+0x42>
		{
			FunctionMap &= ~Mask;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	43db      	mvns	r3, r3
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4013      	ands	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e037      	b.n	8004752 <DoNormalFunction+0xb2>
		}
		else
		{
			FunctionMap |= Mask;
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e032      	b.n	8004752 <DoNormalFunction+0xb2>
		}
		// don't save this - the event will get processed by operate.c
	}
	else if(nEvent == EVENT_HORN_DOWN)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b8a      	cmp	r3, #138	@ 0x8a
 80046f0:	d106      	bne.n	8004700 <DoNormalFunction+0x60>
	{
		FunctionMap |= wBitMask[3];
 80046f2:	4b25      	ldr	r3, [pc, #148]	@ (8004788 <DoNormalFunction+0xe8>)
 80046f4:	88db      	ldrh	r3, [r3, #6]
 80046f6:	461a      	mov	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	e028      	b.n	8004752 <DoNormalFunction+0xb2>
		// don't save this - the event will get processed by operate.c
	}
	else if(nEvent == EVENT_HORN_UP)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2ba0      	cmp	r3, #160	@ 0xa0
 8004704:	d107      	bne.n	8004716 <DoNormalFunction+0x76>
	{
		FunctionMap &= ~wBitMask[3];
 8004706:	4b20      	ldr	r3, [pc, #128]	@ (8004788 <DoNormalFunction+0xe8>)
 8004708:	88db      	ldrh	r3, [r3, #6]
 800470a:	43db      	mvns	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4013      	ands	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e01d      	b.n	8004752 <DoNormalFunction+0xb2>
		// don't save this - the event will get processed by operate.c
	}
	else
	{
		// translate Headlight event into a zero key
		if(nEvent == EVENT_HEADLIGHT)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2bd4      	cmp	r3, #212	@ 0xd4
 800471a:	d101      	bne.n	8004720 <DoNormalFunction+0x80>
		{
			nEvent = EVENT_ZERO;
 800471c:	2330      	movs	r3, #48	@ 0x30
 800471e:	603b      	str	r3, [r7, #0]
		}

		Mask = wBitMask[nEvent - 0x30];
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	3b30      	subs	r3, #48	@ 0x30
 8004724:	4a18      	ldr	r2, [pc, #96]	@ (8004788 <DoNormalFunction+0xe8>)
 8004726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800472a:	60fb      	str	r3, [r7, #12]
		if(FunctionMap & Mask)
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <DoNormalFunction+0xa2>
		{
			FunctionMap &= ~Mask;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43db      	mvns	r3, r3
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4013      	ands	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e003      	b.n	800474a <DoNormalFunction+0xaa>
		}
		else
		{
			FunctionMap |= Mask;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
		}
		SetLocoFunctions(pLoco, FunctionMap);
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	6938      	ldr	r0, [r7, #16]
 800474e:	f7fd f94b 	bl	80019e8 <SetLocoFunctions>
		//{
		//	SetLocoFunctions2(pLoco, FunctionMap);
		//}
	}

	nMenuShowingSave = pVirtualCab->nMenuShowing;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	60bb      	str	r3, [r7, #8]
	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34
	//{
	//	DisplayUpperFunction(pVirtualCab, FunctionMap);
	//}
	//else
	//{
		DisplayFunction(pVirtualCab, FunctionMap);
 800475e:	6979      	ldr	r1, [r7, #20]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f002 f917 	bl	8006994 <DisplayFunction>
	//}
	pVirtualCab->nMenuShowing = nMenuShowingSave;;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	635a      	str	r2, [r3, #52]	@ 0x34
	NCE_CursorOff(pVirtualCab->Cab);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fa92 	bl	8003c9c <NCE_CursorOff>

	SetExpiration(pVirtualCab, EXPIRATION_2_SECONDS);
 8004778:	21c8      	movs	r1, #200	@ 0xc8
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc fd8e 	bl	800129c <SetExpiration>
}
 8004780:	bf00      	nop
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	0802ba28 	.word	0x0802ba28

0800478c <StateIdle>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateIdle(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]

	if(nEvent == EVENT_STATE_ENTER)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2bc0      	cmp	r3, #192	@ 0xc0
 800479a:	d007      	beq.n	80047ac <StateIdle+0x20>
	{
	}
	else if(nEvent == EVENT_STATE_EXIT)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2bc1      	cmp	r3, #193	@ 0xc1
 80047a0:	d004      	beq.n	80047ac <StateIdle+0x20>
	{
	}
	else if(!DispatchEvent(pVirtualCab, nEvent, IdleMap))
 80047a2:	4a04      	ldr	r2, [pc, #16]	@ (80047b4 <StateIdle+0x28>)
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f002 fa6f 	bl	8006c8a <DispatchEvent>
//		if(menu.def[menu.index].func)
//		{
//			menu.def[menu.index].func(nEvent);
//		}
	}
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	0802b3a8 	.word	0x0802b3a8

080047b8 <RefreshDisplay>:
*
* RESTRICTIONS:
*
**********************************************************************/
void RefreshDisplay(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
	char szTemp[16];
	Loco* pLoco;
	unsigned int nAlias;

  	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3214      	adds	r2, #20
 80047ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ce:	61fb      	str	r3, [r7, #28]
	nAlias = GetLocoAlias(pLoco);
 80047d0:	69f8      	ldr	r0, [r7, #28]
 80047d2:	f7fd f991 	bl	8001af8 <GetLocoAlias>
 80047d6:	4603      	mov	r3, r0
 80047d8:	61bb      	str	r3, [r7, #24]

   if(nAlias && pVirtualCab->nState == STATE_IDLE)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <RefreshDisplay+0x58>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	799b      	ldrb	r3, [r3, #6]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d113      	bne.n	8004810 <RefreshDisplay+0x58>
   {
// ToDo - this seems wrong		
  		//snprintf(szTemp, 9, aText[tLoc], nAddress);
	  	//snprintf(szTemp, 9, "CON:%3d", nAlias);
	  	sprintf(szTemp, "CON:%3d", nAlias);
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	490a      	ldr	r1, [pc, #40]	@ (8004818 <RefreshDisplay+0x60>)
 80047f0:	4618      	mov	r0, r3
 80047f2:	f021 fc03 	bl	8025ffc <siprintf>
// ToDo - this seems wrong		

		NCE_DisplayMessage(pVirtualCab->Cab, 9, 1, szTemp);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b2d8      	uxtb	r0, r3
 80047fc:	f107 0308 	add.w	r3, r7, #8
 8004800:	2201      	movs	r2, #1
 8004802:	2109      	movs	r1, #9
 8004804:	f7ff f8dc 	bl	80039c0 <NCE_DisplayMessage>
		SetExpiration(pVirtualCab, EXPIRATION_2_SECONDS);
 8004808:	21c8      	movs	r1, #200	@ 0xc8
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fd46 	bl	800129c <SetExpiration>
   }

	//NCE_RefreshDisplay(pVirtualCab->Cab);
   //RestoreOperateScreen(pVirtualCab, TRUE, TRUE);
}
 8004810:	bf00      	nop
 8004812:	3720      	adds	r7, #32
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	080269e4 	.word	0x080269e4

0800481c <DeleteCurrentRecall>:


void DeleteCurrentRecall(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]

	DeleteRecallLoco(pVirtualCab, pVirtualCab->nWhichRecall);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fc ffe5 	bl	80017fc <DeleteRecallLoco>
	RestoreOperateScreen(pVirtualCab, 1, 1);
 8004832:	2201      	movs	r2, #1
 8004834:	2101      	movs	r1, #1
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f002 f91a 	bl	8006a70 <RestoreOperateScreen>
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <StateNoFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateNoFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

	if(nEvent == EVENT_STATE_ENTER)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2bc0      	cmp	r3, #192	@ 0xc0
 8004852:	d10f      	bne.n	8004874 <StateNoFunction+0x30>
	{
												  //1234567890123456
		NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, "NOT IMPLEMENTED ");
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	b2d8      	uxtb	r0, r3
 800485a:	4b0c      	ldr	r3, [pc, #48]	@ (800488c <StateNoFunction+0x48>)
 800485c:	2201      	movs	r2, #1
 800485e:	2100      	movs	r1, #0
 8004860:	f7ff f8ae 	bl	80039c0 <NCE_DisplayMessage>
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	220c      	movs	r2, #12
 8004868:	635a      	str	r2, [r3, #52]	@ 0x34
		SetExpiration(pVirtualCab, EXPIRATION_1_SECONDS);
 800486a:	2164      	movs	r1, #100	@ 0x64
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fc fd15 	bl	800129c <SetExpiration>
	}
	else if(!DispatchEvent(pVirtualCab, nEvent, IdleMap))
	{
		// special event processing not handled by DispatchEvent()
	}
}
 8004872:	e007      	b.n	8004884 <StateNoFunction+0x40>
	else if(nEvent == EVENT_STATE_EXIT)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2bc1      	cmp	r3, #193	@ 0xc1
 8004878:	d004      	beq.n	8004884 <StateNoFunction+0x40>
	else if(!DispatchEvent(pVirtualCab, nEvent, IdleMap))
 800487a:	4a05      	ldr	r2, [pc, #20]	@ (8004890 <StateNoFunction+0x4c>)
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f002 fa03 	bl	8006c8a <DispatchEvent>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	080269ec 	.word	0x080269ec
 8004890:	0802b498 	.word	0x0802b498

08004894 <ExitNoFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitNoFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]

	//ExitMenu(pVirtualCab);

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 0, 1);
 80048a4:	2201      	movs	r2, #1
 80048a6:	2100      	movs	r1, #0
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f002 f8e1 	bl	8006a70 <RestoreOperateScreen>

	ChangeState(pVirtualCab, STATE_IDLE);
 80048ae:	2100      	movs	r1, #0
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f002 f9d5 	bl	8006c60 <ChangeState>
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <StateProgramOnMain>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateProgramOnMain(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
   Loco* pLoco;

	if(nEvent == EVENT_STATE_ENTER)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80048ce:	d11c      	bne.n	800490a <StateProgramOnMain+0x4a>
	{
		pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3214      	adds	r2, #20
 80048d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048dc:	60fb      	str	r3, [r7, #12]
		if(pLoco != NULL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <StateProgramOnMain+0x34>
		{
			nLocoAddressTemp = GetLocoAddress(pLoco);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7fd f8fa 	bl	8001ade <GetLocoAddress>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004964 <StateProgramOnMain+0xa4>)
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e002      	b.n	80048fa <StateProgramOnMain+0x3a>
		}
		else
		{
			nLocoAddressTemp = 0;
 80048f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004964 <StateProgramOnMain+0xa4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
		}

		//NewMenu(pVirtualCab, &OpsProgramCV);

		NewMenu(pVirtualCab, &OpsProgram);
 80048fa:	491b      	ldr	r1, [pc, #108]	@ (8004968 <StateProgramOnMain+0xa8>)
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fed1 	bl	80056a4 <NewMenu>
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_1L | MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	220d      	movs	r2, #13
 8004906:	635a      	str	r2, [r3, #52]	@ 0x34
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
		{
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
		}
	}
}
 8004908:	e027      	b.n	800495a <StateProgramOnMain+0x9a>
	else if(nEvent == EVENT_STATE_EXIT)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2bc1      	cmp	r3, #193	@ 0xc1
 800490e:	d024      	beq.n	800495a <StateProgramOnMain+0x9a>
	else if(!DispatchEvent(pVirtualCab, nEvent, OpsProgramMap))
 8004910:	4a16      	ldr	r2, [pc, #88]	@ (800496c <StateProgramOnMain+0xac>)
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f002 f9b8 	bl	8006c8a <DispatchEvent>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d11c      	bne.n	800495a <StateProgramOnMain+0x9a>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4619      	mov	r1, r3
 800492c:	460b      	mov	r3, r1
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00e      	beq.n	800495a <StateProgramOnMain+0x9a>
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	4619      	mov	r1, r3
 8004948:	460b      	mov	r3, r1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20003040 	.word	0x20003040
 8004968:	0802b5a8 	.word	0x0802b5a8
 800496c:	0802b4b0 	.word	0x0802b4b0

08004970 <DoOpsMenu>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoOpsMenu(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	int nTemp;


	nTemp = pVirtualCab->nEditVar;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	60fb      	str	r3, [r7, #12]

	if(nTemp == 1)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d104      	bne.n	8004990 <DoOpsMenu+0x20>
	{
		NewMenu(pVirtualCab, &OpsProgramCV);
 8004986:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <DoOpsMenu+0x50>)
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fe8b 	bl	80056a4 <NewMenu>
	}
	else
	{
		ExitOpsProgram(pVirtualCab, nEvent);
	}
}
 800498e:	e013      	b.n	80049b8 <DoOpsMenu+0x48>
	else if(nTemp == 2)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d104      	bne.n	80049a0 <DoOpsMenu+0x30>
		NewMenu(pVirtualCab, &OpsProgramCV);
 8004996:	490a      	ldr	r1, [pc, #40]	@ (80049c0 <DoOpsMenu+0x50>)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fe83 	bl	80056a4 <NewMenu>
}
 800499e:	e00b      	b.n	80049b8 <DoOpsMenu+0x48>
	else if(nTemp == 3)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d104      	bne.n	80049b0 <DoOpsMenu+0x40>
		NewMenu(pVirtualCab, &OpsProgramCon);
 80049a6:	4907      	ldr	r1, [pc, #28]	@ (80049c4 <DoOpsMenu+0x54>)
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fe7b 	bl	80056a4 <NewMenu>
}
 80049ae:	e003      	b.n	80049b8 <DoOpsMenu+0x48>
		ExitOpsProgram(pVirtualCab, nEvent);
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f808 	bl	80049c8 <ExitOpsProgram>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	0802b55c 	.word	0x0802b55c
 80049c4:	0802b510 	.word	0x0802b510

080049c8 <ExitOpsProgram>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitOpsProgram(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
	ExitMenu(pVirtualCab);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fecf 	bl	8005776 <ExitMenu>

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 1, 1);
 80049de:	2201      	movs	r2, #1
 80049e0:	2101      	movs	r1, #1
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f002 f844 	bl	8006a70 <RestoreOperateScreen>

	ChangeState(pVirtualCab, STATE_IDLE);
 80049e8:	2100      	movs	r1, #0
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f002 f938 	bl	8006c60 <ChangeState>
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <EditOpsChoice>:
*
* RESTRICTIONS:
*
**********************************************************************/
void EditOpsChoice(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
////			fUpdate = TRUE;
//			break;
//
//	}

   if(nEvent >= EVENT_ONE && nEvent <= EVENT_NINE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b30      	cmp	r3, #48	@ 0x30
 8004a06:	dd0f      	ble.n	8004a28 <EditOpsChoice+0x30>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b39      	cmp	r3, #57	@ 0x39
 8004a0c:	dc0c      	bgt.n	8004a28 <EditOpsChoice+0x30>
   {
		pVirtualCab->nEditVar = nEvent - EVENT_ZERO;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c
		pVirtualCab->nEvent = EVENT_ENTER;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2281      	movs	r2, #129	@ 0x81
 8004a1c:	615a      	str	r2, [r3, #20]
		QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_ENTER);
 8004a1e:	2281      	movs	r2, #129	@ 0x81
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	2001      	movs	r0, #1
 8004a24:	f7fd f8be 	bl	8001ba4 <QueueMessage>
   }
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <ProgramOpsCV>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ProgramOpsCV(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
//k	PutProgrammingPacket((byte*)baPacket);
//k	PutProgrammingPacket((byte*)baPacket);
//k	PutProgrammingPacket((byte*)baPacket);
//k	PutProgrammingPacket((byte*)baPacket);
//k	PutProgrammingPacket((byte*)baPacket);
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <StateProgMode>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateProgMode(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]

	if(nEvent == EVENT_STATE_ENTER)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a56:	d10f      	bne.n	8004a78 <StateProgMode+0x30>
	{
	   temp = 0;
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <StateProgMode+0x88>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
		NewMenu(pVirtualCab, &ProgModeMenu);
 8004a5e:	491d      	ldr	r1, [pc, #116]	@ (8004ad4 <StateProgMode+0x8c>)
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fe1f 	bl	80056a4 <NewMenu>
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	220c      	movs	r2, #12
 8004a6a:	635a      	str	r2, [r3, #52]	@ 0x34
		SetExpiration(pVirtualCab, EXPIRATION_5_SECONDS);
 8004a6c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc fc13 	bl	800129c <SetExpiration>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
		{
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
		}
	}
}
 8004a76:	e027      	b.n	8004ac8 <StateProgMode+0x80>
	else if(nEvent == EVENT_STATE_EXIT)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2bc1      	cmp	r3, #193	@ 0xc1
 8004a7c:	d024      	beq.n	8004ac8 <StateProgMode+0x80>
	else if(!DispatchEvent(pVirtualCab, nEvent, ProgModeMap))
 8004a7e:	4a16      	ldr	r2, [pc, #88]	@ (8004ad8 <StateProgMode+0x90>)
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f002 f901 	bl	8006c8a <DispatchEvent>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11c      	bne.n	8004ac8 <StateProgMode+0x80>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00e      	beq.n	8004ac8 <StateProgMode+0x80>
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	6839      	ldr	r1, [r7, #0]
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20003054 	.word	0x20003054
 8004ad4:	0802b61c 	.word	0x0802b61c
 8004ad8:	0802b5b8 	.word	0x0802b5b8

08004adc <DoProgMode>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoProgMode(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]

	//pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
   //RestoreOperateScreen(pVirtualCab, FALSE, TRUE);
   //ChangeState(pVirtualCab, STATE_IDLE);

	switch(temp)
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <DoProgMode+0x40>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <DoProgMode+0x18>
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d008      	beq.n	8004b04 <DoProgMode+0x28>
////			ChangeState(pVirtualCab, STATE_PROGRAM_MACROS);
//      	break;

   }

}
 8004af2:	e00f      	b.n	8004b14 <DoProgMode+0x38>
			ExitMenu(pVirtualCab);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fe3e 	bl	8005776 <ExitMenu>
			ChangeState(pVirtualCab, STATE_PROGRAM_ON_MAIN);
 8004afa:	2105      	movs	r1, #5
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f002 f8af 	bl	8006c60 <ChangeState>
      	break;
 8004b02:	e007      	b.n	8004b14 <DoProgMode+0x38>
			ExitMenu(pVirtualCab);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fe36 	bl	8005776 <ExitMenu>
			ChangeState(pVirtualCab, STATE_PROGRAM_ON_TRACK);
 8004b0a:	2106      	movs	r1, #6
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f002 f8a7 	bl	8006c60 <ChangeState>
      	break;
 8004b12:	bf00      	nop
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20003054 	.word	0x20003054

08004b20 <ExitProgMode>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitProgMode(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]

	ExitMenu(pVirtualCab);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fe23 	bl	8005776 <ExitMenu>

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	635a      	str	r2, [r3, #52]	@ 0x34
   RestoreOperateScreen(pVirtualCab, 0, 1);
 8004b36:	2201      	movs	r2, #1
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 ff98 	bl	8006a70 <RestoreOperateScreen>

	ChangeState(pVirtualCab, STATE_IDLE);
 8004b40:	2100      	movs	r1, #0
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f002 f88c 	bl	8006c60 <ChangeState>
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <StateProgramTrack>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateProgramTrack(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]

	if(nEvent == EVENT_STATE_ENTER)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b5e:	d10a      	bne.n	8004b76 <StateProgramTrack+0x26>
	{
		NewMenu(pVirtualCab, &ProgramTrackMenu);
 8004b60:	491b      	ldr	r1, [pc, #108]	@ (8004bd0 <StateProgramTrack+0x80>)
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fd9e 	bl	80056a4 <NewMenu>
     	pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_1L | MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	220d      	movs	r2, #13
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34
		bReadCV = 0;
 8004b6e:	4b19      	ldr	r3, [pc, #100]	@ (8004bd4 <StateProgramTrack+0x84>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
			{
				pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
			}
		}
	}
}
 8004b74:	e027      	b.n	8004bc6 <StateProgramTrack+0x76>
	else if(nEvent == EVENT_STATE_EXIT)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2bc1      	cmp	r3, #193	@ 0xc1
 8004b7a:	d024      	beq.n	8004bc6 <StateProgramTrack+0x76>
	else if(!DispatchEvent(pVirtualCab, nEvent, ProgramTrackMap))
 8004b7c:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <StateProgramTrack+0x88>)
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f002 f882 	bl	8006c8a <DispatchEvent>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11c      	bne.n	8004bc6 <StateProgramTrack+0x76>
			if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4619      	mov	r1, r3
 8004b98:	460b      	mov	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00e      	beq.n	8004bc6 <StateProgramTrack+0x76>
				pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	0802b740 	.word	0x0802b740
 8004bd4:	20003058 	.word	0x20003058
 8004bd8:	0802b62c 	.word	0x0802b62c

08004bdc <ExitProgramTrack>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitProgramTrack(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 1, 1);
 8004bec:	2201      	movs	r2, #1
 8004bee:	2101      	movs	r1, #1
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f001 ff3d 	bl	8006a70 <RestoreOperateScreen>

	ChangeState(pVirtualCab, STATE_IDLE);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f002 f831 	bl	8006c60 <ChangeState>
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <EditCV>:
*
* RESTRICTIONS:
*
**********************************************************************/
void EditCV(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08c      	sub	sp, #48	@ 0x30
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	char szPrintBuffer[17];
	char *format;
	//int *var_ptr;
	int i;
	int len;
	unsigned char fUpdate = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

//   var_ptr = pVirtualCab->pMenu->def->variable;
	format = (char *)pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].format;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4619      	mov	r1, r3
 8004c24:	460b      	mov	r3, r1
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
	pEditBuffer = pVirtualCab->szEditBuffer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3326      	adds	r3, #38	@ 0x26
 8004c36:	623b      	str	r3, [r7, #32]

//	if(var_ptr)
	{
		switch(nEvent)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2bd1      	cmp	r3, #209	@ 0xd1
 8004c3c:	d003      	beq.n	8004c46 <EditCV+0x3e>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2bd2      	cmp	r3, #210	@ 0xd2
 8004c42:	d01e      	beq.n	8004c82 <EditCV+0x7a>
 8004c44:	e024      	b.n	8004c90 <EditCV+0x88>
		{
			case EVENT_GET_DATA:
				pVirtualCab->nCursor = 0;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	621a      	str	r2, [r3, #32]
				pVirtualCab->bFirstTime = 1;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

				// get the data
				//snprintf(pEditBuffer, 9, "%d", *var_ptr);
				//snprintf(pEditBuffer, 9, "%d", 0);
				sprintf(pEditBuffer, "%d", 0);
 8004c54:	2200      	movs	r2, #0
 8004c56:	4947      	ldr	r1, [pc, #284]	@ (8004d74 <EditCV+0x16c>)
 8004c58:	6a38      	ldr	r0, [r7, #32]
 8004c5a:	f021 f9cf 	bl	8025ffc <siprintf>

				NCE_SetCursorPosition(pVirtualCab->Cab, 15, 1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2201      	movs	r2, #1
 8004c66:	210f      	movs	r1, #15
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe ffd3 	bl	8003c14 <NCE_SetCursorPosition>
				NCE_CursorOn(pVirtualCab->Cab);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe fff3 	bl	8003c60 <NCE_CursorOn>
			 	fUpdate = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				break;
 8004c80:	e051      	b.n	8004d26 <EditCV+0x11e>

			case EVENT_STORE_DATA:
				// convert string to number
				//*var_ptr = atoi(pEditBuffer);
				NCE_CursorOff(pVirtualCab->Cab);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff f807 	bl	8003c9c <NCE_CursorOff>
				break;
 8004c8e:	e04a      	b.n	8004d26 <EditCV+0x11e>

			default:
				if(isdigit((char)nEvent))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a38      	ldr	r2, [pc, #224]	@ (8004d78 <EditCV+0x170>)
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d03f      	beq.n	8004d24 <EditCV+0x11c>
               //{
					//	QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_HEADLIGHT);
					//	return;
               //}

	            len = FormatLen(format);
 8004ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ca6:	f7ff f877 	bl	8003d98 <FormatLen>
 8004caa:	61f8      	str	r0, [r7, #28]

					if(strlen(pEditBuffer) == len || pVirtualCab->bFirstTime == 1)
 8004cac:	6a38      	ldr	r0, [r7, #32]
 8004cae:	f7fb faf9 	bl	80002a4 <strlen>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d004      	beq.n	8004cc4 <EditCV+0xbc>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d109      	bne.n	8004cd8 <EditCV+0xd0>
					{
						pVirtualCab->bFirstTime = 0;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
						pVirtualCab->nCursor = 0;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	621a      	str	r2, [r3, #32]
						pEditBuffer[0] = '\0';
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
					}

					// push remaining characters
					i = strlen(pEditBuffer) + 1;		// include the '\0'
 8004cd8:	6a38      	ldr	r0, [r7, #32]
 8004cda:	f7fb fae3 	bl	80002a4 <strlen>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c

					while(i != pVirtualCab->nCursor)
 8004ce4:	e00b      	b.n	8004cfe <EditCV+0xf6>
					{
						pEditBuffer[i] = pEditBuffer[i - 1];
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	441a      	add	r2, r3
 8004cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf0:	6a39      	ldr	r1, [r7, #32]
 8004cf2:	440b      	add	r3, r1
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	701a      	strb	r2, [r3, #0]
						--i;
 8004cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					while(i != pVirtualCab->nCursor)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1ee      	bne.n	8004ce6 <EditCV+0xde>
					}

					pEditBuffer[pVirtualCab->nCursor++] = (char)nEvent;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	1c59      	adds	r1, r3, #1
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6211      	str	r1, [r2, #32]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	4413      	add	r3, r2
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
				 	fUpdate = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				}
				break;
 8004d24:	bf00      	nop
		}

		if(fUpdate)
 8004d26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01d      	beq.n	8004d6a <EditCV+0x162>
      {
         // display it
         //snprintf(szPrintBuffer, 19, format, atoi(pEditBuffer));
         sprintf(szPrintBuffer, format, atoi(pEditBuffer));
 8004d2e:	6a38      	ldr	r0, [r7, #32]
 8004d30:	f020 fb46 	bl	80253c0 <atoi>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f021 f95d 	bl	8025ffc <siprintf>
         len = strlen(szPrintBuffer);
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb faac 	bl	80002a4 <strlen>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	61fb      	str	r3, [r7, #28]
			//WM_PutMessage(pVirtualCab, 16 - len, 1, 0, 0, szPrintBuffer);
   		NCE_DisplayMessage(pVirtualCab->Cab, 16 - len, 1, szPrintBuffer);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	b2d8      	uxtb	r0, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f1c3 0310 	rsb	r3, r3, #16
 8004d5e:	b2d9      	uxtb	r1, r3
 8004d60:	f107 0308 	add.w	r3, r7, #8
 8004d64:	2201      	movs	r2, #1
 8004d66:	f7fe fe2b 	bl	80039c0 <NCE_DisplayMessage>
   	}
	}
}
 8004d6a:	bf00      	nop
 8004d6c:	3730      	adds	r7, #48	@ 0x30
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	08026a70 	.word	0x08026a70
 8004d78:	0802c3d0 	.word	0x0802c3d0

08004d7c <EditAddressCV>:
*
* RESTRICTIONS:
*
**********************************************************************/
void EditAddressCV(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	EditCV(pVirtualCab, nEvent);
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff ff3d 	bl	8004c08 <EditCV>
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <EditConfigCV>:
*
* RESTRICTIONS:
*
**********************************************************************/
void EditConfigCV(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
   //int nTemp;
   int len;
   //char szTemp[17];


	fUpdate = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	75fb      	strb	r3, [r7, #23]

	List = (char **)pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].format;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	4619      	mov	r1, r3
 8004db0:	460b      	mov	r3, r1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

	switch(nEvent)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2bd2      	cmp	r3, #210	@ 0xd2
 8004dc2:	d025      	beq.n	8004e10 <EditConfigCV+0x7a>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2bd2      	cmp	r3, #210	@ 0xd2
 8004dc8:	dc34      	bgt.n	8004e34 <EditConfigCV+0x9e>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b31      	cmp	r3, #49	@ 0x31
 8004dce:	d022      	beq.n	8004e16 <EditConfigCV+0x80>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2bd1      	cmp	r3, #209	@ 0xd1
 8004dd4:	d12e      	bne.n	8004e34 <EditConfigCV+0x9e>
	{
		case EVENT_GET_DATA:
			pVirtualCab->nListCount = 0;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
			while(List[pVirtualCab->nListCount])
 8004ddc:	e004      	b.n	8004de8 <EditConfigCV+0x52>
			{
				pVirtualCab->nListCount++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
			while(List[pVirtualCab->nListCount])
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f2      	bne.n	8004dde <EditConfigCV+0x48>
			}

         // ToDo - get the CV and proper bit
			pVirtualCab->nEditVar = 0;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

			NCE_CursorOff(pVirtualCab->Cab);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe ff49 	bl	8003c9c <NCE_CursorOff>

			fUpdate = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
			break;
 8004e0e:	e011      	b.n	8004e34 <EditConfigCV+0x9e>

		case EVENT_STORE_DATA:
         // ToDo - save the CV
			fUpdate = 1;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
			break;
 8004e14:	e00e      	b.n	8004e34 <EditConfigCV+0x9e>

		case EVENT_ONE:
			pVirtualCab->nEditVar = (pVirtualCab->nEditVar + 1) % pVirtualCab->nListCount;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e20:	fb93 f1f2 	sdiv	r1, r3, r2
 8004e24:	fb01 f202 	mul.w	r2, r1, r2
 8004e28:	1a9a      	subs	r2, r3, r2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
//         editVar++;
//         if(editVar == ListCount)
//         {
//				//QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_ENTER);
//			}
			fUpdate = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
			break;
 8004e32:	bf00      	nop

	}

	if(fUpdate)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01b      	beq.n	8004e72 <EditConfigCV+0xdc>
   {
      // display it
      len = strlen(List[pVirtualCab->nEditVar]);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fb fa2c 	bl	80002a4 <strlen>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	60fb      	str	r3, [r7, #12]
		//WM_PutMessage(pVirtualCab, 16 - len, 1, 0, 0, List[pVirtualCab->nEditVar]);
      NCE_DisplayMessage(pVirtualCab->Cab, 16 - len, 1, List[pVirtualCab->nEditVar]);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b2d8      	uxtb	r0, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f1c3 0310 	rsb	r3, r3, #16
 8004e5e:	b2d9      	uxtb	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f7fe fda7 	bl	80039c0 <NCE_DisplayMessage>
  	}
}
 8004e72:	bf00      	nop
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <ProgramCV>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ProgramCV(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]

}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <ProgramAddressCV>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ProgramAddressCV(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]

}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <ProgramConfigCV>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ProgramConfigCV(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]

}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <StateSelectAccessory>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateSelectAccessory(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]

	if(nEvent == EVENT_STATE_ENTER)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eca:	d118      	bne.n	8004efe <StateSelectAccessory+0x42>
	{
		nAccessoryAddress = pVirtualCab->nLastAccessory;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <StateSelectAccessory+0x9c>)
 8004ed4:	601a      	str	r2, [r3, #0]
		if(nAccessoryAddress == 0)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	@ (8004f58 <StateSelectAccessory+0x9c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <StateSelectAccessory+0x28>
		{
			nAccessoryAddress = 1;
 8004ede:	4b1e      	ldr	r3, [pc, #120]	@ (8004f58 <StateSelectAccessory+0x9c>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
		}
		
		NewMenu(pVirtualCab, &SelectAccessoryMenu);
 8004ee4:	491d      	ldr	r1, [pc, #116]	@ (8004f5c <StateSelectAccessory+0xa0>)
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fbdc 	bl	80056a4 <NewMenu>
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	220c      	movs	r2, #12
 8004ef0:	635a      	str	r2, [r3, #52]	@ 0x34
		SetExpiration(pVirtualCab, EPIRATION_1_MINUTE);
 8004ef2:	f241 7170 	movw	r1, #6000	@ 0x1770
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc f9d0 	bl	800129c <SetExpiration>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
		{
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
		}
	}
}
 8004efc:	e027      	b.n	8004f4e <StateSelectAccessory+0x92>
	else if(nEvent == EVENT_STATE_EXIT)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2bc1      	cmp	r3, #193	@ 0xc1
 8004f02:	d024      	beq.n	8004f4e <StateSelectAccessory+0x92>
	else if(!DispatchEvent(pVirtualCab, nEvent, SelectAccessoryMap))
 8004f04:	4a16      	ldr	r2, [pc, #88]	@ (8004f60 <StateSelectAccessory+0xa4>)
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 febe 	bl	8006c8a <DispatchEvent>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11c      	bne.n	8004f4e <StateSelectAccessory+0x92>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	460b      	mov	r3, r1
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00e      	beq.n	8004f4e <StateSelectAccessory+0x92>
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200000f4 	.word	0x200000f4
 8004f5c:	0802b7cc 	.word	0x0802b7cc
 8004f60:	0802b750 	.word	0x0802b750

08004f64 <DoSelectAccessory>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoSelectAccessory(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	unsigned int nAccessory;
	
	
	ExitMenu(pVirtualCab);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fc01 	bl	8005776 <ExitMenu>
	
	pVirtualCab->nLastAccessory = nAccessoryAddress;
 8004f74:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <DoSelectAccessory+0x68>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	645a      	str	r2, [r3, #68]	@ 0x44
	nAccessory = FindAccessory(nAccessoryAddress);
 8004f7e:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <DoSelectAccessory+0x68>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc f832 	bl	8000fec <FindAccessory>
 8004f88:	60f8      	str	r0, [r7, #12]
	if(nAccessory == ACC_EMPTY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d105      	bne.n	8004fa0 <DoSelectAccessory+0x3c>
	{
		nAccessory = NewAccessory(nAccessoryAddress);
 8004f94:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <DoSelectAccessory+0x68>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb fffb 	bl	8000f94 <NewAccessory>
 8004f9e:	60f8      	str	r0, [r7, #12]
	}
	
	nAccessoryState = GetAccessoryState(nAccessory);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7fc f847 	bl	8001034 <GetAccessoryState>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <DoSelectAccessory+0x6c>)
 8004fac:	601a      	str	r2, [r3, #0]
	
	NewMenu(pVirtualCab, &ControlAccessoryMenu);
 8004fae:	4909      	ldr	r1, [pc, #36]	@ (8004fd4 <DoSelectAccessory+0x70>)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb77 	bl	80056a4 <NewMenu>
	pVirtualCab->nMenuShowing |= MENU_SHOWING_LINE_1L;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	200000f4 	.word	0x200000f4
 8004fd0:	200000f8 	.word	0x200000f8
 8004fd4:	0802b804 	.word	0x0802b804

08004fd8 <DoControlAccessory>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoControlAccessory(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
	unsigned int nAccessory;
	
	nAccessory = FindAccessory(nAccessoryAddress);
 8004fe2:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <DoControlAccessory+0x4c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fc f800 	bl	8000fec <FindAccessory>
 8004fec:	60f8      	str	r0, [r7, #12]
	SetAccessoryState(nAccessory, nAccessoryState);
 8004fee:	4b0e      	ldr	r3, [pc, #56]	@ (8005028 <DoControlAccessory+0x50>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7fc f832 	bl	8001060 <SetAccessoryState>
	
	ExitMenu(pVirtualCab);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fbba 	bl	8005776 <ExitMenu>
	
	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 1, 1);
 8005008:	2201      	movs	r2, #1
 800500a:	2101      	movs	r1, #1
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f001 fd2f 	bl	8006a70 <RestoreOperateScreen>
	
	ChangeState(pVirtualCab, STATE_IDLE);
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fe23 	bl	8006c60 <ChangeState>
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	200000f4 	.word	0x200000f4
 8005028:	200000f8 	.word	0x200000f8

0800502c <ExitAccessory>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitAccessory(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]

	ExitMenu(pVirtualCab);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fb9d 	bl	8005776 <ExitMenu>
	
	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 1, 1);
 8005042:	2201      	movs	r2, #1
 8005044:	2101      	movs	r1, #1
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 fd12 	bl	8006a70 <RestoreOperateScreen>
	
	ChangeState(pVirtualCab, STATE_IDLE);
 800504c:	2100      	movs	r1, #0
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fe06 	bl	8006c60 <ChangeState>
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <ExitAccessory2>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitAccessory2(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]

// 	ExitMenu(pVirtualCab);

	if(pVirtualCab->pMenu == &SelectAccessoryMenu)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	4a0e      	ldr	r2, [pc, #56]	@ (80050a4 <ExitAccessory2+0x48>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10f      	bne.n	8005090 <ExitAccessory2+0x34>
	{
		ExitMenu(pVirtualCab);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fb80 	bl	8005776 <ExitMenu>
		
		pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	635a      	str	r2, [r3, #52]	@ 0x34
		RestoreOperateScreen(pVirtualCab, 1, 1);
 800507c:	2201      	movs	r2, #1
 800507e:	2101      	movs	r1, #1
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 fcf5 	bl	8006a70 <RestoreOperateScreen>
		
		ChangeState(pVirtualCab, STATE_IDLE);
 8005086:	2100      	movs	r1, #0
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fde9 	bl	8006c60 <ChangeState>
	{
		QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_TOGGLE_ACCESSORY);
//		pVirtualCab->nEvent = EVENT_TOGGLE_ACCESSORY;
//		psend(mpEvent, (WORD)pVirtualCab);
	}
}
 800508e:	e004      	b.n	800509a <ExitAccessory2+0x3e>
		QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_TOGGLE_ACCESSORY);
 8005090:	22d5      	movs	r2, #213	@ 0xd5
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	2001      	movs	r0, #1
 8005096:	f7fc fd85 	bl	8001ba4 <QueueMessage>
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	0802b7cc 	.word	0x0802b7cc

080050a8 <EditAccessory>:
*
* RESTRICTIONS:	
*
**********************************************************************/
void EditAccessory(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	unsigned char fUpdate;
	char **List;
	unsigned int nAccessory;
	
	
	fUpdate = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
	
	var_ptr = (int*)pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].variable;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	4619      	mov	r1, r3
 80050c2:	460b      	mov	r3, r1
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	613b      	str	r3, [r7, #16]
	List = (char **)pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].format;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4619      	mov	r1, r3
 80050dc:	460b      	mov	r3, r1
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
	
	switch(nEvent)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2bd5      	cmp	r3, #213	@ 0xd5
 80050ee:	d07e      	beq.n	80051ee <EditAccessory+0x146>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2bd5      	cmp	r3, #213	@ 0xd5
 80050f4:	f300 8098 	bgt.w	8005228 <EditAccessory+0x180>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2bd2      	cmp	r3, #210	@ 0xd2
 80050fc:	d038      	beq.n	8005170 <EditAccessory+0xc8>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2bd2      	cmp	r3, #210	@ 0xd2
 8005102:	f300 8091 	bgt.w	8005228 <EditAccessory+0x180>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2bd1      	cmp	r3, #209	@ 0xd1
 800510a:	d017      	beq.n	800513c <EditAccessory+0x94>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2bd1      	cmp	r3, #209	@ 0xd1
 8005110:	f300 808a 	bgt.w	8005228 <EditAccessory+0x180>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b8f      	cmp	r3, #143	@ 0x8f
 8005118:	d069      	beq.n	80051ee <EditAccessory+0x146>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b8f      	cmp	r3, #143	@ 0x8f
 800511e:	f300 8083 	bgt.w	8005228 <EditAccessory+0x180>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b32      	cmp	r3, #50	@ 0x32
 8005126:	d04c      	beq.n	80051c2 <EditAccessory+0x11a>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b32      	cmp	r3, #50	@ 0x32
 800512c:	dc7c      	bgt.n	8005228 <EditAccessory+0x180>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b30      	cmp	r3, #48	@ 0x30
 8005132:	d025      	beq.n	8005180 <EditAccessory+0xd8>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b31      	cmp	r3, #49	@ 0x31
 8005138:	d02b      	beq.n	8005192 <EditAccessory+0xea>
 800513a:	e075      	b.n	8005228 <EditAccessory+0x180>
	{
		case EVENT_GET_DATA:
			if(var_ptr == NULL)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <EditAccessory+0xa2>
			{
				pVirtualCab->nEditVar = 0;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005148:	e009      	b.n	800515e <EditAccessory+0xb6>
			}
			else
			{
				pVirtualCab->nEditVar = (*var_ptr) % 2;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	bfb8      	it	lt
 8005156:	425b      	neglt	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
			
			NCE_CursorOff(pVirtualCab->Cab);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe fd99 	bl	8003c9c <NCE_CursorOff>
			
			fUpdate = 1;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
			break;
 800516e:	e05b      	b.n	8005228 <EditAccessory+0x180>
		
		case EVENT_STORE_DATA:
			if(var_ptr != NULL)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d057      	beq.n	8005226 <EditAccessory+0x17e>
			{
				*var_ptr = pVirtualCab->nEditVar;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	601a      	str	r2, [r3, #0]
			}
			break;
 800517e:	e052      	b.n	8005226 <EditAccessory+0x17e>
		
		case EVENT_ZERO:
			pVirtualCab->nEvent = EVENT_HEADLIGHT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	22d4      	movs	r2, #212	@ 0xd4
 8005184:	615a      	str	r2, [r3, #20]
			QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_HEADLIGHT);
 8005186:	22d4      	movs	r2, #212	@ 0xd4
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	2001      	movs	r0, #1
 800518c:	f7fc fd0a 	bl	8001ba4 <QueueMessage>
//			psend(mpEvent, (WORD)pVirtualCab);
			break;
 8005190:	e04a      	b.n	8005228 <EditAccessory+0x180>
		
		case EVENT_ONE:
			pVirtualCab->nEditVar = 0;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	62da      	str	r2, [r3, #44]	@ 0x2c
			nAccessory = FindAccessory(nAccessoryAddress);
 8005198:	4b2d      	ldr	r3, [pc, #180]	@ (8005250 <EditAccessory+0x1a8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb ff25 	bl	8000fec <FindAccessory>
 80051a2:	60b8      	str	r0, [r7, #8]
			SetAccessoryState(nAccessoryAddress, 0);
 80051a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005250 <EditAccessory+0x1a8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb ff58 	bl	8001060 <SetAccessoryState>
			pVirtualCab->nEvent = EVENT_ENTER;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2281      	movs	r2, #129	@ 0x81
 80051b4:	615a      	str	r2, [r3, #20]
			QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_ENTER);
 80051b6:	2281      	movs	r2, #129	@ 0x81
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	2001      	movs	r0, #1
 80051bc:	f7fc fcf2 	bl	8001ba4 <QueueMessage>
//			psend(mpEvent, (WORD)pVirtualCab);
			break;
 80051c0:	e032      	b.n	8005228 <EditAccessory+0x180>
		
		case EVENT_TWO:
			pVirtualCab->nEditVar = 1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	62da      	str	r2, [r3, #44]	@ 0x2c
			nAccessory = FindAccessory(nAccessoryAddress);
 80051c8:	4b21      	ldr	r3, [pc, #132]	@ (8005250 <EditAccessory+0x1a8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb ff0d 	bl	8000fec <FindAccessory>
 80051d2:	60b8      	str	r0, [r7, #8]
			SetAccessoryState(nAccessory, 1);
 80051d4:	2101      	movs	r1, #1
 80051d6:	68b8      	ldr	r0, [r7, #8]
 80051d8:	f7fb ff42 	bl	8001060 <SetAccessoryState>
			pVirtualCab->nEvent = EVENT_ENTER;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2281      	movs	r2, #129	@ 0x81
 80051e0:	615a      	str	r2, [r3, #20]
			QueueMessage(MSG_CAB_KEY_MESSAGE, pVirtualCab, EVENT_ENTER);
 80051e2:	2281      	movs	r2, #129	@ 0x81
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	2001      	movs	r0, #1
 80051e8:	f7fc fcdc 	bl	8001ba4 <QueueMessage>
//			psend(mpEvent, (WORD)pVirtualCab);
			break;
 80051ec:	e01c      	b.n	8005228 <EditAccessory+0x180>
		
		case EVENT_SELECT_ACCESSORY:
		case EVENT_TOGGLE_ACCESSORY:
			nAccessory = FindAccessory(nAccessoryAddress);
 80051ee:	4b18      	ldr	r3, [pc, #96]	@ (8005250 <EditAccessory+0x1a8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fb fefa 	bl	8000fec <FindAccessory>
 80051f8:	60b8      	str	r0, [r7, #8]
			if(pVirtualCab->nEditVar)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <EditAccessory+0x16a>
			{
				pVirtualCab->nEditVar = 0;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	62da      	str	r2, [r3, #44]	@ 0x2c
				SetAccessoryState(nAccessory, 0);
 8005208:	2100      	movs	r1, #0
 800520a:	68b8      	ldr	r0, [r7, #8]
 800520c:	f7fb ff28 	bl	8001060 <SetAccessoryState>
 8005210:	e006      	b.n	8005220 <EditAccessory+0x178>
			}
			else
			{
				pVirtualCab->nEditVar = 1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	62da      	str	r2, [r3, #44]	@ 0x2c
				SetAccessoryState(nAccessory, 1);
 8005218:	2101      	movs	r1, #1
 800521a:	68b8      	ldr	r0, [r7, #8]
 800521c:	f7fb ff20 	bl	8001060 <SetAccessoryState>
			}
		
			fUpdate = 1;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
			break;
 8005224:	e000      	b.n	8005228 <EditAccessory+0x180>
			break;
 8005226:	bf00      	nop
	}
	
	if(fUpdate)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <EditAccessory+0x1a0>
	{
		NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, List[pVirtualCab->nEditVar]);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	b2d8      	uxtb	r0, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	2100      	movs	r1, #0
 8005244:	f7fe fbbc 	bl	80039c0 <NCE_DisplayMessage>
	}
}
 8005248:	bf00      	nop
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200000f4 	.word	0x200000f4

08005254 <StateSelectLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateSelectLoco(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
	Loco* pLoco;


	if(nEvent == EVENT_STATE_ENTER)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2bc0      	cmp	r3, #192	@ 0xc0
 8005262:	d121      	bne.n	80052a8 <StateSelectLoco+0x54>
	{
		pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3214      	adds	r2, #20
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	60fb      	str	r3, [r7, #12]
		if(pLoco != NULL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <StateSelectLoco+0x34>
		{
			temp = GetLocoAddress(pLoco);
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7fc fc30 	bl	8001ade <GetLocoAddress>
 800527e:	4603      	mov	r3, r0
 8005280:	461a      	mov	r2, r3
 8005282:	4b1f      	ldr	r3, [pc, #124]	@ (8005300 <StateSelectLoco+0xac>)
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e002      	b.n	800528e <StateSelectLoco+0x3a>
		}
		else
		{
			temp = 0;
 8005288:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <StateSelectLoco+0xac>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
		}

		NewMenu(pVirtualCab, &SelectLocoMenu);
 800528e:	491d      	ldr	r1, [pc, #116]	@ (8005304 <StateSelectLoco+0xb0>)
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fa07 	bl	80056a4 <NewMenu>
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	220c      	movs	r2, #12
 800529a:	635a      	str	r2, [r3, #52]	@ 0x34
		SetExpiration(pVirtualCab, EPIRATION_1_MINUTE);
 800529c:	f241 7170 	movw	r1, #6000	@ 0x1770
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7fb fffb 	bl	800129c <SetExpiration>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
		{
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
		}
	}
}
 80052a6:	e027      	b.n	80052f8 <StateSelectLoco+0xa4>
	else if(nEvent == EVENT_STATE_EXIT)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2bc1      	cmp	r3, #193	@ 0xc1
 80052ac:	d024      	beq.n	80052f8 <StateSelectLoco+0xa4>
	else if(!DispatchEvent(pVirtualCab, nEvent, SelectLocoMap))
 80052ae:	4a16      	ldr	r2, [pc, #88]	@ (8005308 <StateSelectLoco+0xb4>)
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fce9 	bl	8006c8a <DispatchEvent>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11c      	bne.n	80052f8 <StateSelectLoco+0xa4>
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	4619      	mov	r1, r3
 80052ca:	460b      	mov	r3, r1
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00e      	beq.n	80052f8 <StateSelectLoco+0xa4>
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, nEvent);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	4619      	mov	r1, r3
 80052e6:	460b      	mov	r3, r1
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	2000323c 	.word	0x2000323c
 8005304:	0802b890 	.word	0x0802b890
 8005308:	0802b814 	.word	0x0802b814

0800530c <SelectLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
Loco* SelectLoco(VIRTUAL_CAB* pVirtualCab, unsigned int nLoco)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	Loco* pLoco;
	int i;
	int j;

	pLoco = FindLoco(nLoco);
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	f7fc fa46 	bl	80017a8 <FindLoco>
 800531c:	6178      	str	r0, [r7, #20]
	if(pLoco == NULL)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <SelectLoco+0x2c>
	{
		pLoco = NewLoco(nLoco);
 8005324:	6838      	ldr	r0, [r7, #0]
 8005326:	f7fc f9e3 	bl	80016f0 <NewLoco>
 800532a:	6178      	str	r0, [r7, #20]
		if(pLoco == NULL)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <SelectLoco+0x2c>
		{
			pLoco = OldestLoco();
 8005332:	f7fc fe65 	bl	8002000 <OldestLoco>
 8005336:	6178      	str	r0, [r7, #20]
		}
	}

	// find out if any other cab has this loco
	// ToDo - let user decide to take this loco or not
	for(i = 0; i < MAX_VIRTUAL_CABS; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e047      	b.n	80053ce <SelectLoco+0xc2>
	{
		if(aVirtualCab[i].Cab != pVirtualCab->Cab)
 800533e:	494d      	ldr	r1, [pc, #308]	@ (8005474 <SelectLoco+0x168>)
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	440b      	add	r3, r1
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d038      	beq.n	80053c8 <SelectLoco+0xbc>
		{
			for(j = 0; j < MAX_RACALLS; j++)
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e032      	b.n	80053c2 <SelectLoco+0xb6>
			{
				if(aVirtualCab[i].pRecall[j] == pLoco)
 800535c:	4945      	ldr	r1, [pc, #276]	@ (8005474 <SelectLoco+0x168>)
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4613      	mov	r3, r2
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	3314      	adds	r3, #20
 800536e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	429a      	cmp	r2, r3
 8005376:	d121      	bne.n	80053bc <SelectLoco+0xb0>
				{
					DeleteRecallLoco(&aVirtualCab[i], j);
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4a3c      	ldr	r2, [pc, #240]	@ (8005474 <SelectLoco+0x168>)
 8005384:	4413      	add	r3, r2
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4611      	mov	r1, r2
 800538a:	4618      	mov	r0, r3
 800538c:	f7fc fa36 	bl	80017fc <DeleteRecallLoco>

					// select a loco we know is NULL so the "----" screen is displayed
					aVirtualCab[i].nWhichRecall = 8;
 8005390:	4938      	ldr	r1, [pc, #224]	@ (8005474 <SelectLoco+0x168>)
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4613      	mov	r3, r2
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	334c      	adds	r3, #76	@ 0x4c
 80053a0:	2208      	movs	r2, #8
 80053a2:	601a      	str	r2, [r3, #0]

					RestoreOperateScreen(&aVirtualCab[i], 1, 1);
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4a31      	ldr	r2, [pc, #196]	@ (8005474 <SelectLoco+0x168>)
 80053b0:	4413      	add	r3, r2
 80053b2:	2201      	movs	r2, #1
 80053b4:	2101      	movs	r1, #1
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fb5a 	bl	8006a70 <RestoreOperateScreen>
			for(j = 0; j < MAX_RACALLS; j++)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b07      	cmp	r3, #7
 80053c6:	ddc9      	ble.n	800535c <SelectLoco+0x50>
	for(i = 0; i < MAX_VIRTUAL_CABS; i++)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	3301      	adds	r3, #1
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	ddb4      	ble.n	800533e <SelectLoco+0x32>
				}
			}
		}
	}

	for(i = 0; i < MAX_RACALLS; i++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	e01b      	b.n	8005412 <SelectLoco+0x106>
	{
		if(pVirtualCab->pRecall[i] == pLoco)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	3214      	adds	r2, #20
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d110      	bne.n	800540c <SelectLoco+0x100>
		{
			pVirtualCab->nWhichRecall = i;
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	64da      	str	r2, [r3, #76]	@ 0x4c

			pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	635a      	str	r2, [r3, #52]	@ 0x34
			RestoreOperateScreen(pVirtualCab, 1, 1);
 80053f6:	2201      	movs	r2, #1
 80053f8:	2101      	movs	r1, #1
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fb38 	bl	8006a70 <RestoreOperateScreen>

			ChangeState(pVirtualCab, STATE_IDLE);
 8005400:	2100      	movs	r1, #0
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fc2c 	bl	8006c60 <ChangeState>
			return pLoco;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	e02e      	b.n	800546a <SelectLoco+0x15e>
	for(i = 0; i < MAX_RACALLS; i++)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	3301      	adds	r3, #1
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b07      	cmp	r3, #7
 8005416:	dde0      	ble.n	80053da <SelectLoco+0xce>
	}

	// ToDo - configure Recall type
//   if(1)
//   {
		for(i = 0; i < MAX_RACALLS; i++)
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e013      	b.n	8005446 <SelectLoco+0x13a>
		{
			if(pVirtualCab->pRecall[i] == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	3214      	adds	r2, #20
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <SelectLoco+0x134>
			{
				pVirtualCab->pRecall[i] = pLoco;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	3214      	adds	r2, #20
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				pVirtualCab->nWhichRecall = i;
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	64da      	str	r2, [r3, #76]	@ 0x4c
				break;
 800543e:	e005      	b.n	800544c <SelectLoco+0x140>
		for(i = 0; i < MAX_RACALLS; i++)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	3301      	adds	r3, #1
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b07      	cmp	r3, #7
 800544a:	dde8      	ble.n	800541e <SelectLoco+0x112>
			}
		}
		if(i == 8)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b08      	cmp	r3, #8
 8005450:	d10a      	bne.n	8005468 <SelectLoco+0x15c>
		{
			pVirtualCab->pRecall[pVirtualCab->nWhichRecall] = pVirtualCab->pRecall[7];
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3214      	adds	r2, #20
 800545e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pVirtualCab->nWhichRecall = 7;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2207      	movs	r2, #7
 8005466:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
//	}
	return pLoco;
 8005468:	697b      	ldr	r3, [r7, #20]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	2000305c 	.word	0x2000305c

08005478 <DoSelectLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoSelectLoco(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	unsigned int nSpeedMode;
	//char LocoFile[20];
	//char LocoNumber[8];


	ExitMenu(pVirtualCab);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f977 	bl	8005776 <ExitMenu>

	if(temp == 0)
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <DoSelectLoco+0x80>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <DoSelectLoco+0x20>
	{
		temp = ANALOG_LOCO;
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <DoSelectLoco+0x80>)
 8005492:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005496:	601a      	str	r2, [r3, #0]
	}
	pLoco = SelectLoco(pVirtualCab, temp);
 8005498:	4b17      	ldr	r3, [pc, #92]	@ (80054f8 <DoSelectLoco+0x80>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff ff34 	bl	800530c <SelectLoco>
 80054a4:	60f8      	str	r0, [r7, #12]

	//kif(DoRun(ALL_PORTS, LocoFile) == CMD_NOT_FOUND)
	//k{
	//k}

	SetLocoDisconnect(pVirtualCab, pLoco);
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 f87d 	bl	80065a8 <SetLocoDisconnect>

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 1, 1);
 80054b4:	2201      	movs	r2, #1
 80054b6:	2101      	movs	r1, #1
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 fad9 	bl	8006a70 <RestoreOperateScreen>


	nSpeedMode = GetLocoSpeedMode(pLoco);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7fc fa28 	bl	8001914 <GetLocoSpeedMode>
 80054c4:	4603      	mov	r3, r0
 80054c6:	60bb      	str	r3, [r7, #8]
	NCE_DisplayMessage(pVirtualCab->Cab, 8, 1, aText[tSpd_28 + nSpeedMode]);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	b2d8      	uxtb	r0, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3316      	adds	r3, #22
 80054d2:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <DoSelectLoco+0x84>)
 80054d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d8:	2201      	movs	r2, #1
 80054da:	2108      	movs	r1, #8
 80054dc:	f7fe fa70 	bl	80039c0 <NCE_DisplayMessage>
	SetExpiration(pVirtualCab, EXPIRATION_2_SECONDS);
 80054e0:	21c8      	movs	r1, #200	@ 0xc8
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fb feda 	bl	800129c <SetExpiration>


	ChangeState(pVirtualCab, STATE_IDLE);
 80054e8:	2100      	movs	r1, #0
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 fbb8 	bl	8006c60 <ChangeState>
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	2000323c 	.word	0x2000323c
 80054fc:	200000fc 	.word	0x200000fc

08005500 <ExitSelectLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitSelectLoco(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]

	ExitMenu(pVirtualCab);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f933 	bl	8005776 <ExitMenu>

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 0, 1);
 8005516:	2201      	movs	r2, #1
 8005518:	2100      	movs	r1, #0
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 faa8 	bl	8006a70 <RestoreOperateScreen>

	ChangeState(pVirtualCab, STATE_IDLE);
 8005520:	2100      	movs	r1, #0
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 fb9c 	bl	8006c60 <ChangeState>
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <StateSend>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateSend(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]

	if(nEvent == EVENT_STATE_ENTER)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2bc0      	cmp	r3, #192	@ 0xc0
 800553e:	d10b      	bne.n	8005558 <StateSend+0x28>
	{
												  //1234567890123456
		NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, "SEND IN PROGRESS");
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	b2d8      	uxtb	r0, r3
 8005546:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <StateSend+0x40>)
 8005548:	2200      	movs	r2, #0
 800554a:	2100      	movs	r1, #0
 800554c:	f7fe fa38 	bl	80039c0 <NCE_DisplayMessage>
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_1L | MENU_SHOWING_LINE_1R | MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	220f      	movs	r2, #15
 8005554:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if(!DispatchEvent(pVirtualCab, nEvent, IdleMap))
	{
		// special event processing not handled by DispatchEvent()
	}
}
 8005556:	e007      	b.n	8005568 <StateSend+0x38>
	else if(nEvent == EVENT_STATE_EXIT)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2bc1      	cmp	r3, #193	@ 0xc1
 800555c:	d004      	beq.n	8005568 <StateSend+0x38>
	else if(!DispatchEvent(pVirtualCab, nEvent, IdleMap))
 800555e:	4a05      	ldr	r2, [pc, #20]	@ (8005574 <StateSend+0x44>)
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 fb91 	bl	8006c8a <DispatchEvent>
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	08026aa4 	.word	0x08026aa4
 8005574:	0802b8a0 	.word	0x0802b8a0

08005578 <StateTrack>:
*
* RESTRICTIONS:
*
**********************************************************************/
void StateTrack(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]

	if(nEvent == EVENT_STATE_ENTER)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2bc0      	cmp	r3, #192	@ 0xc0
 8005586:	d106      	bne.n	8005596 <StateTrack+0x1e>
	{
		pVirtualCab->nMenuShowing = MENU_SHOWING_LINE_1L | MENU_SHOWING_LINE_1R | MENU_SHOWING_LINE_2L | MENU_SHOWING_LINE_2R;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	220f      	movs	r2, #15
 800558c:	635a      	str	r2, [r3, #52]	@ 0x34
		DisplayTrackStatus(pVirtualCab);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f810 	bl	80055b4 <DisplayTrackStatus>
	}
	else if(!DispatchEvent(pVirtualCab, nEvent, IdleMap))
	{
		// special event processing not handled by DispatchEvent()
	}
}
 8005594:	e007      	b.n	80055a6 <StateTrack+0x2e>
	else if(nEvent == EVENT_STATE_EXIT)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2bc1      	cmp	r3, #193	@ 0xc1
 800559a:	d004      	beq.n	80055a6 <StateTrack+0x2e>
	else if(!DispatchEvent(pVirtualCab, nEvent, IdleMap))
 800559c:	4a04      	ldr	r2, [pc, #16]	@ (80055b0 <StateTrack+0x38>)
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 fb72 	bl	8006c8a <DispatchEvent>
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	0802b8ac 	.word	0x0802b8ac

080055b4 <DisplayTrackStatus>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplayTrackStatus(VIRTUAL_CAB* pVirtualCab)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	}
#endif


											  //1234567890123456
	NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, "DECODER TEST    ");
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	b2d8      	uxtb	r0, r3
 80055c2:	4b08      	ldr	r3, [pc, #32]	@ (80055e4 <DisplayTrackStatus+0x30>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	2100      	movs	r1, #0
 80055c8:	f7fe f9fa 	bl	80039c0 <NCE_DisplayMessage>
	NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, "DECODER TEST    ");
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	b2d8      	uxtb	r0, r3
 80055d2:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <DisplayTrackStatus+0x30>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	2100      	movs	r1, #0
 80055d8:	f7fe f9f2 	bl	80039c0 <NCE_DisplayMessage>
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	08026ab8 	.word	0x08026ab8

080055e8 <TrackStatus>:
*
* RESTRICTIONS:
*
**********************************************************************/
void TrackStatus(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]

	DisplayTrackStatus(pVirtualCab);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ffde 	bl	80055b4 <DisplayTrackStatus>
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <ExitTrackDisplay>:
*
* RESTRICTIONS:
*
**********************************************************************/
void ExitTrackDisplay(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]

	//ExitMenu(pVirtualCab);

	pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	635a      	str	r2, [r3, #52]	@ 0x34
	RestoreOperateScreen(pVirtualCab, 0, 1);
 8005610:	2201      	movs	r2, #1
 8005612:	2100      	movs	r1, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 fa2b 	bl	8006a70 <RestoreOperateScreen>

	ChangeState(pVirtualCab, STATE_IDLE);
 800561a:	2100      	movs	r1, #0
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fb1f 	bl	8006c60 <ChangeState>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <DisplayPrompt>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplayPrompt(VIRTUAL_CAB* pVirtualCab, const MENU* pMenu)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]

   NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, aText[pMenu->def[pVirtualCab->nMenuIndex].text]);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	b2d8      	uxtb	r0, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4619      	mov	r1, r3
 8005646:	460b      	mov	r3, r1
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a05      	ldr	r2, [pc, #20]	@ (8005668 <DisplayPrompt+0x3c>)
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	2201      	movs	r2, #1
 800565a:	2100      	movs	r1, #0
 800565c:	f7fe f9b0 	bl	80039c0 <NCE_DisplayMessage>
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200000fc 	.word	0x200000fc

0800566c <DisplayMenu>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplayMenu(VIRTUAL_CAB* pVirtualCab, const MENU* pMenu)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]

   // Display the Prompt
	DisplayPrompt(pVirtualCab, pMenu);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ffd7 	bl	800562c <DisplayPrompt>

   // Display the data
	pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, EVENT_GET_DATA);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	4619      	mov	r1, r3
 8005688:	460b      	mov	r3, r1
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	21d1      	movs	r1, #209	@ 0xd1
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <NewMenu>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NewMenu(VIRTUAL_CAB* pVirtualCab, const MENU* pMenu)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	char TitleBuf[20];
	int nTemp;
	
	
	pVirtualCab->nMenuIndex = 0;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	61da      	str	r2, [r3, #28]
	pVirtualCab->pMenu = pMenu;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	619a      	str	r2, [r3, #24]
	
	// Display the Title
	if(pMenu->title)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d03c      	beq.n	800573c <NewMenu+0x98>
	{
		if(pMenu->variable)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d020      	beq.n	800570c <NewMenu+0x68>
		{
			nTemp = *(int*)pMenu->variable;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	61fb      	str	r3, [r7, #28]
			//snprintf(TitleBuf, 20, aText[pMenu->title], nTemp);
			sprintf(TitleBuf, aText[pMenu->title], nTemp);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4a1d      	ldr	r2, [pc, #116]	@ (800574c <NewMenu+0xa8>)
 80056d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056dc:	f107 0308 	add.w	r3, r7, #8
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f020 fc8a 	bl	8025ffc <siprintf>
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, TitleBuf);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	b2d8      	uxtb	r0, r3
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	2200      	movs	r2, #0
 80056f4:	2100      	movs	r1, #0
 80056f6:	f7fe f963 	bl	80039c0 <NCE_DisplayMessage>
			strcpy(pVirtualCab->szTitleSave, TitleBuf);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3338      	adds	r3, #56	@ 0x38
 80056fe:	f107 0208 	add.w	r2, r7, #8
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f020 feac 	bl	8026462 <strcpy>
 800570a:	e017      	b.n	800573c <NewMenu+0x98>
		}
		else
		{
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, aText[pMenu->title]);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	b2d8      	uxtb	r0, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4a0d      	ldr	r2, [pc, #52]	@ (800574c <NewMenu+0xa8>)
 8005718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571c:	2200      	movs	r2, #0
 800571e:	2100      	movs	r1, #0
 8005720:	f7fe f94e 	bl	80039c0 <NCE_DisplayMessage>
			strcpy(pVirtualCab->szTitleSave, aText[pMenu->title]);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4907      	ldr	r1, [pc, #28]	@ (800574c <NewMenu+0xa8>)
 8005730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f020 fe93 	bl	8026462 <strcpy>
		}
	}
	
	DisplayMenu(pVirtualCab, pMenu);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff ff94 	bl	800566c <DisplayMenu>
}
 8005744:	bf00      	nop
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	200000fc 	.word	0x200000fc

08005750 <NextMenu>:
*
* RESTRICTIONS:
*
**********************************************************************/
void NextMenu(VIRTUAL_CAB* pVirtualCab)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

	pVirtualCab->nMenuIndex++;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	61da      	str	r2, [r3, #28]
	
	DisplayMenu(pVirtualCab, pVirtualCab->pMenu);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff7f 	bl	800566c <DisplayMenu>
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <ExitMenu>:
*
* RESTRICTIONS:	
*
**********************************************************************/
void ExitMenu(VIRTUAL_CAB* pVirtualCab)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]

//	if(DirtyFlag)
//	{

//		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
		if(pVirtualCab->pMenu)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <ExitMenu+0x2e>
		{
			pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, EVENT_STORE_DATA);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4619      	mov	r1, r3
 8005792:	460b      	mov	r3, r1
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	21d2      	movs	r1, #210	@ 0xd2
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
		}
		pVirtualCab->pMenu = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	619a      	str	r2, [r3, #24]
//	}
	
	NCE_CursorOff(pVirtualCab->Cab);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe fa73 	bl	8003c9c <NCE_CursorOff>
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HandleEnter>:
*
* RESTRICTIONS:
*
**********************************************************************/
void HandleEnter(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
	const MENU* pMenu;

	pMenu = pVirtualCab->pMenu;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	60fb      	str	r3, [r7, #12]

   // store the data
	if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	4619      	mov	r1, r3
 80057da:	460b      	mov	r3, r1
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <HandleEnter+0x4a>
	{
		pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EditFunc(pVirtualCab, EVENT_STORE_DATA);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4619      	mov	r1, r3
 80057f6:	460b      	mov	r3, r1
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	21d2      	movs	r1, #210	@ 0xd2
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
	}

   // perform the ENTER function
	if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EnterFunc)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	4619      	mov	r1, r3
 8005814:	460b      	mov	r3, r1
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00e      	beq.n	8005842 <HandleEnter+0x84>
	{
		pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex].EnterFunc(pVirtualCab, nEvent);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4619      	mov	r1, r3
 8005830:	460b      	mov	r3, r1
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
	}

	// step to the next menu item if we are on the same menu
	if(pMenu == pVirtualCab->pMenu)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	429a      	cmp	r2, r3
 800584a:	d11c      	bne.n	8005886 <HandleEnter+0xc8>
	{
		if(pVirtualCab->pMenu->def[pVirtualCab->nMenuIndex + 1].text == 0)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HandleEnter+0xc2>
		{
			if(pVirtualCab->pMenu->ExitFunc)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HandleEnter+0xc8>
			{
				pVirtualCab->pMenu->ExitFunc(pVirtualCab, NO_EVENT);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2100      	movs	r1, #0
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
		else
		{
			NextMenu(pVirtualCab);
		}
	}
}
 800587e:	e002      	b.n	8005886 <HandleEnter+0xc8>
			NextMenu(pVirtualCab);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ff65 	bl	8005750 <NextMenu>
}
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <RunOperate>:
*
* RESTRICTIONS:
*
**********************************************************************/
void RunOperate(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]


	if(nEvent & EVENT_SPEED_TYPE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <RunOperate+0x24>
	{
		pVirtualCab->nSpeed = nEvent & 0xff;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]
		DoSpeedKnob(pVirtualCab);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa41 	bl	8005d34 <DoSpeedKnob>
	}
	else
	{
		DispatchEvent(pVirtualCab, nEvent, OperateMap);
	}
}
 80058b2:	e004      	b.n	80058be <RunOperate+0x2e>
		DispatchEvent(pVirtualCab, nEvent, OperateMap);
 80058b4:	4a04      	ldr	r2, [pc, #16]	@ (80058c8 <RunOperate+0x38>)
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 f9e6 	bl	8006c8a <DispatchEvent>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	0802b8d0 	.word	0x0802b8d0

080058cc <DoDirection>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoDirection(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	unsigned char bDir;
	Loco* pLoco;
	char szTemp[10];
	int nSpeed;
	
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3214      	adds	r2, #20
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	61fb      	str	r3, [r7, #28]
	
	if(pLoco != NULL && (pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80a4 	beq.w	8005a34 <DoDirection+0x168>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f040 809d 	bne.w	8005a34 <DoDirection+0x168>
	{
		switch(pLoco->SpeedFcnMode)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005900:	2b02      	cmp	r3, #2
 8005902:	f000 8096 	beq.w	8005a32 <DoDirection+0x166>
 8005906:	2b02      	cmp	r3, #2
 8005908:	f300 8094 	bgt.w	8005a34 <DoDirection+0x168>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <DoDirection+0x4a>
 8005910:	2b01      	cmp	r3, #1
 8005912:	d069      	beq.n	80059e8 <DoDirection+0x11c>
			case SPEED_MODE_GTZ:
				// the brake key is not used in this mode
			break;
		}
	}
}
 8005914:	e08e      	b.n	8005a34 <DoDirection+0x168>
				if(GetLocoSpeed(pLoco) < SPEED_DIR_MAX)
 8005916:	69f8      	ldr	r0, [r7, #28]
 8005918:	f7fb ffaf 	bl	800187a <GetLocoSpeed>
 800591c:	4603      	mov	r3, r0
 800591e:	2b23      	cmp	r3, #35	@ 0x23
 8005920:	d81d      	bhi.n	800595e <DoDirection+0x92>
					bDir = GetLocoDirection(pLoco);
 8005922:	69f8      	ldr	r0, [r7, #28]
 8005924:	f7fc f81b 	bl	800195e <GetLocoDirection>
 8005928:	4603      	mov	r3, r0
 800592a:	76fb      	strb	r3, [r7, #27]
					if(bDir == DIR_FORWARD)
 800592c:	7efb      	ldrb	r3, [r7, #27]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d108      	bne.n	8005944 <DoDirection+0x78>
						SetLocoDirection(pLoco, DIR_REVERSE);
 8005932:	2101      	movs	r1, #1
 8005934:	69f8      	ldr	r0, [r7, #28]
 8005936:	f7fc f81f 	bl	8001978 <SetLocoDirection>
						DisplayDirection(pVirtualCab, DIR_REVERSE);
 800593a:	2101      	movs	r1, #1
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fecb 	bl	80066d8 <DisplayDirection>
 8005942:	e007      	b.n	8005954 <DoDirection+0x88>
						SetLocoDirection(pLoco, DIR_FORWARD);
 8005944:	2100      	movs	r1, #0
 8005946:	69f8      	ldr	r0, [r7, #28]
 8005948:	f7fc f816 	bl	8001978 <SetLocoDirection>
						DisplayDirection(pVirtualCab, DIR_FORWARD);
 800594c:	2100      	movs	r1, #0
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fec2 	bl	80066d8 <DisplayDirection>
					DoBrake(pVirtualCab, nEvent);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fd82 	bl	8006460 <DoBrake>
			break;
 800595c:	e06a      	b.n	8005a34 <DoDirection+0x168>
					switch(GetLocoSpeedMode(pLoco))
 800595e:	69f8      	ldr	r0, [r7, #28]
 8005960:	f7fb ffd8 	bl	8001914 <GetLocoSpeedMode>
 8005964:	4603      	mov	r3, r0
 8005966:	2b05      	cmp	r3, #5
 8005968:	d830      	bhi.n	80059cc <DoDirection+0x100>
 800596a:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <DoDirection+0xa4>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005999 	.word	0x08005999
 8005974:	080059b9 	.word	0x080059b9
 8005978:	080059a9 	.word	0x080059a9
 800597c:	080059b9 	.word	0x080059b9
 8005980:	08005989 	.word	0x08005989
 8005984:	080059b9 	.word	0x080059b9
							sprintf(szTemp, " SPED>%2d", SPEED_DIR_MAX / SPEED_14_DIVISOR);
 8005988:	f107 0308 	add.w	r3, r7, #8
 800598c:	2202      	movs	r2, #2
 800598e:	492b      	ldr	r1, [pc, #172]	@ (8005a3c <DoDirection+0x170>)
 8005990:	4618      	mov	r0, r3
 8005992:	f020 fb33 	bl	8025ffc <siprintf>
						break;
 8005996:	e019      	b.n	80059cc <DoDirection+0x100>
							sprintf(szTemp, " SPED>%2d", SPEED_DIR_MAX / SPEED_28_DIVISOR);
 8005998:	f107 0308 	add.w	r3, r7, #8
 800599c:	2204      	movs	r2, #4
 800599e:	4927      	ldr	r1, [pc, #156]	@ (8005a3c <DoDirection+0x170>)
 80059a0:	4618      	mov	r0, r3
 80059a2:	f020 fb2b 	bl	8025ffc <siprintf>
						break;
 80059a6:	e011      	b.n	80059cc <DoDirection+0x100>
							sprintf(szTemp, " SPED>%2d", SPEED_DIR_MAX / SPEED_128_DIVISOR);
 80059a8:	f107 0308 	add.w	r3, r7, #8
 80059ac:	2212      	movs	r2, #18
 80059ae:	4923      	ldr	r1, [pc, #140]	@ (8005a3c <DoDirection+0x170>)
 80059b0:	4618      	mov	r0, r3
 80059b2:	f020 fb23 	bl	8025ffc <siprintf>
						break;
 80059b6:	e009      	b.n	80059cc <DoDirection+0x100>
							nSpeed = (SPEED_DIR_MAX * 100) / SPEED_PRIME_NUMBER;
 80059b8:	230e      	movs	r3, #14
 80059ba:	617b      	str	r3, [r7, #20]
							sprintf(szTemp, " SPED>%2d", nSpeed);
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	491e      	ldr	r1, [pc, #120]	@ (8005a3c <DoDirection+0x170>)
 80059c4:	4618      	mov	r0, r3
 80059c6:	f020 fb19 	bl	8025ffc <siprintf>
						break;
 80059ca:	bf00      	nop
					NCE_DisplayMessage(pVirtualCab->Cab, 8, 1, szTemp);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	b2d8      	uxtb	r0, r3
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	2201      	movs	r2, #1
 80059d8:	2108      	movs	r1, #8
 80059da:	f7fd fff1 	bl	80039c0 <NCE_DisplayMessage>
					SetExpiration(pVirtualCab, EXPIRATION_05_SECONDS);
 80059de:	2132      	movs	r1, #50	@ 0x32
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fb fc5b 	bl	800129c <SetExpiration>
			break;
 80059e6:	e025      	b.n	8005a34 <DoDirection+0x168>
				if(GetLocoSpeed(pLoco) != 0)
 80059e8:	69f8      	ldr	r0, [r7, #28]
 80059ea:	f7fb ff46 	bl	800187a <GetLocoSpeed>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <DoDirection+0x132>
					DoBrake(pVirtualCab, nEvent);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fd32 	bl	8006460 <DoBrake>
			break;
 80059fc:	e01a      	b.n	8005a34 <DoDirection+0x168>
					bDir = GetLocoDirection(pLoco);
 80059fe:	69f8      	ldr	r0, [r7, #28]
 8005a00:	f7fb ffad 	bl	800195e <GetLocoDirection>
 8005a04:	4603      	mov	r3, r0
 8005a06:	76fb      	strb	r3, [r7, #27]
					if(bDir == DIR_FORWARD)
 8005a08:	7efb      	ldrb	r3, [r7, #27]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <DoDirection+0x154>
						SetLocoDirection(pLoco, DIR_REVERSE);
 8005a0e:	2101      	movs	r1, #1
 8005a10:	69f8      	ldr	r0, [r7, #28]
 8005a12:	f7fb ffb1 	bl	8001978 <SetLocoDirection>
						DisplayDirection(pVirtualCab, DIR_REVERSE);
 8005a16:	2101      	movs	r1, #1
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fe5d 	bl	80066d8 <DisplayDirection>
			break;
 8005a1e:	e009      	b.n	8005a34 <DoDirection+0x168>
						SetLocoDirection(pLoco, DIR_FORWARD);
 8005a20:	2100      	movs	r1, #0
 8005a22:	69f8      	ldr	r0, [r7, #28]
 8005a24:	f7fb ffa8 	bl	8001978 <SetLocoDirection>
						DisplayDirection(pVirtualCab, DIR_FORWARD);
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fe54 	bl	80066d8 <DisplayDirection>
			break;
 8005a30:	e000      	b.n	8005a34 <DoDirection+0x168>
			break;
 8005a32:	bf00      	nop
}
 8005a34:	bf00      	nop
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	08026acc 	.word	0x08026acc

08005a40 <IncSpeed>:
*
* RESTRICTIONS:
*
**********************************************************************/
void IncSpeed(unsigned int* nSpeed, unsigned int nIncAmount)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
	*nSpeed += nIncAmount;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	441a      	add	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	601a      	str	r2, [r3, #0]
	if(*nSpeed > SPEED_PRIME_NUMBER)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2bfc      	cmp	r3, #252	@ 0xfc
 8005a5c:	d902      	bls.n	8005a64 <IncSpeed+0x24>
	{
		*nSpeed = SPEED_PRIME_NUMBER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	22fc      	movs	r2, #252	@ 0xfc
 8005a62:	601a      	str	r2, [r3, #0]
	}
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <DecSpeed>:

void DecSpeed(unsigned int* nSpeed, unsigned int nIncAmount)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
	*nSpeed -= nIncAmount;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	1ad2      	subs	r2, r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
	if(*nSpeed > SPEED_PRIME_NUMBER)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2bfc      	cmp	r3, #252	@ 0xfc
 8005a8c:	d902      	bls.n	8005a94 <DecSpeed+0x24>
	{
		*nSpeed = 0;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
	}
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <DoSpeed>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoSpeed(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
	unsigned int nSpeed;
	unsigned int nIncAmount;
	Loco* pLoco;
	//static BOOL SpeedWasZero = FALSE;
	
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3214      	adds	r2, #20
 8005ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab6:	613b      	str	r3, [r7, #16]
	
	if((pLoco != NULL) &&
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8135 	beq.w	8005d2a <DoSpeed+0x28a>
			((pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0) &&
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac4:	f003 0310 	and.w	r3, r3, #16
	if((pLoco != NULL) &&
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f040 812e 	bne.w	8005d2a <DoSpeed+0x28a>
			((pVirtualCab->nMenuShowing & MENU_SHOWING_FUNCTIONS) == 0))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad2:	f003 0320 	and.w	r3, r3, #32
			((pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0) &&
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f040 8127 	bne.w	8005d2a <DoSpeed+0x28a>
	{
		switch(GetLocoSpeedMode(pLoco))
 8005adc:	6938      	ldr	r0, [r7, #16]
 8005ade:	f7fb ff19 	bl	8001914 <GetLocoSpeedMode>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d006      	beq.n	8005af6 <DoSpeed+0x56>
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	dc0d      	bgt.n	8005b08 <DoSpeed+0x68>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <DoSpeed+0x5c>
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d006      	beq.n	8005b02 <DoSpeed+0x62>
 8005af4:	e008      	b.n	8005b08 <DoSpeed+0x68>
		{
			case SPEED_MODE_14:
				nIncAmount = SPEED_14_DIVISOR;
 8005af6:	2312      	movs	r3, #18
 8005af8:	617b      	str	r3, [r7, #20]
				break;
 8005afa:	e008      	b.n	8005b0e <DoSpeed+0x6e>
			
			case SPEED_MODE_28:
				nIncAmount = SPEED_28_DIVISOR;
 8005afc:	2309      	movs	r3, #9
 8005afe:	617b      	str	r3, [r7, #20]
				break;
 8005b00:	e005      	b.n	8005b0e <DoSpeed+0x6e>
			
			case SPEED_MODE_128:
				nIncAmount = SPEED_128_DIVISOR;
 8005b02:	2302      	movs	r3, #2
 8005b04:	617b      	str	r3, [r7, #20]
				break;
 8005b06:	e002      	b.n	8005b0e <DoSpeed+0x6e>
			
			case SPEED_MODE_14_PERCENT:
			case SPEED_MODE_28_PERCENT:
			case SPEED_MODE_128_PERCENT:
			default:
				nIncAmount = 3;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	617b      	str	r3, [r7, #20]
				break;
 8005b0c:	bf00      	nop
		}
		nSpeed = GetLocoSpeed(pLoco);
 8005b0e:	6938      	ldr	r0, [r7, #16]
 8005b10:	f7fb feb3 	bl	800187a <GetLocoSpeed>
 8005b14:	4603      	mov	r3, r0
 8005b16:	60fb      	str	r3, [r7, #12]
		//if(nSpeed == 0)
		//{
		//	SpeedWasZero = TRUE;
		//}

		switch(pLoco->SpeedFcnMode)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	dc02      	bgt.n	8005b28 <DoSpeed+0x88>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da03      	bge.n	8005b2e <DoSpeed+0x8e>
 8005b26:	e0f1      	b.n	8005d0c <DoSpeed+0x26c>
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d04e      	beq.n	8005bca <DoSpeed+0x12a>
 8005b2c:	e0ee      	b.n	8005d0c <DoSpeed+0x26c>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	3b8b      	subs	r3, #139	@ 0x8b
 8005b32:	2b11      	cmp	r3, #17
 8005b34:	f200 80e7 	bhi.w	8005d06 <DoSpeed+0x266>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <DoSpeed+0xa0>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b97 	.word	0x08005b97
 8005b48:	08005d07 	.word	0x08005d07
 8005b4c:	08005d07 	.word	0x08005d07
 8005b50:	08005d07 	.word	0x08005d07
 8005b54:	08005d07 	.word	0x08005d07
 8005b58:	08005d07 	.word	0x08005d07
 8005b5c:	08005d07 	.word	0x08005d07
 8005b60:	08005d07 	.word	0x08005d07
 8005b64:	08005d07 	.word	0x08005d07
 8005b68:	08005d07 	.word	0x08005d07
 8005b6c:	08005d07 	.word	0x08005d07
 8005b70:	08005d07 	.word	0x08005d07
 8005b74:	08005d07 	.word	0x08005d07
 8005b78:	08005d07 	.word	0x08005d07
 8005b7c:	08005d07 	.word	0x08005d07
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bb7 	.word	0x08005bb7
			case SPEED_MODE_NORMAL:
			case SPEED_MODE_STOP:
				switch(nEvent)
				{
					case EVENT_SPEED_INC:
						IncSpeed(&nSpeed, nIncAmount);
 8005b88:	f107 030c 	add.w	r3, r7, #12
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff ff56 	bl	8005a40 <IncSpeed>
					break;
 8005b94:	e018      	b.n	8005bc8 <DoSpeed+0x128>

					case EVENT_SPEED_DEC:
						DecSpeed(&nSpeed, nIncAmount);
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	6979      	ldr	r1, [r7, #20]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ff67 	bl	8005a70 <DecSpeed>
					break;
 8005ba2:	e011      	b.n	8005bc8 <DoSpeed+0x128>

					case EVENT_SPEED_INC_FAST:
						IncSpeed(&nSpeed, nIncAmount * 4);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	009a      	lsls	r2, r3, #2
 8005ba8:	f107 030c 	add.w	r3, r7, #12
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff ff46 	bl	8005a40 <IncSpeed>
					break;
 8005bb4:	e008      	b.n	8005bc8 <DoSpeed+0x128>

					case EVENT_SPEED_DEC_FAST:
						DecSpeed(&nSpeed, nIncAmount * 4);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	009a      	lsls	r2, r3, #2
 8005bba:	f107 030c 	add.w	r3, r7, #12
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff ff55 	bl	8005a70 <DecSpeed>
					break;
 8005bc6:	bf00      	nop
				}
			break;
 8005bc8:	e09d      	b.n	8005d06 <DoSpeed+0x266>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	3b8b      	subs	r3, #139	@ 0x8b
 8005bce:	2b11      	cmp	r3, #17
 8005bd0:	d87e      	bhi.n	8005cd0 <DoSpeed+0x230>
 8005bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <DoSpeed+0x138>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c21 	.word	0x08005c21
 8005bdc:	08005c49 	.word	0x08005c49
 8005be0:	08005cd1 	.word	0x08005cd1
 8005be4:	08005cd1 	.word	0x08005cd1
 8005be8:	08005cd1 	.word	0x08005cd1
 8005bec:	08005cd1 	.word	0x08005cd1
 8005bf0:	08005cd1 	.word	0x08005cd1
 8005bf4:	08005cd1 	.word	0x08005cd1
 8005bf8:	08005cd1 	.word	0x08005cd1
 8005bfc:	08005cd1 	.word	0x08005cd1
 8005c00:	08005cd1 	.word	0x08005cd1
 8005c04:	08005cd1 	.word	0x08005cd1
 8005c08:	08005cd1 	.word	0x08005cd1
 8005c0c:	08005cd1 	.word	0x08005cd1
 8005c10:	08005cd1 	.word	0x08005cd1
 8005c14:	08005cd1 	.word	0x08005cd1
 8005c18:	08005c71 	.word	0x08005c71
 8005c1c:	08005ca1 	.word	0x08005ca1
			
			case SPEED_MODE_GTZ:
				switch(nEvent)
				{
					case EVENT_SPEED_INC:
						if(GetLocoDirection(pLoco) == DIR_FORWARD)
 8005c20:	6938      	ldr	r0, [r7, #16]
 8005c22:	f7fb fe9c 	bl	800195e <GetLocoDirection>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <DoSpeed+0x19a>
						{
							IncSpeed(&nSpeed, nIncAmount);
 8005c2c:	f107 030c 	add.w	r3, r7, #12
 8005c30:	6979      	ldr	r1, [r7, #20]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff ff04 	bl	8005a40 <IncSpeed>
						}
						else
						{
							DecSpeed(&nSpeed, nIncAmount);
						}
					break;
 8005c38:	e04a      	b.n	8005cd0 <DoSpeed+0x230>
							DecSpeed(&nSpeed, nIncAmount);
 8005c3a:	f107 030c 	add.w	r3, r7, #12
 8005c3e:	6979      	ldr	r1, [r7, #20]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff15 	bl	8005a70 <DecSpeed>
					break;
 8005c46:	e043      	b.n	8005cd0 <DoSpeed+0x230>

					case EVENT_SPEED_DEC:
						if(GetLocoDirection(pLoco) == DIR_FORWARD)
 8005c48:	6938      	ldr	r0, [r7, #16]
 8005c4a:	f7fb fe88 	bl	800195e <GetLocoDirection>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <DoSpeed+0x1c2>
						{
							DecSpeed(&nSpeed, nIncAmount);
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	6979      	ldr	r1, [r7, #20]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff ff08 	bl	8005a70 <DecSpeed>
						}
						else
						{
							IncSpeed(&nSpeed, nIncAmount);
						}
					break;
 8005c60:	e036      	b.n	8005cd0 <DoSpeed+0x230>
							IncSpeed(&nSpeed, nIncAmount);
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fee9 	bl	8005a40 <IncSpeed>
					break;
 8005c6e:	e02f      	b.n	8005cd0 <DoSpeed+0x230>

					case EVENT_SPEED_INC_FAST:
						if(GetLocoDirection(pLoco) == DIR_FORWARD)
 8005c70:	6938      	ldr	r0, [r7, #16]
 8005c72:	f7fb fe74 	bl	800195e <GetLocoDirection>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <DoSpeed+0x1ee>
						{
							IncSpeed(&nSpeed, nIncAmount * 4);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	009a      	lsls	r2, r3, #2
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff feda 	bl	8005a40 <IncSpeed>
						}
						else
						{
							DecSpeed(&nSpeed, nIncAmount * 4);
						}
					break;
 8005c8c:	e020      	b.n	8005cd0 <DoSpeed+0x230>
							DecSpeed(&nSpeed, nIncAmount * 4);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	009a      	lsls	r2, r3, #2
 8005c92:	f107 030c 	add.w	r3, r7, #12
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fee9 	bl	8005a70 <DecSpeed>
					break;
 8005c9e:	e017      	b.n	8005cd0 <DoSpeed+0x230>

					case EVENT_SPEED_DEC_FAST:
						if(GetLocoDirection(pLoco) == DIR_FORWARD)
 8005ca0:	6938      	ldr	r0, [r7, #16]
 8005ca2:	f7fb fe5c 	bl	800195e <GetLocoDirection>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d108      	bne.n	8005cbe <DoSpeed+0x21e>
						{
							DecSpeed(&nSpeed, nIncAmount * 4);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	009a      	lsls	r2, r3, #2
 8005cb0:	f107 030c 	add.w	r3, r7, #12
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff feda 	bl	8005a70 <DecSpeed>
						}
						else
						{
							IncSpeed(&nSpeed, nIncAmount * 4);
						}
					break;
 8005cbc:	e007      	b.n	8005cce <DoSpeed+0x22e>
							IncSpeed(&nSpeed, nIncAmount * 4);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	009a      	lsls	r2, r3, #2
 8005cc2:	f107 030c 	add.w	r3, r7, #12
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff feb9 	bl	8005a40 <IncSpeed>
					break;
 8005cce:	bf00      	nop
				}

				//if(nSpeed == 0 && SpeedWasZero == FALSE)
				if(nSpeed == 0)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d119      	bne.n	8005d0a <DoSpeed+0x26a>
				{
					if(GetLocoDirection(pLoco) == DIR_FORWARD)
 8005cd6:	6938      	ldr	r0, [r7, #16]
 8005cd8:	f7fb fe41 	bl	800195e <GetLocoDirection>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d108      	bne.n	8005cf4 <DoSpeed+0x254>
					{
						SetLocoDirection(pLoco, DIR_REVERSE);
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	6938      	ldr	r0, [r7, #16]
 8005ce6:	f7fb fe47 	bl	8001978 <SetLocoDirection>
						DisplayDirection(pVirtualCab, DIR_REVERSE);
 8005cea:	2101      	movs	r1, #1
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fcf3 	bl	80066d8 <DisplayDirection>
					{
						SetLocoDirection(pLoco, DIR_FORWARD);
						DisplayDirection(pVirtualCab, DIR_FORWARD);
					}
				}
			break;
 8005cf2:	e00a      	b.n	8005d0a <DoSpeed+0x26a>
						SetLocoDirection(pLoco, DIR_FORWARD);
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	6938      	ldr	r0, [r7, #16]
 8005cf8:	f7fb fe3e 	bl	8001978 <SetLocoDirection>
						DisplayDirection(pVirtualCab, DIR_FORWARD);
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fcea 	bl	80066d8 <DisplayDirection>
			break;
 8005d04:	e001      	b.n	8005d0a <DoSpeed+0x26a>
			break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <DoSpeed+0x26c>
			break;
 8005d0a:	bf00      	nop
		}
		
		SetLocoSpeed(pLoco, nSpeed);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4619      	mov	r1, r3
 8005d12:	6938      	ldr	r0, [r7, #16]
 8005d14:	f7fb fdbe 	bl	8001894 <SetLocoSpeed>
		
		SetLocoDisconnect(pVirtualCab, pLoco);
 8005d18:	6939      	ldr	r1, [r7, #16]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fc44 	bl	80065a8 <SetLocoDisconnect>
		
		DisplaySpeed(pVirtualCab, nSpeed);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fd09 	bl	800673c <DisplaySpeed>
	}
}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop

08005d34 <DoSpeedKnob>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoSpeedKnob(VIRTUAL_CAB* pVirtualCab)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	@ 0x30
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	unsigned int nNewSpeed;
	char szTemp[16];
	unsigned int nTemp;

	
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3214      	adds	r2, #20
 8005d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d48:	61fb      	str	r3, [r7, #28]
	nNewSpeed = pVirtualCab->nSpeed;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
	
	if(pLoco != NULL && (pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 8120 	beq.w	8005f98 <DoSpeedKnob+0x264>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 8119 	bne.w	8005f98 <DoSpeedKnob+0x264>
	{
		nNewSpeed *= 2;		// convert to the "speed prime number"
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24

		if(pLoco->SpeedFcnMode == SPEED_MODE_GTZ)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d11e      	bne.n	8005db4 <DoSpeedKnob+0x80>
		{
			if(nNewSpeed > (SPEED_PRIME_NUMBER / 2))
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	2b7e      	cmp	r3, #126	@ 0x7e
 8005d7a:	d90e      	bls.n	8005d9a <DoSpeedKnob+0x66>
			{
				nNewSpeed -= (SPEED_PRIME_NUMBER / 2);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	3b7e      	subs	r3, #126	@ 0x7e
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
				nNewSpeed *= 2;		// compensate for the half range
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
				SetLocoDirection(pLoco, DIR_FORWARD);
 8005d88:	2100      	movs	r1, #0
 8005d8a:	69f8      	ldr	r0, [r7, #28]
 8005d8c:	f7fb fdf4 	bl	8001978 <SetLocoDirection>
				DisplayDirection(pVirtualCab, DIR_FORWARD);
 8005d90:	2100      	movs	r1, #0
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fca0 	bl	80066d8 <DisplayDirection>
 8005d98:	e00c      	b.n	8005db4 <DoSpeedKnob+0x80>
			}
			else
			{
				nNewSpeed = ((SPEED_PRIME_NUMBER / 2) - nNewSpeed) * 2;		// compensate for the half range
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
				SetLocoDirection(pLoco, DIR_REVERSE);
 8005da4:	2101      	movs	r1, #1
 8005da6:	69f8      	ldr	r0, [r7, #28]
 8005da8:	f7fb fde6 	bl	8001978 <SetLocoDirection>
				DisplayDirection(pVirtualCab, DIR_REVERSE);
 8005dac:	2101      	movs	r1, #1
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fc92 	bl	80066d8 <DisplayDirection>
			}
		}

		
		nUpperSpeed = GetLocoSpeed(pLoco) + 6;
 8005db4:	69f8      	ldr	r0, [r7, #28]
 8005db6:	f7fb fd60 	bl	800187a <GetLocoSpeed>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	3306      	adds	r3, #6
 8005dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(nUpperSpeed > SPEED_PRIME_NUMBER)
 8005dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc2:	2bfc      	cmp	r3, #252	@ 0xfc
 8005dc4:	d901      	bls.n	8005dca <DoSpeedKnob+0x96>
		{
			nUpperSpeed = SPEED_PRIME_NUMBER;
 8005dc6:	23fc      	movs	r3, #252	@ 0xfc
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		
		nLowerSpeed = GetLocoSpeed(pLoco) - 6;
 8005dca:	69f8      	ldr	r0, [r7, #28]
 8005dcc:	f7fb fd55 	bl	800187a <GetLocoSpeed>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	3b06      	subs	r3, #6
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(nLowerSpeed > SPEED_PRIME_NUMBER)
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	2bfc      	cmp	r3, #252	@ 0xfc
 8005dda:	d901      	bls.n	8005de0 <DoSpeedKnob+0xac>
		{
			nLowerSpeed = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		
		if(nNewSpeed >= nLowerSpeed && nNewSpeed < nUpperSpeed)
 8005de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d312      	bcc.n	8005e0e <DoSpeedKnob+0xda>
 8005de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d20e      	bcs.n	8005e0e <DoSpeedKnob+0xda>
		{
			if(pVirtualCab->bSpeedDisconnect != 0)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	7c1b      	ldrb	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <DoSpeedKnob+0xd4>
			{
				DisplayDirection(pVirtualCab, GetLocoDirection(pLoco));
 8005df8:	69f8      	ldr	r0, [r7, #28]
 8005dfa:	f7fb fdb0 	bl	800195e <GetLocoDirection>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fc68 	bl	80066d8 <DisplayDirection>
			}
			pVirtualCab->bSpeedDisconnect = 0;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	741a      	strb	r2, [r3, #16]
		}
		
		if(pVirtualCab->bSpeedDisconnect == 0)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	7c1b      	ldrb	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <DoSpeedKnob+0xf8>
		{
			SetLocoSpeed(pLoco, nNewSpeed);
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	69f8      	ldr	r0, [r7, #28]
 8005e1e:	f7fb fd39 	bl	8001894 <SetLocoSpeed>
			DisplaySpeed(pVirtualCab, nNewSpeed);
 8005e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fc89 	bl	800673c <DisplaySpeed>
			}
			NCE_DisplayMessage(pVirtualCab->Cab, 2, 0, szTemp);
			SetExpiration(pVirtualCab, EXPIRATION_05_SECONDS);
		}
	}
}
 8005e2a:	e0b5      	b.n	8005f98 <DoSpeedKnob+0x264>
			switch(GetLocoSpeedMode(pLoco))
 8005e2c:	69f8      	ldr	r0, [r7, #28]
 8005e2e:	f7fb fd71 	bl	8001914 <GetLocoSpeedMode>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	f200 808c 	bhi.w	8005f52 <DoSpeedKnob+0x21e>
 8005e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <DoSpeedKnob+0x10c>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08005ea7 	.word	0x08005ea7
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005ea7 	.word	0x08005ea7
 8005e50:	08005e59 	.word	0x08005e59
 8005e54:	08005ea7 	.word	0x08005ea7
					nNewSpeed /= SPEED_14_DIVISOR;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	4a51      	ldr	r2, [pc, #324]	@ (8005fa0 <DoSpeedKnob+0x26c>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
					sprintf(szTemp, " %3d", nNewSpeed);
 8005e64:	f107 030c 	add.w	r3, r7, #12
 8005e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6a:	494e      	ldr	r1, [pc, #312]	@ (8005fa4 <DoSpeedKnob+0x270>)
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f020 f8c5 	bl	8025ffc <siprintf>
				break;
 8005e72:	e06e      	b.n	8005f52 <DoSpeedKnob+0x21e>
					nNewSpeed /= SPEED_28_DIVISOR;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa0 <DoSpeedKnob+0x26c>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
					sprintf(szTemp, " %3d", nNewSpeed);
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e86:	4947      	ldr	r1, [pc, #284]	@ (8005fa4 <DoSpeedKnob+0x270>)
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f020 f8b7 	bl	8025ffc <siprintf>
				break;
 8005e8e:	e060      	b.n	8005f52 <DoSpeedKnob+0x21e>
					nNewSpeed /= SPEED_128_DIVISOR;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
					sprintf(szTemp, " %3d", nNewSpeed);
 8005e96:	f107 030c 	add.w	r3, r7, #12
 8005e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9c:	4941      	ldr	r1, [pc, #260]	@ (8005fa4 <DoSpeedKnob+0x270>)
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f020 f8ac 	bl	8025ffc <siprintf>
				break;
 8005ea4:	e055      	b.n	8005f52 <DoSpeedKnob+0x21e>
					nTemp = GetLocoMaxSpeed(pLoco);
 8005ea6:	69f8      	ldr	r0, [r7, #28]
 8005ea8:	f7fb fd13 	bl	80018d2 <GetLocoMaxSpeed>
 8005eac:	4603      	mov	r3, r0
 8005eae:	623b      	str	r3, [r7, #32]
					if(nTemp == 0)
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d11d      	bne.n	8005ef2 <DoSpeedKnob+0x1be>
						nNewSpeed /= 2;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
						if(nNewSpeed != 0)
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00f      	beq.n	8005ee2 <DoSpeedKnob+0x1ae>
							nNewSpeed = (nNewSpeed * 100) / 126;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	2264      	movs	r2, #100	@ 0x64
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	4a36      	ldr	r2, [pc, #216]	@ (8005fa8 <DoSpeedKnob+0x274>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
							if(nNewSpeed == 0)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <DoSpeedKnob+0x1ae>
								nNewSpeed++;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	3301      	adds	r3, #1
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
						sprintf(szTemp, " %3d", nNewSpeed);
 8005ee2:	f107 030c 	add.w	r3, r7, #12
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee8:	492e      	ldr	r1, [pc, #184]	@ (8005fa4 <DoSpeedKnob+0x270>)
 8005eea:	4618      	mov	r0, r3
 8005eec:	f020 f886 	bl	8025ffc <siprintf>
				break;
 8005ef0:	e02e      	b.n	8005f50 <DoSpeedKnob+0x21c>
						if(GetLocoSpeedUnits(pLoco))
 8005ef2:	69f8      	ldr	r0, [r7, #28]
 8005ef4:	f7fb fcfd 	bl	80018f2 <GetLocoSpeedUnits>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d015      	beq.n	8005f2a <DoSpeedKnob+0x1f6>
							nNewSpeed *= (nTemp & 0x7f);
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
							nNewSpeed /= SPEED_PRIME_NUMBER;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	4a26      	ldr	r2, [pc, #152]	@ (8005fac <DoSpeedKnob+0x278>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	08db      	lsrs	r3, r3, #3
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
							sprintf(szTemp, "%3dk", nNewSpeed);
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f20:	4923      	ldr	r1, [pc, #140]	@ (8005fb0 <DoSpeedKnob+0x27c>)
 8005f22:	4618      	mov	r0, r3
 8005f24:	f020 f86a 	bl	8025ffc <siprintf>
				break;
 8005f28:	e012      	b.n	8005f50 <DoSpeedKnob+0x21c>
							nNewSpeed *= nTemp;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
							nNewSpeed /= SPEED_PRIME_NUMBER;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	4a1c      	ldr	r2, [pc, #112]	@ (8005fac <DoSpeedKnob+0x278>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	08db      	lsrs	r3, r3, #3
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
							sprintf(szTemp, "%3d%%", nNewSpeed);
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f48:	491a      	ldr	r1, [pc, #104]	@ (8005fb4 <DoSpeedKnob+0x280>)
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f020 f856 	bl	8025ffc <siprintf>
				break;
 8005f50:	bf00      	nop
			for(nTemp = 0; nTemp < 3; nTemp++)
 8005f52:	2300      	movs	r3, #0
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	e00f      	b.n	8005f78 <DoSpeedKnob+0x244>
				if(szTemp[nTemp] == ' ')
 8005f58:	f107 020c 	add.w	r2, r7, #12
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	4413      	add	r3, r2
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d105      	bne.n	8005f72 <DoSpeedKnob+0x23e>
					szTemp[nTemp] = '*';
 8005f66:	f107 020c 	add.w	r2, r7, #12
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	222a      	movs	r2, #42	@ 0x2a
 8005f70:	701a      	strb	r2, [r3, #0]
			for(nTemp = 0; nTemp < 3; nTemp++)
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	3301      	adds	r3, #1
 8005f76:	623b      	str	r3, [r7, #32]
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d9ec      	bls.n	8005f58 <DoSpeedKnob+0x224>
			NCE_DisplayMessage(pVirtualCab->Cab, 2, 0, szTemp);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	b2d8      	uxtb	r0, r3
 8005f84:	f107 030c 	add.w	r3, r7, #12
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	f7fd fd18 	bl	80039c0 <NCE_DisplayMessage>
			SetExpiration(pVirtualCab, EXPIRATION_05_SECONDS);
 8005f90:	2132      	movs	r1, #50	@ 0x32
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb f982 	bl	800129c <SetExpiration>
}
 8005f98:	bf00      	nop
 8005f9a:	3730      	adds	r7, #48	@ 0x30
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	38e38e39 	.word	0x38e38e39
 8005fa4:	08026ad8 	.word	0x08026ad8
 8005fa8:	82082083 	.word	0x82082083
 8005fac:	20820821 	.word	0x20820821
 8005fb0:	08026ae0 	.word	0x08026ae0
 8005fb4:	08026ae8 	.word	0x08026ae8

08005fb8 <GetCombinedFunctions>:
*
* RESTRICTIONS:
*
**********************************************************************/
word GetCombinedFunctions(VIRTUAL_CAB* pVirtualCab, Loco* pLoco)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	unsigned int FunctionMapMask;
	unsigned int FunctionMapTemp;
	unsigned int FunctionMap;
	int i;

	FunctionMap = GetLocoFunctions(pLoco);
 8005fc2:	6838      	ldr	r0, [r7, #0]
 8005fc4:	f7fb fd04 	bl	80019d0 <GetLocoFunctions>
 8005fc8:	6138      	str	r0, [r7, #16]
	
	if(IsLeadLoco(pLoco))
 8005fca:	6838      	ldr	r0, [r7, #0]
 8005fcc:	f7fb fdb4 	bl	8001b38 <IsLeadLoco>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d031      	beq.n	800603a <GetCombinedFunctions+0x82>
	{
		if(pLoco != NULL)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d02e      	beq.n	800603a <GetCombinedFunctions+0x82>
		{
			for(i = 0; i < MAX_LOCOS; i++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e026      	b.n	8006030 <GetCombinedFunctions+0x78>
			{
				if((pLoco = pLoco->pConsistLink) == NULL)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d024      	beq.n	8006038 <GetCombinedFunctions+0x80>
				{
					break;
				}
				else
				{
					FunctionMapMask = GetLocoFunctionOverride(pLoco);
 8005fee:	6838      	ldr	r0, [r7, #0]
 8005ff0:	f7fb fce1 	bl	80019b6 <GetLocoFunctionOverride>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	60bb      	str	r3, [r7, #8]
					FunctionMapTemp = GetLocoFunctions(pLoco);
 8005ff8:	6838      	ldr	r0, [r7, #0]
 8005ffa:	f7fb fce9 	bl	80019d0 <GetLocoFunctions>
 8005ffe:	6178      	str	r0, [r7, #20]
					
					if(GetLocoAliasDirection(pLoco))
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f7fb fd89 	bl	8001b18 <GetLocoAliasDirection>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <GetCombinedFunctions+0x66>
					{
						if(FunctionMapTemp & 0x01)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <GetCombinedFunctions+0x66>
						{
							FunctionMapTemp |= 0x02;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	617b      	str	r3, [r7, #20]
						}
					}
					
					FunctionMap |= FunctionMapTemp & FunctionMapMask;
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
			for(i = 0; i < MAX_LOCOS; i++)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b1f      	cmp	r3, #31
 8006034:	ddd5      	ble.n	8005fe2 <GetCombinedFunctions+0x2a>
 8006036:	e000      	b.n	800603a <GetCombinedFunctions+0x82>
					break;
 8006038:	bf00      	nop
				}
			}
		}
	}
	
	return FunctionMap;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	b29b      	uxth	r3, r3
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <GetFunctionLoco>:
*
* RESTRICTIONS:
*
**********************************************************************/
Loco* GetFunctionLoco(VIRTUAL_CAB* pVirtualCab, int nEvent, unsigned char* bOverride)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	@ 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
	unsigned int FunctionMap;
	Loco* pLoco;
	Loco* pConsistLoco;
	int i;
	
	*bOverride = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3214      	adds	r2, #20
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	61fb      	str	r3, [r7, #28]
	pConsistLoco = pLoco;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
	
	if(pLoco != NULL && IsLeadLoco(pLoco))
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d040      	beq.n	80060f4 <GetFunctionLoco+0xac>
 8006072:	69f8      	ldr	r0, [r7, #28]
 8006074:	f7fb fd60 	bl	8001b38 <IsLeadLoco>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d03a      	beq.n	80060f4 <GetFunctionLoco+0xac>
	{
		for(i = 0; i < MAX_LOCOS; i++)
 800607e:	2300      	movs	r3, #0
 8006080:	623b      	str	r3, [r7, #32]
 8006082:	e034      	b.n	80060ee <GetFunctionLoco+0xa6>
		{
			if((pConsistLoco = pConsistLoco->pConsistLink) == NULL)
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <GetFunctionLoco+0x4c>
			{
				return pLoco;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	e030      	b.n	80060f6 <GetFunctionLoco+0xae>
			}
			else
			{
				FunctionMap = GetLocoFunctionOverride(pConsistLoco);
 8006094:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006096:	f7fb fc8e 	bl	80019b6 <GetLocoFunctionOverride>
 800609a:	4603      	mov	r3, r0
 800609c:	61bb      	str	r3, [r7, #24]
				switch(nEvent)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80060a2:	d00e      	beq.n	80060c2 <GetFunctionLoco+0x7a>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80060a8:	dc0e      	bgt.n	80060c8 <GetFunctionLoco+0x80>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b8a      	cmp	r3, #138	@ 0x8a
 80060ae:	d005      	beq.n	80060bc <GetFunctionLoco+0x74>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b8e      	cmp	r3, #142	@ 0x8e
 80060b4:	d108      	bne.n	80060c8 <GetFunctionLoco+0x80>
				{
					case EVENT_BELL:
						// ToDo - Make this programmable
						nEvent = EVENT_THREE;
 80060b6:	2333      	movs	r3, #51	@ 0x33
 80060b8:	60bb      	str	r3, [r7, #8]
						break;
 80060ba:	e005      	b.n	80060c8 <GetFunctionLoco+0x80>
					
					case EVENT_HORN_DOWN:
						// ToDo - Make this programmable
						nEvent = EVENT_TWO;
 80060bc:	2332      	movs	r3, #50	@ 0x32
 80060be:	60bb      	str	r3, [r7, #8]
						break;
 80060c0:	e002      	b.n	80060c8 <GetFunctionLoco+0x80>
					
					case EVENT_HORN_UP:
						// ToDo - Make this programmable
						nEvent = EVENT_TWO;
 80060c2:	2332      	movs	r3, #50	@ 0x32
 80060c4:	60bb      	str	r3, [r7, #8]
						break;
 80060c6:	bf00      	nop
				}
					
				Mask = wBitMask[nEvent - EVENT_ZERO];
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	3b30      	subs	r3, #48	@ 0x30
 80060cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006100 <GetFunctionLoco+0xb8>)
 80060ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d2:	617b      	str	r3, [r7, #20]
				if(FunctionMap & Mask)
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <GetFunctionLoco+0xa0>
				{
					*bOverride = 1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
					return pConsistLoco;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	e006      	b.n	80060f6 <GetFunctionLoco+0xae>
		for(i = 0; i < MAX_LOCOS; i++)
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	3301      	adds	r3, #1
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	2b1f      	cmp	r3, #31
 80060f2:	ddc7      	ble.n	8006084 <GetFunctionLoco+0x3c>
				}
			}
		}
	}
	return pLoco;
 80060f4:	69fb      	ldr	r3, [r7, #28]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3728      	adds	r7, #40	@ 0x28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	0802ba28 	.word	0x0802ba28

08006104 <DoFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	unsigned int FunctionMap;
	unsigned char bOverride;
	Loco* pLoco;
	
	
	pLoco = GetFunctionLoco(pVirtualCab, nEvent, &bOverride);
 800610e:	f107 030b 	add.w	r3, r7, #11
 8006112:	461a      	mov	r2, r3
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff ff96 	bl	8006048 <GetFunctionLoco>
 800611c:	6138      	str	r0, [r7, #16]
	
	if(pLoco != NULL && (pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0 && GetLocoAddress(pLoco) != ANALOG_LOCO)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d05c      	beq.n	80061de <DoFunction+0xda>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d156      	bne.n	80061de <DoFunction+0xda>
 8006130:	6938      	ldr	r0, [r7, #16]
 8006132:	f7fb fcd4 	bl	8001ade <GetLocoAddress>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800613e:	429a      	cmp	r2, r3
 8006140:	d04d      	beq.n	80061de <DoFunction+0xda>
	{
		if(pVirtualCab->nMenuShowing == NO_MENU_SHOWING || nEvent == EVENT_HEADLIGHT)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <DoFunction+0x4c>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2bd4      	cmp	r3, #212	@ 0xd4
 800614e:	d146      	bne.n	80061de <DoFunction+0xda>
		//if(pVirtualCab->nMenuShowing == FALSE) 		// these keys are used in menus
		{
			// translate Headlight event into a zero key
			if(nEvent == EVENT_HEADLIGHT)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2bd4      	cmp	r3, #212	@ 0xd4
 8006154:	d101      	bne.n	800615a <DoFunction+0x56>
			{
				nEvent = EVENT_ZERO;
 8006156:	2330      	movs	r3, #48	@ 0x30
 8006158:	603b      	str	r3, [r7, #0]
			}
			
			// if functions are overridden, swap F0 & F1
			if(bOverride && GetLocoAliasDirection(pLoco))
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <DoFunction+0x7e>
 8006160:	6938      	ldr	r0, [r7, #16]
 8006162:	f7fb fcd9 	bl	8001b18 <GetLocoAliasDirection>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <DoFunction+0x7e>
			{
				if(IsLeadLoco(pLoco))
 800616c:	6938      	ldr	r0, [r7, #16]
 800616e:	f7fb fce3 	bl	8001b38 <IsLeadLoco>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <DoFunction+0x7e>
				{
					if(nEvent == EVENT_ONE)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b31      	cmp	r3, #49	@ 0x31
 800617c:	d101      	bne.n	8006182 <DoFunction+0x7e>
					{
						nEvent = EVENT_ZERO;
 800617e:	2330      	movs	r3, #48	@ 0x30
 8006180:	603b      	str	r3, [r7, #0]
					}
				}
			}
			
			FunctionMap = GetLocoFunctions(pLoco);
 8006182:	6938      	ldr	r0, [r7, #16]
 8006184:	f7fb fc24 	bl	80019d0 <GetLocoFunctions>
 8006188:	6178      	str	r0, [r7, #20]
			Mask = wBitMask[nEvent - EVENT_ZERO];
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	3b30      	subs	r3, #48	@ 0x30
 800618e:	4a16      	ldr	r2, [pc, #88]	@ (80061e8 <DoFunction+0xe4>)
 8006190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006194:	60fb      	str	r3, [r7, #12]
			if(FunctionMap & Mask)
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <DoFunction+0xa8>
			{
				FunctionMap &= ~Mask;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4013      	ands	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e003      	b.n	80061b4 <DoFunction+0xb0>
			}
			else
			{
				FunctionMap |= Mask;
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
			}
			
			SetLocoFunctions(pLoco, FunctionMap);
 80061b4:	6979      	ldr	r1, [r7, #20]
 80061b6:	6938      	ldr	r0, [r7, #16]
 80061b8:	f7fb fc16 	bl	80019e8 <SetLocoFunctions>
			
			pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3214      	adds	r2, #20
 80061c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c8:	613b      	str	r3, [r7, #16]
			FunctionMap = GetCombinedFunctions(pVirtualCab, pLoco);
 80061ca:	6939      	ldr	r1, [r7, #16]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fef3 	bl	8005fb8 <GetCombinedFunctions>
 80061d2:	4603      	mov	r3, r0
 80061d4:	617b      	str	r3, [r7, #20]
			DisplayFunction(pVirtualCab, FunctionMap);
 80061d6:	6979      	ldr	r1, [r7, #20]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fbdb 	bl	8006994 <DisplayFunction>
		}
	}
}
 80061de:	bf00      	nop
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	0802ba28 	.word	0x0802ba28

080061ec <DoRefresh>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoRefresh(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	Loco* pLoco;
	unsigned int FunctionMap;
	
	pVirtualCab->nEStopState = 0;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	675a      	str	r2, [r3, #116]	@ 0x74
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3214      	adds	r2, #20
 8006204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006208:	60fb      	str	r3, [r7, #12]
	
	if(pLoco != NULL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d02f      	beq.n	8006270 <DoRefresh+0x84>
	{
		if(pVirtualCab->bSpeedDisconnect != 0)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7c1b      	ldrb	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00f      	beq.n	8006238 <DoRefresh+0x4c>
		{
			DisplayDirection(pVirtualCab, GetLocoDirection(pLoco));
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7fb fba0 	bl	800195e <GetLocoDirection>
 800621e:	4603      	mov	r3, r0
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa58 	bl	80066d8 <DisplayDirection>
			DisplaySpeed(pVirtualCab, GetLocoSpeed(pLoco));
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7fb fb26 	bl	800187a <GetLocoSpeed>
 800622e:	4603      	mov	r3, r0
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa82 	bl	800673c <DisplaySpeed>
		}

	
		if(GetLocoAddress(pLoco) == ANALOG_LOCO)
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7fb fc50 	bl	8001ade <GetLocoAddress>
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006246:	429a      	cmp	r2, r3
 8006248:	d108      	bne.n	800625c <DoRefresh+0x70>
		{
			NCE_DisplayMessage(pVirtualCab->Cab, 8, 1, "        ");
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	b2d8      	uxtb	r0, r3
 8006250:	4b09      	ldr	r3, [pc, #36]	@ (8006278 <DoRefresh+0x8c>)
 8006252:	2201      	movs	r2, #1
 8006254:	2108      	movs	r1, #8
 8006256:	f7fd fbb3 	bl	80039c0 <NCE_DisplayMessage>
		{
			FunctionMap = GetCombinedFunctions(pVirtualCab, pLoco);
			DisplayFunction(pVirtualCab, FunctionMap);
		}
	}
}
 800625a:	e009      	b.n	8006270 <DoRefresh+0x84>
			FunctionMap = GetCombinedFunctions(pVirtualCab, pLoco);
 800625c:	68f9      	ldr	r1, [r7, #12]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff feaa 	bl	8005fb8 <GetCombinedFunctions>
 8006264:	4603      	mov	r3, r0
 8006266:	60bb      	str	r3, [r7, #8]
			DisplayFunction(pVirtualCab, FunctionMap);
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb92 	bl	8006994 <DisplayFunction>
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	08026af0 	.word	0x08026af0

0800627c <DoRunFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoRunFunction(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
	unsigned int FunctionMap;
	unsigned char bOverride;
	Loco* pLoco;
	
	
	pLoco = GetFunctionLoco(pVirtualCab, nEvent, &bOverride);
 8006286:	f107 030b 	add.w	r3, r7, #11
 800628a:	461a      	mov	r2, r3
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff feda 	bl	8006048 <GetFunctionLoco>
 8006294:	6138      	str	r0, [r7, #16]
	
	if(pLoco != NULL && (pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0 && GetLocoAddress(pLoco) != ANALOG_LOCO)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d055      	beq.n	8006348 <DoRunFunction+0xcc>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d14f      	bne.n	8006348 <DoRunFunction+0xcc>
 80062a8:	6938      	ldr	r0, [r7, #16]
 80062aa:	f7fb fc18 	bl	8001ade <GetLocoAddress>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d046      	beq.n	8006348 <DoRunFunction+0xcc>
	{
		FunctionMap = GetLocoFunctions(pLoco);
 80062ba:	6938      	ldr	r0, [r7, #16]
 80062bc:	f7fb fb88 	bl	80019d0 <GetLocoFunctions>
 80062c0:	6178      	str	r0, [r7, #20]
		switch(nEvent)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80062c6:	d022      	beq.n	800630e <DoRunFunction+0x92>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80062cc:	dc27      	bgt.n	800631e <DoRunFunction+0xa2>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b8a      	cmp	r3, #138	@ 0x8a
 80062d2:	d015      	beq.n	8006300 <DoRunFunction+0x84>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b8e      	cmp	r3, #142	@ 0x8e
 80062d8:	d121      	bne.n	800631e <DoRunFunction+0xa2>
		{
			case EVENT_BELL:
				// ToDo - Make this programmable
				Mask = wBitMask[2];
 80062da:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <DoRunFunction+0xd4>)
 80062dc:	889b      	ldrh	r3, [r3, #4]
 80062de:	60fb      	str	r3, [r7, #12]
				if(FunctionMap & Mask)
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <DoRunFunction+0x7a>
				{
					FunctionMap &= ~Mask;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4013      	ands	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
				}
				else
				{
					FunctionMap |= Mask;
				}
				break;
 80062f4:	e013      	b.n	800631e <DoRunFunction+0xa2>
					FunctionMap |= Mask;
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
				break;
 80062fe:	e00e      	b.n	800631e <DoRunFunction+0xa2>
			
			case EVENT_HORN_DOWN:
				// ToDo - Make this programmable
				FunctionMap |= wBitMask[3];
 8006300:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <DoRunFunction+0xd4>)
 8006302:	88db      	ldrh	r3, [r3, #6]
 8006304:	461a      	mov	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
				break;
 800630c:	e007      	b.n	800631e <DoRunFunction+0xa2>
			
			case EVENT_HORN_UP:
				// ToDo - Make this programmable
				FunctionMap &= ~wBitMask[3];
 800630e:	4b10      	ldr	r3, [pc, #64]	@ (8006350 <DoRunFunction+0xd4>)
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	43db      	mvns	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4013      	ands	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
				break;
 800631c:	bf00      	nop
		}
	
		SetLocoFunctions(pLoco, FunctionMap);
 800631e:	6979      	ldr	r1, [r7, #20]
 8006320:	6938      	ldr	r0, [r7, #16]
 8006322:	f7fb fb61 	bl	80019e8 <SetLocoFunctions>
			
		pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3214      	adds	r2, #20
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	613b      	str	r3, [r7, #16]
		FunctionMap = GetCombinedFunctions(pVirtualCab, pLoco);
 8006334:	6939      	ldr	r1, [r7, #16]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fe3e 	bl	8005fb8 <GetCombinedFunctions>
 800633c:	4603      	mov	r3, r0
 800633e:	617b      	str	r3, [r7, #20]
		DisplayFunction(pVirtualCab, FunctionMap);
 8006340:	6979      	ldr	r1, [r7, #20]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fb26 	bl	8006994 <DisplayFunction>
	}
}
 8006348:	bf00      	nop
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	0802ba28 	.word	0x0802ba28

08006354 <DoSpeedMode>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoSpeedMode(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	int nSpeedMode;
	int nWhichText;
	Loco* pLoco;
	
	
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3214      	adds	r2, #20
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	60fb      	str	r3, [r7, #12]
	
	if(pLoco != NULL && (pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d070      	beq.n	8006454 <DoSpeedMode+0x100>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d16a      	bne.n	8006454 <DoSpeedMode+0x100>
	{
		// ToDo - is this necessary?
		if(GetLocoAddress(pLoco) == ANALOG_LOCO)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7fb fbad 	bl	8001ade <GetLocoAddress>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800638c:	429a      	cmp	r2, r3
 800638e:	d10b      	bne.n	80063a8 <DoSpeedMode+0x54>
		{
			nSpeedMode = (GetLocoSpeedMode(pLoco) + 1) % 2;
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7fb fabf 	bl	8001914 <GetLocoSpeedMode>
 8006396:	4603      	mov	r3, r0
 8006398:	3301      	adds	r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	bfb8      	it	lt
 80063a2:	425b      	neglt	r3, r3
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e00c      	b.n	80063c2 <DoSpeedMode+0x6e>
		}
		else
		{
			// ToDo - make programmable to allow 14 speed steps
			nSpeedMode = (GetLocoSpeedMode(pLoco) + 1) % 4;
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7fb fab3 	bl	8001914 <GetLocoSpeedMode>
 80063ae:	4603      	mov	r3, r0
 80063b0:	3301      	adds	r3, #1
 80063b2:	425a      	negs	r2, r3
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	f002 0203 	and.w	r2, r2, #3
 80063bc:	bf58      	it	pl
 80063be:	4253      	negpl	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
		}
		
		switch(nSpeedMode)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d812      	bhi.n	80063f0 <DoSpeedMode+0x9c>
 80063ca:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <DoSpeedMode+0x7c>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063f7 	.word	0x080063f7
 80063d4:	080063fd 	.word	0x080063fd
 80063d8:	08006403 	.word	0x08006403
 80063dc:	080063e5 	.word	0x080063e5
 80063e0:	080063eb 	.word	0x080063eb
		{
			case SPEED_MODE_14:
				nWhichText = tSpd_14;
 80063e4:	231a      	movs	r3, #26
 80063e6:	613b      	str	r3, [r7, #16]
				break;
 80063e8:	e00e      	b.n	8006408 <DoSpeedMode+0xb4>
			
			case SPEED_MODE_14_PERCENT:
				nWhichText = tSpd_14P;
 80063ea:	231b      	movs	r3, #27
 80063ec:	613b      	str	r3, [r7, #16]
				break;
 80063ee:	e00b      	b.n	8006408 <DoSpeedMode+0xb4>
			
			case SPEED_MODE_28:
			default:
				nWhichText = tSpd_28;
 80063f0:	2316      	movs	r3, #22
 80063f2:	613b      	str	r3, [r7, #16]
				break;
 80063f4:	e008      	b.n	8006408 <DoSpeedMode+0xb4>
			
			case SPEED_MODE_28_PERCENT:
				nWhichText = tSpd_28P;
 80063f6:	2317      	movs	r3, #23
 80063f8:	613b      	str	r3, [r7, #16]
				break;
 80063fa:	e005      	b.n	8006408 <DoSpeedMode+0xb4>
			
			case SPEED_MODE_128:
				nWhichText = tSpd128;
 80063fc:	2318      	movs	r3, #24
 80063fe:	613b      	str	r3, [r7, #16]
				break;
 8006400:	e002      	b.n	8006408 <DoSpeedMode+0xb4>
			
			case SPEED_MODE_128_PERCENT:
				nWhichText = tSpd128P;
 8006402:	2319      	movs	r3, #25
 8006404:	613b      	str	r3, [r7, #16]
				break;
 8006406:	bf00      	nop
		}
		
		if((pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_2R) == 0)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640c:	f003 0308 	and.w	r3, r3, #8
 8006410:	2b00      	cmp	r3, #0
 8006412:	d111      	bne.n	8006438 <DoSpeedMode+0xe4>
		{
			if(GetLocoMaxSpeed(pLoco) != 0)
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7fb fa5c 	bl	80018d2 <GetLocoMaxSpeed>
			{

			}
			NCE_DisplayMessage(pVirtualCab->Cab, 7, 1, aText[nWhichText]);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	b2d8      	uxtb	r0, r3
 8006420:	4a0e      	ldr	r2, [pc, #56]	@ (800645c <DoSpeedMode+0x108>)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006428:	2201      	movs	r2, #1
 800642a:	2107      	movs	r1, #7
 800642c:	f7fd fac8 	bl	80039c0 <NCE_DisplayMessage>
			SetExpiration(pVirtualCab, EXPIRATION_2_SECONDS);
 8006430:	21c8      	movs	r1, #200	@ 0xc8
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fa ff32 	bl	800129c <SetExpiration>
		}
		SetLocoSpeedMode(pLoco, nSpeedMode);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	b29b      	uxth	r3, r3
 800643c:	4619      	mov	r1, r3
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7fb fa75 	bl	800192e <SetLocoSpeedMode>
		DisplaySpeed(pVirtualCab, GetLocoSpeed(pLoco));
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7fb fa18 	bl	800187a <GetLocoSpeed>
 800644a:	4603      	mov	r3, r0
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f974 	bl	800673c <DisplaySpeed>
	}
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200000fc 	.word	0x200000fc

08006460 <DoBrake>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoBrake(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	Loco* pLoco;
	unsigned int nSpeed;
	
	
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3214      	adds	r2, #20
 8006472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006476:	60fb      	str	r3, [r7, #12]
	
	if(pLoco != NULL && (pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01a      	beq.n	80064b4 <DoBrake+0x54>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d114      	bne.n	80064b4 <DoBrake+0x54>
	{
		SetLocoSpeed(pLoco, 0);
 800648a:	2100      	movs	r1, #0
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7fb fa01 	bl	8001894 <SetLocoSpeed>

		//SetLocoDisconnect(pVirtualCab, pLoco);

		nSpeed = pVirtualCab->nSpeed;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	60bb      	str	r3, [r7, #8]
		if(nSpeed == 0)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <DoBrake+0x46>
		{
			pVirtualCab->bSpeedDisconnect = 0;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	741a      	strb	r2, [r3, #16]
 80064a4:	e002      	b.n	80064ac <DoBrake+0x4c>
		}
		else
		{
			pVirtualCab->bSpeedDisconnect = SD_ENABLE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	741a      	strb	r2, [r3, #16]
		}

		DisplaySpeed(pVirtualCab, 0);
 80064ac:	2100      	movs	r1, #0
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f944 	bl	800673c <DisplaySpeed>
	}
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <DoEmergencyStop>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoEmergencyStop(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
	Loco* pLoco;
	
	pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3214      	adds	r2, #20
 80064ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d2:	60fb      	str	r3, [r7, #12]
		pVirtualCab->nMenuShowing = NO_MENU_SHOWING;
		SetLocoSpeed(pLoco, 0);
		DisplaySpeed(pVirtualCab, GetLocoSpeed(pLoco));
	}
#else
	SetLocoSpeed(pLoco, ESTOP);
 80064d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7fb f9db 	bl	8001894 <SetLocoSpeed>
	DisplaySpeed(pVirtualCab, ESTOP);
 80064de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f92a 	bl	800673c <DisplaySpeed>
#endif
}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <DoRecall>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoRecall(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	int i;
	Loco* pLoco;
	unsigned int nSpeedMode;
	
	
	if((pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b00      	cmp	r3, #0
 8006504:	d149      	bne.n	800659a <DoRecall+0xaa>
	{
		for(i = pVirtualCab->nWhichRecall + 1; i < 8; i++)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800650a:	3301      	adds	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e00d      	b.n	800652c <DoRecall+0x3c>
		{
			if(pVirtualCab->pRecall[i] != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	3214      	adds	r2, #20
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <DoRecall+0x36>
			{
				pVirtualCab->nWhichRecall = i;
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	64da      	str	r2, [r3, #76]	@ 0x4c
				break;
 8006524:	e005      	b.n	8006532 <DoRecall+0x42>
		for(i = pVirtualCab->nWhichRecall + 1; i < 8; i++)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	3301      	adds	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b07      	cmp	r3, #7
 8006530:	ddee      	ble.n	8006510 <DoRecall+0x20>
			}
		}
		if(i >= 8)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b07      	cmp	r3, #7
 8006536:	dd02      	ble.n	800653e <DoRecall+0x4e>
		{
			pVirtualCab->nWhichRecall = 0;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	
		// display the speed mode
		pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3214      	adds	r2, #20
 8006546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654a:	613b      	str	r3, [r7, #16]
	
		SetLocoDisconnect(pVirtualCab, pLoco);
 800654c:	6939      	ldr	r1, [r7, #16]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f82a 	bl	80065a8 <SetLocoDisconnect>
	
		RestoreOperateScreen(pVirtualCab, 1, 1);
 8006554:	2201      	movs	r2, #1
 8006556:	2101      	movs	r1, #1
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fa89 	bl	8006a70 <RestoreOperateScreen>
	
		if(pLoco != NULL)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01a      	beq.n	800659a <DoRecall+0xaa>
		{
			if((pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_2R) == 0)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d114      	bne.n	800659a <DoRecall+0xaa>
			{
				nSpeedMode = GetLocoSpeedMode(pLoco);
 8006570:	6938      	ldr	r0, [r7, #16]
 8006572:	f7fb f9cf 	bl	8001914 <GetLocoSpeedMode>
 8006576:	4603      	mov	r3, r0
 8006578:	60fb      	str	r3, [r7, #12]
				NCE_DisplayMessage(pVirtualCab->Cab, 8, 1, aText[tSpd_28 + nSpeedMode]);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b2d8      	uxtb	r0, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3316      	adds	r3, #22
 8006584:	4a07      	ldr	r2, [pc, #28]	@ (80065a4 <DoRecall+0xb4>)
 8006586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658a:	2201      	movs	r2, #1
 800658c:	2108      	movs	r1, #8
 800658e:	f7fd fa17 	bl	80039c0 <NCE_DisplayMessage>
				SetExpiration(pVirtualCab, EXPIRATION_2_SECONDS);
 8006592:	21c8      	movs	r1, #200	@ 0xc8
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fa fe81 	bl	800129c <SetExpiration>
			}
		}
	}
}
 800659a:	bf00      	nop
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200000fc 	.word	0x200000fc

080065a8 <SetLocoDisconnect>:
*
* RESTRICTIONS:
*
**********************************************************************/
void SetLocoDisconnect(VIRTUAL_CAB* pVirtualCab, Loco* pLoco)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	unsigned int nSpeed;
	
	
	nSpeed = pVirtualCab->nSpeed * 2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
	
	if(GetLocoSpeed(pLoco) == nSpeed)
 80065ba:	6838      	ldr	r0, [r7, #0]
 80065bc:	f7fb f95d 	bl	800187a <GetLocoSpeed>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d103      	bne.n	80065d2 <SetLocoDisconnect+0x2a>
	{
		pVirtualCab->bSpeedDisconnect = 0;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	741a      	strb	r2, [r3, #16]
	}
	else
	{
		pVirtualCab->bSpeedDisconnect = SD_ENABLE;
	}
}
 80065d0:	e00e      	b.n	80065f0 <SetLocoDisconnect+0x48>
	else if(GetLocoSpeed(pLoco) > nSpeed)
 80065d2:	6838      	ldr	r0, [r7, #0]
 80065d4:	f7fb f951 	bl	800187a <GetLocoSpeed>
 80065d8:	4603      	mov	r3, r0
 80065da:	461a      	mov	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4293      	cmp	r3, r2
 80065e0:	d203      	bcs.n	80065ea <SetLocoDisconnect+0x42>
		pVirtualCab->bSpeedDisconnect = SD_ENABLE | SD_DIRECTION;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2203      	movs	r2, #3
 80065e6:	741a      	strb	r2, [r3, #16]
}
 80065e8:	e002      	b.n	80065f0 <SetLocoDisconnect+0x48>
		pVirtualCab->bSpeedDisconnect = SD_ENABLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	741a      	strb	r2, [r3, #16]
}
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <DoEnter>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DoEnter(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
//		//snprintf(szTemp, 9, aText[tLoc], nAddress);
//		snprintf(szTemp, 9, "CON:%3d", nAlias);
//		NCE_DisplayMessage(pVirtualCab->Cab, 9, 1, szTemp);
//		SetExpiration(pVirtualCab, EPIRATION_2_SECONDS);
//	}
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <DisplayAddress>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplayAddress(VIRTUAL_CAB* pVirtualCab, unsigned int nAddress)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
	char szTemp[17];
	Loco* pLoco;

	if(nAddress == ANALOG_LOCO)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006620:	4293      	cmp	r3, r2
 8006622:	d109      	bne.n	8006638 <DisplayAddress+0x28>
	{
		NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, aText[tAnalog]);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	b2d8      	uxtb	r0, r3
 800662a:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <DisplayAddress+0xc0>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	2201      	movs	r2, #1
 8006630:	2100      	movs	r1, #0
 8006632:	f7fd f9c5 	bl	80039c0 <NCE_DisplayMessage>
 8006636:	e035      	b.n	80066a4 <DisplayAddress+0x94>
	}
	else
	{
		pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3214      	adds	r2, #20
 8006640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006644:	61fb      	str	r3, [r7, #28]
		
		if(GetLocoAlias(pLoco))
 8006646:	69f8      	ldr	r0, [r7, #28]
 8006648:	f7fb fa56 	bl	8001af8 <GetLocoAlias>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d017      	beq.n	8006682 <DisplayAddress+0x72>
		{
			if(IsLeadLoco(pLoco))
 8006652:	69f8      	ldr	r0, [r7, #28]
 8006654:	f7fb fa70 	bl	8001b38 <IsLeadLoco>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <DisplayAddress+0x60>
			{
				sprintf(szTemp, aText[tConLead], nAddress);
 800665e:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <DisplayAddress+0xc0>)
 8006660:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006662:	f107 0308 	add.w	r3, r7, #8
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	4618      	mov	r0, r3
 800666a:	f01f fcc7 	bl	8025ffc <siprintf>
 800666e:	e010      	b.n	8006692 <DisplayAddress+0x82>
			}
			else
			{
				sprintf(szTemp, aText[tCon], nAddress);
 8006670:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <DisplayAddress+0xc0>)
 8006672:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f01f fcbe 	bl	8025ffc <siprintf>
 8006680:	e007      	b.n	8006692 <DisplayAddress+0x82>
			}
		}
		else
		{
			sprintf(szTemp, aText[tLoc], nAddress);
 8006682:	4b13      	ldr	r3, [pc, #76]	@ (80066d0 <DisplayAddress+0xc0>)
 8006684:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006686:	f107 0308 	add.w	r3, r7, #8
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f01f fcb5 	bl	8025ffc <siprintf>
		}
		NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, szTemp);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	b2d8      	uxtb	r0, r3
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	2201      	movs	r2, #1
 800669e:	2100      	movs	r1, #0
 80066a0:	f7fd f98e 	bl	80039c0 <NCE_DisplayMessage>
	}
	
	
	if((pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_2L) != 0)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <DisplayAddress+0xb8>
	{
		NCE_DisplayMessage(pVirtualCab->Cab, 8, 1, " ");
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	b2d8      	uxtb	r0, r3
 80066b6:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <DisplayAddress+0xc4>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	2108      	movs	r1, #8
 80066bc:	f7fd f980 	bl	80039c0 <NCE_DisplayMessage>
		SetExpiration(pVirtualCab, EXPIRATION_2_SECONDS);
 80066c0:	21c8      	movs	r1, #200	@ 0xc8
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fa fdea 	bl	800129c <SetExpiration>
	}
//	}
}
 80066c8:	bf00      	nop
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	200000fc 	.word	0x200000fc
 80066d4:	08026afc 	.word	0x08026afc

080066d8 <DisplayDirection>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplayDirection(VIRTUAL_CAB* pVirtualCab, unsigned char Direction)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]

	if((pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11f      	bne.n	8006730 <DisplayDirection+0x58>
	{
		if(Direction == DIR_FORWARD)
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <DisplayDirection+0x32>
		{
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, aText[tFwd]);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	b2d8      	uxtb	r0, r3
 80066fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <DisplayDirection+0x60>)
 80066fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006700:	2200      	movs	r2, #0
 8006702:	2100      	movs	r1, #0
 8006704:	f7fd f95c 	bl	80039c0 <NCE_DisplayMessage>
 8006708:	e008      	b.n	800671c <DisplayDirection+0x44>
		}
		else
		{
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, aText[tRev]);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	b2d8      	uxtb	r0, r3
 8006710:	4b09      	ldr	r3, [pc, #36]	@ (8006738 <DisplayDirection+0x60>)
 8006712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006714:	2200      	movs	r2, #0
 8006716:	2100      	movs	r1, #0
 8006718:	f7fd f952 	bl	80039c0 <NCE_DisplayMessage>
		}
		
		if(pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_1L)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <DisplayDirection+0x58>
		{
			SetExpiration(pVirtualCab, EXPIRATION_1_SECONDS);
 8006728:	2164      	movs	r1, #100	@ 0x64
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fa fdb6 	bl	800129c <SetExpiration>
		}
	}
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	200000fc 	.word	0x200000fc

0800673c <DisplaySpeed>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplaySpeed(VIRTUAL_CAB* pVirtualCab, unsigned int nSpeed)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
	char szTemp[16];
	Loco* pLoco;
	unsigned int nTemp;
	
	if((pVirtualCab->nMenuShowing & MENU_SHOWING_ESTOP) == 0)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 8107 	bne.w	8006962 <DisplaySpeed+0x226>
	{
		pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3214      	adds	r2, #20
 800675c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006760:	61fb      	str	r3, [r7, #28]
		
		if(nSpeed == ESTOP)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006768:	4293      	cmp	r3, r2
 800676a:	d10a      	bne.n	8006782 <DisplaySpeed+0x46>
		{
			NCE_DisplayMessage(pVirtualCab->Cab, 2, 0, aText[tEStp]);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	b2d8      	uxtb	r0, r3
 8006772:	4b7e      	ldr	r3, [pc, #504]	@ (800696c <DisplaySpeed+0x230>)
 8006774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006778:	2200      	movs	r2, #0
 800677a:	2102      	movs	r1, #2
 800677c:	f7fd f920 	bl	80039c0 <NCE_DisplayMessage>
 8006780:	e0aa      	b.n	80068d8 <DisplaySpeed+0x19c>
		}
		else
		{
			switch(GetLocoSpeedMode(pLoco))
 8006782:	69f8      	ldr	r0, [r7, #28]
 8006784:	f7fb f8c6 	bl	8001914 <GetLocoSpeedMode>
 8006788:	4603      	mov	r3, r0
 800678a:	2b05      	cmp	r3, #5
 800678c:	f200 808d 	bhi.w	80068aa <DisplaySpeed+0x16e>
 8006790:	a201      	add	r2, pc, #4	@ (adr r2, 8006798 <DisplaySpeed+0x5c>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067cd 	.word	0x080067cd
 800679c:	080067ff 	.word	0x080067ff
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	080067ff 	.word	0x080067ff
 80067a8:	080067b1 	.word	0x080067b1
 80067ac:	080067ff 	.word	0x080067ff
			{
				case SPEED_MODE_14:
				nSpeed /= 18;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	4a6f      	ldr	r2, [pc, #444]	@ (8006970 <DisplaySpeed+0x234>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	089b      	lsrs	r3, r3, #2
 80067ba:	603b      	str	r3, [r7, #0]
				sprintf(szTemp, " %3d", nSpeed);
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	496c      	ldr	r1, [pc, #432]	@ (8006974 <DisplaySpeed+0x238>)
 80067c4:	4618      	mov	r0, r3
 80067c6:	f01f fc19 	bl	8025ffc <siprintf>
				break;
 80067ca:	e06e      	b.n	80068aa <DisplaySpeed+0x16e>
			
			case SPEED_MODE_28:
				nSpeed /= 9;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4a68      	ldr	r2, [pc, #416]	@ (8006970 <DisplaySpeed+0x234>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	603b      	str	r3, [r7, #0]
				sprintf(szTemp, " %3d", nSpeed);
 80067d8:	f107 0308 	add.w	r3, r7, #8
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	4965      	ldr	r1, [pc, #404]	@ (8006974 <DisplaySpeed+0x238>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f01f fc0b 	bl	8025ffc <siprintf>
				break;
 80067e6:	e060      	b.n	80068aa <DisplaySpeed+0x16e>
			
			case SPEED_MODE_128:
				nSpeed /= 2;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	603b      	str	r3, [r7, #0]
				sprintf(szTemp, " %3d", nSpeed);
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	495f      	ldr	r1, [pc, #380]	@ (8006974 <DisplaySpeed+0x238>)
 80067f6:	4618      	mov	r0, r3
 80067f8:	f01f fc00 	bl	8025ffc <siprintf>
				break;
 80067fc:	e055      	b.n	80068aa <DisplaySpeed+0x16e>
			
			case SPEED_MODE_14_PERCENT:
			case SPEED_MODE_28_PERCENT:
			case SPEED_MODE_128_PERCENT:
			
				nTemp = GetLocoMaxSpeed(pLoco);
 80067fe:	69f8      	ldr	r0, [r7, #28]
 8006800:	f7fb f867 	bl	80018d2 <GetLocoMaxSpeed>
 8006804:	4603      	mov	r3, r0
 8006806:	61bb      	str	r3, [r7, #24]
				
				if(nTemp == 0)
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11d      	bne.n	800684a <DisplaySpeed+0x10e>
				{
					nSpeed /= 2;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	603b      	str	r3, [r7, #0]
					if(nSpeed != 0)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00f      	beq.n	800683a <DisplaySpeed+0xfe>
					{
						nSpeed = (nSpeed * 100) / 126;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2264      	movs	r2, #100	@ 0x64
 800681e:	fb02 f303 	mul.w	r3, r2, r3
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	4a54      	ldr	r2, [pc, #336]	@ (8006978 <DisplaySpeed+0x23c>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	603b      	str	r3, [r7, #0]
						if(nSpeed == 0)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <DisplaySpeed+0xfe>
						{
							nSpeed++;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	3301      	adds	r3, #1
 8006838:	603b      	str	r3, [r7, #0]
						}
					}
					sprintf(szTemp, "%3d%%", nSpeed);
 800683a:	f107 0308 	add.w	r3, r7, #8
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	494e      	ldr	r1, [pc, #312]	@ (800697c <DisplaySpeed+0x240>)
 8006842:	4618      	mov	r0, r3
 8006844:	f01f fbda 	bl	8025ffc <siprintf>
						nSpeed /= SPEED_PRIME_NUMBER;
						//sprintf(szTemp, "%3dm", nSpeed);
						sprintf(szTemp, "%3d%%", nSpeed);
					}
				}
				break;
 8006848:	e02e      	b.n	80068a8 <DisplaySpeed+0x16c>
					if(GetLocoSpeedUnits(pLoco))
 800684a:	69f8      	ldr	r0, [r7, #28]
 800684c:	f7fb f851 	bl	80018f2 <GetLocoSpeedUnits>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d015      	beq.n	8006882 <DisplaySpeed+0x146>
						nSpeed *= (nTemp & 0x7f);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	603b      	str	r3, [r7, #0]
						nSpeed /= SPEED_PRIME_NUMBER;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	4a45      	ldr	r2, [pc, #276]	@ (8006980 <DisplaySpeed+0x244>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	08db      	lsrs	r3, r3, #3
 8006870:	603b      	str	r3, [r7, #0]
						sprintf(szTemp, "%3dk", nSpeed);
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	4942      	ldr	r1, [pc, #264]	@ (8006984 <DisplaySpeed+0x248>)
 800687a:	4618      	mov	r0, r3
 800687c:	f01f fbbe 	bl	8025ffc <siprintf>
				break;
 8006880:	e012      	b.n	80068a8 <DisplaySpeed+0x16c>
						nSpeed *= nTemp;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	603b      	str	r3, [r7, #0]
						nSpeed /= SPEED_PRIME_NUMBER;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	089b      	lsrs	r3, r3, #2
 8006890:	4a3b      	ldr	r2, [pc, #236]	@ (8006980 <DisplaySpeed+0x244>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	08db      	lsrs	r3, r3, #3
 8006898:	603b      	str	r3, [r7, #0]
						sprintf(szTemp, "%3d%%", nSpeed);
 800689a:	f107 0308 	add.w	r3, r7, #8
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4936      	ldr	r1, [pc, #216]	@ (800697c <DisplaySpeed+0x240>)
 80068a2:	4618      	mov	r0, r3
 80068a4:	f01f fbaa 	bl	8025ffc <siprintf>
				break;
 80068a8:	bf00      	nop
			}
		
			if(nSpeed == 0)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <DisplaySpeed+0x18a>
			{
				NCE_DisplayMessage(pVirtualCab->Cab, 2, 0, aText[tStop]);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	b2d8      	uxtb	r0, r3
 80068b6:	4b2d      	ldr	r3, [pc, #180]	@ (800696c <DisplaySpeed+0x230>)
 80068b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068bc:	2200      	movs	r2, #0
 80068be:	2102      	movs	r1, #2
 80068c0:	f7fd f87e 	bl	80039c0 <NCE_DisplayMessage>
 80068c4:	e008      	b.n	80068d8 <DisplaySpeed+0x19c>
			}
			else
			{
				NCE_DisplayMessage(pVirtualCab->Cab, 2, 0, szTemp);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	b2d8      	uxtb	r0, r3
 80068cc:	f107 0308 	add.w	r3, r7, #8
 80068d0:	2200      	movs	r2, #0
 80068d2:	2102      	movs	r1, #2
 80068d4:	f7fd f874 	bl	80039c0 <NCE_DisplayMessage>
			}
		}
		
		if(pVirtualCab->bSpeedDisconnect)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	7c1b      	ldrb	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d017      	beq.n	8006910 <DisplaySpeed+0x1d4>
		{
			if(pVirtualCab->bSpeedDisconnect & SD_DIRECTION)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7c1b      	ldrb	r3, [r3, #16]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <DisplaySpeed+0x1c2>
			{
				NCE_DisplayMessage(pVirtualCab->Cab, 1, 0, "'");
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b2d8      	uxtb	r0, r3
 80068f2:	4b25      	ldr	r3, [pc, #148]	@ (8006988 <DisplaySpeed+0x24c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	2101      	movs	r1, #1
 80068f8:	f7fd f862 	bl	80039c0 <NCE_DisplayMessage>
 80068fc:	e010      	b.n	8006920 <DisplaySpeed+0x1e4>
			}
			else
			{
				NCE_DisplayMessage(pVirtualCab->Cab, 1, 0, ".");
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	b2d8      	uxtb	r0, r3
 8006904:	4b21      	ldr	r3, [pc, #132]	@ (800698c <DisplaySpeed+0x250>)
 8006906:	2200      	movs	r2, #0
 8006908:	2101      	movs	r1, #1
 800690a:	f7fd f859 	bl	80039c0 <NCE_DisplayMessage>
 800690e:	e007      	b.n	8006920 <DisplaySpeed+0x1e4>
			}
		}
		else
		{
			NCE_DisplayMessage(pVirtualCab->Cab, 1, 0, ":");
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	b2d8      	uxtb	r0, r3
 8006916:	4b1e      	ldr	r3, [pc, #120]	@ (8006990 <DisplaySpeed+0x254>)
 8006918:	2200      	movs	r2, #0
 800691a:	2101      	movs	r1, #1
 800691c:	f7fd f850 	bl	80039c0 <NCE_DisplayMessage>
		}
		
		if(pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_1L)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01a      	beq.n	8006962 <DisplaySpeed+0x226>
		{
			if(pVirtualCab->CursorState == 1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006932:	2b01      	cmp	r3, #1
 8006934:	d109      	bne.n	800694a <DisplaySpeed+0x20e>
			{
				pVirtualCab->CursorState = 0;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				NCE_CursorOff(pVirtualCab->Cab);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4618      	mov	r0, r3
 8006946:	f7fd f9a9 	bl	8003c9c <NCE_CursorOff>
			}
			DisplayDirection(pVirtualCab, GetLocoDirection(pLoco));
 800694a:	69f8      	ldr	r0, [r7, #28]
 800694c:	f7fb f807 	bl	800195e <GetLocoDirection>
 8006950:	4603      	mov	r3, r0
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff febf 	bl	80066d8 <DisplayDirection>
			SetExpiration(pVirtualCab, EXPIRATION_1_SECONDS);
 800695a:	2164      	movs	r1, #100	@ 0x64
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fa fc9d 	bl	800129c <SetExpiration>
		}
	}
}
 8006962:	bf00      	nop
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	200000fc 	.word	0x200000fc
 8006970:	38e38e39 	.word	0x38e38e39
 8006974:	08026ad8 	.word	0x08026ad8
 8006978:	82082083 	.word	0x82082083
 800697c:	08026ae8 	.word	0x08026ae8
 8006980:	20820821 	.word	0x20820821
 8006984:	08026ae0 	.word	0x08026ae0
 8006988:	08026b00 	.word	0x08026b00
 800698c:	08026b04 	.word	0x08026b04
 8006990:	08026b08 	.word	0x08026b08

08006994 <DisplayFunction>:
*
* RESTRICTIONS:
*
**********************************************************************/
void DisplayFunction(VIRTUAL_CAB* pVirtualCab, unsigned long FunctionMap)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	char szFunctionList[9];
	int i;
	
	strcpy(szFunctionList, aText[tL123456]);
 800699e:	4b30      	ldr	r3, [pc, #192]	@ (8006a60 <DisplayFunction+0xcc>)
 80069a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f01f fd59 	bl	8026462 <strcpy>

	// ToDo - make this programmable
	szFunctionList[2] = 'B';
 80069b0:	2342      	movs	r3, #66	@ 0x42
 80069b2:	72bb      	strb	r3, [r7, #10]
	szFunctionList[3] = 'H';
 80069b4:	2348      	movs	r3, #72	@ 0x48
 80069b6:	72fb      	strb	r3, [r7, #11]

	if((pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_2R) == 0)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d121      	bne.n	8006a08 <DisplayFunction+0x74>
	{
		for(i = 0; i < 9; i++)
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	e012      	b.n	80069f0 <DisplayFunction+0x5c>
		{
			if((FunctionMap & lBitMask[i+1]) == 0)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	3301      	adds	r3, #1
 80069ce:	4a25      	ldr	r2, [pc, #148]	@ (8006a64 <DisplayFunction+0xd0>)
 80069d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <DisplayFunction+0x56>
			{
				szFunctionList[i + 1] = '-';
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3301      	adds	r3, #1
 80069e0:	3318      	adds	r3, #24
 80069e2:	443b      	add	r3, r7
 80069e4:	222d      	movs	r2, #45	@ 0x2d
 80069e6:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i = 0; i < 9; i++)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	3301      	adds	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	dde9      	ble.n	80069ca <DisplayFunction+0x36>
			}
		}
		NCE_DisplayMessage(pVirtualCab->Cab, 6, 1, szFunctionList);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	b2d8      	uxtb	r0, r3
 80069fc:	f107 0308 	add.w	r3, r7, #8
 8006a00:	2201      	movs	r2, #1
 8006a02:	2106      	movs	r1, #6
 8006a04:	f7fc ffdc 	bl	80039c0 <NCE_DisplayMessage>
	}

	if((pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_1R) == 0)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d121      	bne.n	8006a58 <DisplayFunction+0xc4>
	{
		if((FunctionMap & lBitMask[0]) != 0)
 8006a14:	4b13      	ldr	r3, [pc, #76]	@ (8006a64 <DisplayFunction+0xd0>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <DisplayFunction+0xa0>
		{
			strcpy(szFunctionList, " L");
 8006a20:	f107 0308 	add.w	r3, r7, #8
 8006a24:	4a10      	ldr	r2, [pc, #64]	@ (8006a68 <DisplayFunction+0xd4>)
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	8019      	strh	r1, [r3, #0]
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	0c12      	lsrs	r2, r2, #16
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	e008      	b.n	8006a46 <DisplayFunction+0xb2>
		}
		else
		{
			strcpy(szFunctionList, " -");
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	4a0c      	ldr	r2, [pc, #48]	@ (8006a6c <DisplayFunction+0xd8>)
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	8019      	strh	r1, [r3, #0]
 8006a40:	3302      	adds	r3, #2
 8006a42:	0c12      	lsrs	r2, r2, #16
 8006a44:	701a      	strb	r2, [r3, #0]
		}

		NCE_DisplayMessage(pVirtualCab->Cab, 6, 0, szFunctionList);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	b2d8      	uxtb	r0, r3
 8006a4c:	f107 0308 	add.w	r3, r7, #8
 8006a50:	2200      	movs	r2, #0
 8006a52:	2106      	movs	r1, #6
 8006a54:	f7fc ffb4 	bl	80039c0 <NCE_DisplayMessage>
	}
}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	200000fc 	.word	0x200000fc
 8006a64:	0802ba48 	.word	0x0802ba48
 8006a68:	08026b0c 	.word	0x08026b0c
 8006a6c:	08026b10 	.word	0x08026b10

08006a70 <RestoreOperateScreen>:
*
* RESTRICTIONS:
*
**********************************************************************/
void RestoreOperateScreen(VIRTUAL_CAB* pVirtualCab, unsigned char Line1, unsigned char Line2)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	70bb      	strb	r3, [r7, #2]
	unsigned int FunctionMap;
	
	
	//if(GetTrackLock() == TR_COMMAND_STATION)
	//{
		pLoco = pVirtualCab->pRecall[pVirtualCab->nWhichRecall];
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3214      	adds	r2, #20
 8006a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8c:	60fb      	str	r3, [r7, #12]

		if(Line1)
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01f      	beq.n	8006ad4 <RestoreOperateScreen+0x64>
		{
			if(pLoco == NULL)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <RestoreOperateScreen+0x40>
			{
				NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, aText[tFWD_Default]);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	b2d8      	uxtb	r0, r3
 8006aa0:	4b29      	ldr	r3, [pc, #164]	@ (8006b48 <RestoreOperateScreen+0xd8>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	f7fc ff89 	bl	80039c0 <NCE_DisplayMessage>
 8006aae:	e00f      	b.n	8006ad0 <RestoreOperateScreen+0x60>
			}
			else
			{
				DisplayDirection(pVirtualCab, GetLocoDirection(pLoco));
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7fa ff54 	bl	800195e <GetLocoDirection>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fe0c 	bl	80066d8 <DisplayDirection>
				DisplaySpeed(pVirtualCab, GetLocoSpeed(pLoco));
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7fa feda 	bl	800187a <GetLocoSpeed>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fe36 	bl	800673c <DisplaySpeed>
			}

			UpdateWangrowClock();
 8006ad0:	f7fd f902 	bl	8003cd8 <UpdateWangrowClock>
		}

		if(Line2)
 8006ad4:	78bb      	ldrb	r3, [r7, #2]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d031      	beq.n	8006b3e <RestoreOperateScreen+0xce>
		{
			if(pLoco == NULL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <RestoreOperateScreen+0x86>
			{
				NCE_DisplayMessage(pVirtualCab->Cab, 0, 1, aText[tLOC_Default]);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	b2d8      	uxtb	r0, r3
 8006ae6:	4b18      	ldr	r3, [pc, #96]	@ (8006b48 <RestoreOperateScreen+0xd8>)
 8006ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aec:	2201      	movs	r2, #1
 8006aee:	2100      	movs	r1, #0
 8006af0:	f7fc ff66 	bl	80039c0 <NCE_DisplayMessage>
	//}
	//else
	//{
	//	ChangeState(pVirtualCab, STATE_TRACK);
	//}
}
 8006af4:	e023      	b.n	8006b3e <RestoreOperateScreen+0xce>
				DisplayAddress(pVirtualCab, GetLocoAddress(pLoco));
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7fa fff1 	bl	8001ade <GetLocoAddress>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fd85 	bl	8006610 <DisplayAddress>
				if(GetLocoAddress(pLoco) == ANALOG_LOCO)
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7fa ffe9 	bl	8001ade <GetLocoAddress>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d108      	bne.n	8006b2a <RestoreOperateScreen+0xba>
					NCE_DisplayMessage(pVirtualCab->Cab, 8, 1, " xxxxxxx");
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	b2d8      	uxtb	r0, r3
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <RestoreOperateScreen+0xdc>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	2108      	movs	r1, #8
 8006b24:	f7fc ff4c 	bl	80039c0 <NCE_DisplayMessage>
}
 8006b28:	e009      	b.n	8006b3e <RestoreOperateScreen+0xce>
					FunctionMap = GetCombinedFunctions(pVirtualCab, pLoco);
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fa43 	bl	8005fb8 <GetCombinedFunctions>
 8006b32:	4603      	mov	r3, r0
 8006b34:	60bb      	str	r3, [r7, #8]
					DisplayFunction(pVirtualCab, FunctionMap);
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff ff2b 	bl	8006994 <DisplayFunction>
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	200000fc 	.word	0x200000fc
 8006b4c:	08026b14 	.word	0x08026b14

08006b50 <RunState>:
*
* RESTRICTIONS:	
*
**********************************************************************/
void RunState(VIRTUAL_CAB* pVirtualCab, int nEvent)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
	int nState;
	
	if(nEvent == EVENT_TIMER_EXPIRED)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2bd3      	cmp	r3, #211	@ 0xd3
 8006b5e:	d10e      	bne.n	8006b7e <RunState+0x2e>
	{
		if(pVirtualCab->nMenuShowing & MENU_SHOWING_LINE_1L)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <RunState+0x2e>
		{
			NCE_DisplayMessage(pVirtualCab->Cab, 0, 0, pVirtualCab->szTitleSave);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	b2d8      	uxtb	r0, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3338      	adds	r3, #56	@ 0x38
 8006b76:	2200      	movs	r2, #0
 8006b78:	2100      	movs	r1, #0
 8006b7a:	f7fc ff21 	bl	80039c0 <NCE_DisplayMessage>
		}
	}
	
	if(pVirtualCab == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <RunState+0x3a>
	{
		nState = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e002      	b.n	8006b90 <RunState+0x40>
	}
	else
	{
		nState = pVirtualCab->nState;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	799b      	ldrb	r3, [r3, #6]
 8006b8e:	60fb      	str	r3, [r7, #12]
	}

	switch(nState)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b0b      	cmp	r3, #11
 8006b94:	d850      	bhi.n	8006c38 <RunState+0xe8>
 8006b96:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <RunState+0x4c>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006bd7 	.word	0x08006bd7
 8006ba4:	08006be1 	.word	0x08006be1
 8006ba8:	08006beb 	.word	0x08006beb
 8006bac:	08006c39 	.word	0x08006c39
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006bff 	.word	0x08006bff
 8006bb8:	08006c09 	.word	0x08006c09
 8006bbc:	08006c11 	.word	0x08006c11
 8006bc0:	08006c1b 	.word	0x08006c1b
 8006bc4:	08006c25 	.word	0x08006c25
 8006bc8:	08006c2f 	.word	0x08006c2f
	{
		case STATE_IDLE:
			StateIdle(pVirtualCab, nEvent);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fd fddc 	bl	800478c <StateIdle>
			break;
 8006bd4:	e034      	b.n	8006c40 <RunState+0xf0>

		case STATE_SELECT_LOCO:
			StateSelectLoco(pVirtualCab, nEvent);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fe fb3b 	bl	8005254 <StateSelectLoco>
			break;
 8006bde:	e02f      	b.n	8006c40 <RunState+0xf0>

		case STATE_SELECT_ACCESSORIES:
			StateSelectAccessory(pVirtualCab, nEvent);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fe f96a 	bl	8004ebc <StateSelectAccessory>
			break;
 8006be8:	e02a      	b.n	8006c40 <RunState+0xf0>
//		case STATE_CLEAR_CONSIST:
//k			StateClearConsist(pVirtualCab, nEvent);
//			break;

		case STATE_FUNCTIONS:
			StateFunction(pVirtualCab, nEvent);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fd fad7 	bl	80041a0 <StateFunction>
			break;
 8006bf2:	e025      	b.n	8006c40 <RunState+0xf0>
//		case STATE_ESTOP:
//			StateEStop(pVirtualCab, nEvent);
//			break;

		case STATE_PROGRAM_ON_MAIN:
			StateProgramOnMain(pVirtualCab, nEvent);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fd fe62 	bl	80048c0 <StateProgramOnMain>
			break;
 8006bfc:	e020      	b.n	8006c40 <RunState+0xf0>
//		case STATE_SET_SYSTEM_CLOCK:
//k			StateSetSystemClock(pVirtualCab, nEvent);
//			break;

		case STATE_PROGRAM_ON_TRACK:
			StateProgramTrack(pVirtualCab, nEvent);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fd ffa5 	bl	8004b50 <StateProgramTrack>
			break;
 8006c06:	e01b      	b.n	8006c40 <RunState+0xf0>
//			pVirtualCab->nState = STATE_IDLE;
//			break;

		case STATE_SET_CAB:
//			StateSetCab(pVirtualCab, nEvent);
			pVirtualCab->nState = STATE_IDLE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	719a      	strb	r2, [r3, #6]
			break;
 8006c0e:	e017      	b.n	8006c40 <RunState+0xf0>
//		case STATE_PROGRAM_MACROS:
//k			StateProgramMacros(pVirtualCab, nEvent);
//			break;

		case STATE_PROG_MODE:
			StateProgMode(pVirtualCab, nEvent);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fd ff18 	bl	8004a48 <StateProgMode>
			break;
 8006c18:	e012      	b.n	8006c40 <RunState+0xf0>

		case STATE_NO_FUNCTION:
			StateNoFunction(pVirtualCab, nEvent);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fd fe11 	bl	8004844 <StateNoFunction>
			break;
 8006c22:	e00d      	b.n	8006c40 <RunState+0xf0>

		case STATE_SEND:
			StateSend(pVirtualCab, nEvent);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fe fc82 	bl	8005530 <StateSend>
			break;
 8006c2c:	e008      	b.n	8006c40 <RunState+0xf0>

		case STATE_TRACK:
			StateTrack(pVirtualCab, nEvent);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fe fca1 	bl	8005578 <StateTrack>
			break;
 8006c36:	e003      	b.n	8006c40 <RunState+0xf0>

		default:
			pVirtualCab->nState = STATE_IDLE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	719a      	strb	r2, [r3, #6]
			break;
 8006c3e:	bf00      	nop
	}
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <InitState>:
*
* RESTRICTIONS:
*
**********************************************************************/
void InitState(int nState)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]

	RunState(NULL, EVENT_STATE_ENTER);
 8006c50:	21c0      	movs	r1, #192	@ 0xc0
 8006c52:	2000      	movs	r0, #0
 8006c54:	f7ff ff7c 	bl	8006b50 <RunState>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <ChangeState>:
*
* RESTRICTIONS:	
*
**********************************************************************/
void ChangeState(VIRTUAL_CAB* pVirtualCab, int nState)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]

	RunState(pVirtualCab, EVENT_STATE_EXIT);
 8006c6a:	21c1      	movs	r1, #193	@ 0xc1
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff ff6f 	bl	8006b50 <RunState>
	pVirtualCab->nState = nState;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	719a      	strb	r2, [r3, #6]
	RunState(pVirtualCab, EVENT_STATE_ENTER);
 8006c7a:	21c0      	movs	r1, #192	@ 0xc0
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff ff67 	bl	8006b50 <RunState>
}
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <DispatchEvent>:
*
* RESTRICTIONS:	
*
**********************************************************************/
unsigned char DispatchEvent(VIRTUAL_CAB* pVirtualCab, int nEvent, const EVENT_MAP *pMap)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b086      	sub	sp, #24
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
	unsigned char bRet = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]

	while(pMap->nEvent)
 8006c9a:	e01a      	b.n	8006cd2 <DispatchEvent+0x48>
	{
		if(nEvent == pMap->nEvent) 
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d112      	bne.n	8006ccc <DispatchEvent+0x42>
		{
			if(pMap->EventFunction)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <DispatchEvent+0x34>
			{
				pMap->EventFunction(pVirtualCab, nEvent);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	4798      	blx	r3
				bRet = 1;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				ChangeState(pVirtualCab, pMap->nNewState);
			}
			break;
 8006cbc:	e00d      	b.n	8006cda <DispatchEvent+0x50>
				ChangeState(pVirtualCab, pMap->nNewState);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff ffcb 	bl	8006c60 <ChangeState>
			break;
 8006cca:	e006      	b.n	8006cda <DispatchEvent+0x50>
		}
		pMap++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	607b      	str	r3, [r7, #4]
	while(pMap->nEvent)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e0      	bne.n	8006c9c <DispatchEvent+0x12>
	}
	return bRet;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <E_AverageFloat>:
//
// DESCRIPTION: Exponitional average - floating point version
//
//*******************************************************************************
float E_AverageFloat(float OldValue, float NewValue, unsigned char AverageConstant)
{
 8006ce4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ce8:	b086      	sub	sp, #24
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	ed87 0a03 	vstr	s0, [r7, #12]
 8006cf0:	edc7 0a02 	vstr	s1, [r7, #8]
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	71fb      	strb	r3, [r7, #7]
    float Avg;

    Avg = NewValue * AverageConstant;
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d02:	ed97 7a02 	vldr	s14, [r7, #8]
 8006d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0a:	edc7 7a05 	vstr	s15, [r7, #20]
    Avg += OldValue * (100.0 - AverageConstant);
 8006d0e:	6978      	ldr	r0, [r7, #20]
 8006d10:	f7f9 fc34 	bl	800057c <__aeabi_f2d>
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7f9 fc2f 	bl	800057c <__aeabi_f2d>
 8006d1e:	4680      	mov	r8, r0
 8006d20:	4689      	mov	r9, r1
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7f9 fc17 	bl	8000558 <__aeabi_i2d>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	f04f 0000 	mov.w	r0, #0
 8006d32:	4912      	ldr	r1, [pc, #72]	@ (8006d7c <E_AverageFloat+0x98>)
 8006d34:	f7f9 fac2 	bl	80002bc <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	4649      	mov	r1, r9
 8006d40:	f7f9 fc74 	bl	800062c <__aeabi_dmul>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f7f9 fab8 	bl	80002c0 <__adddf3>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	f7f9 ff2a 	bl	8000bb0 <__aeabi_d2f>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	617b      	str	r3, [r7, #20]
    return Avg / 100.0;
 8006d60:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d64:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8006d80 <E_AverageFloat+0x9c>
 8006d68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d6c:	eef0 7a66 	vmov.f32	s15, s13
}
 8006d70:	eeb0 0a67 	vmov.f32	s0, s15
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d7c:	40590000 	.word	0x40590000
 8006d80:	42c80000 	.word	0x42c80000

08006d84 <Acknowledge>:
*
* RESTRICTIONS:
*
**********************************************************************/
void Acknowledge(void)
{
 8006d84:	b5b0      	push	{r4, r5, r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
    //int raw;
    //unsigned char Ret = 0;
    float fRaw;
    //float fLevel;

    TrackCurrent = (float)uhADCxConvertedValue[0];
 8006d8a:	4b51      	ldr	r3, [pc, #324]	@ (8006ed0 <Acknowledge+0x14c>)
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d98:	4b4e      	ldr	r3, [pc, #312]	@ (8006ed4 <Acknowledge+0x150>)
 8006d9a:	edc3 7a00 	vstr	s15, [r3]
    TrackVoltage = (float)uhADCxConvertedValue[1];
 8006d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed0 <Acknowledge+0x14c>)
 8006da0:	885b      	ldrh	r3, [r3, #2]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dac:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed8 <Acknowledge+0x154>)
 8006dae:	edc3 7a00 	vstr	s15, [r3]

    if(bfFirstConversionDone)
 8006db2:	4b4a      	ldr	r3, [pc, #296]	@ (8006edc <Acknowledge+0x158>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 8086 	beq.w	8006ec8 <Acknowledge+0x144>
    {
		fRaw = (float)uhADCxConvertedValue[0];
 8006dbc:	4b44      	ldr	r3, [pc, #272]	@ (8006ed0 <Acknowledge+0x14c>)
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	edc7 7a01 	vstr	s15, [r7, #4]

		// convert to real-world current

		fLevelAvg = E_AverageFloat(fLevelAvg, fRaw, 80);
 8006dce:	4b44      	ldr	r3, [pc, #272]	@ (8006ee0 <Acknowledge+0x15c>)
 8006dd0:	edd3 7a00 	vldr	s15, [r3]
 8006dd4:	2050      	movs	r0, #80	@ 0x50
 8006dd6:	edd7 0a01 	vldr	s1, [r7, #4]
 8006dda:	eeb0 0a67 	vmov.f32	s0, s15
 8006dde:	f7ff ff81 	bl	8006ce4 <E_AverageFloat>
 8006de2:	eef0 7a40 	vmov.f32	s15, s0
 8006de6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee0 <Acknowledge+0x15c>)
 8006de8:	edc3 7a00 	vstr	s15, [r3]

		if(bfFirstTime)
 8006dec:	4b3d      	ldr	r3, [pc, #244]	@ (8006ee4 <Acknowledge+0x160>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <Acknowledge+0x84>
		{
			bfFirstTime = 0;
 8006df4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee4 <Acknowledge+0x160>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
			fBaseAvg = fLevelAvg;
 8006dfa:	4b39      	ldr	r3, [pc, #228]	@ (8006ee0 <Acknowledge+0x15c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8006ee8 <Acknowledge+0x164>)
 8006e00:	6013      	str	r3, [r2, #0]
			BaseDelay = 0;
 8006e02:	4b3a      	ldr	r3, [pc, #232]	@ (8006eec <Acknowledge+0x168>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
		}

		ProgTrackCurrent = fLevelAvg;
 8006e08:	4b35      	ldr	r3, [pc, #212]	@ (8006ee0 <Acknowledge+0x15c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a38      	ldr	r2, [pc, #224]	@ (8006ef0 <Acknowledge+0x16c>)
 8006e0e:	6013      	str	r3, [r2, #0]


		if(fLevelAvg > LOCO_CURRENT)
 8006e10:	4b33      	ldr	r3, [pc, #204]	@ (8006ee0 <Acknowledge+0x15c>)
 8006e12:	edd3 7a00 	vldr	s15, [r3]
 8006e16:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8006e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e22:	dd03      	ble.n	8006e2c <Acknowledge+0xa8>
		{
			// indicate loco present
			AckStatus = LOCO_PRESENT;
 8006e24:	4b33      	ldr	r3, [pc, #204]	@ (8006ef4 <Acknowledge+0x170>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]
				fBaseAvg = E_AverageFloat(fBaseAvg, fLevelAvg, 10);
			}
		}
		//return AckStatus;
    }
}
 8006e2a:	e04d      	b.n	8006ec8 <Acknowledge+0x144>
		else if(fLevelAvg > MAX_CURRENT)
 8006e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8006ee0 <Acknowledge+0x15c>)
 8006e2e:	edd3 7a00 	vldr	s15, [r3]
 8006e32:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006ef8 <Acknowledge+0x174>
 8006e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	dd03      	ble.n	8006e48 <Acknowledge+0xc4>
			AckStatus = OVER_CURRENT;
 8006e40:	4b2c      	ldr	r3, [pc, #176]	@ (8006ef4 <Acknowledge+0x170>)
 8006e42:	2203      	movs	r2, #3
 8006e44:	701a      	strb	r2, [r3, #0]
}
 8006e46:	e03f      	b.n	8006ec8 <Acknowledge+0x144>
		else if(fLevelAvg > (fBaseAvg + ACK_CURRENT))
 8006e48:	4b25      	ldr	r3, [pc, #148]	@ (8006ee0 <Acknowledge+0x15c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7f9 fb95 	bl	800057c <__aeabi_f2d>
 8006e52:	4604      	mov	r4, r0
 8006e54:	460d      	mov	r5, r1
 8006e56:	4b24      	ldr	r3, [pc, #144]	@ (8006ee8 <Acknowledge+0x164>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7f9 fb8e 	bl	800057c <__aeabi_f2d>
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <Acknowledge+0x178>)
 8006e66:	f7f9 fa2b 	bl	80002c0 <__adddf3>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4620      	mov	r0, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	f7f9 fe6b 	bl	8000b4c <__aeabi_dcmpgt>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <Acknowledge+0x106>
			AckStatus = ACK_DETECTED;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <Acknowledge+0x170>)
 8006e7e:	2202      	movs	r2, #2
 8006e80:	701a      	strb	r2, [r3, #0]
			BaseDelay = BASE_DELAY;
 8006e82:	4b1a      	ldr	r3, [pc, #104]	@ (8006eec <Acknowledge+0x168>)
 8006e84:	2232      	movs	r2, #50	@ 0x32
 8006e86:	701a      	strb	r2, [r3, #0]
}
 8006e88:	e01e      	b.n	8006ec8 <Acknowledge+0x144>
			--BaseDelay;
 8006e8a:	4b18      	ldr	r3, [pc, #96]	@ (8006eec <Acknowledge+0x168>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4b16      	ldr	r3, [pc, #88]	@ (8006eec <Acknowledge+0x168>)
 8006e94:	701a      	strb	r2, [r3, #0]
			if(BaseDelay == 0)
 8006e96:	4b15      	ldr	r3, [pc, #84]	@ (8006eec <Acknowledge+0x168>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d114      	bne.n	8006ec8 <Acknowledge+0x144>
				BaseDelay = 1;
 8006e9e:	4b13      	ldr	r3, [pc, #76]	@ (8006eec <Acknowledge+0x168>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	701a      	strb	r2, [r3, #0]
				fBaseAvg = E_AverageFloat(fBaseAvg, fLevelAvg, 10);
 8006ea4:	4b10      	ldr	r3, [pc, #64]	@ (8006ee8 <Acknowledge+0x164>)
 8006ea6:	edd3 7a00 	vldr	s15, [r3]
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <Acknowledge+0x15c>)
 8006eac:	ed93 7a00 	vldr	s14, [r3]
 8006eb0:	200a      	movs	r0, #10
 8006eb2:	eef0 0a47 	vmov.f32	s1, s14
 8006eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006eba:	f7ff ff13 	bl	8006ce4 <E_AverageFloat>
 8006ebe:	eef0 7a40 	vmov.f32	s15, s0
 8006ec2:	4b09      	ldr	r3, [pc, #36]	@ (8006ee8 <Acknowledge+0x164>)
 8006ec4:	edc3 7a00 	vstr	s15, [r3]
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bdb0      	pop	{r4, r5, r7, pc}
 8006ed0:	20003248 	.word	0x20003248
 8006ed4:	2001b59c 	.word	0x2001b59c
 8006ed8:	2001b5a0 	.word	0x2001b5a0
 8006edc:	20003256 	.word	0x20003256
 8006ee0:	20003250 	.word	0x20003250
 8006ee4:	20003255 	.word	0x20003255
 8006ee8:	2000324c 	.word	0x2000324c
 8006eec:	20003254 	.word	0x20003254
 8006ef0:	20003244 	.word	0x20003244
 8006ef4:	20003240 	.word	0x20003240
 8006ef8:	437a0000 	.word	0x437a0000
 8006efc:	40490000 	.word	0x40490000

08006f00 <DebounceInputs>:
//  If the input continues to be low, the debounce register will eventually equal zero.
//  The coorisponding bit in the input status is set low.
//
//*******************************************************************************
static unsigned int DebounceInputs(uint32_t Raw, unsigned char const abDebounceValue[], int num_inputs)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b089      	sub	sp, #36	@ 0x24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t  xDebounced = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61bb      	str	r3, [r7, #24]
    unsigned char bDebounceValue = 0x01;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]

    for(i = 0; i < num_inputs; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	e047      	b.n	8006faa <DebounceInputs+0xaa>
    {
        abDebounce[i] <<= 1;
 8006f1a:	4a29      	ldr	r2, [pc, #164]	@ (8006fc0 <DebounceInputs+0xc0>)
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	4413      	add	r3, r2
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	b2d9      	uxtb	r1, r3
 8006f26:	4a26      	ldr	r2, [pc, #152]	@ (8006fc0 <DebounceInputs+0xc0>)
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	460a      	mov	r2, r1
 8006f2e:	701a      	strb	r2, [r3, #0]

        if(Raw & wBitMask[i])
 8006f30:	4a24      	ldr	r2, [pc, #144]	@ (8006fc4 <DebounceInputs+0xc4>)
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <DebounceInputs+0x5a>
        {
            abDebounce[i] |= 1;
 8006f42:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc0 <DebounceInputs+0xc0>)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	b2d9      	uxtb	r1, r3
 8006f50:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc0 <DebounceInputs+0xc0>)
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	460a      	mov	r2, r1
 8006f58:	701a      	strb	r2, [r3, #0]
        }

        if((abDebounce[i] & bDebounceValue) == bDebounceValue)
 8006f5a:	4a19      	ldr	r2, [pc, #100]	@ (8006fc0 <DebounceInputs+0xc0>)
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	781a      	ldrb	r2, [r3, #0]
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	4013      	ands	r3, r2
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	7dfa      	ldrb	r2, [r7, #23]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d108      	bne.n	8006f80 <DebounceInputs+0x80>
        {
            xDebounced |= wBitMask[i];
 8006f6e:	4a15      	ldr	r2, [pc, #84]	@ (8006fc4 <DebounceInputs+0xc4>)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f76:	461a      	mov	r2, r3
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e011      	b.n	8006fa4 <DebounceInputs+0xa4>
        }
        else if((abDebounce[i] & bDebounceValue) == 0)
 8006f80:	4a0f      	ldr	r2, [pc, #60]	@ (8006fc0 <DebounceInputs+0xc0>)
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d108      	bne.n	8006fa4 <DebounceInputs+0xa4>
        {
            xDebounced &= ~wBitMask[i];
 8006f92:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc4 <DebounceInputs+0xc4>)
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < num_inputs; i++)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	dbb3      	blt.n	8006f1a <DebounceInputs+0x1a>
        }
    }
    return xDebounced;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3724      	adds	r7, #36	@ 0x24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	2000022c 	.word	0x2000022c
 8006fc4:	0802ba28 	.word	0x0802ba28

08006fc8 <InputTask>:
*
* @return	none
*
*********************************************************************/
void InputTask(void* argument)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	unsigned int raw_input;

	for(int i = 0; i > 8; i++)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	e007      	b.n	8006fe6 <InputTask+0x1e>
	{
		abDebounceValue[i] = 0;
 8006fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8007084 <InputTask+0xbc>)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4413      	add	r3, r2
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i > 8; i++)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	dcf4      	bgt.n	8006fd6 <InputTask+0xe>
	}

	while(1)
	{
//k		Acknowledge();
		raw_input = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
		raw_input |= HAL_GPIO_ReadPin(IN0_GPIO_Port, IN0_Pin);
 8006ff0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ff4:	4824      	ldr	r0, [pc, #144]	@ (8007088 <InputTask+0xc0>)
 8006ff6:	f006 fdef 	bl	800dbd8 <HAL_GPIO_ReadPin>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
		raw_input |= HAL_GPIO_ReadPin(IN1_GPIO_Port, IN1_Pin) << 1;
 8007004:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007008:	481f      	ldr	r0, [pc, #124]	@ (8007088 <InputTask+0xc0>)
 800700a:	f006 fde5 	bl	800dbd8 <HAL_GPIO_ReadPin>
 800700e:	4603      	mov	r3, r0
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	461a      	mov	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
		raw_input |= HAL_GPIO_ReadPin(IN2_GPIO_Port, IN2_Pin) << 2;
 800701a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800701e:	481a      	ldr	r0, [pc, #104]	@ (8007088 <InputTask+0xc0>)
 8007020:	f006 fdda 	bl	800dbd8 <HAL_GPIO_ReadPin>
 8007024:	4603      	mov	r3, r0
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	461a      	mov	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
		raw_input |= HAL_GPIO_ReadPin(IN3_GPIO_Port, IN3_Pin) << 3;
 8007030:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007034:	4814      	ldr	r0, [pc, #80]	@ (8007088 <InputTask+0xc0>)
 8007036:	f006 fdcf 	bl	800dbd8 <HAL_GPIO_ReadPin>
 800703a:	4603      	mov	r3, r0
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]
		if(HAL_GPIO_ReadPin(USR_BTN_GPIO_Port, USR_BTN_Pin) == GPIO_PIN_RESET)
 8007046:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800704a:	4810      	ldr	r0, [pc, #64]	@ (800708c <InputTask+0xc4>)
 800704c:	f006 fdc4 	bl	800dbd8 <HAL_GPIO_ReadPin>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <InputTask+0x96>
		{
			raw_input |= 0x10;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f043 0310 	orr.w	r3, r3, #16
 800705c:	60fb      	str	r3, [r7, #12]
		}

		raw_input |= 0x20;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f043 0320 	orr.w	r3, r3, #32
 8007064:	60fb      	str	r3, [r7, #12]
//k		if(GetAck() == ACK_DETECTED)
//k		{
//k			raw_input &= ~0x20;
//k		}

		Inputs = (~DebounceInputs(raw_input, abDebounceValue, 6)) & 0x3f;
 8007066:	2206      	movs	r2, #6
 8007068:	4906      	ldr	r1, [pc, #24]	@ (8007084 <InputTask+0xbc>)
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff ff48 	bl	8006f00 <DebounceInputs>
 8007070:	4603      	mov	r3, r0
 8007072:	43db      	mvns	r3, r3
 8007074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007078:	4a05      	ldr	r2, [pc, #20]	@ (8007090 <InputTask+0xc8>)
 800707a:	6013      	str	r3, [r2, #0]

		osDelay(pdMS_TO_TICKS(10));
 800707c:	200a      	movs	r0, #10
 800707e:	f014 ff53 	bl	801bf28 <osDelay>
		raw_input = 0;
 8007082:	e7b3      	b.n	8006fec <InputTask+0x24>
 8007084:	20003258 	.word	0x20003258
 8007088:	42021000 	.word	0x42021000
 800708c:	42020800 	.word	0x42020800
 8007090:	20003260 	.word	0x20003260

08007094 <GetInput1>:
*
* @return	input state
*
*********************************************************************/
uint32_t GetInput1(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
	return (Inputs & 0x01) != 0;
 8007098:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <GetInput1+0x20>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bf14      	ite	ne
 80070a4:	2301      	movne	r3, #1
 80070a6:	2300      	moveq	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20003260 	.word	0x20003260

080070b8 <GetInput2>:

uint32_t GetInput2(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
	return (Inputs & 0x02) != 0;
 80070bc:	4b06      	ldr	r3, [pc, #24]	@ (80070d8 <GetInput2+0x20>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bf14      	ite	ne
 80070c8:	2301      	movne	r3, #1
 80070ca:	2300      	moveq	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	20003260 	.word	0x20003260

080070dc <GetInput3>:

uint32_t GetInput3(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
	return (Inputs & 0x04) != 0;
 80070e0:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <GetInput3+0x20>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bf14      	ite	ne
 80070ec:	2301      	movne	r3, #1
 80070ee:	2300      	moveq	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	20003260 	.word	0x20003260

08007100 <GetInput4>:

uint32_t GetInput4(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
	return (Inputs & 0x08) != 0;
 8007104:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <GetInput4+0x20>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20003260 	.word	0x20003260

08007124 <GetInput5>:

uint32_t GetInput5(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
	return (Inputs & 0x10) != 0;
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <GetInput5+0x20>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	bf14      	ite	ne
 8007134:	2301      	movne	r3, #1
 8007136:	2300      	moveq	r3, #0
 8007138:	b2db      	uxtb	r3, r3
}
 800713a:	4618      	mov	r0, r3
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	20003260 	.word	0x20003260

08007148 <GetInput6>:

uint32_t GetInput6(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
	return (Inputs & 0x20) != 0;
 800714c:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <GetInput6+0x20>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	bf14      	ite	ne
 8007158:	2301      	movne	r3, #1
 800715a:	2300      	moveq	r3, #0
 800715c:	b2db      	uxtb	r3, r3
}
 800715e:	4618      	mov	r0, r3
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20003260 	.word	0x20003260

0800716c <RedLed>:
*
* @return	None
*
*********************************************************************/
void RedLed(uint32_t nPattern)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

	RedPattern = nPattern;
 8007174:	4a07      	ldr	r2, [pc, #28]	@ (8007194 <RedLed+0x28>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6013      	str	r3, [r2, #0]
	if(RedPattern == 0)
 800717a:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <RedLed+0x28>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <RedLed+0x20>
	{
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED, LED_PIN_OFF);
 8007182:	2200      	movs	r2, #0
 8007184:	2110      	movs	r1, #16
 8007186:	4804      	ldr	r0, [pc, #16]	@ (8007198 <RedLed+0x2c>)
 8007188:	f006 fd3e 	bl	800dc08 <HAL_GPIO_WritePin>
	}
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20003264 	.word	0x20003264
 8007198:	42021800 	.word	0x42021800

0800719c <YellowLed>:
*
* @return	None
*
*********************************************************************/
void YellowLed(uint32_t nPattern)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

	YellowPattern = nPattern;
 80071a4:	4a07      	ldr	r2, [pc, #28]	@ (80071c4 <YellowLed+0x28>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6013      	str	r3, [r2, #0]
	if(YellowPattern == 0)
 80071aa:	4b06      	ldr	r3, [pc, #24]	@ (80071c4 <YellowLed+0x28>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d104      	bne.n	80071bc <YellowLed+0x20>
	{
		HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED, LED_PIN_OFF);
 80071b2:	2200      	movs	r2, #0
 80071b4:	2110      	movs	r1, #16
 80071b6:	4804      	ldr	r0, [pc, #16]	@ (80071c8 <YellowLed+0x2c>)
 80071b8:	f006 fd26 	bl	800dc08 <HAL_GPIO_WritePin>
	}
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	2000326c 	.word	0x2000326c
 80071c8:	42021400 	.word	0x42021400

080071cc <GreenLed>:
*
* @return	None
*
*********************************************************************/
void GreenLed(uint32_t nPattern)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]

	GreenPattern = nPattern;
 80071d4:	4a07      	ldr	r2, [pc, #28]	@ (80071f4 <GreenLed+0x28>)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6013      	str	r3, [r2, #0]
	if(GreenPattern == 0)
 80071da:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <GreenLed+0x28>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <GreenLed+0x20>
	{
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED, LED_PIN_OFF);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2101      	movs	r1, #1
 80071e6:	4804      	ldr	r0, [pc, #16]	@ (80071f8 <GreenLed+0x2c>)
 80071e8:	f006 fd0e 	bl	800dc08 <HAL_GPIO_WritePin>
	}
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20003268 	.word	0x20003268
 80071f8:	42020400 	.word	0x42020400

080071fc <GetRedLed>:
*
* @return	uint32_t nPattern
*
*********************************************************************/
uint32_t GetRedLed(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
	return RedPattern;
 8007200:	4b03      	ldr	r3, [pc, #12]	@ (8007210 <GetRedLed+0x14>)
 8007202:	681b      	ldr	r3, [r3, #0]
}
 8007204:	4618      	mov	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20003264 	.word	0x20003264

08007214 <GetYellowLed>:

uint32_t GetYellowLed(void)
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
	return RedPattern;
 8007218:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <GetYellowLed+0x14>)
 800721a:	681b      	ldr	r3, [r3, #0]
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	20003264 	.word	0x20003264

0800722c <GetGreenLed>:

uint32_t GetGreenLed(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
	return GreenPattern;
 8007230:	4b03      	ldr	r3, [pc, #12]	@ (8007240 <GetGreenLed+0x14>)
 8007232:	681b      	ldr	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20003268 	.word	0x20003268

08007244 <DoYellowLed>:


void DoYellowLed(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0

	if(YellowPattern)
 8007248:	4b0b      	ldr	r3, [pc, #44]	@ (8007278 <DoYellowLed+0x34>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d011      	beq.n	8007274 <DoYellowLed+0x30>
	{
		if((YellowPattern & LedMask) != 0)
 8007250:	4b09      	ldr	r3, [pc, #36]	@ (8007278 <DoYellowLed+0x34>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	4b09      	ldr	r3, [pc, #36]	@ (800727c <DoYellowLed+0x38>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4013      	ands	r3, r2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <DoYellowLed+0x26>
		{
			HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED, LED_PIN_ON);
 800725e:	2201      	movs	r2, #1
 8007260:	2110      	movs	r1, #16
 8007262:	4807      	ldr	r0, [pc, #28]	@ (8007280 <DoYellowLed+0x3c>)
 8007264:	f006 fcd0 	bl	800dc08 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED, LED_PIN_OFF);
		}
	}
}
 8007268:	e004      	b.n	8007274 <DoYellowLed+0x30>
			HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED, LED_PIN_OFF);
 800726a:	2200      	movs	r2, #0
 800726c:	2110      	movs	r1, #16
 800726e:	4804      	ldr	r0, [pc, #16]	@ (8007280 <DoYellowLed+0x3c>)
 8007270:	f006 fcca 	bl	800dc08 <HAL_GPIO_WritePin>
}
 8007274:	bf00      	nop
 8007276:	bd80      	pop	{r7, pc}
 8007278:	2000326c 	.word	0x2000326c
 800727c:	20000234 	.word	0x20000234
 8007280:	42021400 	.word	0x42021400

08007284 <DoRedLed>:

void DoRedLed(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0

	if(RedPattern)
 8007288:	4b0b      	ldr	r3, [pc, #44]	@ (80072b8 <DoRedLed+0x34>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d011      	beq.n	80072b4 <DoRedLed+0x30>
	{
		if((RedPattern & LedMask) != 0)
 8007290:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <DoRedLed+0x34>)
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <DoRedLed+0x38>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4013      	ands	r3, r2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <DoRedLed+0x26>
		{
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED, LED_PIN_ON);
 800729e:	2201      	movs	r2, #1
 80072a0:	2110      	movs	r1, #16
 80072a2:	4807      	ldr	r0, [pc, #28]	@ (80072c0 <DoRedLed+0x3c>)
 80072a4:	f006 fcb0 	bl	800dc08 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED, LED_PIN_OFF);
		}
	}
}
 80072a8:	e004      	b.n	80072b4 <DoRedLed+0x30>
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED, LED_PIN_OFF);
 80072aa:	2200      	movs	r2, #0
 80072ac:	2110      	movs	r1, #16
 80072ae:	4804      	ldr	r0, [pc, #16]	@ (80072c0 <DoRedLed+0x3c>)
 80072b0:	f006 fcaa 	bl	800dc08 <HAL_GPIO_WritePin>
}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20003264 	.word	0x20003264
 80072bc:	20000234 	.word	0x20000234
 80072c0:	42021800 	.word	0x42021800

080072c4 <DoGreenLed>:

void DoGreenLed(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0

	if(GreenPattern)
 80072c8:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <DoGreenLed+0x34>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d011      	beq.n	80072f4 <DoGreenLed+0x30>
	{
		if((GreenPattern & LedMask) != 0)
 80072d0:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <DoGreenLed+0x34>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <DoGreenLed+0x38>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <DoGreenLed+0x26>
		{
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED, LED_PIN_ON);
 80072de:	2201      	movs	r2, #1
 80072e0:	2101      	movs	r1, #1
 80072e2:	4807      	ldr	r0, [pc, #28]	@ (8007300 <DoGreenLed+0x3c>)
 80072e4:	f006 fc90 	bl	800dc08 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED, LED_PIN_OFF);
		}
	}
}
 80072e8:	e004      	b.n	80072f4 <DoGreenLed+0x30>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED, LED_PIN_OFF);
 80072ea:	2200      	movs	r2, #0
 80072ec:	2101      	movs	r1, #1
 80072ee:	4804      	ldr	r0, [pc, #16]	@ (8007300 <DoGreenLed+0x3c>)
 80072f0:	f006 fc8a 	bl	800dc08 <HAL_GPIO_WritePin>
}
 80072f4:	bf00      	nop
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20003268 	.word	0x20003268
 80072fc:	20000234 	.word	0x20000234
 8007300:	42020400 	.word	0x42020400

08007304 <LedTask>:

void LedTask(void *argument)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		DoRedLed();
 800730c:	f7ff ffba 	bl	8007284 <DoRedLed>
		DoGreenLed();
 8007310:	f7ff ffd8 	bl	80072c4 <DoGreenLed>
		DoYellowLed();
 8007314:	f7ff ff96 	bl	8007244 <DoYellowLed>

		LedMask <<= 1;
 8007318:	4b07      	ldr	r3, [pc, #28]	@ (8007338 <LedTask+0x34>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	4a06      	ldr	r2, [pc, #24]	@ (8007338 <LedTask+0x34>)
 8007320:	6013      	str	r3, [r2, #0]
		if(LedMask == 0)
 8007322:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <LedTask+0x34>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <LedTask+0x2c>
		{
			LedMask = 1;
 800732a:	4b03      	ldr	r3, [pc, #12]	@ (8007338 <LedTask+0x34>)
 800732c:	2201      	movs	r2, #1
 800732e:	601a      	str	r2, [r3, #0]
		}

		osDelay(pdMS_TO_TICKS(100));
 8007330:	2064      	movs	r0, #100	@ 0x64
 8007332:	f014 fdf9 	bl	801bf28 <osDelay>
		DoRedLed();
 8007336:	e7e9      	b.n	800730c <LedTask+0x8>
 8007338:	20000234 	.word	0x20000234

0800733c <GetSettings>:
*
*  description:
*
*************************************************************************/
int GetSettings(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b098      	sub	sp, #96	@ 0x60
 8007340:	af02      	add	r7, sp, #8
			}
		}
	}
#endif

	for(i = 0; i < NUM_VARIABLES; i++)
 8007342:	2300      	movs	r3, #0
 8007344:	657b      	str	r3, [r7, #84]	@ 0x54
 8007346:	e10c      	b.n	8007562 <GetSettings+0x226>
	{

		if(VarCmdTable[i].type & VAR_TYPE_PERSIST)
 8007348:	498a      	ldr	r1, [pc, #552]	@ (8007574 <GetSettings+0x238>)
 800734a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	3308      	adds	r3, #8
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80fc 	beq.w	800755c <GetSettings+0x220>
		{

			switch(VarCmdTable[i].type & VAR_TYPE_MASK)
 8007364:	4983      	ldr	r1, [pc, #524]	@ (8007574 <GetSettings+0x238>)
 8007366:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	3308      	adds	r3, #8
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800737a:	3b01      	subs	r3, #1
 800737c:	2b14      	cmp	r3, #20
 800737e:	f200 80ed 	bhi.w	800755c <GetSettings+0x220>
 8007382:	a201      	add	r2, pc, #4	@ (adr r2, 8007388 <GetSettings+0x4c>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007509 	.word	0x08007509
 8007390:	0800755d 	.word	0x0800755d
 8007394:	0800755d 	.word	0x0800755d
 8007398:	0800755d 	.word	0x0800755d
 800739c:	0800755d 	.word	0x0800755d
 80073a0:	080073dd 	.word	0x080073dd
 80073a4:	080073dd 	.word	0x080073dd
 80073a8:	080073dd 	.word	0x080073dd
 80073ac:	080073dd 	.word	0x080073dd
 80073b0:	08007479 	.word	0x08007479
 80073b4:	0800755d 	.word	0x0800755d
 80073b8:	0800755d 	.word	0x0800755d
 80073bc:	0800755d 	.word	0x0800755d
 80073c0:	0800755d 	.word	0x0800755d
 80073c4:	0800755d 	.word	0x0800755d
 80073c8:	080073dd 	.word	0x080073dd
 80073cc:	0800755d 	.word	0x0800755d
 80073d0:	0800755d 	.word	0x0800755d
 80073d4:	0800755d 	.word	0x0800755d
 80073d8:	0800742b 	.word	0x0800742b
				case VAR_TYPE_TIME_FMT:
				case VAR_TYPE_DATE_FMT:
				case VAR_TYPE_ON_OFF:
				case VAR_TYPE_PORT:
				case VAR_TYPE_THEME:
					lTemp = atoi(VarCmdTable[i].pszDefault);
 80073dc:	4965      	ldr	r1, [pc, #404]	@ (8007574 <GetSettings+0x238>)
 80073de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	330c      	adds	r3, #12
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f01d ffe6 	bl	80253c0 <atoi>
 80073f4:	64f8      	str	r0, [r7, #76]	@ 0x4c
					lTemp = ini_getl("", VarCmdTable[i].szCmdString, lTemp, SETTINGS_FILE);
 80073f6:	495f      	ldr	r1, [pc, #380]	@ (8007574 <GetSettings+0x238>)
 80073f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	6819      	ldr	r1, [r3, #0]
 8007406:	4b5c      	ldr	r3, [pc, #368]	@ (8007578 <GetSettings+0x23c>)
 8007408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800740a:	485c      	ldr	r0, [pc, #368]	@ (800757c <GetSettings+0x240>)
 800740c:	f018 fa94 	bl	801f938 <ini_getl>
 8007410:	64f8      	str	r0, [r7, #76]	@ 0x4c

					*(uint32_t*)(VarCmdTable[i].var) = lTemp;
 8007412:	4958      	ldr	r1, [pc, #352]	@ (8007574 <GetSettings+0x238>)
 8007414:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	3304      	adds	r3, #4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007426:	601a      	str	r2, [r3, #0]
				break;
 8007428:	e098      	b.n	800755c <GetSettings+0x220>

		    	case VAR_TYPE_TRACK_IDLE:
					lTemp = atoi(VarCmdTable[i].pszDefault);
 800742a:	4952      	ldr	r1, [pc, #328]	@ (8007574 <GetSettings+0x238>)
 800742c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	330c      	adds	r3, #12
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f01d ffbf 	bl	80253c0 <atoi>
 8007442:	64f8      	str	r0, [r7, #76]	@ 0x4c
					lTemp = ini_getl("", VarCmdTable[i].szCmdString, lTemp, SETTINGS_FILE);
 8007444:	494b      	ldr	r1, [pc, #300]	@ (8007574 <GetSettings+0x238>)
 8007446:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	4b48      	ldr	r3, [pc, #288]	@ (8007578 <GetSettings+0x23c>)
 8007456:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007458:	4848      	ldr	r0, [pc, #288]	@ (800757c <GetSettings+0x240>)
 800745a:	f018 fa6d 	bl	801f938 <ini_getl>
 800745e:	64f8      	str	r0, [r7, #76]	@ 0x4c

					*(uint32_t*)(VarCmdTable[i].var) = lTemp;
 8007460:	4944      	ldr	r1, [pc, #272]	@ (8007574 <GetSettings+0x238>)
 8007462:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	3304      	adds	r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007474:	601a      	str	r2, [r3, #0]
//k					SetTrackIdle(lTemp);
				break;
 8007476:	e071      	b.n	800755c <GetSettings+0x220>

				case VAR_TYPE_IP:
					(void)ini_gets("", VarCmdTable[i].szCmdString, VarCmdTable[i].pszDefault, szTemp, sizeof(szTemp), SETTINGS_FILE);
 8007478:	493e      	ldr	r1, [pc, #248]	@ (8007574 <GetSettings+0x238>)
 800747a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	6819      	ldr	r1, [r3, #0]
 8007488:	483a      	ldr	r0, [pc, #232]	@ (8007574 <GetSettings+0x238>)
 800748a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4403      	add	r3, r0
 8007496:	330c      	adds	r3, #12
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	f107 0308 	add.w	r3, r7, #8
 800749e:	4836      	ldr	r0, [pc, #216]	@ (8007578 <GetSettings+0x23c>)
 80074a0:	9001      	str	r0, [sp, #4]
 80074a2:	2040      	movs	r0, #64	@ 0x40
 80074a4:	9000      	str	r0, [sp, #0]
 80074a6:	4835      	ldr	r0, [pc, #212]	@ (800757c <GetSettings+0x240>)
 80074a8:	f018 f9c8 	bl	801f83c <ini_gets>

					lTemp = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
					pStr = szTemp;
 80074b0:	f107 0308 	add.w	r3, r7, #8
 80074b4:	607b      	str	r3, [r7, #4]
				    for(j = 0; j < 4; j++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80074ba:	e016      	b.n	80074ea <GetSettings+0x1ae>
				    {
				    	pOct = strsep(&pStr, ".");
 80074bc:	1d3b      	adds	r3, r7, #4
 80074be:	4930      	ldr	r1, [pc, #192]	@ (8007580 <GetSettings+0x244>)
 80074c0:	4618      	mov	r0, r3
 80074c2:	f01d feeb 	bl	802529c <strsep>
 80074c6:	64b8      	str	r0, [r7, #72]	@ 0x48
				    	if(pOct != NULL)
 80074c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <GetSettings+0x1a8>
				    	{
				    		lTemp |= atoi(pOct) << j * 8;
 80074ce:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80074d0:	f01d ff76 	bl	80253c0 <atoi>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074e0:	4313      	orrs	r3, r2
 80074e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
				    for(j = 0; j < 4; j++)
 80074e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e6:	3301      	adds	r3, #1
 80074e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80074ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	dde5      	ble.n	80074bc <GetSettings+0x180>
				    	}
				    }

					*(uint32_t*)(VarCmdTable[i].var) = lTemp;
 80074f0:	4920      	ldr	r1, [pc, #128]	@ (8007574 <GetSettings+0x238>)
 80074f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	3304      	adds	r3, #4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007504:	601a      	str	r2, [r3, #0]
				break;
 8007506:	e029      	b.n	800755c <GetSettings+0x220>

				case VAR_TYPE_STRING:
					(void)ini_gets("", VarCmdTable[i].szCmdString, VarCmdTable[i].pszDefault, szTemp, sizeof(szTemp), SETTINGS_FILE);
 8007508:	491a      	ldr	r1, [pc, #104]	@ (8007574 <GetSettings+0x238>)
 800750a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	6819      	ldr	r1, [r3, #0]
 8007518:	4816      	ldr	r0, [pc, #88]	@ (8007574 <GetSettings+0x238>)
 800751a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4403      	add	r3, r0
 8007526:	330c      	adds	r3, #12
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4812      	ldr	r0, [pc, #72]	@ (8007578 <GetSettings+0x23c>)
 8007530:	9001      	str	r0, [sp, #4]
 8007532:	2040      	movs	r0, #64	@ 0x40
 8007534:	9000      	str	r0, [sp, #0]
 8007536:	4811      	ldr	r0, [pc, #68]	@ (800757c <GetSettings+0x240>)
 8007538:	f018 f980 	bl	801f83c <ini_gets>
					strcpy((char*)VarCmdTable[i].var, szTemp);
 800753c:	490d      	ldr	r1, [pc, #52]	@ (8007574 <GetSettings+0x238>)
 800753e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	3304      	adds	r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f107 0208 	add.w	r2, r7, #8
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f01e ff84 	bl	8026462 <strcpy>
				break;
 800755a:	bf00      	nop
	for(i = 0; i < NUM_VARIABLES; i++)
 800755c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800755e:	3301      	adds	r3, #1
 8007560:	657b      	str	r3, [r7, #84]	@ 0x54
 8007562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007564:	2b13      	cmp	r3, #19
 8007566:	f77f aeef 	ble.w	8007348 <GetSettings+0xc>
			}
		}
	}

    return 1;
 800756a:	2301      	movs	r3, #1
}
 800756c:	4618      	mov	r0, r3
 800756e:	3758      	adds	r7, #88	@ 0x58
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	0802bb88 	.word	0x0802bb88
 8007578:	08026f44 	.word	0x08026f44
 800757c:	08026f50 	.word	0x08026f50
 8007580:	08026f54 	.word	0x08026f54

08007584 <MainTrackConfig>:
*
* @return	none
*
*********************************************************************/
void MainTrackConfig(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b0a2      	sub	sp, #136	@ 0x88
 8007588:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800758a:	4b71      	ldr	r3, [pc, #452]	@ (8007750 <MainTrackConfig+0x1cc>)
 800758c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007590:	4a6f      	ldr	r2, [pc, #444]	@ (8007750 <MainTrackConfig+0x1cc>)
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800759a:	4b6d      	ldr	r3, [pc, #436]	@ (8007750 <MainTrackConfig+0x1cc>)
 800759c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;
 80075a8:	4b6a      	ldr	r3, [pc, #424]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80075ae:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = TIMER_PRESCALER;
 80075b0:	4b68      	ldr	r3, [pc, #416]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075b6:	4b67      	ldr	r3, [pc, #412]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ONE_PERIOD;
 80075bc:	4b65      	ldr	r3, [pc, #404]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075be:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 80075c2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075c4:	4b63      	ldr	r3, [pc, #396]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 80075ca:	4b62      	ldr	r3, [pc, #392]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	615a      	str	r2, [r3, #20]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80075d0:	4b60      	ldr	r3, [pc, #384]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075d2:	2280      	movs	r2, #128	@ 0x80
 80075d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80075d6:	485f      	ldr	r0, [pc, #380]	@ (8007754 <MainTrackConfig+0x1d0>)
 80075d8:	f00e f8a2 	bl	8015720 <HAL_TIM_PWM_Init>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <MainTrackConfig+0x62>
	{
		Error_Handler();
 80075e2:	f003 fce7 	bl	800afb4 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80075e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075ea:	667b      	str	r3, [r7, #100]	@ 0x64
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80075ec:	2300      	movs	r3, #0
 80075ee:	66bb      	str	r3, [r7, #104]	@ 0x68
	sClockSourceConfig.ClockPrescaler = TIM_ETRPRESCALER_DIV1;
 80075f0:	2300      	movs	r3, #0
 80075f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sClockSourceConfig.ClockFilter = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	673b      	str	r3, [r7, #112]	@ 0x70
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80075f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80075fc:	4619      	mov	r1, r3
 80075fe:	4855      	ldr	r0, [pc, #340]	@ (8007754 <MainTrackConfig+0x1d0>)
 8007600:	f00e fd6c 	bl	80160dc <HAL_TIM_ConfigClockSource>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <MainTrackConfig+0x8a>
	{
		Error_Handler();
 800760a:	f003 fcd3 	bl	800afb4 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800760e:	2300      	movs	r3, #0
 8007610:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007612:	2300      	movs	r3, #0
 8007614:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007616:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800761a:	4619      	mov	r1, r3
 800761c:	484d      	ldr	r0, [pc, #308]	@ (8007754 <MainTrackConfig+0x1d0>)
 800761e:	f00f fc65 	bl	8016eec <HAL_TIMEx_MasterConfigSynchronization>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <MainTrackConfig+0xa8>
	{
		Error_Handler();
 8007628:	f003 fcc4 	bl	800afb4 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800762c:	2360      	movs	r3, #96	@ 0x60
 800762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.Pulse = ONE_PULSE;
 8007630:	f44f 7368 	mov.w	r3, #928	@ 0x3a0
 8007634:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007636:	2300      	movs	r3, #0
 8007638:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800763a:	2300      	movs	r3, #0
 800763c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800763e:	2300      	movs	r3, #0
 8007640:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007642:	2300      	movs	r3, #0
 8007644:	653b      	str	r3, [r7, #80]	@ 0x50
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8007646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800764a:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800764c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007650:	2200      	movs	r2, #0
 8007652:	4619      	mov	r1, r3
 8007654:	483f      	ldr	r0, [pc, #252]	@ (8007754 <MainTrackConfig+0x1d0>)
 8007656:	f00e fc2d 	bl	8015eb4 <HAL_TIM_PWM_ConfigChannel>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MainTrackConfig+0xe0>
	{
		Error_Handler();
 8007660:	f003 fca8 	bl	800afb4 <Error_Handler>
	}

	//sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8007664:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007668:	60bb      	str	r3, [r7, #8]
	//sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800766a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800766e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.DeadTime = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007680:	2300      	movs	r3, #0
 8007682:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim2, &sBreakDeadTimeConfig) != HAL_OK)
 8007684:	f107 0308 	add.w	r3, r7, #8
 8007688:	4619      	mov	r1, r3
 800768a:	4832      	ldr	r0, [pc, #200]	@ (8007754 <MainTrackConfig+0x1d0>)
 800768c:	f00f fcfe 	bl	801708c <HAL_TIMEx_ConfigBreakDeadTime>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <MainTrackConfig+0x116>
	{
		Error_Handler();
 8007696:	f003 fc8d 	bl	800afb4 <Error_Handler>
	}

	InitTrackQueue();
 800769a:	f000 fb05 	bl	8007ca8 <InitTrackQueue>

	TrackIdlePacket(NO_OF_PREAMBLE_BITS);
 800769e:	2012      	movs	r0, #18
 80076a0:	f000 f8fa 	bl	8007898 <TrackIdlePacket>
	TrackResetPacket(NO_OF_PREAMBLE_BITS);
 80076a4:	2012      	movs	r0, #18
 80076a6:	f000 f97b 	bl	80079a0 <TrackResetPacket>
	TrackOnesPacket();
 80076aa:	f000 f9fd 	bl	8007aa8 <TrackOnesPacket>
	TrackZerosPacket();
 80076ae:	f000 fa29 	bl	8007b04 <TrackZerosPacket>
	//#endif
	//#ifndef IDLE_IDLE_PACKETS
	//	pCurrentIdlePacket = apOnesPacket;
	//#endif

	CurrentPacket = apIdlePacket;
 80076b2:	4b29      	ldr	r3, [pc, #164]	@ (8007758 <MainTrackConfig+0x1d4>)
 80076b4:	4a29      	ldr	r2, [pc, #164]	@ (800775c <MainTrackConfig+0x1d8>)
 80076b6:	601a      	str	r2, [r3, #0]
	CurrentPacketIdx = -1;
 80076b8:	4b29      	ldr	r3, [pc, #164]	@ (8007760 <MainTrackConfig+0x1dc>)
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	601a      	str	r2, [r3, #0]

	SetTrackIdle(TI_IDLE);
 80076c0:	2001      	movs	r0, #1
 80076c2:	f000 fa8d 	bl	8007be0 <SetTrackIdle>
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	//__HAL_RCC_GPIOE_CLK_ENABLE();

	/* Tim2 Chan1 GPIO pin configuration  */
	GPIO_InitStruct.Pin       = TRACK_A_PIN;
 80076c6:	2301      	movs	r3, #1
 80076c8:	677b      	str	r3, [r7, #116]	@ 0x74
	GPIO_InitStruct.Mode      = TRACK_A_MODE_D;
 80076ca:	2301      	movs	r3, #1
 80076cc:	67bb      	str	r3, [r7, #120]	@ 0x78
	GPIO_InitStruct.Pull      = TRACK_A_PU_PD;
 80076ce:	2300      	movs	r3, #0
 80076d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	GPIO_InitStruct.Speed     = TRACK_A_SPEED;
 80076d2:	2303      	movs	r3, #3
 80076d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	GPIO_InitStruct.Alternate = TRACK_A_AF;
 80076d8:	2301      	movs	r3, #1
 80076da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	HAL_GPIO_Init(TRACK_A_PORT, &GPIO_InitStruct);
 80076de:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80076e2:	4619      	mov	r1, r3
 80076e4:	481f      	ldr	r0, [pc, #124]	@ (8007764 <MainTrackConfig+0x1e0>)
 80076e6:	f006 f925 	bl	800d934 <HAL_GPIO_Init>

	/* Tim2 Enable GPIO pin configuration  */
	GPIO_InitStruct.Pin 	  = TRACK_ENABLE_PIN;
 80076ea:	2340      	movs	r3, #64	@ 0x40
 80076ec:	677b      	str	r3, [r7, #116]	@ 0x74
	GPIO_InitStruct.Mode      = TRACK_ENABLE_MODE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	67bb      	str	r3, [r7, #120]	@ 0x78
	GPIO_InitStruct.Pull      = TRACK_ENABLE_PU_PD;
 80076f2:	2300      	movs	r3, #0
 80076f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	GPIO_InitStruct.Speed     = TRACK_ENABLE_SPEED;
 80076f6:	2303      	movs	r3, #3
 80076f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	HAL_GPIO_Init(TRACK_ENABLE_PORT, &GPIO_InitStruct);
 80076fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007700:	4619      	mov	r1, r3
 8007702:	4819      	ldr	r0, [pc, #100]	@ (8007768 <MainTrackConfig+0x1e4>)
 8007704:	f006 f916 	bl	800d934 <HAL_GPIO_Init>

	/*Configure GPIO pin : Scope Trigger */
	GPIO_InitStruct.Pin = SCOPE_TRIGGER_Pin;
 8007708:	2380      	movs	r3, #128	@ 0x80
 800770a:	677b      	str	r3, [r7, #116]	@ 0x74
	GPIO_InitStruct.Mode = SCOPE_TRIGGER_MODE;
 800770c:	2301      	movs	r3, #1
 800770e:	67bb      	str	r3, [r7, #120]	@ 0x78
	GPIO_InitStruct.Pull = SCOPE_TRIGGER_PU_PD;
 8007710:	2300      	movs	r3, #0
 8007712:	67fb      	str	r3, [r7, #124]	@ 0x7c
	GPIO_InitStruct.Speed = SCOPE_TRIGGER_SPEED;
 8007714:	2303      	movs	r3, #3
 8007716:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	HAL_GPIO_Init(SCOPE_TRIGGER_Port, &GPIO_InitStruct);
 800771a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800771e:	4619      	mov	r1, r3
 8007720:	4812      	ldr	r0, [pc, #72]	@ (800776c <MainTrackConfig+0x1e8>)
 8007722:	f006 f907 	bl	800d934 <HAL_GPIO_Init>

	//Enable Timer 1 interrupts
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 3);
 8007726:	2203      	movs	r2, #3
 8007728:	2100      	movs	r1, #0
 800772a:	202d      	movs	r0, #45	@ 0x2d
 800772c:	f005 fa92 	bl	800cc54 <HAL_NVIC_SetPriority>
//	HAL_NVIC_EnableIRQ(TIM2_IRQn);
//	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);

	#ifdef ENABLE_AT_STARTUP
		EnableTrack();
 8007730:	f000 fa16 	bl	8007b60 <EnableTrack>
	//if(HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
	//{
	//	Error_Handler();
	//}

	if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8007734:	2100      	movs	r1, #0
 8007736:	4807      	ldr	r0, [pc, #28]	@ (8007754 <MainTrackConfig+0x1d0>)
 8007738:	f00e f854 	bl	80157e4 <HAL_TIM_PWM_Start>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <MainTrackConfig+0x1c2>
	{
		Error_Handler();
 8007742:	f003 fc37 	bl	800afb4 <Error_Handler>
	}
}
 8007746:	bf00      	nop
 8007748:	3788      	adds	r7, #136	@ 0x88
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	44020c00 	.word	0x44020c00
 8007754:	2001b4e0 	.word	0x2001b4e0
 8007758:	2001b530 	.word	0x2001b530
 800775c:	20003270 	.word	0x20003270
 8007760:	2001b534 	.word	0x2001b534
 8007764:	42020000 	.word	0x42020000
 8007768:	42020400 	.word	0x42020400
 800776c:	42021000 	.word	0x42021000

08007770 <TIM2_IRQHandler>:
*
* @return	none
*
*********************************************************************/
void TIM2_IRQHandler(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0

	if(CurrentPacket->scope == 1)
 8007774:	4b3f      	ldr	r3, [pc, #252]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d105      	bne.n	800778a <TIM2_IRQHandler+0x1a>
	{
		HAL_GPIO_WritePin(SCOPE_TRIGGER_Port, SCOPE_TRIGGER_Pin, GPIO_PIN_SET);
 800777e:	2201      	movs	r2, #1
 8007780:	2180      	movs	r1, #128	@ 0x80
 8007782:	483d      	ldr	r0, [pc, #244]	@ (8007878 <TIM2_IRQHandler+0x108>)
 8007784:	f006 fa40 	bl	800dc08 <HAL_GPIO_WritePin>
 8007788:	e004      	b.n	8007794 <TIM2_IRQHandler+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(SCOPE_TRIGGER_Port, SCOPE_TRIGGER_Pin, GPIO_PIN_RESET);
 800778a:	2200      	movs	r2, #0
 800778c:	2180      	movs	r1, #128	@ 0x80
 800778e:	483a      	ldr	r0, [pc, #232]	@ (8007878 <TIM2_IRQHandler+0x108>)
 8007790:	f006 fa3a 	bl	800dc08 <HAL_GPIO_WritePin>
	}

	CurrentPacket++;
 8007794:	4b37      	ldr	r3, [pc, #220]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	4a36      	ldr	r2, [pc, #216]	@ (8007874 <TIM2_IRQHandler+0x104>)
 800779c:	6013      	str	r3, [r2, #0]

	if(CurrentPacket->period == 0)
 800779e:	4b35      	ldr	r3, [pc, #212]	@ (8007874 <TIM2_IRQHandler+0x104>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d14f      	bne.n	8007848 <TIM2_IRQHandler+0xd8>
	{
		// if not a fill packet, pop the old packet off the queue
		ReleasePacket(CurrentPacketIdx);
 80077a8:	4b34      	ldr	r3, [pc, #208]	@ (800787c <TIM2_IRQHandler+0x10c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fa57 	bl	8007c60 <ReleasePacket>

		// try and get a new packet
		CurrentPacket = GetPacket(&CurrentPacketIdx);
 80077b2:	4832      	ldr	r0, [pc, #200]	@ (800787c <TIM2_IRQHandler+0x10c>)
 80077b4:	f000 fa24 	bl	8007c00 <GetPacket>
 80077b8:	4603      	mov	r3, r0
 80077ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007874 <TIM2_IRQHandler+0x104>)
 80077bc:	6013      	str	r3, [r2, #0]
		if(CurrentPacket == NULL)
 80077be:	4b2d      	ldr	r3, [pc, #180]	@ (8007874 <TIM2_IRQHandler+0x104>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d12e      	bne.n	8007824 <TIM2_IRQHandler+0xb4>
		{
			switch(GetTrackIdle())
 80077c6:	f000 f9ff 	bl	8007bc8 <GetTrackIdle>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d815      	bhi.n	80077fc <TIM2_IRQHandler+0x8c>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <TIM2_IRQHandler+0x68>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077ed 	.word	0x080077ed
 80077dc:	080077fd 	.word	0x080077fd
 80077e0:	08007805 	.word	0x08007805
 80077e4:	0800780d 	.word	0x0800780d
 80077e8:	08007815 	.word	0x08007815
				case TI_NONE:
					// this may stop the output, but it doesn't re-start
//					__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
//					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);

					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80077ec:	2100      	movs	r1, #0
 80077ee:	4824      	ldr	r0, [pc, #144]	@ (8007880 <TIM2_IRQHandler+0x110>)
 80077f0:	f00e f958 	bl	8015aa4 <HAL_TIM_PWM_Stop>
					// probably need to clear the timer count
					TrackRunning = 0;
 80077f4:	4b23      	ldr	r3, [pc, #140]	@ (8007884 <TIM2_IRQHandler+0x114>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
				return;
 80077fa:	e039      	b.n	8007870 <TIM2_IRQHandler+0x100>

				case TI_IDLE:
				default:
					CurrentPacket = apIdlePacket;
 80077fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007874 <TIM2_IRQHandler+0x104>)
 80077fe:	4a22      	ldr	r2, [pc, #136]	@ (8007888 <TIM2_IRQHandler+0x118>)
 8007800:	601a      	str	r2, [r3, #0]
				break;
 8007802:	e00b      	b.n	800781c <TIM2_IRQHandler+0xac>

				case TI_RESET:
					CurrentPacket = apResetPacket;
 8007804:	4b1b      	ldr	r3, [pc, #108]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007806:	4a21      	ldr	r2, [pc, #132]	@ (800788c <TIM2_IRQHandler+0x11c>)
 8007808:	601a      	str	r2, [r3, #0]
				break;
 800780a:	e007      	b.n	800781c <TIM2_IRQHandler+0xac>

				case TI_ONES:
					CurrentPacket = apOnesPacket;
 800780c:	4b19      	ldr	r3, [pc, #100]	@ (8007874 <TIM2_IRQHandler+0x104>)
 800780e:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <TIM2_IRQHandler+0x120>)
 8007810:	601a      	str	r2, [r3, #0]
				break;
 8007812:	e003      	b.n	800781c <TIM2_IRQHandler+0xac>

				case TI_ZEROS:
					CurrentPacket = apZerosPacket;
 8007814:	4b17      	ldr	r3, [pc, #92]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007816:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <TIM2_IRQHandler+0x124>)
 8007818:	601a      	str	r2, [r3, #0]
				break;
 800781a:	bf00      	nop
			}
			CurrentPacketIdx = -1;
 800781c:	4b17      	ldr	r3, [pc, #92]	@ (800787c <TIM2_IRQHandler+0x10c>)
 800781e:	f04f 32ff 	mov.w	r2, #4294967295
 8007822:	601a      	str	r2, [r3, #0]
		}

		__HAL_TIM_SET_AUTORELOAD(&htim2, CurrentPacket->period);
 8007824:	4b13      	ldr	r3, [pc, #76]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <TIM2_IRQHandler+0x110>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007830:	4b10      	ldr	r3, [pc, #64]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a12      	ldr	r2, [pc, #72]	@ (8007880 <TIM2_IRQHandler+0x110>)
 8007838:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, CurrentPacket->pulse);
 800783a:	4b0e      	ldr	r3, [pc, #56]	@ (8007874 <TIM2_IRQHandler+0x104>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b10      	ldr	r3, [pc, #64]	@ (8007880 <TIM2_IRQHandler+0x110>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6852      	ldr	r2, [r2, #4]
 8007844:	635a      	str	r2, [r3, #52]	@ 0x34
 8007846:	e010      	b.n	800786a <TIM2_IRQHandler+0xfa>
	}
	else
	{
		__HAL_TIM_SET_AUTORELOAD(&htim2, CurrentPacket->period);
 8007848:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <TIM2_IRQHandler+0x104>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b0c      	ldr	r3, [pc, #48]	@ (8007880 <TIM2_IRQHandler+0x110>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007854:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a09      	ldr	r2, [pc, #36]	@ (8007880 <TIM2_IRQHandler+0x110>)
 800785c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, CurrentPacket->pulse);
 800785e:	4b05      	ldr	r3, [pc, #20]	@ (8007874 <TIM2_IRQHandler+0x104>)
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <TIM2_IRQHandler+0x110>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6852      	ldr	r2, [r2, #4]
 8007868:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	HAL_TIM_IRQHandler(&htim2);
 800786a:	4805      	ldr	r0, [pc, #20]	@ (8007880 <TIM2_IRQHandler+0x110>)
 800786c:	f00e f9d2 	bl	8015c14 <HAL_TIM_IRQHandler>
}
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	2001b530 	.word	0x2001b530
 8007878:	42021000 	.word	0x42021000
 800787c:	2001b534 	.word	0x2001b534
 8007880:	2001b4e0 	.word	0x2001b4e0
 8007884:	2001b538 	.word	0x2001b538
 8007888:	20003270 	.word	0x20003270
 800788c:	20003540 	.word	0x20003540
 8007890:	20003810 	.word	0x20003810
 8007894:	20003ae0 	.word	0x20003ae0

08007898 <TrackIdlePacket>:
*
* @return	none
*
*********************************************************************/
void TrackIdlePacket(uint16_t no_preambles)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	80fb      	strh	r3, [r7, #6]
	int i;
	PACKET_BITS* pPacket = apIdlePacket;
 80078a2:	4b3e      	ldr	r3, [pc, #248]	@ (800799c <TrackIdlePacket+0x104>)
 80078a4:	60bb      	str	r3, [r7, #8]

	// ToDo - change this to use the programmed clock registers

	// preamble
	for(i = 0; i < no_preambles; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e010      	b.n	80078ce <TrackIdlePacket+0x36>
	{
		pPacket->period = ONE_PERIOD;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 80078b2:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ONE_PULSE;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f44f 7268 	mov.w	r2, #928	@ 0x3a0
 80078ba:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	609a      	str	r2, [r3, #8]
		pPacket++;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	330c      	adds	r3, #12
 80078c6:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < no_preambles; i++)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	dbea      	blt.n	80078ac <TrackIdlePacket+0x14>
	}

	// first interbyte
	pPacket->period = ZERO_PERIOD;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80078dc:	601a      	str	r2, [r3, #0]
	pPacket->pulse = ZERO_PULSE;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80078e4:	605a      	str	r2, [r3, #4]
	pPacket->scope = 0;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2200      	movs	r2, #0
 80078ea:	609a      	str	r2, [r3, #8]
	pPacket++;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	330c      	adds	r3, #12
 80078f0:	60bb      	str	r3, [r7, #8]

	// first byte
	for(i = 0; i < 8; i++)
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	e010      	b.n	800791a <TrackIdlePacket+0x82>
	{
		pPacket->period = ONE_PERIOD;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 80078fe:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ONE_PULSE;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f44f 7268 	mov.w	r2, #928	@ 0x3a0
 8007906:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	609a      	str	r2, [r3, #8]
		pPacket++;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	330c      	adds	r3, #12
 8007912:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 8; i++)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3301      	adds	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b07      	cmp	r3, #7
 800791e:	ddeb      	ble.n	80078f8 <TrackIdlePacket+0x60>
	}

	// second byte and second interbyte
	for(i = 0; i < 10; i++)
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e010      	b.n	8007948 <TrackIdlePacket+0xb0>
	{
		pPacket->period = ZERO_PERIOD;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800792c:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ZERO_PULSE;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007934:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2200      	movs	r2, #0
 800793a:	609a      	str	r2, [r3, #8]
		pPacket++;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	330c      	adds	r3, #12
 8007940:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 10; i++)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b09      	cmp	r3, #9
 800794c:	ddeb      	ble.n	8007926 <TrackIdlePacket+0x8e>
	}

	// third byte
	for(i = 0; i < 9; i++)
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	e010      	b.n	8007976 <TrackIdlePacket+0xde>
	{
		pPacket->period = ONE_PERIOD;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 800795a:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ONE_PULSE;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f44f 7268 	mov.w	r2, #928	@ 0x3a0
 8007962:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2200      	movs	r2, #0
 8007968:	609a      	str	r2, [r3, #8]
		pPacket++;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	330c      	adds	r3, #12
 800796e:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 9; i++)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b08      	cmp	r3, #8
 800797a:	ddeb      	ble.n	8007954 <TrackIdlePacket+0xbc>
	}

	// terminator
	pPacket->period = 0;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
	pPacket->pulse = 0;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	605a      	str	r2, [r3, #4]
	pPacket->scope = 0;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	609a      	str	r2, [r3, #8]
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20003270 	.word	0x20003270

080079a0 <TrackResetPacket>:
*
* @return	none
*
*********************************************************************/
void TrackResetPacket(uint16_t no_preambles)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	80fb      	strh	r3, [r7, #6]
	int i;
	PACKET_BITS* pPacket = apResetPacket;
 80079aa:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa4 <TrackResetPacket+0x104>)
 80079ac:	60bb      	str	r3, [r7, #8]

	// ToDo - change this to use the programmed clock registers

	// preamble
	for(i = 0; i < no_preambles; i++)
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	e010      	b.n	80079d6 <TrackResetPacket+0x36>
	{
		pPacket->period = ONE_PERIOD;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 80079ba:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ONE_PULSE;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f44f 7268 	mov.w	r2, #928	@ 0x3a0
 80079c2:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	609a      	str	r2, [r3, #8]
		pPacket++;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	330c      	adds	r3, #12
 80079ce:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < no_preambles; i++)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	429a      	cmp	r2, r3
 80079dc:	dbea      	blt.n	80079b4 <TrackResetPacket+0x14>
	}

	// first interbyte
	pPacket->period = ZERO_PERIOD;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80079e4:	601a      	str	r2, [r3, #0]
	pPacket->pulse = ZERO_PULSE;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80079ec:	605a      	str	r2, [r3, #4]
	pPacket->scope = 0;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	609a      	str	r2, [r3, #8]
	pPacket++;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	330c      	adds	r3, #12
 80079f8:	60bb      	str	r3, [r7, #8]

	// first byte
	for(i = 0; i < 8; i++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	e010      	b.n	8007a22 <TrackResetPacket+0x82>
	{
		pPacket->period = ZERO_PERIOD;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8007a06:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ZERO_PULSE;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007a0e:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2200      	movs	r2, #0
 8007a14:	609a      	str	r2, [r3, #8]
		pPacket++;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 8; i++)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b07      	cmp	r3, #7
 8007a26:	ddeb      	ble.n	8007a00 <TrackResetPacket+0x60>
	}

	// second byte and second interbyte
	for(i = 0; i < 10; i++)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e010      	b.n	8007a50 <TrackResetPacket+0xb0>
	{
		pPacket->period = ZERO_PERIOD;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8007a34:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ZERO_PULSE;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007a3c:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	609a      	str	r2, [r3, #8]
		pPacket++;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	330c      	adds	r3, #12
 8007a48:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 10; i++)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b09      	cmp	r3, #9
 8007a54:	ddeb      	ble.n	8007a2e <TrackResetPacket+0x8e>
	}

	// third byte
	for(i = 0; i < 9; i++)
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	e010      	b.n	8007a7e <TrackResetPacket+0xde>
	{
		pPacket->period = ZERO_PERIOD;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8007a62:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ZERO_PULSE;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007a6a:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	609a      	str	r2, [r3, #8]
		pPacket++;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	330c      	adds	r3, #12
 8007a76:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 9; i++)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	ddeb      	ble.n	8007a5c <TrackResetPacket+0xbc>
	}

	// terminator
	pPacket->period = 0;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
	pPacket->pulse = 0;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
	pPacket->scope = 0;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	609a      	str	r2, [r3, #8]
}
 8007a96:	bf00      	nop
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20003540 	.word	0x20003540

08007aa8 <TrackOnesPacket>:
*
* @return	none
*
*********************************************************************/
void TrackOnesPacket(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
	int i;
	PACKET_BITS* pPacket = apOnesPacket;
 8007aae:	4b14      	ldr	r3, [pc, #80]	@ (8007b00 <TrackOnesPacket+0x58>)
 8007ab0:	603b      	str	r3, [r7, #0]

	// ones
	for(i = 0; i < 20; i++)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	e010      	b.n	8007ada <TrackOnesPacket+0x32>
	{
		pPacket->period = ONE_PERIOD;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8007abe:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ONE_PULSE;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f44f 7268 	mov.w	r2, #928	@ 0x3a0
 8007ac6:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
		pPacket++;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	603b      	str	r3, [r7, #0]
	for(i = 0; i < 20; i++)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	607b      	str	r3, [r7, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b13      	cmp	r3, #19
 8007ade:	ddeb      	ble.n	8007ab8 <TrackOnesPacket+0x10>
	}

	// terminator
	pPacket->period = 0;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
	pPacket->pulse = 0;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	605a      	str	r2, [r3, #4]
	pPacket->scope = 0;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2200      	movs	r2, #0
 8007af0:	609a      	str	r2, [r3, #8]
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20003810 	.word	0x20003810

08007b04 <TrackZerosPacket>:
*
* @return	none
*
*********************************************************************/
void TrackZerosPacket(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
	int i;
	PACKET_BITS* pPacket = apZerosPacket;
 8007b0a:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <TrackZerosPacket+0x58>)
 8007b0c:	603b      	str	r3, [r7, #0]

	// ones
	for(i = 0; i < 20; i++)
 8007b0e:	2300      	movs	r3, #0
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	e010      	b.n	8007b36 <TrackZerosPacket+0x32>
	{
		pPacket->period = ZERO_PERIOD;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8007b1a:	601a      	str	r2, [r3, #0]
		pPacket->pulse = ZERO_PULSE;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007b22:	605a      	str	r2, [r3, #4]
		pPacket->scope = 0;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2200      	movs	r2, #0
 8007b28:	609a      	str	r2, [r3, #8]
		pPacket++;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	603b      	str	r3, [r7, #0]
	for(i = 0; i < 20; i++)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3301      	adds	r3, #1
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b13      	cmp	r3, #19
 8007b3a:	ddeb      	ble.n	8007b14 <TrackZerosPacket+0x10>
	}

	// terminator
	pPacket->period = 0;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
	pPacket->pulse = 0;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2200      	movs	r2, #0
 8007b46:	605a      	str	r2, [r3, #4]
	pPacket->scope = 0;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	609a      	str	r2, [r3, #8]
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20003ae0 	.word	0x20003ae0

08007b60 <EnableTrack>:
*
* @return	none
*
*********************************************************************/
void EnableTrack(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	HAL_GPIO_WritePin(TRACK_ENABLE_PORT, TRACK_ENABLE_PIN, GPIO_PIN_SET);
 8007b66:	2201      	movs	r2, #1
 8007b68:	2140      	movs	r1, #64	@ 0x40
 8007b6a:	4813      	ldr	r0, [pc, #76]	@ (8007bb8 <EnableTrack+0x58>)
 8007b6c:	f006 f84c 	bl	800dc08 <HAL_GPIO_WritePin>


	/* Tim2 Chan1 GPIO pin configuration  */
	GPIO_InitStruct.Pin       = TRACK_A_PIN;
 8007b70:	2301      	movs	r3, #1
 8007b72:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode      = TRACK_A_MODE_E;
 8007b74:	2302      	movs	r3, #2
 8007b76:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull      = TRACK_A_PU_PD;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed     = TRACK_A_SPEED;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = TRACK_A_AF;
 8007b80:	2301      	movs	r3, #1
 8007b82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(TRACK_A_PORT, &GPIO_InitStruct);
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	480c      	ldr	r0, [pc, #48]	@ (8007bbc <EnableTrack+0x5c>)
 8007b8a:	f005 fed3 	bl	800d934 <HAL_GPIO_Init>

	HAL_TIM_Base_Start(&htim2);
 8007b8e:	480c      	ldr	r0, [pc, #48]	@ (8007bc0 <EnableTrack+0x60>)
 8007b90:	f00d fc72 	bl	8015478 <HAL_TIM_Base_Start>
	//if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
	//{
	//    Error_Handler();
	//}

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007b94:	202d      	movs	r0, #45	@ 0x2d
 8007b96:	f005 f877 	bl	800cc88 <HAL_NVIC_EnableIRQ>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8007b9a:	4b09      	ldr	r3, [pc, #36]	@ (8007bc0 <EnableTrack+0x60>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	4b07      	ldr	r3, [pc, #28]	@ (8007bc0 <EnableTrack+0x60>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0201 	orr.w	r2, r2, #1
 8007ba8:	60da      	str	r2, [r3, #12]

	bTrackState = 1;
 8007baa:	4b06      	ldr	r3, [pc, #24]	@ (8007bc4 <EnableTrack+0x64>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	701a      	strb	r2, [r3, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	42020400 	.word	0x42020400
 8007bbc:	42020000 	.word	0x42020000
 8007bc0:	2001b4e0 	.word	0x2001b4e0
 8007bc4:	2001b52d 	.word	0x2001b52d

08007bc8 <GetTrackIdle>:
		TrackLock.idle = ti;
	}
}
#else
TRACK_IDLE GetTrackIdle(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0

	return TrackIdleState;
 8007bcc:	4b03      	ldr	r3, [pc, #12]	@ (8007bdc <GetTrackIdle+0x14>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	2001b52c 	.word	0x2001b52c

08007be0 <SetTrackIdle>:

void SetTrackIdle(TRACK_IDLE ti)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	71fb      	strb	r3, [r7, #7]

	TrackIdleState = ti;
 8007bea:	4a04      	ldr	r2, [pc, #16]	@ (8007bfc <SetTrackIdle+0x1c>)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	7013      	strb	r3, [r2, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	2001b52c 	.word	0x2001b52c

08007c00 <GetPacket>:
* @return	NULL if the queue is full
*  			Packet pointer and index if successful
*
*********************************************************************/
PACKET_BITS* GetPacket(int* idx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]

	if((track_queue_in == track_queue_out) && (TrackQueue[track_queue_out] == PKT_NONE))
 8007c08:	4b11      	ldr	r3, [pc, #68]	@ (8007c50 <GetPacket+0x50>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4b11      	ldr	r3, [pc, #68]	@ (8007c54 <GetPacket+0x54>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d10b      	bne.n	8007c2c <GetPacket+0x2c>
 8007c14:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <GetPacket+0x54>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a0f      	ldr	r2, [pc, #60]	@ (8007c58 <GetPacket+0x58>)
 8007c1a:	5cd3      	ldrb	r3, [r2, r3]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d105      	bne.n	8007c2c <GetPacket+0x2c>
	{
		/* queue is empty */
		*idx = -1;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f04f 32ff 	mov.w	r2, #4294967295
 8007c26:	601a      	str	r2, [r3, #0]
		return NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e00b      	b.n	8007c44 <GetPacket+0x44>
	}
	else
	{
		/* queue is not empty */
		*idx = track_queue_out;
 8007c2c:	4b09      	ldr	r3, [pc, #36]	@ (8007c54 <GetPacket+0x54>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
		return apPacket[track_queue_out];
 8007c34:	4b07      	ldr	r3, [pc, #28]	@ (8007c54 <GetPacket+0x54>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f645 52cc 	movw	r2, #24012	@ 0x5dcc
 8007c3c:	fb02 f303 	mul.w	r3, r2, r3
 8007c40:	4a06      	ldr	r2, [pc, #24]	@ (8007c5c <GetPacket+0x5c>)
 8007c42:	4413      	add	r3, r2
	}
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	2001b540 	.word	0x2001b540
 8007c54:	2001b544 	.word	0x2001b544
 8007c58:	2001b53c 	.word	0x2001b53c
 8007c5c:	20003db0 	.word	0x20003db0

08007c60 <ReleasePacket>:
*
* @return	none
*
*********************************************************************/
void ReleasePacket(int idx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]

	if(idx != -1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d010      	beq.n	8007c92 <ReleasePacket+0x32>
	{
		TrackQueue[idx] = PKT_NONE;
 8007c70:	4a0b      	ldr	r2, [pc, #44]	@ (8007ca0 <ReleasePacket+0x40>)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]

		++track_queue_out;
 8007c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca4 <ReleasePacket+0x44>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	4a08      	ldr	r2, [pc, #32]	@ (8007ca4 <ReleasePacket+0x44>)
 8007c82:	6013      	str	r3, [r2, #0]
		if(track_queue_out == TRACK_QUEUE_DEPTH)
 8007c84:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <ReleasePacket+0x44>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d102      	bne.n	8007c92 <ReleasePacket+0x32>
		{
			track_queue_out = 0;
 8007c8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <ReleasePacket+0x44>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	2001b53c 	.word	0x2001b53c
 8007ca4:	2001b544 	.word	0x2001b544

08007ca8 <InitTrackQueue>:
*
* @return	none
*
*********************************************************************/
void InitTrackQueue(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
	int index;


	track_queue_in = 0;
 8007cae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce4 <InitTrackQueue+0x3c>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
	track_queue_out = 0;
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <InitTrackQueue+0x40>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]

	for(index = 0; index < TRACK_QUEUE_DEPTH; ++index)
 8007cba:	2300      	movs	r3, #0
 8007cbc:	607b      	str	r3, [r7, #4]
 8007cbe:	e007      	b.n	8007cd0 <InitTrackQueue+0x28>
	{
		TrackQueue[index] = PKT_NONE;
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8007cec <InitTrackQueue+0x44>)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
	for(index = 0; index < TRACK_QUEUE_DEPTH; ++index)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	ddf4      	ble.n	8007cc0 <InitTrackQueue+0x18>
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	2001b540 	.word	0x2001b540
 8007ce8:	2001b544 	.word	0x2001b544
 8007cec:	2001b53c 	.word	0x2001b53c

08007cf0 <F2A>:
};

char m_szAscii[64];

char *F2A(float fValue)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b090      	sub	sp, #64	@ 0x40
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	ed87 0a01 	vstr	s0, [r7, #4]
	char szExp[10];
	char szMan[20];
	char bSign = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	long lWhole, lFrac;

	if (fValue < 0.0)
 8007d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d0c:	d508      	bpl.n	8007d20 <F2A+0x30>
	{
		bSign = 1;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		fValue = -fValue;
 8007d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d18:	eef1 7a67 	vneg.f32	s15, s15
 8007d1c:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	if (fValue < 0.00000000001)
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7f8 fc2b 	bl	800057c <__aeabi_f2d>
 8007d26:	a3e9      	add	r3, pc, #932	@ (adr r3, 80080cc <F2A+0x3dc>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	f7f8 fef0 	bl	8000b10 <__aeabi_dcmplt>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d009      	beq.n	8007d4a <F2A+0x5a>
	{
//		sprintf(szExp, "");
		strcpy(szExp, "");
 8007d36:	2300      	movs	r3, #0
 8007d38:	f887 3020 	strb.w	r3, [r7, #32]
		sprintf(szMan, "0.0");
 8007d3c:	f107 030c 	add.w	r3, r7, #12
 8007d40:	49cb      	ldr	r1, [pc, #812]	@ (8008070 <F2A+0x380>)
 8007d42:	4618      	mov	r0, r3
 8007d44:	f01e f95a 	bl	8025ffc <siprintf>
 8007d48:	e382      	b.n	8008450 <F2A+0x760>
	}
	else
	{
		if (fValue < 0.0000000001)
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7f8 fc16 	bl	800057c <__aeabi_f2d>
 8007d50:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008028 <F2A+0x338>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f7f8 fedb 	bl	8000b10 <__aeabi_dcmplt>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00e      	beq.n	8007d7e <F2A+0x8e>
		{
			fValue *= 1000000000.0;
 8007d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d64:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8008074 <F2A+0x384>
 8007d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d6c:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-10");
 8007d70:	f107 0320 	add.w	r3, r7, #32
 8007d74:	49c0      	ldr	r1, [pc, #768]	@ (8008078 <F2A+0x388>)
 8007d76:	4618      	mov	r0, r3
 8007d78:	f01e f940 	bl	8025ffc <siprintf>
 8007d7c:	e340      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.000000001)
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7f8 fbfc 	bl	800057c <__aeabi_f2d>
 8007d84:	a3aa      	add	r3, pc, #680	@ (adr r3, 8008030 <F2A+0x340>)
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	f7f8 fec1 	bl	8000b10 <__aeabi_dcmplt>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00e      	beq.n	8007db2 <F2A+0xc2>
		{
			fValue *= 100000000.0;
 8007d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d98:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 800807c <F2A+0x38c>
 8007d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007da0:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-09");
 8007da4:	f107 0320 	add.w	r3, r7, #32
 8007da8:	49b5      	ldr	r1, [pc, #724]	@ (8008080 <F2A+0x390>)
 8007daa:	4618      	mov	r0, r3
 8007dac:	f01e f926 	bl	8025ffc <siprintf>
 8007db0:	e326      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.00000001)
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7f8 fbe2 	bl	800057c <__aeabi_f2d>
 8007db8:	a39f      	add	r3, pc, #636	@ (adr r3, 8008038 <F2A+0x348>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fea7 	bl	8000b10 <__aeabi_dcmplt>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00e      	beq.n	8007de6 <F2A+0xf6>
		{
			fValue *= 100000000.0;
 8007dc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dcc:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 800807c <F2A+0x38c>
 8007dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dd4:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-08");
 8007dd8:	f107 0320 	add.w	r3, r7, #32
 8007ddc:	49a9      	ldr	r1, [pc, #676]	@ (8008084 <F2A+0x394>)
 8007dde:	4618      	mov	r0, r3
 8007de0:	f01e f90c 	bl	8025ffc <siprintf>
 8007de4:	e30c      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.0000001)
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7f8 fbc8 	bl	800057c <__aeabi_f2d>
 8007dec:	a394      	add	r3, pc, #592	@ (adr r3, 8008040 <F2A+0x350>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fe8d 	bl	8000b10 <__aeabi_dcmplt>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00e      	beq.n	8007e1a <F2A+0x12a>
		{
			fValue *= 10000000.0;
 8007dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e00:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8008088 <F2A+0x398>
 8007e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e08:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-07");
 8007e0c:	f107 0320 	add.w	r3, r7, #32
 8007e10:	499e      	ldr	r1, [pc, #632]	@ (800808c <F2A+0x39c>)
 8007e12:	4618      	mov	r0, r3
 8007e14:	f01e f8f2 	bl	8025ffc <siprintf>
 8007e18:	e2f2      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.000001)
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f8 fbae 	bl	800057c <__aeabi_f2d>
 8007e20:	a389      	add	r3, pc, #548	@ (adr r3, 8008048 <F2A+0x358>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fe73 	bl	8000b10 <__aeabi_dcmplt>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00e      	beq.n	8007e4e <F2A+0x15e>
		{
			fValue *= 1000000.0;
 8007e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e34:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8008090 <F2A+0x3a0>
 8007e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e3c:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-06");
 8007e40:	f107 0320 	add.w	r3, r7, #32
 8007e44:	4993      	ldr	r1, [pc, #588]	@ (8008094 <F2A+0x3a4>)
 8007e46:	4618      	mov	r0, r3
 8007e48:	f01e f8d8 	bl	8025ffc <siprintf>
 8007e4c:	e2d8      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.00001)
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7f8 fb94 	bl	800057c <__aeabi_f2d>
 8007e54:	a37e      	add	r3, pc, #504	@ (adr r3, 8008050 <F2A+0x360>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f7f8 fe59 	bl	8000b10 <__aeabi_dcmplt>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00e      	beq.n	8007e82 <F2A+0x192>
		{
			fValue *= 100000.0;
 8007e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e68:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8008098 <F2A+0x3a8>
 8007e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e70:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-05");
 8007e74:	f107 0320 	add.w	r3, r7, #32
 8007e78:	4988      	ldr	r1, [pc, #544]	@ (800809c <F2A+0x3ac>)
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f01e f8be 	bl	8025ffc <siprintf>
 8007e80:	e2be      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.0001)
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7f8 fb7a 	bl	800057c <__aeabi_f2d>
 8007e88:	a373      	add	r3, pc, #460	@ (adr r3, 8008058 <F2A+0x368>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fe3f 	bl	8000b10 <__aeabi_dcmplt>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00e      	beq.n	8007eb6 <F2A+0x1c6>
		{
			fValue *= 10000.0;
 8007e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e9c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80080a0 <F2A+0x3b0>
 8007ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ea4:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-04");
 8007ea8:	f107 0320 	add.w	r3, r7, #32
 8007eac:	497d      	ldr	r1, [pc, #500]	@ (80080a4 <F2A+0x3b4>)
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f01e f8a4 	bl	8025ffc <siprintf>
 8007eb4:	e2a4      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.001)
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f8 fb60 	bl	800057c <__aeabi_f2d>
 8007ebc:	a368      	add	r3, pc, #416	@ (adr r3, 8008060 <F2A+0x370>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 fe25 	bl	8000b10 <__aeabi_dcmplt>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <F2A+0x1fa>
		{
			fValue *= 1000.0;
 8007ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ed0:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80080a8 <F2A+0x3b8>
 8007ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ed8:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-03");
 8007edc:	f107 0320 	add.w	r3, r7, #32
 8007ee0:	4972      	ldr	r1, [pc, #456]	@ (80080ac <F2A+0x3bc>)
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f01e f88a 	bl	8025ffc <siprintf>
 8007ee8:	e28a      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 0.01)
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7f8 fb46 	bl	800057c <__aeabi_f2d>
 8007ef0:	a35d      	add	r3, pc, #372	@ (adr r3, 8008068 <F2A+0x378>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f7f8 fe0b 	bl	8000b10 <__aeabi_dcmplt>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00e      	beq.n	8007f1e <F2A+0x22e>
		{
			fValue *= 100.0;
 8007f00:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f04:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80080b0 <F2A+0x3c0>
 8007f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f0c:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e-02");
 8007f10:	f107 0320 	add.w	r3, r7, #32
 8007f14:	4967      	ldr	r1, [pc, #412]	@ (80080b4 <F2A+0x3c4>)
 8007f16:	4618      	mov	r0, r3
 8007f18:	f01e f870 	bl	8025ffc <siprintf>
 8007f1c:	e270      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 10000.0)
 8007f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f22:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80080a0 <F2A+0x3b0>
 8007f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2e:	d503      	bpl.n	8007f38 <F2A+0x248>
		{
			strcpy(szExp, "");
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 3020 	strb.w	r3, [r7, #32]
 8007f36:	e263      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 100000.0)
 8007f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f3c:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8008098 <F2A+0x3a8>
 8007f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f48:	d50e      	bpl.n	8007f68 <F2A+0x278>
		{
			fValue /= 10000.0;
 8007f4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8007f4e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80080a0 <F2A+0x3b0>
 8007f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f56:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e+04");
 8007f5a:	f107 0320 	add.w	r3, r7, #32
 8007f5e:	4956      	ldr	r1, [pc, #344]	@ (80080b8 <F2A+0x3c8>)
 8007f60:	4618      	mov	r0, r3
 8007f62:	f01e f84b 	bl	8025ffc <siprintf>
 8007f66:	e24b      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1000000.0)
 8007f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f6c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8008090 <F2A+0x3a0>
 8007f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f78:	d50e      	bpl.n	8007f98 <F2A+0x2a8>
		{
			fValue /= 100000.0;
 8007f7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8007f7e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8008098 <F2A+0x3a8>
 8007f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f86:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e+05");
 8007f8a:	f107 0320 	add.w	r3, r7, #32
 8007f8e:	494b      	ldr	r1, [pc, #300]	@ (80080bc <F2A+0x3cc>)
 8007f90:	4618      	mov	r0, r3
 8007f92:	f01e f833 	bl	8025ffc <siprintf>
 8007f96:	e233      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 10000000.0)
 8007f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f9c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8008088 <F2A+0x398>
 8007fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa8:	d50e      	bpl.n	8007fc8 <F2A+0x2d8>
		{
			fValue /= 1000000.0;
 8007faa:	ed97 7a01 	vldr	s14, [r7, #4]
 8007fae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008090 <F2A+0x3a0>
 8007fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007fb6:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e+06");
 8007fba:	f107 0320 	add.w	r3, r7, #32
 8007fbe:	4940      	ldr	r1, [pc, #256]	@ (80080c0 <F2A+0x3d0>)
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f01e f81b 	bl	8025ffc <siprintf>
 8007fc6:	e21b      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 100000000.0)
 8007fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8007fcc:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800807c <F2A+0x38c>
 8007fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd8:	d50e      	bpl.n	8007ff8 <F2A+0x308>
		{
			fValue /= 10000000.0;
 8007fda:	ed97 7a01 	vldr	s14, [r7, #4]
 8007fde:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008088 <F2A+0x398>
 8007fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007fe6:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e+07");
 8007fea:	f107 0320 	add.w	r3, r7, #32
 8007fee:	4935      	ldr	r1, [pc, #212]	@ (80080c4 <F2A+0x3d4>)
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f01e f803 	bl	8025ffc <siprintf>
 8007ff6:	e203      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1000000000.0)
 8007ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ffc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008074 <F2A+0x384>
 8008000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008008:	d568      	bpl.n	80080dc <F2A+0x3ec>
		{
			fValue /= 100000000.0;
 800800a:	ed97 7a01 	vldr	s14, [r7, #4]
 800800e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800807c <F2A+0x38c>
 8008012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008016:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e+08");
 800801a:	f107 0320 	add.w	r3, r7, #32
 800801e:	492a      	ldr	r1, [pc, #168]	@ (80080c8 <F2A+0x3d8>)
 8008020:	4618      	mov	r0, r3
 8008022:	f01d ffeb 	bl	8025ffc <siprintf>
 8008026:	e1eb      	b.n	8008400 <F2A+0x710>
 8008028:	d9d7bdbb 	.word	0xd9d7bdbb
 800802c:	3ddb7cdf 	.word	0x3ddb7cdf
 8008030:	e826d695 	.word	0xe826d695
 8008034:	3e112e0b 	.word	0x3e112e0b
 8008038:	e2308c3a 	.word	0xe2308c3a
 800803c:	3e45798e 	.word	0x3e45798e
 8008040:	9abcaf48 	.word	0x9abcaf48
 8008044:	3e7ad7f2 	.word	0x3e7ad7f2
 8008048:	a0b5ed8d 	.word	0xa0b5ed8d
 800804c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008050:	88e368f1 	.word	0x88e368f1
 8008054:	3ee4f8b5 	.word	0x3ee4f8b5
 8008058:	eb1c432d 	.word	0xeb1c432d
 800805c:	3f1a36e2 	.word	0x3f1a36e2
 8008060:	d2f1a9fc 	.word	0xd2f1a9fc
 8008064:	3f50624d 	.word	0x3f50624d
 8008068:	47ae147b 	.word	0x47ae147b
 800806c:	3f847ae1 	.word	0x3f847ae1
 8008070:	080271c4 	.word	0x080271c4
 8008074:	4e6e6b28 	.word	0x4e6e6b28
 8008078:	080271c8 	.word	0x080271c8
 800807c:	4cbebc20 	.word	0x4cbebc20
 8008080:	080271d0 	.word	0x080271d0
 8008084:	080271d8 	.word	0x080271d8
 8008088:	4b189680 	.word	0x4b189680
 800808c:	080271e0 	.word	0x080271e0
 8008090:	49742400 	.word	0x49742400
 8008094:	080271e8 	.word	0x080271e8
 8008098:	47c35000 	.word	0x47c35000
 800809c:	080271f0 	.word	0x080271f0
 80080a0:	461c4000 	.word	0x461c4000
 80080a4:	080271f8 	.word	0x080271f8
 80080a8:	447a0000 	.word	0x447a0000
 80080ac:	08027200 	.word	0x08027200
 80080b0:	42c80000 	.word	0x42c80000
 80080b4:	08027208 	.word	0x08027208
 80080b8:	08027210 	.word	0x08027210
 80080bc:	08027218 	.word	0x08027218
 80080c0:	08027220 	.word	0x08027220
 80080c4:	08027228 	.word	0x08027228
 80080c8:	08027230 	.word	0x08027230
 80080cc:	e1796495 	.word	0xe1796495
 80080d0:	3da5fd7f 	.word	0x3da5fd7f
 80080d4:	501502f9 	.word	0x501502f9
 80080d8:	4e6e6b28 	.word	0x4e6e6b28
		}
		else if (fValue < 1.0e+10)
 80080dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80080e0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80080d4 <F2A+0x3e4>
 80080e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ec:	d50e      	bpl.n	800810c <F2A+0x41c>
		{
			fValue /= 1.0e+9;
 80080ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80080f2:	ed5f 6a07 	vldr	s13, [pc, #-28]	@ 80080d8 <F2A+0x3e8>
 80080f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80080fa:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e+09");
 80080fe:	f107 0320 	add.w	r3, r7, #32
 8008102:	49a9      	ldr	r1, [pc, #676]	@ (80083a8 <F2A+0x6b8>)
 8008104:	4618      	mov	r0, r3
 8008106:	f01d ff79 	bl	8025ffc <siprintf>
 800810a:	e179      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+11)
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7f8 fa35 	bl	800057c <__aeabi_f2d>
 8008112:	a393      	add	r3, pc, #588	@ (adr r3, 8008360 <F2A+0x670>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 fcfa 	bl	8000b10 <__aeabi_dcmplt>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00e      	beq.n	8008140 <F2A+0x450>
		{
			fValue /= 1.0e+10;
 8008122:	ed97 7a01 	vldr	s14, [r7, #4]
 8008126:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80083ac <F2A+0x6bc>
 800812a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800812e:	edc7 7a01 	vstr	s15, [r7, #4]
			sprintf(szExp, "e+10");
 8008132:	f107 0320 	add.w	r3, r7, #32
 8008136:	499e      	ldr	r1, [pc, #632]	@ (80083b0 <F2A+0x6c0>)
 8008138:	4618      	mov	r0, r3
 800813a:	f01d ff5f 	bl	8025ffc <siprintf>
 800813e:	e15f      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+12)
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7f8 fa1b 	bl	800057c <__aeabi_f2d>
 8008146:	a388      	add	r3, pc, #544	@ (adr r3, 8008368 <F2A+0x678>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 fce0 	bl	8000b10 <__aeabi_dcmplt>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <F2A+0x494>
		{
			fValue /= 1.0e+11;
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7f8 fa10 	bl	800057c <__aeabi_f2d>
 800815c:	a380      	add	r3, pc, #512	@ (adr r3, 8008360 <F2A+0x670>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 fb8d 	bl	8000880 <__aeabi_ddiv>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	f7f8 fd1f 	bl	8000bb0 <__aeabi_d2f>
 8008172:	4603      	mov	r3, r0
 8008174:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+11");
 8008176:	f107 0320 	add.w	r3, r7, #32
 800817a:	498e      	ldr	r1, [pc, #568]	@ (80083b4 <F2A+0x6c4>)
 800817c:	4618      	mov	r0, r3
 800817e:	f01d ff3d 	bl	8025ffc <siprintf>
 8008182:	e13d      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+13)
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7f8 f9f9 	bl	800057c <__aeabi_f2d>
 800818a:	a379      	add	r3, pc, #484	@ (adr r3, 8008370 <F2A+0x680>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 fcbe 	bl	8000b10 <__aeabi_dcmplt>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d016      	beq.n	80081c8 <F2A+0x4d8>
		{
			fValue /= 1.0e+12;
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7f8 f9ee 	bl	800057c <__aeabi_f2d>
 80081a0:	a371      	add	r3, pc, #452	@ (adr r3, 8008368 <F2A+0x678>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 fb6b 	bl	8000880 <__aeabi_ddiv>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	f7f8 fcfd 	bl	8000bb0 <__aeabi_d2f>
 80081b6:	4603      	mov	r3, r0
 80081b8:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+12");
 80081ba:	f107 0320 	add.w	r3, r7, #32
 80081be:	497e      	ldr	r1, [pc, #504]	@ (80083b8 <F2A+0x6c8>)
 80081c0:	4618      	mov	r0, r3
 80081c2:	f01d ff1b 	bl	8025ffc <siprintf>
 80081c6:	e11b      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+14)
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7f8 f9d7 	bl	800057c <__aeabi_f2d>
 80081ce:	a36a      	add	r3, pc, #424	@ (adr r3, 8008378 <F2A+0x688>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f7f8 fc9c 	bl	8000b10 <__aeabi_dcmplt>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d016      	beq.n	800820c <F2A+0x51c>
		{
			fValue /= 1.0e+13;
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7f8 f9cc 	bl	800057c <__aeabi_f2d>
 80081e4:	a362      	add	r3, pc, #392	@ (adr r3, 8008370 <F2A+0x680>)
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f7f8 fb49 	bl	8000880 <__aeabi_ddiv>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4610      	mov	r0, r2
 80081f4:	4619      	mov	r1, r3
 80081f6:	f7f8 fcdb 	bl	8000bb0 <__aeabi_d2f>
 80081fa:	4603      	mov	r3, r0
 80081fc:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+13");
 80081fe:	f107 0320 	add.w	r3, r7, #32
 8008202:	496e      	ldr	r1, [pc, #440]	@ (80083bc <F2A+0x6cc>)
 8008204:	4618      	mov	r0, r3
 8008206:	f01d fef9 	bl	8025ffc <siprintf>
 800820a:	e0f9      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+15)
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7f8 f9b5 	bl	800057c <__aeabi_f2d>
 8008212:	a35b      	add	r3, pc, #364	@ (adr r3, 8008380 <F2A+0x690>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	f7f8 fc7a 	bl	8000b10 <__aeabi_dcmplt>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d016      	beq.n	8008250 <F2A+0x560>
		{
			fValue /= 1.0e+14;
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7f8 f9aa 	bl	800057c <__aeabi_f2d>
 8008228:	a353      	add	r3, pc, #332	@ (adr r3, 8008378 <F2A+0x688>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f8 fb27 	bl	8000880 <__aeabi_ddiv>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	f7f8 fcb9 	bl	8000bb0 <__aeabi_d2f>
 800823e:	4603      	mov	r3, r0
 8008240:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+14");
 8008242:	f107 0320 	add.w	r3, r7, #32
 8008246:	495e      	ldr	r1, [pc, #376]	@ (80083c0 <F2A+0x6d0>)
 8008248:	4618      	mov	r0, r3
 800824a:	f01d fed7 	bl	8025ffc <siprintf>
 800824e:	e0d7      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+16)
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7f8 f993 	bl	800057c <__aeabi_f2d>
 8008256:	a34c      	add	r3, pc, #304	@ (adr r3, 8008388 <F2A+0x698>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f8 fc58 	bl	8000b10 <__aeabi_dcmplt>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d016      	beq.n	8008294 <F2A+0x5a4>
		{
			fValue /= 1.0e+15;
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7f8 f988 	bl	800057c <__aeabi_f2d>
 800826c:	a344      	add	r3, pc, #272	@ (adr r3, 8008380 <F2A+0x690>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f8 fb05 	bl	8000880 <__aeabi_ddiv>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4610      	mov	r0, r2
 800827c:	4619      	mov	r1, r3
 800827e:	f7f8 fc97 	bl	8000bb0 <__aeabi_d2f>
 8008282:	4603      	mov	r3, r0
 8008284:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+15");
 8008286:	f107 0320 	add.w	r3, r7, #32
 800828a:	494e      	ldr	r1, [pc, #312]	@ (80083c4 <F2A+0x6d4>)
 800828c:	4618      	mov	r0, r3
 800828e:	f01d feb5 	bl	8025ffc <siprintf>
 8008292:	e0b5      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+17)
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7f8 f971 	bl	800057c <__aeabi_f2d>
 800829a:	a33d      	add	r3, pc, #244	@ (adr r3, 8008390 <F2A+0x6a0>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f8 fc36 	bl	8000b10 <__aeabi_dcmplt>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d016      	beq.n	80082d8 <F2A+0x5e8>
		{
			fValue /= 1.0e+16;
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7f8 f966 	bl	800057c <__aeabi_f2d>
 80082b0:	a335      	add	r3, pc, #212	@ (adr r3, 8008388 <F2A+0x698>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f8 fae3 	bl	8000880 <__aeabi_ddiv>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4610      	mov	r0, r2
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7f8 fc75 	bl	8000bb0 <__aeabi_d2f>
 80082c6:	4603      	mov	r3, r0
 80082c8:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+16");
 80082ca:	f107 0320 	add.w	r3, r7, #32
 80082ce:	493e      	ldr	r1, [pc, #248]	@ (80083c8 <F2A+0x6d8>)
 80082d0:	4618      	mov	r0, r3
 80082d2:	f01d fe93 	bl	8025ffc <siprintf>
 80082d6:	e093      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+18)
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7f8 f94f 	bl	800057c <__aeabi_f2d>
 80082de:	a32e      	add	r3, pc, #184	@ (adr r3, 8008398 <F2A+0x6a8>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f8 fc14 	bl	8000b10 <__aeabi_dcmplt>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d016      	beq.n	800831c <F2A+0x62c>
		{
			fValue /= 1.0e+17;
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7f8 f944 	bl	800057c <__aeabi_f2d>
 80082f4:	a326      	add	r3, pc, #152	@ (adr r3, 8008390 <F2A+0x6a0>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f8 fac1 	bl	8000880 <__aeabi_ddiv>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4610      	mov	r0, r2
 8008304:	4619      	mov	r1, r3
 8008306:	f7f8 fc53 	bl	8000bb0 <__aeabi_d2f>
 800830a:	4603      	mov	r3, r0
 800830c:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+17");
 800830e:	f107 0320 	add.w	r3, r7, #32
 8008312:	492e      	ldr	r1, [pc, #184]	@ (80083cc <F2A+0x6dc>)
 8008314:	4618      	mov	r0, r3
 8008316:	f01d fe71 	bl	8025ffc <siprintf>
 800831a:	e071      	b.n	8008400 <F2A+0x710>
		}
		else if (fValue < 1.0e+19)
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7f8 f92d 	bl	800057c <__aeabi_f2d>
 8008322:	a31f      	add	r3, pc, #124	@ (adr r3, 80083a0 <F2A+0x6b0>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f8 fbf2 	bl	8000b10 <__aeabi_dcmplt>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d050      	beq.n	80083d4 <F2A+0x6e4>
		{
			fValue /= 1.0e+18;
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7f8 f922 	bl	800057c <__aeabi_f2d>
 8008338:	a317      	add	r3, pc, #92	@ (adr r3, 8008398 <F2A+0x6a8>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f8 fa9f 	bl	8000880 <__aeabi_ddiv>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4610      	mov	r0, r2
 8008348:	4619      	mov	r1, r3
 800834a:	f7f8 fc31 	bl	8000bb0 <__aeabi_d2f>
 800834e:	4603      	mov	r3, r0
 8008350:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+18");
 8008352:	f107 0320 	add.w	r3, r7, #32
 8008356:	491e      	ldr	r1, [pc, #120]	@ (80083d0 <F2A+0x6e0>)
 8008358:	4618      	mov	r0, r3
 800835a:	f01d fe4f 	bl	8025ffc <siprintf>
 800835e:	e04f      	b.n	8008400 <F2A+0x710>
 8008360:	e8000000 	.word	0xe8000000
 8008364:	42374876 	.word	0x42374876
 8008368:	a2000000 	.word	0xa2000000
 800836c:	426d1a94 	.word	0x426d1a94
 8008370:	e5400000 	.word	0xe5400000
 8008374:	42a2309c 	.word	0x42a2309c
 8008378:	1e900000 	.word	0x1e900000
 800837c:	42d6bcc4 	.word	0x42d6bcc4
 8008380:	26340000 	.word	0x26340000
 8008384:	430c6bf5 	.word	0x430c6bf5
 8008388:	37e08000 	.word	0x37e08000
 800838c:	4341c379 	.word	0x4341c379
 8008390:	85d8a000 	.word	0x85d8a000
 8008394:	43763457 	.word	0x43763457
 8008398:	674ec800 	.word	0x674ec800
 800839c:	43abc16d 	.word	0x43abc16d
 80083a0:	60913d00 	.word	0x60913d00
 80083a4:	43e158e4 	.word	0x43e158e4
 80083a8:	08027238 	.word	0x08027238
 80083ac:	501502f9 	.word	0x501502f9
 80083b0:	08027240 	.word	0x08027240
 80083b4:	08027248 	.word	0x08027248
 80083b8:	08027250 	.word	0x08027250
 80083bc:	08027258 	.word	0x08027258
 80083c0:	08027260 	.word	0x08027260
 80083c4:	08027268 	.word	0x08027268
 80083c8:	08027270 	.word	0x08027270
 80083cc:	08027278 	.word	0x08027278
 80083d0:	08027280 	.word	0x08027280
		}
		else
		{
			fValue /= 1.0e+19;
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7f8 f8d1 	bl	800057c <__aeabi_f2d>
 80083da:	a32f      	add	r3, pc, #188	@ (adr r3, 8008498 <F2A+0x7a8>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f8 fa4e 	bl	8000880 <__aeabi_ddiv>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4610      	mov	r0, r2
 80083ea:	4619      	mov	r1, r3
 80083ec:	f7f8 fbe0 	bl	8000bb0 <__aeabi_d2f>
 80083f0:	4603      	mov	r3, r0
 80083f2:	607b      	str	r3, [r7, #4]
			sprintf(szExp, "e+19");
 80083f4:	f107 0320 	add.w	r3, r7, #32
 80083f8:	4923      	ldr	r1, [pc, #140]	@ (8008488 <F2A+0x798>)
 80083fa:	4618      	mov	r0, r3
 80083fc:	f01d fdfe 	bl	8025ffc <siprintf>
		}

		lWhole = (long)fValue;
 8008400:	edd7 7a01 	vldr	s15, [r7, #4]
 8008404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008408:	ee17 3a90 	vmov	r3, s15
 800840c:	633b      	str	r3, [r7, #48]	@ 0x30
		lFrac = (long)((fValue - (float)lWhole) * 10000.0);
 800840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008418:	ed97 7a01 	vldr	s14, [r7, #4]
 800841c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008420:	ee17 0a90 	vmov	r0, s15
 8008424:	f7f8 f8aa 	bl	800057c <__aeabi_f2d>
 8008428:	a315      	add	r3, pc, #84	@ (adr r3, 8008480 <F2A+0x790>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f8 f8fd 	bl	800062c <__aeabi_dmul>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4610      	mov	r0, r2
 8008438:	4619      	mov	r1, r3
 800843a:	f7f8 fb91 	bl	8000b60 <__aeabi_d2iz>
 800843e:	4603      	mov	r3, r0
 8008440:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sprintf(szMan, "%ld.%04ld", lWhole, lFrac);
 8008442:	f107 000c 	add.w	r0, r7, #12
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800844a:	4910      	ldr	r1, [pc, #64]	@ (800848c <F2A+0x79c>)
 800844c:	f01d fdd6 	bl	8025ffc <siprintf>
	}
	sprintf(m_szAscii, "%c%s%s", (bSign ? '-' : ' '), szMan, szExp);
 8008450:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <F2A+0x76c>
 8008458:	222d      	movs	r2, #45	@ 0x2d
 800845a:	e000      	b.n	800845e <F2A+0x76e>
 800845c:	2220      	movs	r2, #32
 800845e:	f107 010c 	add.w	r1, r7, #12
 8008462:	f107 0320 	add.w	r3, r7, #32
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	460b      	mov	r3, r1
 800846a:	4909      	ldr	r1, [pc, #36]	@ (8008490 <F2A+0x7a0>)
 800846c:	4809      	ldr	r0, [pc, #36]	@ (8008494 <F2A+0x7a4>)
 800846e:	f01d fdc5 	bl	8025ffc <siprintf>
	return (m_szAscii);
 8008472:	4b08      	ldr	r3, [pc, #32]	@ (8008494 <F2A+0x7a4>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	@ 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	f3af 8000 	nop.w
 8008480:	00000000 	.word	0x00000000
 8008484:	40c38800 	.word	0x40c38800
 8008488:	08027288 	.word	0x08027288
 800848c:	08027290 	.word	0x08027290
 8008490:	0802729c 	.word	0x0802729c
 8008494:	2001b634 	.word	0x2001b634
 8008498:	60913d00 	.word	0x60913d00
 800849c:	43e158e4 	.word	0x43e158e4

080084a0 <VarToString>:
*
* @return	char* string
*
*********************************************************************/
char* VarToString(uint32_t idx)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b090      	sub	sp, #64	@ 0x40
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	6078      	str	r0, [r7, #4]
	unsigned int t1, t2, t3;
	uint8_t ip_addr[4];
	//char szTemp[16];
	unsigned int lc;

    switch(VarCmdTable[idx].type & VAR_TYPE_MASK)
 80084a8:	49b4      	ldr	r1, [pc, #720]	@ (800877c <VarToString+0x2dc>)
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	3308      	adds	r3, #8
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084be:	3b01      	subs	r3, #1
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	f200 8367 	bhi.w	8008b94 <VarToString+0x6f4>
 80084c6:	a201      	add	r2, pc, #4	@ (adr r2, 80084cc <VarToString+0x2c>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	08008511 	.word	0x08008511
 80084d0:	08008935 	.word	0x08008935
 80084d4:	08008531 	.word	0x08008531
 80084d8:	08008803 	.word	0x08008803
 80084dc:	0800855b 	.word	0x0800855b
 80084e0:	080085d5 	.word	0x080085d5
 80084e4:	080086d5 	.word	0x080086d5
 80084e8:	080086ff 	.word	0x080086ff
 80084ec:	0800887b 	.word	0x0800887b
 80084f0:	080088a5 	.word	0x080088a5
 80084f4:	080088e3 	.word	0x080088e3
 80084f8:	08008951 	.word	0x08008951
 80084fc:	08008963 	.word	0x08008963
 8008500:	08008975 	.word	0x08008975
 8008504:	08008987 	.word	0x08008987
 8008508:	08008b43 	.word	0x08008b43
 800850c:	08008b69 	.word	0x08008b69
    {
    	case VAR_TYPE_INT:
    		sprintf(tempbuf, "%u", *(unsigned int*)(VarCmdTable[idx].var));
 8008510:	499a      	ldr	r1, [pc, #616]	@ (800877c <VarToString+0x2dc>)
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	3304      	adds	r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	4996      	ldr	r1, [pc, #600]	@ (8008780 <VarToString+0x2e0>)
 8008528:	4896      	ldr	r0, [pc, #600]	@ (8008784 <VarToString+0x2e4>)
 800852a:	f01d fd67 	bl	8025ffc <siprintf>
    	break;
 800852e:	e331      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_FLOAT:
    		strcpy(tempbuf, F2A(*(float*)(VarCmdTable[idx].var)));
 8008530:	4992      	ldr	r1, [pc, #584]	@ (800877c <VarToString+0x2dc>)
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	3304      	adds	r3, #4
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	edd3 7a00 	vldr	s15, [r3]
 8008546:	eeb0 0a67 	vmov.f32	s0, s15
 800854a:	f7ff fbd1 	bl	8007cf0 <F2A>
 800854e:	4603      	mov	r3, r0
 8008550:	4619      	mov	r1, r3
 8008552:	488c      	ldr	r0, [pc, #560]	@ (8008784 <VarToString+0x2e4>)
 8008554:	f01d ff85 	bl	8026462 <strcpy>
    	break;
 8008558:	e31c      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_TIME:
    		if(HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) == HAL_OK)
 800855a:	f107 0314 	add.w	r3, r7, #20
 800855e:	2200      	movs	r2, #0
 8008560:	4619      	mov	r1, r3
 8008562:	4889      	ldr	r0, [pc, #548]	@ (8008788 <VarToString+0x2e8>)
 8008564:	f00b fdd4 	bl	8014110 <HAL_RTC_GetTime>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d12a      	bne.n	80085c4 <VarToString+0x124>
    		{
				if(bTimeFmt == 0)
 800856e:	4b87      	ldr	r3, [pc, #540]	@ (800878c <VarToString+0x2ec>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d11b      	bne.n	80085ae <VarToString+0x10e>
				{
					if(time.Hours > 12)
 8008576:	7d3b      	ldrb	r3, [r7, #20]
 8008578:	2b0c      	cmp	r3, #12
 800857a:	d90c      	bls.n	8008596 <VarToString+0xf6>
					{
						sprintf(tempbuf, "%2d:%02d:%02d PM", time.Hours-12, time.Minutes, time.Seconds);
 800857c:	7d3b      	ldrb	r3, [r7, #20]
 800857e:	f1a3 020c 	sub.w	r2, r3, #12
 8008582:	7d7b      	ldrb	r3, [r7, #21]
 8008584:	4619      	mov	r1, r3
 8008586:	7dbb      	ldrb	r3, [r7, #22]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	460b      	mov	r3, r1
 800858c:	4980      	ldr	r1, [pc, #512]	@ (8008790 <VarToString+0x2f0>)
 800858e:	487d      	ldr	r0, [pc, #500]	@ (8008784 <VarToString+0x2e4>)
 8008590:	f01d fd34 	bl	8025ffc <siprintf>
 8008594:	e016      	b.n	80085c4 <VarToString+0x124>
					}
					else
					{
						sprintf(tempbuf, "%2d:%02d:%02d AM", time.Hours, time.Minutes, time.Seconds);
 8008596:	7d3b      	ldrb	r3, [r7, #20]
 8008598:	461a      	mov	r2, r3
 800859a:	7d7b      	ldrb	r3, [r7, #21]
 800859c:	4619      	mov	r1, r3
 800859e:	7dbb      	ldrb	r3, [r7, #22]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	460b      	mov	r3, r1
 80085a4:	497b      	ldr	r1, [pc, #492]	@ (8008794 <VarToString+0x2f4>)
 80085a6:	4877      	ldr	r0, [pc, #476]	@ (8008784 <VarToString+0x2e4>)
 80085a8:	f01d fd28 	bl	8025ffc <siprintf>
 80085ac:	e00a      	b.n	80085c4 <VarToString+0x124>
					}
				}
				else
				{
	    			sprintf(tempbuf, "%2d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80085ae:	7d3b      	ldrb	r3, [r7, #20]
 80085b0:	461a      	mov	r2, r3
 80085b2:	7d7b      	ldrb	r3, [r7, #21]
 80085b4:	4619      	mov	r1, r3
 80085b6:	7dbb      	ldrb	r3, [r7, #22]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	460b      	mov	r3, r1
 80085bc:	4976      	ldr	r1, [pc, #472]	@ (8008798 <VarToString+0x2f8>)
 80085be:	4871      	ldr	r0, [pc, #452]	@ (8008784 <VarToString+0x2e4>)
 80085c0:	f01d fd1c 	bl	8025ffc <siprintf>
				}
    		}
    		// call the date read to unlock the clock
    		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80085c4:	f107 0310 	add.w	r3, r7, #16
 80085c8:	2200      	movs	r2, #0
 80085ca:	4619      	mov	r1, r3
 80085cc:	486e      	ldr	r0, [pc, #440]	@ (8008788 <VarToString+0x2e8>)
 80085ce:	f00b fe87 	bl	80142e0 <HAL_RTC_GetDate>
    	break;
 80085d2:	e2df      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_DATE:
    		// call the time read to lock the clock
    		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	2200      	movs	r2, #0
 80085da:	4619      	mov	r1, r3
 80085dc:	486a      	ldr	r0, [pc, #424]	@ (8008788 <VarToString+0x2e8>)
 80085de:	f00b fd97 	bl	8014110 <HAL_RTC_GetTime>
    		if(HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) == HAL_OK)
 80085e2:	f107 0310 	add.w	r3, r7, #16
 80085e6:	2200      	movs	r2, #0
 80085e8:	4619      	mov	r1, r3
 80085ea:	4867      	ldr	r0, [pc, #412]	@ (8008788 <VarToString+0x2e8>)
 80085ec:	f00b fe78 	bl	80142e0 <HAL_RTC_GetDate>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f040 82cd 	bne.w	8008b92 <VarToString+0x6f2>
    		{
    			switch(bDateFmt)
 80085f8:	4b68      	ldr	r3, [pc, #416]	@ (800879c <VarToString+0x2fc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d80c      	bhi.n	800861c <VarToString+0x17c>
 8008602:	a201      	add	r2, pc, #4	@ (adr r2, 8008608 <VarToString+0x168>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008639 	.word	0x08008639
 800860c:	08008655 	.word	0x08008655
 8008610:	0800866f 	.word	0x0800866f
 8008614:	08008691 	.word	0x08008691
 8008618:	080086b5 	.word	0x080086b5
    			{
    				case 0:
    				default:
    	    			sprintf(tempbuf, "%2d/%02d/%04d", date.Month, date.Date, date.Year+2000);
 800861c:	7c7b      	ldrb	r3, [r7, #17]
 800861e:	461a      	mov	r2, r3
 8008620:	7cbb      	ldrb	r3, [r7, #18]
 8008622:	4619      	mov	r1, r3
 8008624:	7cfb      	ldrb	r3, [r7, #19]
 8008626:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	460b      	mov	r3, r1
 800862e:	495c      	ldr	r1, [pc, #368]	@ (80087a0 <VarToString+0x300>)
 8008630:	4854      	ldr	r0, [pc, #336]	@ (8008784 <VarToString+0x2e4>)
 8008632:	f01d fce3 	bl	8025ffc <siprintf>
    				break;
 8008636:	e04c      	b.n	80086d2 <VarToString+0x232>
    				case 1:
    	    			sprintf(tempbuf, "%2d/%02d/%04d", date.Date, date.Month, date.Year+2000);
 8008638:	7cbb      	ldrb	r3, [r7, #18]
 800863a:	461a      	mov	r2, r3
 800863c:	7c7b      	ldrb	r3, [r7, #17]
 800863e:	4619      	mov	r1, r3
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	460b      	mov	r3, r1
 800864a:	4955      	ldr	r1, [pc, #340]	@ (80087a0 <VarToString+0x300>)
 800864c:	484d      	ldr	r0, [pc, #308]	@ (8008784 <VarToString+0x2e4>)
 800864e:	f01d fcd5 	bl	8025ffc <siprintf>
       				break;
 8008652:	e03e      	b.n	80086d2 <VarToString+0x232>
    				case 2:
    	    			sprintf(tempbuf, "%04d/%2d/%02d", date.Year+2000, date.Month, date.Date);
 8008654:	7cfb      	ldrb	r3, [r7, #19]
 8008656:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 800865a:	7c7b      	ldrb	r3, [r7, #17]
 800865c:	4619      	mov	r1, r3
 800865e:	7cbb      	ldrb	r3, [r7, #18]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	460b      	mov	r3, r1
 8008664:	494f      	ldr	r1, [pc, #316]	@ (80087a4 <VarToString+0x304>)
 8008666:	4847      	ldr	r0, [pc, #284]	@ (8008784 <VarToString+0x2e4>)
 8008668:	f01d fcc8 	bl	8025ffc <siprintf>
       				break;
 800866c:	e031      	b.n	80086d2 <VarToString+0x232>
    				case 3:
    	    			sprintf(tempbuf, "%s/%02d/%04d", szMonth[date.Month], date.Date, date.Year+2000);
 800866e:	7c7b      	ldrb	r3, [r7, #17]
 8008670:	461a      	mov	r2, r3
 8008672:	4b4d      	ldr	r3, [pc, #308]	@ (80087a8 <VarToString+0x308>)
 8008674:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008678:	7cbb      	ldrb	r3, [r7, #18]
 800867a:	4619      	mov	r1, r3
 800867c:	7cfb      	ldrb	r3, [r7, #19]
 800867e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	460b      	mov	r3, r1
 8008686:	4949      	ldr	r1, [pc, #292]	@ (80087ac <VarToString+0x30c>)
 8008688:	483e      	ldr	r0, [pc, #248]	@ (8008784 <VarToString+0x2e4>)
 800868a:	f01d fcb7 	bl	8025ffc <siprintf>
    				break;
 800868e:	e020      	b.n	80086d2 <VarToString+0x232>
    				case 4:
    	    			sprintf(tempbuf, "%2d/%s/%04d", date.Date, szMonth[date.Month], date.Year+2000);
 8008690:	7cbb      	ldrb	r3, [r7, #18]
 8008692:	4619      	mov	r1, r3
 8008694:	7c7b      	ldrb	r3, [r7, #17]
 8008696:	461a      	mov	r2, r3
 8008698:	4b43      	ldr	r3, [pc, #268]	@ (80087a8 <VarToString+0x308>)
 800869a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800869e:	7cfb      	ldrb	r3, [r7, #19]
 80086a0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	4613      	mov	r3, r2
 80086a8:	460a      	mov	r2, r1
 80086aa:	4941      	ldr	r1, [pc, #260]	@ (80087b0 <VarToString+0x310>)
 80086ac:	4835      	ldr	r0, [pc, #212]	@ (8008784 <VarToString+0x2e4>)
 80086ae:	f01d fca5 	bl	8025ffc <siprintf>
       				break;
 80086b2:	e00e      	b.n	80086d2 <VarToString+0x232>
    				case 5:
    	    			sprintf(tempbuf, "%04d/%s/%02d", date.Year+2000, szMonth[date.Month], date.Date);
 80086b4:	7cfb      	ldrb	r3, [r7, #19]
 80086b6:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 80086ba:	7c7b      	ldrb	r3, [r7, #17]
 80086bc:	4619      	mov	r1, r3
 80086be:	4b3a      	ldr	r3, [pc, #232]	@ (80087a8 <VarToString+0x308>)
 80086c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086c4:	7cb9      	ldrb	r1, [r7, #18]
 80086c6:	9100      	str	r1, [sp, #0]
 80086c8:	493a      	ldr	r1, [pc, #232]	@ (80087b4 <VarToString+0x314>)
 80086ca:	482e      	ldr	r0, [pc, #184]	@ (8008784 <VarToString+0x2e4>)
 80086cc:	f01d fc96 	bl	8025ffc <siprintf>
       				break;
 80086d0:	bf00      	nop
    			}
    		}
    	break;
 80086d2:	e25e      	b.n	8008b92 <VarToString+0x6f2>

    	case VAR_TYPE_TIME_FMT:
    		sprintf(tempbuf, "%s", ((*(unsigned int*)VarCmdTable[idx].var) == 0) ? "12" : "24");
 80086d4:	4929      	ldr	r1, [pc, #164]	@ (800877c <VarToString+0x2dc>)
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	3304      	adds	r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <VarToString+0x250>
 80086ec:	4b32      	ldr	r3, [pc, #200]	@ (80087b8 <VarToString+0x318>)
 80086ee:	e000      	b.n	80086f2 <VarToString+0x252>
 80086f0:	4b32      	ldr	r3, [pc, #200]	@ (80087bc <VarToString+0x31c>)
 80086f2:	461a      	mov	r2, r3
 80086f4:	4932      	ldr	r1, [pc, #200]	@ (80087c0 <VarToString+0x320>)
 80086f6:	4823      	ldr	r0, [pc, #140]	@ (8008784 <VarToString+0x2e4>)
 80086f8:	f01d fc80 	bl	8025ffc <siprintf>
    	break;
 80086fc:	e24a      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_DATE_FMT:
    		switch((*(unsigned int*)VarCmdTable[idx].var))
 80086fe:	491f      	ldr	r1, [pc, #124]	@ (800877c <VarToString+0x2dc>)
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3304      	adds	r3, #4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3b01      	subs	r3, #1
 8008714:	2b04      	cmp	r3, #4
 8008716:	d80d      	bhi.n	8008734 <VarToString+0x294>
 8008718:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <VarToString+0x280>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008745 	.word	0x08008745
 8008724:	08008755 	.word	0x08008755
 8008728:	08008765 	.word	0x08008765
 800872c:	080087d5 	.word	0x080087d5
 8008730:	080087eb 	.word	0x080087eb
    		{
    			case 0:
				default:
    				strcpy(tempbuf, "M/D/Y");
 8008734:	4b13      	ldr	r3, [pc, #76]	@ (8008784 <VarToString+0x2e4>)
 8008736:	4a23      	ldr	r2, [pc, #140]	@ (80087c4 <VarToString+0x324>)
 8008738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800873c:	6018      	str	r0, [r3, #0]
 800873e:	3304      	adds	r3, #4
 8008740:	8019      	strh	r1, [r3, #0]
    			break;
 8008742:	e05d      	b.n	8008800 <VarToString+0x360>

    			case 1:
    				strcpy(tempbuf, "D/M/Y");
 8008744:	4b0f      	ldr	r3, [pc, #60]	@ (8008784 <VarToString+0x2e4>)
 8008746:	4a20      	ldr	r2, [pc, #128]	@ (80087c8 <VarToString+0x328>)
 8008748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800874c:	6018      	str	r0, [r3, #0]
 800874e:	3304      	adds	r3, #4
 8008750:	8019      	strh	r1, [r3, #0]
    			break;
 8008752:	e055      	b.n	8008800 <VarToString+0x360>

    			case 2:
    				strcpy(tempbuf, "Y/M/D");
 8008754:	4b0b      	ldr	r3, [pc, #44]	@ (8008784 <VarToString+0x2e4>)
 8008756:	4a1d      	ldr	r2, [pc, #116]	@ (80087cc <VarToString+0x32c>)
 8008758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800875c:	6018      	str	r0, [r3, #0]
 800875e:	3304      	adds	r3, #4
 8008760:	8019      	strh	r1, [r3, #0]
    			break;
 8008762:	e04d      	b.n	8008800 <VarToString+0x360>

    			case 3:
    				strcpy(tempbuf, "MM/D/Y");
 8008764:	4b07      	ldr	r3, [pc, #28]	@ (8008784 <VarToString+0x2e4>)
 8008766:	4a1a      	ldr	r2, [pc, #104]	@ (80087d0 <VarToString+0x330>)
 8008768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800876c:	6018      	str	r0, [r3, #0]
 800876e:	3304      	adds	r3, #4
 8008770:	8019      	strh	r1, [r3, #0]
 8008772:	3302      	adds	r3, #2
 8008774:	0c0a      	lsrs	r2, r1, #16
 8008776:	701a      	strb	r2, [r3, #0]
    			break;
 8008778:	e042      	b.n	8008800 <VarToString+0x360>
 800877a:	bf00      	nop
 800877c:	0802bb88 	.word	0x0802bb88
 8008780:	080272a4 	.word	0x080272a4
 8008784:	2001b5f4 	.word	0x2001b5f4
 8008788:	2001c1b4 	.word	0x2001c1b4
 800878c:	2001b564 	.word	0x2001b564
 8008790:	080272a8 	.word	0x080272a8
 8008794:	080272bc 	.word	0x080272bc
 8008798:	080272d0 	.word	0x080272d0
 800879c:	2001b568 	.word	0x2001b568
 80087a0:	080272e0 	.word	0x080272e0
 80087a4:	080272f0 	.word	0x080272f0
 80087a8:	20000238 	.word	0x20000238
 80087ac:	08027300 	.word	0x08027300
 80087b0:	08027310 	.word	0x08027310
 80087b4:	0802731c 	.word	0x0802731c
 80087b8:	08026fdc 	.word	0x08026fdc
 80087bc:	0802732c 	.word	0x0802732c
 80087c0:	08027330 	.word	0x08027330
 80087c4:	08026ff8 	.word	0x08026ff8
 80087c8:	08027334 	.word	0x08027334
 80087cc:	0802733c 	.word	0x0802733c
 80087d0:	08027344 	.word	0x08027344

    			case 4:
    				strcpy(tempbuf, "D/MM/Y");
 80087d4:	4ba0      	ldr	r3, [pc, #640]	@ (8008a58 <VarToString+0x5b8>)
 80087d6:	4aa1      	ldr	r2, [pc, #644]	@ (8008a5c <VarToString+0x5bc>)
 80087d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087dc:	6018      	str	r0, [r3, #0]
 80087de:	3304      	adds	r3, #4
 80087e0:	8019      	strh	r1, [r3, #0]
 80087e2:	3302      	adds	r3, #2
 80087e4:	0c0a      	lsrs	r2, r1, #16
 80087e6:	701a      	strb	r2, [r3, #0]
    			break;
 80087e8:	e00a      	b.n	8008800 <VarToString+0x360>

    			case 5:
    				strcpy(tempbuf, "Y/MM/D");
 80087ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008a58 <VarToString+0x5b8>)
 80087ec:	4a9c      	ldr	r2, [pc, #624]	@ (8008a60 <VarToString+0x5c0>)
 80087ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087f2:	6018      	str	r0, [r3, #0]
 80087f4:	3304      	adds	r3, #4
 80087f6:	8019      	strh	r1, [r3, #0]
 80087f8:	3302      	adds	r3, #2
 80087fa:	0c0a      	lsrs	r2, r1, #16
 80087fc:	701a      	strb	r2, [r3, #0]
    			break;
 80087fe:	bf00      	nop
    		}
    	break;
 8008800:	e1c8      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_VER:
    		t1 = *(unsigned int*)(VarCmdTable[idx].var);
 8008802:	4998      	ldr	r1, [pc, #608]	@ (8008a64 <VarToString+0x5c4>)
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3304      	adds	r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	633b      	str	r3, [r7, #48]	@ 0x30
    		t3 = t1 % 100;
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	4a93      	ldr	r2, [pc, #588]	@ (8008a68 <VarToString+0x5c8>)
 800881c:	fba2 1203 	umull	r1, r2, r2, r3
 8008820:	0952      	lsrs	r2, r2, #5
 8008822:	2164      	movs	r1, #100	@ 0x64
 8008824:	fb01 f202 	mul.w	r2, r1, r2
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    		t1 -= t3;
 800882c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800882e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	633b      	str	r3, [r7, #48]	@ 0x30
    		t1 /= 100;
 8008834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008836:	4a8c      	ldr	r2, [pc, #560]	@ (8008a68 <VarToString+0x5c8>)
 8008838:	fba2 2303 	umull	r2, r3, r2, r3
 800883c:	095b      	lsrs	r3, r3, #5
 800883e:	633b      	str	r3, [r7, #48]	@ 0x30
    		t2 = t1 % 100;
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	4a89      	ldr	r2, [pc, #548]	@ (8008a68 <VarToString+0x5c8>)
 8008844:	fba2 1203 	umull	r1, r2, r2, r3
 8008848:	0952      	lsrs	r2, r2, #5
 800884a:	2164      	movs	r1, #100	@ 0x64
 800884c:	fb01 f202 	mul.w	r2, r1, r2
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	62bb      	str	r3, [r7, #40]	@ 0x28
    		t1 -= t2;
 8008854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	633b      	str	r3, [r7, #48]	@ 0x30
    		t1 /= 100;
 800885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885e:	4a82      	ldr	r2, [pc, #520]	@ (8008a68 <VarToString+0x5c8>)
 8008860:	fba2 2303 	umull	r2, r3, r2, r3
 8008864:	095b      	lsrs	r3, r3, #5
 8008866:	633b      	str	r3, [r7, #48]	@ 0x30
    		sprintf(tempbuf, "%u.%02u.%02u", t1, t2, t3);
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008870:	497e      	ldr	r1, [pc, #504]	@ (8008a6c <VarToString+0x5cc>)
 8008872:	4879      	ldr	r0, [pc, #484]	@ (8008a58 <VarToString+0x5b8>)
 8008874:	f01d fbc2 	bl	8025ffc <siprintf>
    	break;
 8008878:	e18c      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_ON_OFF:
    		sprintf(tempbuf, "%s", ((*(unsigned int*)VarCmdTable[idx].var) == 0) ? "off" : "on");
 800887a:	497a      	ldr	r1, [pc, #488]	@ (8008a64 <VarToString+0x5c4>)
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	3304      	adds	r3, #4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <VarToString+0x3f6>
 8008892:	4b77      	ldr	r3, [pc, #476]	@ (8008a70 <VarToString+0x5d0>)
 8008894:	e000      	b.n	8008898 <VarToString+0x3f8>
 8008896:	4b77      	ldr	r3, [pc, #476]	@ (8008a74 <VarToString+0x5d4>)
 8008898:	461a      	mov	r2, r3
 800889a:	4977      	ldr	r1, [pc, #476]	@ (8008a78 <VarToString+0x5d8>)
 800889c:	486e      	ldr	r0, [pc, #440]	@ (8008a58 <VarToString+0x5b8>)
 800889e:	f01d fbad 	bl	8025ffc <siprintf>
    	break;
 80088a2:	e177      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_PORT:
    		t1 = *(unsigned int*)(VarCmdTable[idx].var);
 80088a4:	496f      	ldr	r1, [pc, #444]	@ (8008a64 <VarToString+0x5c4>)
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	3304      	adds	r3, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	633b      	str	r3, [r7, #48]	@ 0x30
    		if(t1 == 1)
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d103      	bne.n	80088c8 <VarToString+0x428>
    		{
				strcpy(tempbuf, "nce");
 80088c0:	4b65      	ldr	r3, [pc, #404]	@ (8008a58 <VarToString+0x5b8>)
 80088c2:	4a6e      	ldr	r2, [pc, #440]	@ (8008a7c <VarToString+0x5dc>)
 80088c4:	601a      	str	r2, [r3, #0]
    		}
    		else
    		{
				strcpy(tempbuf, "off");
    		}
    	break;
 80088c6:	e165      	b.n	8008b94 <VarToString+0x6f4>
    		else if(t1 == 2)
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d105      	bne.n	80088da <VarToString+0x43a>
				strcpy(tempbuf, "xpressnet");
 80088ce:	4b62      	ldr	r3, [pc, #392]	@ (8008a58 <VarToString+0x5b8>)
 80088d0:	4a6b      	ldr	r2, [pc, #428]	@ (8008a80 <VarToString+0x5e0>)
 80088d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80088d4:	c303      	stmia	r3!, {r0, r1}
 80088d6:	801a      	strh	r2, [r3, #0]
    	break;
 80088d8:	e15c      	b.n	8008b94 <VarToString+0x6f4>
				strcpy(tempbuf, "off");
 80088da:	4b5f      	ldr	r3, [pc, #380]	@ (8008a58 <VarToString+0x5b8>)
 80088dc:	4a69      	ldr	r2, [pc, #420]	@ (8008a84 <VarToString+0x5e4>)
 80088de:	601a      	str	r2, [r3, #0]
    	break;
 80088e0:	e158      	b.n	8008b94 <VarToString+0x6f4>
    		}
       	break;
#endif

    	case VAR_TYPE_IP:
    		t1 = *(unsigned int*)(VarCmdTable[idx].var);
 80088e2:	4960      	ldr	r1, [pc, #384]	@ (8008a64 <VarToString+0x5c4>)
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	440b      	add	r3, r1
 80088f0:	3304      	adds	r3, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	633b      	str	r3, [r7, #48]	@ 0x30
    		ip_addr[0] = t1 >> 24;
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	0e1b      	lsrs	r3, r3, #24
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	733b      	strb	r3, [r7, #12]
    		ip_addr[1] = (t1 >> 16) & 0xff;
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	0c1b      	lsrs	r3, r3, #16
 8008904:	b2db      	uxtb	r3, r3
 8008906:	737b      	strb	r3, [r7, #13]
    		ip_addr[2] = (t1 >> 8) & 0xff;
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	0a1b      	lsrs	r3, r3, #8
 800890c:	b2db      	uxtb	r3, r3
 800890e:	73bb      	strb	r3, [r7, #14]
    		ip_addr[3] = t1 & 0xff;
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	b2db      	uxtb	r3, r3
 8008914:	73fb      	strb	r3, [r7, #15]
    		//sprintf(tempbuf, "%02X.%02X.%02X.%02X", ip_addr[0], ip_addr[1], ip_addr[2], ip_addr[3]);
    		sprintf(tempbuf, "%03d.%03d.%03d.%03d", ip_addr[3], ip_addr[2], ip_addr[1], ip_addr[0]);
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	4619      	mov	r1, r3
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	4618      	mov	r0, r3
 800891e:	7b7b      	ldrb	r3, [r7, #13]
 8008920:	7b3a      	ldrb	r2, [r7, #12]
 8008922:	9201      	str	r2, [sp, #4]
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	4603      	mov	r3, r0
 8008928:	460a      	mov	r2, r1
 800892a:	4957      	ldr	r1, [pc, #348]	@ (8008a88 <VarToString+0x5e8>)
 800892c:	484a      	ldr	r0, [pc, #296]	@ (8008a58 <VarToString+0x5b8>)
 800892e:	f01d fb65 	bl	8025ffc <siprintf>
       	break;
 8008932:	e12f      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_STRING:
    		strcpy(tempbuf, (char*)VarCmdTable[idx].var);
 8008934:	494b      	ldr	r1, [pc, #300]	@ (8008a64 <VarToString+0x5c4>)
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	3304      	adds	r3, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	4843      	ldr	r0, [pc, #268]	@ (8008a58 <VarToString+0x5b8>)
 800894a:	f01d fd8a 	bl	8026462 <strcpy>
		break;
 800894e:	e121      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_RLED:
    		sprintf(tempbuf, "%08x", (int)GetRedLed());
 8008950:	f7fe fc54 	bl	80071fc <GetRedLed>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	494c      	ldr	r1, [pc, #304]	@ (8008a8c <VarToString+0x5ec>)
 800895a:	483f      	ldr	r0, [pc, #252]	@ (8008a58 <VarToString+0x5b8>)
 800895c:	f01d fb4e 	bl	8025ffc <siprintf>
   		break;
 8008960:	e118      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_YLED:
    		sprintf(tempbuf, "%08x", (int)GetYellowLed());
 8008962:	f7fe fc57 	bl	8007214 <GetYellowLed>
 8008966:	4603      	mov	r3, r0
 8008968:	461a      	mov	r2, r3
 800896a:	4948      	ldr	r1, [pc, #288]	@ (8008a8c <VarToString+0x5ec>)
 800896c:	483a      	ldr	r0, [pc, #232]	@ (8008a58 <VarToString+0x5b8>)
 800896e:	f01d fb45 	bl	8025ffc <siprintf>
   		break;
 8008972:	e10f      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_GLED:
    		sprintf(tempbuf, "%08x", (int)GetGreenLed());
 8008974:	f7fe fc5a 	bl	800722c <GetGreenLed>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	4943      	ldr	r1, [pc, #268]	@ (8008a8c <VarToString+0x5ec>)
 800897e:	4836      	ldr	r0, [pc, #216]	@ (8008a58 <VarToString+0x5b8>)
 8008980:	f01d fb3c 	bl	8025ffc <siprintf>
   		break;
 8008984:	e106      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_INPUTS:
    		//sprintf(tempbuf, "%x", (int)GetInputs());

    		if(GetInput1())
 8008986:	f7fe fb85 	bl	8007094 <GetInput1>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <VarToString+0x500>
    		{
    			strcpy(tempbuf, "1=ON ");
 8008990:	4b31      	ldr	r3, [pc, #196]	@ (8008a58 <VarToString+0x5b8>)
 8008992:	4a3f      	ldr	r2, [pc, #252]	@ (8008a90 <VarToString+0x5f0>)
 8008994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008998:	6018      	str	r0, [r3, #0]
 800899a:	3304      	adds	r3, #4
 800899c:	8019      	strh	r1, [r3, #0]
 800899e:	e009      	b.n	80089b4 <VarToString+0x514>
    		}
    		else
    		{
    			strcpy(tempbuf, "1=OFF ");
 80089a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008a58 <VarToString+0x5b8>)
 80089a2:	4a3c      	ldr	r2, [pc, #240]	@ (8008a94 <VarToString+0x5f4>)
 80089a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089a8:	6018      	str	r0, [r3, #0]
 80089aa:	3304      	adds	r3, #4
 80089ac:	8019      	strh	r1, [r3, #0]
 80089ae:	3302      	adds	r3, #2
 80089b0:	0c0a      	lsrs	r2, r1, #16
 80089b2:	701a      	strb	r2, [r3, #0]
    		}

    		if(GetInput2())
 80089b4:	f7fe fb80 	bl	80070b8 <GetInput2>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00c      	beq.n	80089d8 <VarToString+0x538>
    		{
    			strcat(tempbuf, "2=ON ");
 80089be:	4826      	ldr	r0, [pc, #152]	@ (8008a58 <VarToString+0x5b8>)
 80089c0:	f7f7 fc70 	bl	80002a4 <strlen>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	4b23      	ldr	r3, [pc, #140]	@ (8008a58 <VarToString+0x5b8>)
 80089ca:	4413      	add	r3, r2
 80089cc:	4a32      	ldr	r2, [pc, #200]	@ (8008a98 <VarToString+0x5f8>)
 80089ce:	6810      	ldr	r0, [r2, #0]
 80089d0:	6018      	str	r0, [r3, #0]
 80089d2:	8892      	ldrh	r2, [r2, #4]
 80089d4:	809a      	strh	r2, [r3, #4]
 80089d6:	e00d      	b.n	80089f4 <VarToString+0x554>
    		}
    		else
    		{
    			strcat(tempbuf, "2=OFF ");
 80089d8:	481f      	ldr	r0, [pc, #124]	@ (8008a58 <VarToString+0x5b8>)
 80089da:	f7f7 fc63 	bl	80002a4 <strlen>
 80089de:	4603      	mov	r3, r0
 80089e0:	461a      	mov	r2, r3
 80089e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a58 <VarToString+0x5b8>)
 80089e4:	4413      	add	r3, r2
 80089e6:	4a2d      	ldr	r2, [pc, #180]	@ (8008a9c <VarToString+0x5fc>)
 80089e8:	6810      	ldr	r0, [r2, #0]
 80089ea:	6018      	str	r0, [r3, #0]
 80089ec:	8891      	ldrh	r1, [r2, #4]
 80089ee:	7992      	ldrb	r2, [r2, #6]
 80089f0:	8099      	strh	r1, [r3, #4]
 80089f2:	719a      	strb	r2, [r3, #6]
    		}

    		if(GetInput3())
 80089f4:	f7fe fb72 	bl	80070dc <GetInput3>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00c      	beq.n	8008a18 <VarToString+0x578>
    		{
    			strcat(tempbuf, "3=ON ");
 80089fe:	4816      	ldr	r0, [pc, #88]	@ (8008a58 <VarToString+0x5b8>)
 8008a00:	f7f7 fc50 	bl	80002a4 <strlen>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	4b13      	ldr	r3, [pc, #76]	@ (8008a58 <VarToString+0x5b8>)
 8008a0a:	4413      	add	r3, r2
 8008a0c:	4a24      	ldr	r2, [pc, #144]	@ (8008aa0 <VarToString+0x600>)
 8008a0e:	6810      	ldr	r0, [r2, #0]
 8008a10:	6018      	str	r0, [r3, #0]
 8008a12:	8892      	ldrh	r2, [r2, #4]
 8008a14:	809a      	strh	r2, [r3, #4]
 8008a16:	e00d      	b.n	8008a34 <VarToString+0x594>
    		}
    		else
    		{
    			strcat(tempbuf, "3=OFF ");
 8008a18:	480f      	ldr	r0, [pc, #60]	@ (8008a58 <VarToString+0x5b8>)
 8008a1a:	f7f7 fc43 	bl	80002a4 <strlen>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b0d      	ldr	r3, [pc, #52]	@ (8008a58 <VarToString+0x5b8>)
 8008a24:	4413      	add	r3, r2
 8008a26:	4a1f      	ldr	r2, [pc, #124]	@ (8008aa4 <VarToString+0x604>)
 8008a28:	6810      	ldr	r0, [r2, #0]
 8008a2a:	6018      	str	r0, [r3, #0]
 8008a2c:	8891      	ldrh	r1, [r2, #4]
 8008a2e:	7992      	ldrb	r2, [r2, #6]
 8008a30:	8099      	strh	r1, [r3, #4]
 8008a32:	719a      	strb	r2, [r3, #6]
    		}

    		if(GetInput4())
 8008a34:	f7fe fb64 	bl	8007100 <GetInput4>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d036      	beq.n	8008aac <VarToString+0x60c>
    		{
    			strcat(tempbuf, "4=ON ");
 8008a3e:	4806      	ldr	r0, [pc, #24]	@ (8008a58 <VarToString+0x5b8>)
 8008a40:	f7f7 fc30 	bl	80002a4 <strlen>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	4b03      	ldr	r3, [pc, #12]	@ (8008a58 <VarToString+0x5b8>)
 8008a4a:	4413      	add	r3, r2
 8008a4c:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <VarToString+0x608>)
 8008a4e:	6810      	ldr	r0, [r2, #0]
 8008a50:	6018      	str	r0, [r3, #0]
 8008a52:	8892      	ldrh	r2, [r2, #4]
 8008a54:	809a      	strh	r2, [r3, #4]
 8008a56:	e037      	b.n	8008ac8 <VarToString+0x628>
 8008a58:	2001b5f4 	.word	0x2001b5f4
 8008a5c:	0802734c 	.word	0x0802734c
 8008a60:	08027354 	.word	0x08027354
 8008a64:	0802bb88 	.word	0x0802bb88
 8008a68:	51eb851f 	.word	0x51eb851f
 8008a6c:	0802735c 	.word	0x0802735c
 8008a70:	08027094 	.word	0x08027094
 8008a74:	0802736c 	.word	0x0802736c
 8008a78:	08027330 	.word	0x08027330
 8008a7c:	0065636e 	.word	0x0065636e
 8008a80:	08027370 	.word	0x08027370
 8008a84:	0066666f 	.word	0x0066666f
 8008a88:	0802737c 	.word	0x0802737c
 8008a8c:	08027390 	.word	0x08027390
 8008a90:	08027398 	.word	0x08027398
 8008a94:	080273a0 	.word	0x080273a0
 8008a98:	080273a8 	.word	0x080273a8
 8008a9c:	080273b0 	.word	0x080273b0
 8008aa0:	080273b8 	.word	0x080273b8
 8008aa4:	080273c0 	.word	0x080273c0
 8008aa8:	080273c8 	.word	0x080273c8
    		}
    		else
    		{
    			strcat(tempbuf, "4=OFF ");
 8008aac:	483c      	ldr	r0, [pc, #240]	@ (8008ba0 <VarToString+0x700>)
 8008aae:	f7f7 fbf9 	bl	80002a4 <strlen>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8008ba0 <VarToString+0x700>)
 8008ab8:	4413      	add	r3, r2
 8008aba:	4a3a      	ldr	r2, [pc, #232]	@ (8008ba4 <VarToString+0x704>)
 8008abc:	6810      	ldr	r0, [r2, #0]
 8008abe:	6018      	str	r0, [r3, #0]
 8008ac0:	8891      	ldrh	r1, [r2, #4]
 8008ac2:	7992      	ldrb	r2, [r2, #6]
 8008ac4:	8099      	strh	r1, [r3, #4]
 8008ac6:	719a      	strb	r2, [r3, #6]
    		}

    		if(GetInput5())
 8008ac8:	f7fe fb2c 	bl	8007124 <GetInput5>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <VarToString+0x64c>
    		{
    			strcat(tempbuf, "5=ON ");
 8008ad2:	4833      	ldr	r0, [pc, #204]	@ (8008ba0 <VarToString+0x700>)
 8008ad4:	f7f7 fbe6 	bl	80002a4 <strlen>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	461a      	mov	r2, r3
 8008adc:	4b30      	ldr	r3, [pc, #192]	@ (8008ba0 <VarToString+0x700>)
 8008ade:	4413      	add	r3, r2
 8008ae0:	4a31      	ldr	r2, [pc, #196]	@ (8008ba8 <VarToString+0x708>)
 8008ae2:	6810      	ldr	r0, [r2, #0]
 8008ae4:	6018      	str	r0, [r3, #0]
 8008ae6:	8892      	ldrh	r2, [r2, #4]
 8008ae8:	809a      	strh	r2, [r3, #4]
 8008aea:	e00d      	b.n	8008b08 <VarToString+0x668>
    		}
    		else
    		{
    			strcat(tempbuf, "5=OFF ");
 8008aec:	482c      	ldr	r0, [pc, #176]	@ (8008ba0 <VarToString+0x700>)
 8008aee:	f7f7 fbd9 	bl	80002a4 <strlen>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba0 <VarToString+0x700>)
 8008af8:	4413      	add	r3, r2
 8008afa:	4a2c      	ldr	r2, [pc, #176]	@ (8008bac <VarToString+0x70c>)
 8008afc:	6810      	ldr	r0, [r2, #0]
 8008afe:	6018      	str	r0, [r3, #0]
 8008b00:	8891      	ldrh	r1, [r2, #4]
 8008b02:	7992      	ldrb	r2, [r2, #6]
 8008b04:	8099      	strh	r1, [r3, #4]
 8008b06:	719a      	strb	r2, [r3, #6]
    		}

    		if(GetInput6())
 8008b08:	f7fe fb1e 	bl	8007148 <GetInput6>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <VarToString+0x688>
    		{
    			strcat(tempbuf, "Ack");
 8008b12:	4823      	ldr	r0, [pc, #140]	@ (8008ba0 <VarToString+0x700>)
 8008b14:	f7f7 fbc6 	bl	80002a4 <strlen>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	4b20      	ldr	r3, [pc, #128]	@ (8008ba0 <VarToString+0x700>)
 8008b1e:	4413      	add	r3, r2
 8008b20:	4a23      	ldr	r2, [pc, #140]	@ (8008bb0 <VarToString+0x710>)
 8008b22:	6810      	ldr	r0, [r2, #0]
 8008b24:	6018      	str	r0, [r3, #0]
    		}
    		else
    		{
    			strcat(tempbuf, "Nack");
    		}
    		break;
 8008b26:	e035      	b.n	8008b94 <VarToString+0x6f4>
    			strcat(tempbuf, "Nack");
 8008b28:	481d      	ldr	r0, [pc, #116]	@ (8008ba0 <VarToString+0x700>)
 8008b2a:	f7f7 fbbb 	bl	80002a4 <strlen>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba0 <VarToString+0x700>)
 8008b34:	4413      	add	r3, r2
 8008b36:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb4 <VarToString+0x714>)
 8008b38:	6810      	ldr	r0, [r2, #0]
 8008b3a:	6018      	str	r0, [r3, #0]
 8008b3c:	7912      	ldrb	r2, [r2, #4]
 8008b3e:	711a      	strb	r2, [r3, #4]
    		break;
 8008b40:	e028      	b.n	8008b94 <VarToString+0x6f4>
    	case VAR_TYPE_LOOP_CNT:
    		lc = GetLoopCount();
 8008b42:	f01c fb8d 	bl	8025260 <GetLoopCount>
 8008b46:	6378      	str	r0, [r7, #52]	@ 0x34
    		if(lc == 0xffff)
 8008b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d104      	bne.n	8008b5c <VarToString+0x6bc>
    		{
    			sprintf(tempbuf, "None");
 8008b52:	4919      	ldr	r1, [pc, #100]	@ (8008bb8 <VarToString+0x718>)
 8008b54:	4812      	ldr	r0, [pc, #72]	@ (8008ba0 <VarToString+0x700>)
 8008b56:	f01d fa51 	bl	8025ffc <siprintf>
    		}
    		else
    		{
    			sprintf(tempbuf, "%u", lc);
    		}
    	break;
 8008b5a:	e01b      	b.n	8008b94 <VarToString+0x6f4>
    			sprintf(tempbuf, "%u", lc);
 8008b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b5e:	4917      	ldr	r1, [pc, #92]	@ (8008bbc <VarToString+0x71c>)
 8008b60:	480f      	ldr	r0, [pc, #60]	@ (8008ba0 <VarToString+0x700>)
 8008b62:	f01d fa4b 	bl	8025ffc <siprintf>
    	break;
 8008b66:	e015      	b.n	8008b94 <VarToString+0x6f4>

    	case VAR_TYPE_THEME:
    		sprintf(tempbuf, "%s", ((*(unsigned int*)VarCmdTable[idx].var) == 0) ? "dark" : "light");
 8008b68:	4915      	ldr	r1, [pc, #84]	@ (8008bc0 <VarToString+0x720>)
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	3304      	adds	r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <VarToString+0x6e4>
 8008b80:	4b10      	ldr	r3, [pc, #64]	@ (8008bc4 <VarToString+0x724>)
 8008b82:	e000      	b.n	8008b86 <VarToString+0x6e6>
 8008b84:	4b10      	ldr	r3, [pc, #64]	@ (8008bc8 <VarToString+0x728>)
 8008b86:	461a      	mov	r2, r3
 8008b88:	4910      	ldr	r1, [pc, #64]	@ (8008bcc <VarToString+0x72c>)
 8008b8a:	4805      	ldr	r0, [pc, #20]	@ (8008ba0 <VarToString+0x700>)
 8008b8c:	f01d fa36 	bl	8025ffc <siprintf>
    	break;
 8008b90:	e000      	b.n	8008b94 <VarToString+0x6f4>
    	break;
 8008b92:	bf00      	nop
    }
    return tempbuf;
 8008b94:	4b02      	ldr	r3, [pc, #8]	@ (8008ba0 <VarToString+0x700>)
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3738      	adds	r7, #56	@ 0x38
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2001b5f4 	.word	0x2001b5f4
 8008ba4:	080273d0 	.word	0x080273d0
 8008ba8:	080273d8 	.word	0x080273d8
 8008bac:	080273e0 	.word	0x080273e0
 8008bb0:	080273e8 	.word	0x080273e8
 8008bb4:	080273ec 	.word	0x080273ec
 8008bb8:	080273f4 	.word	0x080273f4
 8008bbc:	080272a4 	.word	0x080272a4
 8008bc0:	0802bb88 	.word	0x0802bb88
 8008bc4:	080273fc 	.word	0x080273fc
 8008bc8:	08027404 	.word	0x08027404
 8008bcc:	08027330 	.word	0x08027330

08008bd0 <ShowVariables>:
*
* @return	None
*
*********************************************************************/
void ShowVariables(uint8_t bPort)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
	//uint32_t temp;
	//char TempStr[32];
	char* pStr;


    ShNL(bPort);
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f018 fd4b 	bl	8021678 <ShNL>
	for(i = 0; i < NUM_VARIABLES; i++)
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e031      	b.n	8008c4c <ShowVariables+0x7c>
	{
		if(!(VarCmdTable[i].type & VAR_TYPE_HIDDEN))
 8008be8:	491c      	ldr	r1, [pc, #112]	@ (8008c5c <ShowVariables+0x8c>)
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d121      	bne.n	8008c46 <ShowVariables+0x76>
		{
			ShFieldOut(bPort, (char*)VarCmdTable[i].szCmdString, 0);
 8008c02:	4916      	ldr	r1, [pc, #88]	@ (8008c5c <ShowVariables+0x8c>)
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	6819      	ldr	r1, [r3, #0]
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	2200      	movs	r2, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f018 fcce 	bl	80215b8 <ShFieldOut>
			ShFieldOut(bPort, " = ", 0);
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	490f      	ldr	r1, [pc, #60]	@ (8008c60 <ShowVariables+0x90>)
 8008c22:	4618      	mov	r0, r3
 8008c24:	f018 fcc8 	bl	80215b8 <ShFieldOut>

			pStr = VarToString(i);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff fc38 	bl	80084a0 <VarToString>
 8008c30:	60b8      	str	r0, [r7, #8]
			ShFieldOut(bPort, pStr, 0);
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	2200      	movs	r2, #0
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f018 fcbd 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f018 fd19 	bl	8021678 <ShNL>
	for(i = 0; i < NUM_VARIABLES; i++)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b13      	cmp	r3, #19
 8008c50:	ddca      	ble.n	8008be8 <ShowVariables+0x18>
		}
	}
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	0802bb88 	.word	0x0802bb88
 8008c60:	0802740c 	.word	0x0802740c

08008c64 <GetNumVariables>:
*
* @return	number
*
*********************************************************************/
int GetNumVariables(void)
{
 8008c64:	b480      	push	{r7}
 8008c66:	af00      	add	r7, sp, #0

	return NUM_VARIABLES;
 8008c68:	2314      	movs	r3, #20
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <GetVariableName>:
*
* @return	char* name
*
*********************************************************************/
char* GetVariableName(uint8_t idx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	71fb      	strb	r3, [r7, #7]

	return (char*)VarCmdTable[idx].szCmdString;
 8008c7e:	79fa      	ldrb	r2, [r7, #7]
 8008c80:	4906      	ldr	r1, [pc, #24]	@ (8008c9c <GetVariableName+0x28>)
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	681b      	ldr	r3, [r3, #0]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	0802bb88 	.word	0x0802bb88

08008ca0 <GetVariableHelp>:
*
* @return	char* help string
*
*********************************************************************/
char* GetVariableHelp(uint8_t idx)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	71fb      	strb	r3, [r7, #7]

	return (char*)VarCmdTable[idx].pszHelp;
 8008caa:	79fa      	ldrb	r2, [r7, #7]
 8008cac:	4906      	ldr	r1, [pc, #24]	@ (8008cc8 <GetVariableHelp+0x28>)
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3310      	adds	r3, #16
 8008cba:	681b      	ldr	r3, [r3, #0]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	0802bb88 	.word	0x0802bb88

08008ccc <IsVariable>:
*
* @return	idx - index of the variable table
*
*********************************************************************/
int IsVariable(char* pBuffer)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	int i;

	for(i = 0; i < NUM_VARIABLES; i++)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e013      	b.n	8008d02 <IsVariable+0x36>
	{
		if(strcmp(pBuffer, VarCmdTable[i].szCmdString) == 0)
 8008cda:	490e      	ldr	r1, [pc, #56]	@ (8008d14 <IsVariable+0x48>)
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7f7 facf 	bl	8000290 <strcmp>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <IsVariable+0x30>
		{
			// found command string
			return 1;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e006      	b.n	8008d0a <IsVariable+0x3e>
	for(i = 0; i < NUM_VARIABLES; i++)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b13      	cmp	r3, #19
 8008d06:	dde8      	ble.n	8008cda <IsVariable+0xe>
		}
	}
	return 0;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	0802bb88 	.word	0x0802bb88

08008d18 <IsVariableVisible>:
*
* @return	true if visible
*
*********************************************************************/
int IsVariableVisible(uint8_t idx)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	71fb      	strb	r3, [r7, #7]

	return (int)!(VarCmdTable[idx].type & VAR_TYPE_HIDDEN);
 8008d22:	79fa      	ldrb	r2, [r7, #7]
 8008d24:	490a      	ldr	r1, [pc, #40]	@ (8008d50 <IsVariableVisible+0x38>)
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	3308      	adds	r3, #8
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bf0c      	ite	eq
 8008d3c:	2301      	moveq	r3, #1
 8008d3e:	2300      	movne	r3, #0
 8008d40:	b2db      	uxtb	r3, r3
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	0802bb88 	.word	0x0802bb88

08008d54 <FindVariable>:
*
* @return	idx - index of the variable table, -1 if not found
*
*********************************************************************/
int FindVariable(char* szObject)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	int i;

	for(i = 0; i < NUM_VARIABLES; i++)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e013      	b.n	8008d8a <FindVariable+0x36>
	{
		if(strcmp(szObject, VarCmdTable[i].szCmdString) == 0)
 8008d62:	490e      	ldr	r1, [pc, #56]	@ (8008d9c <FindVariable+0x48>)
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7f7 fa8b 	bl	8000290 <strcmp>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <FindVariable+0x30>
		{
			// found command string
			return i;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	e007      	b.n	8008d94 <FindVariable+0x40>
	for(i = 0; i < NUM_VARIABLES; i++)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3301      	adds	r3, #1
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b13      	cmp	r3, #19
 8008d8e:	dde8      	ble.n	8008d62 <FindVariable+0xe>
		}
	}
	return -1;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	0802bb88 	.word	0x0802bb88

08008da0 <GetVariable>:
*
* @return	None
*
*********************************************************************/
void GetVariable(const char* szObject, char* pStrValue, int max_len)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
	int idx;
	char* pStr;

	idx = FindVariable((char*)szObject);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ffd1 	bl	8008d54 <FindVariable>
 8008db2:	6178      	str	r0, [r7, #20]

	if(idx != -1)
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dba:	d009      	beq.n	8008dd0 <GetVariable+0x30>
	{
		pStr = VarToString(idx);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fb6e 	bl	80084a0 <VarToString>
 8008dc4:	6138      	str	r0, [r7, #16]
		strcpy(pStrValue , pStr);
 8008dc6:	6939      	ldr	r1, [r7, #16]
 8008dc8:	68b8      	ldr	r0, [r7, #8]
 8008dca:	f01d fb4a 	bl	8026462 <strcpy>
	}
	else
	{
		strcpy(pStrValue, "");
	}
}
 8008dce:	e002      	b.n	8008dd6 <GetVariable+0x36>
		strcpy(pStrValue, "");
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	701a      	strb	r2, [r3, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <GetVariableValue>:
*
* @return	value
*
*********************************************************************/
uint32_t GetVariableValue(int idx)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

    switch(VarCmdTable[idx].type & VAR_TYPE_MASK)
 8008de8:	4917      	ldr	r1, [pc, #92]	@ (8008e48 <GetVariableValue+0x68>)
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	3308      	adds	r3, #8
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dfe:	2b15      	cmp	r3, #21
 8008e00:	bf8c      	ite	hi
 8008e02:	2201      	movhi	r2, #1
 8008e04:	2200      	movls	r2, #0
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	2a00      	cmp	r2, #0
 8008e0a:	d116      	bne.n	8008e3a <GetVariableValue+0x5a>
 8008e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8008e4c <GetVariableValue+0x6c>)
 8008e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bf14      	ite	ne
 8008e1a:	2301      	movne	r3, #1
 8008e1c:	2300      	moveq	r3, #0
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <GetVariableValue+0x5a>
    	case VAR_TYPE_TRACK_IDLE:
    	case VAR_TYPE_RLED:
    	case VAR_TYPE_YLED:
    	case VAR_TYPE_GLED:
    	case VAR_TYPE_INPUTS:
    		return *(unsigned int*)(VarCmdTable[idx].var);
 8008e24:	4908      	ldr	r1, [pc, #32]	@ (8008e48 <GetVariableValue+0x68>)
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	3304      	adds	r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	e000      	b.n	8008e3c <GetVariableValue+0x5c>
    	case VAR_TYPE_TIME_FMT:
    	case VAR_TYPE_DATE_FMT:
    	case VAR_TYPE_IP:
    	case VAR_TYPE_STRING:
    	default:
    		return 0;
 8008e3a:	2300      	movs	r3, #0
    	break;
    }
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	0802bb88 	.word	0x0802bb88
 8008e4c:	0030f612 	.word	0x0030f612

08008e50 <hexadecimalToDecimal>:


uint32_t hexadecimalToDecimal(const char hexVal[])
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
    int len = strlen(hexVal);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7f7 fa23 	bl	80002a4 <strlen>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	60bb      	str	r3, [r7, #8]

    // Initializing base value to 1, i.e 16^0
    uint32_t base = 1;
 8008e62:	2301      	movs	r3, #1
 8008e64:	617b      	str	r3, [r7, #20]

    uint32_t dec_val = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]

    // Extracting characters as digits from last character
    for (int i=len-1; i>=0; i--)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	e055      	b.n	8008f1e <hexadecimalToDecimal+0xce>
    {
        // if character lies in '0'-'9', converting
        // it to integral 0-9 by subtracting 48 from
        // ASCII value.
        if (hexVal[i]>='0' && hexVal[i]<='9')
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	4413      	add	r3, r2
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e7c:	d915      	bls.n	8008eaa <hexadecimalToDecimal+0x5a>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4413      	add	r3, r2
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b39      	cmp	r3, #57	@ 0x39
 8008e88:	d80f      	bhi.n	8008eaa <hexadecimalToDecimal+0x5a>
        {
            dec_val += (hexVal[i] - 48)*base;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	4413      	add	r3, r2
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	3b30      	subs	r3, #48	@ 0x30
 8008e94:	461a      	mov	r2, r3
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	fb02 f303 	mul.w	r3, r2, r3
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]

            // incrementing base by power
            base = base * 16;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e036      	b.n	8008f18 <hexadecimalToDecimal+0xc8>
        }

        // if character lies in 'A'-'F' , converting
        // it to integral 10 - 15 by subtracting 55
        // from ASCII value
        else if (hexVal[i]>='A' && hexVal[i]<='F')
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	4413      	add	r3, r2
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b40      	cmp	r3, #64	@ 0x40
 8008eb4:	d915      	bls.n	8008ee2 <hexadecimalToDecimal+0x92>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	4413      	add	r3, r2
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b46      	cmp	r3, #70	@ 0x46
 8008ec0:	d80f      	bhi.n	8008ee2 <hexadecimalToDecimal+0x92>
        {
            dec_val += (hexVal[i] - 55)*base;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	3b37      	subs	r3, #55	@ 0x37
 8008ecc:	461a      	mov	r2, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	fb02 f303 	mul.w	r3, r2, r3
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]

            // incrementing base by power
            base = base*16;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	617b      	str	r3, [r7, #20]
 8008ee0:	e01a      	b.n	8008f18 <hexadecimalToDecimal+0xc8>
        }
        // if character lies in 'a'-'f' , converting
        // it to integral 10 - 15 by subtracting 87
        // from ASCII value
        else if (hexVal[i]>='a' && hexVal[i]<='f')
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2b60      	cmp	r3, #96	@ 0x60
 8008eec:	d914      	bls.n	8008f18 <hexadecimalToDecimal+0xc8>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b66      	cmp	r3, #102	@ 0x66
 8008ef8:	d80e      	bhi.n	8008f18 <hexadecimalToDecimal+0xc8>
        {
            dec_val += (hexVal[i] - 87)*base;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4413      	add	r3, r2
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	3b57      	subs	r3, #87	@ 0x57
 8008f04:	461a      	mov	r2, r3
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]

            // incrementing base by power
            base = base*16;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	617b      	str	r3, [r7, #20]
    for (int i=len-1; i>=0; i--)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	daa6      	bge.n	8008e72 <hexadecimalToDecimal+0x22>
        }
    }

    return dec_val;
 8008f24:	693b      	ldr	r3, [r7, #16]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <GetAmPm>:
* @return	0 = am
* 			1 = pm
* 			-1 not found
*********************************************************************/
int GetAmPm(const char* ptm)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]

	while(*ptm)
 8008f36:	e016      	b.n	8008f66 <GetAmPm+0x38>
	{
		if(*ptm == 'a' || *ptm == 'A')
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b61      	cmp	r3, #97	@ 0x61
 8008f3e:	d003      	beq.n	8008f48 <GetAmPm+0x1a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b41      	cmp	r3, #65	@ 0x41
 8008f46:	d101      	bne.n	8008f4c <GetAmPm+0x1e>
		{
			return 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e012      	b.n	8008f72 <GetAmPm+0x44>
		}
		else if(*ptm == 'p' || *ptm == 'P')
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b70      	cmp	r3, #112	@ 0x70
 8008f52:	d003      	beq.n	8008f5c <GetAmPm+0x2e>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b50      	cmp	r3, #80	@ 0x50
 8008f5a:	d101      	bne.n	8008f60 <GetAmPm+0x32>
		{
			return 1;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e008      	b.n	8008f72 <GetAmPm+0x44>
		}
		ptm++;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3301      	adds	r3, #1
 8008f64:	607b      	str	r3, [r7, #4]
	while(*ptm)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e4      	bne.n	8008f38 <GetAmPm+0xa>
	}
	return -1;
 8008f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
	...

08008f80 <GetLedPattern>:
*
* @return	pattern
*
*********************************************************************/
unsigned long GetLedPattern(const char* pStrValue)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]

	if(stricmp(pStrValue, "on") == 0)
 8008f88:	491c      	ldr	r1, [pc, #112]	@ (8008ffc <GetLedPattern+0x7c>)
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f019 fdea 	bl	8022b64 <strcasecmp>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <GetLedPattern+0x1c>
	{
		return LED_ON;
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9a:	e02a      	b.n	8008ff2 <GetLedPattern+0x72>
	}
	else if(stricmp(pStrValue, "off") == 0)
 8008f9c:	4918      	ldr	r1, [pc, #96]	@ (8009000 <GetLedPattern+0x80>)
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f019 fde0 	bl	8022b64 <strcasecmp>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <GetLedPattern+0x2e>
	{
		return LED_OFF;
 8008faa:	2300      	movs	r3, #0
 8008fac:	e021      	b.n	8008ff2 <GetLedPattern+0x72>
	}
	else if(stricmp(pStrValue, "blink") == 0)
 8008fae:	4915      	ldr	r1, [pc, #84]	@ (8009004 <GetLedPattern+0x84>)
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f019 fdd7 	bl	8022b64 <strcasecmp>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d102      	bne.n	8008fc2 <GetLedPattern+0x42>
	{
		return LED_BLINK;
 8008fbc:	f04f 13ff 	mov.w	r3, #16711935	@ 0xff00ff
 8008fc0:	e017      	b.n	8008ff2 <GetLedPattern+0x72>
	}
	else if(stricmp(pStrValue, "flash") == 0)
 8008fc2:	4911      	ldr	r1, [pc, #68]	@ (8009008 <GetLedPattern+0x88>)
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f019 fdcd 	bl	8022b64 <strcasecmp>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <GetLedPattern+0x56>
	{
		return LED_FAST_BLINK;
 8008fd0:	f04f 3355 	mov.w	r3, #1431655765	@ 0x55555555
 8008fd4:	e00d      	b.n	8008ff2 <GetLedPattern+0x72>
	}
	else if(stricmp(pStrValue, "pulse") == 0)
 8008fd6:	490d      	ldr	r1, [pc, #52]	@ (800900c <GetLedPattern+0x8c>)
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f019 fdc3 	bl	8022b64 <strcasecmp>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <GetLedPattern+0x6a>
	{
		return LED_NORMAL;
 8008fe4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8008fe8:	e003      	b.n	8008ff2 <GetLedPattern+0x72>
	}
	else
	{
		return hexadecimalToDecimal(pStrValue);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff ff30 	bl	8008e50 <hexadecimalToDecimal>
 8008ff0:	4603      	mov	r3, r0
	}
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	0802736c 	.word	0x0802736c
 8009000:	08027094 	.word	0x08027094
 8009004:	08027410 	.word	0x08027410
 8009008:	08027418 	.word	0x08027418
 800900c:	08027420 	.word	0x08027420

08009010 <SetVariable>:
*
* @return	Shell Error value
*
*********************************************************************/
int SetVariable(const char* szObject, char* pStrValue)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b094      	sub	sp, #80	@ 0x50
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
	char* pMt;
	char* pDa;
	char* pOct;
	int ampm;

	idx = FindVariable((char*)szObject);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff fe9a 	bl	8008d54 <FindVariable>
 8009020:	6378      	str	r0, [r7, #52]	@ 0x34

	if(idx != -1)
 8009022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009028:	f000 836d 	beq.w	8009706 <SetVariable+0x6f6>
	{
		type = VarCmdTable[idx].type;
 800902c:	49b4      	ldr	r1, [pc, #720]	@ (8009300 <SetVariable+0x2f0>)
 800902e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	3308      	adds	r3, #8
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	633b      	str	r3, [r7, #48]	@ 0x30
		switch(type & VAR_TYPE_MASK)
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009046:	3b01      	subs	r3, #1
 8009048:	2b29      	cmp	r3, #41	@ 0x29
 800904a:	f200 835c 	bhi.w	8009706 <SetVariable+0x6f6>
 800904e:	a201      	add	r2, pc, #4	@ (adr r2, 8009054 <SetVariable+0x44>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	080090fd 	.word	0x080090fd
 8009058:	0800961d 	.word	0x0800961d
 800905c:	08009707 	.word	0x08009707
 8009060:	08009465 	.word	0x08009465
 8009064:	08009163 	.word	0x08009163
 8009068:	08009205 	.word	0x08009205
 800906c:	08009365 	.word	0x08009365
 8009070:	080093b7 	.word	0x080093b7
 8009074:	08009469 	.word	0x08009469
 8009078:	080094fb 	.word	0x080094fb
 800907c:	0800955b 	.word	0x0800955b
 8009080:	0800965f 	.word	0x0800965f
 8009084:	08009671 	.word	0x08009671
 8009088:	08009683 	.word	0x08009683
 800908c:	08009465 	.word	0x08009465
 8009090:	08009707 	.word	0x08009707
 8009094:	08009695 	.word	0x08009695
 8009098:	08009707 	.word	0x08009707
 800909c:	08009707 	.word	0x08009707
 80090a0:	08009707 	.word	0x08009707
 80090a4:	08009707 	.word	0x08009707
 80090a8:	08009707 	.word	0x08009707
 80090ac:	08009707 	.word	0x08009707
 80090b0:	08009707 	.word	0x08009707
 80090b4:	08009707 	.word	0x08009707
 80090b8:	08009707 	.word	0x08009707
 80090bc:	08009707 	.word	0x08009707
 80090c0:	08009707 	.word	0x08009707
 80090c4:	08009707 	.word	0x08009707
 80090c8:	08009707 	.word	0x08009707
 80090cc:	08009707 	.word	0x08009707
 80090d0:	08009707 	.word	0x08009707
 80090d4:	08009707 	.word	0x08009707
 80090d8:	08009707 	.word	0x08009707
 80090dc:	08009707 	.word	0x08009707
 80090e0:	08009707 	.word	0x08009707
 80090e4:	08009707 	.word	0x08009707
 80090e8:	08009707 	.word	0x08009707
 80090ec:	08009707 	.word	0x08009707
 80090f0:	08009707 	.word	0x08009707
 80090f4:	08009707 	.word	0x08009707
 80090f8:	08009707 	.word	0x08009707
		{
			case VAR_TYPE_INT:
				if((type & VAR_TYPE_READ_ONLY) == 0)
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009102:	2b00      	cmp	r3, #0
 8009104:	d12b      	bne.n	800915e <SetVariable+0x14e>
				{
					// ToDo - fail if the number is improperly formatted
					i = FindVariable(pStrValue);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fe23 	bl	8008d54 <FindVariable>
 800910e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					if(i != -1)
 8009110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009116:	d005      	beq.n	8009124 <SetVariable+0x114>
					{
						temp = GetVariableValue(i);
 8009118:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800911a:	f7ff fe61 	bl	8008de0 <GetVariableValue>
 800911e:	4603      	mov	r3, r0
 8009120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009122:	e004      	b.n	800912e <SetVariable+0x11e>
					}
					else
					{
						temp = atoi(pStrValue);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	4618      	mov	r0, r3
 8009128:	f01c f94a 	bl	80253c0 <atoi>
 800912c:	64b8      	str	r0, [r7, #72]	@ 0x48
					}

					*(uint32_t*)(VarCmdTable[idx].var) = temp;
 800912e:	4974      	ldr	r1, [pc, #464]	@ (8009300 <SetVariable+0x2f0>)
 8009130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	440b      	add	r3, r1
 800913c:	3304      	adds	r3, #4
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009142:	601a      	str	r2, [r3, #0]

					if((type & VAR_TYPE_PERSIST) != 0)
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 82ca 	beq.w	80096e4 <SetVariable+0x6d4>
					{
						(void)ini_putl("", szObject, (long)temp, SETTINGS_FILE);
 8009150:	4b6c      	ldr	r3, [pc, #432]	@ (8009304 <SetVariable+0x2f4>)
 8009152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009154:	6879      	ldr	r1, [r7, #4]
 8009156:	486c      	ldr	r0, [pc, #432]	@ (8009308 <SetVariable+0x2f8>)
 8009158:	f017 fa38 	bl	80205cc <ini_putl>
				}
				else
				{
					return CMD_READ_ONLY;
				}
			break;
 800915c:	e2c2      	b.n	80096e4 <SetVariable+0x6d4>
					return CMD_READ_ONLY;
 800915e:	2306      	movs	r3, #6
 8009160:	e2d2      	b.n	8009708 <SetVariable+0x6f8>

			case VAR_TYPE_TIME:
				pHr = strsep(&pStrValue, ":");
 8009162:	463b      	mov	r3, r7
 8009164:	4969      	ldr	r1, [pc, #420]	@ (800930c <SetVariable+0x2fc>)
 8009166:	4618      	mov	r0, r3
 8009168:	f01c f898 	bl	802529c <strsep>
 800916c:	62b8      	str	r0, [r7, #40]	@ 0x28
				pMn = strsep(&pStrValue, ": ");
 800916e:	463b      	mov	r3, r7
 8009170:	4967      	ldr	r1, [pc, #412]	@ (8009310 <SetVariable+0x300>)
 8009172:	4618      	mov	r0, r3
 8009174:	f01c f892 	bl	802529c <strsep>
 8009178:	6278      	str	r0, [r7, #36]	@ 0x24
				if(pHr != NULL && pMn != NULL)
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 82b3 	beq.w	80096e8 <SetVariable+0x6d8>
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 82af 	beq.w	80096e8 <SetVariable+0x6d8>
				{
					time.Hours = (uint8_t)atoi(pHr);
 800918a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800918c:	f01c f918 	bl	80253c0 <atoi>
 8009190:	4603      	mov	r3, r0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	733b      	strb	r3, [r7, #12]
					time.Minutes = (uint8_t)atoi(pMn);
 8009196:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009198:	f01c f912 	bl	80253c0 <atoi>
 800919c:	4603      	mov	r3, r0
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	737b      	strb	r3, [r7, #13]

					pSc = strsep(&pStrValue, ":");
 80091a2:	463b      	mov	r3, r7
 80091a4:	4959      	ldr	r1, [pc, #356]	@ (800930c <SetVariable+0x2fc>)
 80091a6:	4618      	mov	r0, r3
 80091a8:	f01c f878 	bl	802529c <strsep>
 80091ac:	6238      	str	r0, [r7, #32]
					if(pSc)
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <SetVariable+0x1ba>
					{
						time.Seconds = (uint8_t)atoi(pSc);
 80091b4:	6a38      	ldr	r0, [r7, #32]
 80091b6:	f01c f903 	bl	80253c0 <atoi>
 80091ba:	4603      	mov	r3, r0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	73bb      	strb	r3, [r7, #14]
						ampm = GetAmPm(pSc);
 80091c0:	6a38      	ldr	r0, [r7, #32]
 80091c2:	f7ff feb4 	bl	8008f2e <GetAmPm>
 80091c6:	63b8      	str	r0, [r7, #56]	@ 0x38
 80091c8:	e005      	b.n	80091d6 <SetVariable+0x1c6>
					}
					else
					{
						time.Seconds = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73bb      	strb	r3, [r7, #14]
						ampm = GetAmPm(pMn);
 80091ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091d0:	f7ff fead 	bl	8008f2e <GetAmPm>
 80091d4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}

					if(ampm == 1)
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d103      	bne.n	80091e4 <SetVariable+0x1d4>
					{
						time.Hours += 12;
 80091dc:	7b3b      	ldrb	r3, [r7, #12]
 80091de:	330c      	adds	r3, #12
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	733b      	strb	r3, [r7, #12]
					}

					time.SecondFraction = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
					time.SubSeconds = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	613b      	str	r3, [r7, #16]
					time.TimeFormat = RTC_HOURFORMAT_24;	// RTC_HOURFORMAT12_AM;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]
					time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61bb      	str	r3, [r7, #24]

					HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80091f4:	f107 030c 	add.w	r3, r7, #12
 80091f8:	2200      	movs	r2, #0
 80091fa:	4619      	mov	r1, r3
 80091fc:	4845      	ldr	r0, [pc, #276]	@ (8009314 <SetVariable+0x304>)
 80091fe:	f00a fef5 	bl	8013fec <HAL_RTC_SetTime>
				}
			break;
 8009202:	e271      	b.n	80096e8 <SetVariable+0x6d8>

			case VAR_TYPE_DATE:

    			switch(bDateFmt)
 8009204:	4b44      	ldr	r3, [pc, #272]	@ (8009318 <SetVariable+0x308>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3b01      	subs	r3, #1
 800920a:	2b04      	cmp	r3, #4
 800920c:	d80c      	bhi.n	8009228 <SetVariable+0x218>
 800920e:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <SetVariable+0x204>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	0800924f 	.word	0x0800924f
 8009218:	08009275 	.word	0x08009275
 800921c:	08009229 	.word	0x08009229
 8009220:	0800924f 	.word	0x0800924f
 8009224:	08009275 	.word	0x08009275
    			{
    				case 0:
    				case 3:
    				default:
    	    			// M/D/Y
    					pMt = strsep(&pStrValue, "/-");
 8009228:	463b      	mov	r3, r7
 800922a:	493c      	ldr	r1, [pc, #240]	@ (800931c <SetVariable+0x30c>)
 800922c:	4618      	mov	r0, r3
 800922e:	f01c f835 	bl	802529c <strsep>
 8009232:	6438      	str	r0, [r7, #64]	@ 0x40
    					pDa = strsep(&pStrValue, "/-");
 8009234:	463b      	mov	r3, r7
 8009236:	4939      	ldr	r1, [pc, #228]	@ (800931c <SetVariable+0x30c>)
 8009238:	4618      	mov	r0, r3
 800923a:	f01c f82f 	bl	802529c <strsep>
 800923e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    					pYr = strsep(&pStrValue, "/-");
 8009240:	463b      	mov	r3, r7
 8009242:	4936      	ldr	r1, [pc, #216]	@ (800931c <SetVariable+0x30c>)
 8009244:	4618      	mov	r0, r3
 8009246:	f01c f829 	bl	802529c <strsep>
 800924a:	6478      	str	r0, [r7, #68]	@ 0x44
    				break;
 800924c:	e025      	b.n	800929a <SetVariable+0x28a>
    				case 1:
    				case 4:
    	    			// D/M/Y
    					pDa = strsep(&pStrValue, "/-");
 800924e:	463b      	mov	r3, r7
 8009250:	4932      	ldr	r1, [pc, #200]	@ (800931c <SetVariable+0x30c>)
 8009252:	4618      	mov	r0, r3
 8009254:	f01c f822 	bl	802529c <strsep>
 8009258:	63f8      	str	r0, [r7, #60]	@ 0x3c
    					pMt = strsep(&pStrValue, "/-");
 800925a:	463b      	mov	r3, r7
 800925c:	492f      	ldr	r1, [pc, #188]	@ (800931c <SetVariable+0x30c>)
 800925e:	4618      	mov	r0, r3
 8009260:	f01c f81c 	bl	802529c <strsep>
 8009264:	6438      	str	r0, [r7, #64]	@ 0x40
    					pYr = strsep(&pStrValue, "/-");
 8009266:	463b      	mov	r3, r7
 8009268:	492c      	ldr	r1, [pc, #176]	@ (800931c <SetVariable+0x30c>)
 800926a:	4618      	mov	r0, r3
 800926c:	f01c f816 	bl	802529c <strsep>
 8009270:	6478      	str	r0, [r7, #68]	@ 0x44
       				break;
 8009272:	e012      	b.n	800929a <SetVariable+0x28a>
    				case 2:
    				case 5:
    	    			// Y/M/D
    					pYr = strsep(&pStrValue, "/-");
 8009274:	463b      	mov	r3, r7
 8009276:	4929      	ldr	r1, [pc, #164]	@ (800931c <SetVariable+0x30c>)
 8009278:	4618      	mov	r0, r3
 800927a:	f01c f80f 	bl	802529c <strsep>
 800927e:	6478      	str	r0, [r7, #68]	@ 0x44
    					pMt = strsep(&pStrValue, "/-");
 8009280:	463b      	mov	r3, r7
 8009282:	4926      	ldr	r1, [pc, #152]	@ (800931c <SetVariable+0x30c>)
 8009284:	4618      	mov	r0, r3
 8009286:	f01c f809 	bl	802529c <strsep>
 800928a:	6438      	str	r0, [r7, #64]	@ 0x40
    					pDa = strsep(&pStrValue, "/-");
 800928c:	463b      	mov	r3, r7
 800928e:	4923      	ldr	r1, [pc, #140]	@ (800931c <SetVariable+0x30c>)
 8009290:	4618      	mov	r0, r3
 8009292:	f01c f803 	bl	802529c <strsep>
 8009296:	63f8      	str	r0, [r7, #60]	@ 0x3c
       				break;
 8009298:	bf00      	nop
    			}

				if(pDa != NULL && pMt != NULL && pYr != NULL)
 800929a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 8225 	beq.w	80096ec <SetVariable+0x6dc>
 80092a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8221 	beq.w	80096ec <SetVariable+0x6dc>
 80092aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 821d 	beq.w	80096ec <SetVariable+0x6dc>
				{
					if(!isdigit((int)pMt[0]))
 80092b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	4a19      	ldr	r2, [pc, #100]	@ (8009320 <SetVariable+0x310>)
 80092ba:	4413      	add	r3, r2
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	f003 0304 	and.w	r3, r3, #4
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d130      	bne.n	8009328 <SetVariable+0x318>
					{
						for(i = 1; i < 12; i++)
 80092c6:	2301      	movs	r3, #1
 80092c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092ca:	e011      	b.n	80092f0 <SetVariable+0x2e0>
						{
							if(stricmp(szMonth[i], pMt) == 0)
 80092cc:	4a15      	ldr	r2, [pc, #84]	@ (8009324 <SetVariable+0x314>)
 80092ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092d6:	4618      	mov	r0, r3
 80092d8:	f019 fc44 	bl	8022b64 <strcasecmp>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d103      	bne.n	80092ea <SetVariable+0x2da>
							{
								date.Month = (uint8_t)i;
 80092e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	727b      	strb	r3, [r7, #9]
								break;
 80092e8:	e005      	b.n	80092f6 <SetVariable+0x2e6>
						for(i = 1; i < 12; i++)
 80092ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ec:	3301      	adds	r3, #1
 80092ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092f2:	2b0b      	cmp	r3, #11
 80092f4:	ddea      	ble.n	80092cc <SetVariable+0x2bc>
							}
						}
						if(i > 12)
 80092f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092f8:	2b0c      	cmp	r3, #12
 80092fa:	dd1b      	ble.n	8009334 <SetVariable+0x324>
						{
							return CMD_BAD_PARAMS;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e203      	b.n	8009708 <SetVariable+0x6f8>
 8009300:	0802bb88 	.word	0x0802bb88
 8009304:	08027428 	.word	0x08027428
 8009308:	08026f8c 	.word	0x08026f8c
 800930c:	08027434 	.word	0x08027434
 8009310:	08027438 	.word	0x08027438
 8009314:	2001c1b4 	.word	0x2001c1b4
 8009318:	2001b568 	.word	0x2001b568
 800931c:	0802743c 	.word	0x0802743c
 8009320:	0802c3d0 	.word	0x0802c3d0
 8009324:	20000238 	.word	0x20000238
						}
					}
					else
					{
						date.Month = (uint8_t)atoi(pMt);
 8009328:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800932a:	f01c f849 	bl	80253c0 <atoi>
 800932e:	4603      	mov	r3, r0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	727b      	strb	r3, [r7, #9]
					}
					date.Date = (uint8_t)atoi(pDa);
 8009334:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009336:	f01c f843 	bl	80253c0 <atoi>
 800933a:	4603      	mov	r3, r0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	72bb      	strb	r3, [r7, #10]
					date.Year = (uint8_t)(atoi(pYr) - 2000);
 8009340:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009342:	f01c f83d 	bl	80253c0 <atoi>
 8009346:	4603      	mov	r3, r0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	3330      	adds	r3, #48	@ 0x30
 800934c:	b2db      	uxtb	r3, r3
 800934e:	72fb      	strb	r3, [r7, #11]
					date.WeekDay = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	723b      	strb	r3, [r7, #8]

					HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	2200      	movs	r2, #0
 800935a:	4619      	mov	r1, r3
 800935c:	489a      	ldr	r0, [pc, #616]	@ (80095c8 <SetVariable+0x5b8>)
 800935e:	f00a ff39 	bl	80141d4 <HAL_RTC_SetDate>
				}
			break;
 8009362:	e1c3      	b.n	80096ec <SetVariable+0x6dc>

			case VAR_TYPE_TIME_FMT:
				if(strcmp(pStrValue, "12") == 0)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	4999      	ldr	r1, [pc, #612]	@ (80095cc <SetVariable+0x5bc>)
 8009368:	4618      	mov	r0, r3
 800936a:	f7f6 ff91 	bl	8000290 <strcmp>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <SetVariable+0x36c>
				{
					bTimeFmt = 0;
 8009374:	4b96      	ldr	r3, [pc, #600]	@ (80095d0 <SetVariable+0x5c0>)
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	e00d      	b.n	8009398 <SetVariable+0x388>
				}
				else if(strcmp(pStrValue, "24") == 0)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	4995      	ldr	r1, [pc, #596]	@ (80095d4 <SetVariable+0x5c4>)
 8009380:	4618      	mov	r0, r3
 8009382:	f7f6 ff85 	bl	8000290 <strcmp>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <SetVariable+0x384>
				{
					bTimeFmt = 1;
 800938c:	4b90      	ldr	r3, [pc, #576]	@ (80095d0 <SetVariable+0x5c0>)
 800938e:	2201      	movs	r2, #1
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	e001      	b.n	8009398 <SetVariable+0x388>
				}
				else
				{
					return CMD_BAD_PARAMS;
 8009394:	2301      	movs	r3, #1
 8009396:	e1b7      	b.n	8009708 <SetVariable+0x6f8>
				}
				if((type & VAR_TYPE_PERSIST) != 0)
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 81a6 	beq.w	80096f0 <SetVariable+0x6e0>
				{
					(void)ini_putl("", szObject, (long)bTimeFmt, SETTINGS_FILE);
 80093a4:	4b8a      	ldr	r3, [pc, #552]	@ (80095d0 <SetVariable+0x5c0>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	4b8b      	ldr	r3, [pc, #556]	@ (80095d8 <SetVariable+0x5c8>)
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	488b      	ldr	r0, [pc, #556]	@ (80095dc <SetVariable+0x5cc>)
 80093b0:	f017 f90c 	bl	80205cc <ini_putl>
				}
			break;
 80093b4:	e19c      	b.n	80096f0 <SetVariable+0x6e0>

			case VAR_TYPE_DATE_FMT:
				if(stricmp(pStrValue, "M/D/Y") == 0)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	4989      	ldr	r1, [pc, #548]	@ (80095e0 <SetVariable+0x5d0>)
 80093ba:	4618      	mov	r0, r3
 80093bc:	f019 fbd2 	bl	8022b64 <strcasecmp>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d102      	bne.n	80093cc <SetVariable+0x3bc>
				{
					bDateFmt = 0;
 80093c6:	4b87      	ldr	r3, [pc, #540]	@ (80095e4 <SetVariable+0x5d4>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
				}
				if(stricmp(pStrValue, "D/M/Y") == 0)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	4986      	ldr	r1, [pc, #536]	@ (80095e8 <SetVariable+0x5d8>)
 80093d0:	4618      	mov	r0, r3
 80093d2:	f019 fbc7 	bl	8022b64 <strcasecmp>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d103      	bne.n	80093e4 <SetVariable+0x3d4>
				{
					bDateFmt = 1;
 80093dc:	4b81      	ldr	r3, [pc, #516]	@ (80095e4 <SetVariable+0x5d4>)
 80093de:	2201      	movs	r2, #1
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	e00a      	b.n	80093fa <SetVariable+0x3ea>
				}
				else if(stricmp(pStrValue, "Y/M/D") == 0)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	4981      	ldr	r1, [pc, #516]	@ (80095ec <SetVariable+0x5dc>)
 80093e8:	4618      	mov	r0, r3
 80093ea:	f019 fbbb 	bl	8022b64 <strcasecmp>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <SetVariable+0x3ea>
				{
					bDateFmt = 2;
 80093f4:	4b7b      	ldr	r3, [pc, #492]	@ (80095e4 <SetVariable+0x5d4>)
 80093f6:	2202      	movs	r2, #2
 80093f8:	601a      	str	r2, [r3, #0]
				}
				if(stricmp(pStrValue, "MM/D/Y") == 0)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	497c      	ldr	r1, [pc, #496]	@ (80095f0 <SetVariable+0x5e0>)
 80093fe:	4618      	mov	r0, r3
 8009400:	f019 fbb0 	bl	8022b64 <strcasecmp>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d103      	bne.n	8009412 <SetVariable+0x402>
				{
					bDateFmt = 3;
 800940a:	4b76      	ldr	r3, [pc, #472]	@ (80095e4 <SetVariable+0x5d4>)
 800940c:	2203      	movs	r2, #3
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	e019      	b.n	8009446 <SetVariable+0x436>
				}
				else if(stricmp(pStrValue, "D/MM/Y") == 0)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	4977      	ldr	r1, [pc, #476]	@ (80095f4 <SetVariable+0x5e4>)
 8009416:	4618      	mov	r0, r3
 8009418:	f019 fba4 	bl	8022b64 <strcasecmp>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d103      	bne.n	800942a <SetVariable+0x41a>
				{
					bDateFmt = 4;
 8009422:	4b70      	ldr	r3, [pc, #448]	@ (80095e4 <SetVariable+0x5d4>)
 8009424:	2204      	movs	r2, #4
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	e00d      	b.n	8009446 <SetVariable+0x436>
				}
				else if(stricmp(pStrValue, "Y/MM/D") == 0)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	4972      	ldr	r1, [pc, #456]	@ (80095f8 <SetVariable+0x5e8>)
 800942e:	4618      	mov	r0, r3
 8009430:	f019 fb98 	bl	8022b64 <strcasecmp>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d103      	bne.n	8009442 <SetVariable+0x432>
				{
					bDateFmt = 5;
 800943a:	4b6a      	ldr	r3, [pc, #424]	@ (80095e4 <SetVariable+0x5d4>)
 800943c:	2205      	movs	r2, #5
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	e001      	b.n	8009446 <SetVariable+0x436>
				}
				else
				{
					return CMD_BAD_PARAMS;
 8009442:	2301      	movs	r3, #1
 8009444:	e160      	b.n	8009708 <SetVariable+0x6f8>
				}

				if((type & VAR_TYPE_PERSIST) != 0)
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 8151 	beq.w	80096f4 <SetVariable+0x6e4>
				{
					(void)ini_putl("", szObject, (long)bDateFmt, SETTINGS_FILE);
 8009452:	4b64      	ldr	r3, [pc, #400]	@ (80095e4 <SetVariable+0x5d4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	4b5f      	ldr	r3, [pc, #380]	@ (80095d8 <SetVariable+0x5c8>)
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	485f      	ldr	r0, [pc, #380]	@ (80095dc <SetVariable+0x5cc>)
 800945e:	f017 f8b5 	bl	80205cc <ini_putl>
				}
			break;
 8009462:	e147      	b.n	80096f4 <SetVariable+0x6e4>

	    	//case VAR_TYPE_TRACK_LOCK:
	    	case VAR_TYPE_VER:
	    	case VAR_TYPE_INPUTS:
				return CMD_READ_ONLY;
 8009464:	2306      	movs	r3, #6
 8009466:	e14f      	b.n	8009708 <SetVariable+0x6f8>
			break;

			case VAR_TYPE_ON_OFF:
				if((type & VAR_TYPE_READ_ONLY) == 0)
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800946e:	2b00      	cmp	r3, #0
 8009470:	d141      	bne.n	80094f6 <SetVariable+0x4e6>
				{
					temp = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	64bb      	str	r3, [r7, #72]	@ 0x48
					if(stricmp(pStrValue, "on") == 0)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	4960      	ldr	r1, [pc, #384]	@ (80095fc <SetVariable+0x5ec>)
 800947a:	4618      	mov	r0, r3
 800947c:	f019 fb72 	bl	8022b64 <strcasecmp>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <SetVariable+0x47a>
					{
						temp = 1;
 8009486:	2301      	movs	r3, #1
 8009488:	64bb      	str	r3, [r7, #72]	@ 0x48
					}
					if(stricmp(pStrValue, "true") == 0)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	495c      	ldr	r1, [pc, #368]	@ (8009600 <SetVariable+0x5f0>)
 800948e:	4618      	mov	r0, r3
 8009490:	f019 fb68 	bl	8022b64 <strcasecmp>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <SetVariable+0x48e>
					{
						temp = 1;
 800949a:	2301      	movs	r3, #1
 800949c:	64bb      	str	r3, [r7, #72]	@ 0x48
					}
					if(stricmp(pStrValue, "yes") == 0)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	4958      	ldr	r1, [pc, #352]	@ (8009604 <SetVariable+0x5f4>)
 80094a2:	4618      	mov	r0, r3
 80094a4:	f019 fb5e 	bl	8022b64 <strcasecmp>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <SetVariable+0x4a2>
					{
						temp = 1;
 80094ae:	2301      	movs	r3, #1
 80094b0:	64bb      	str	r3, [r7, #72]	@ 0x48
					}
					if(stricmp(pStrValue, "1") == 0)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	4954      	ldr	r1, [pc, #336]	@ (8009608 <SetVariable+0x5f8>)
 80094b6:	4618      	mov	r0, r3
 80094b8:	f019 fb54 	bl	8022b64 <strcasecmp>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <SetVariable+0x4b6>
					{
						temp = 1;
 80094c2:	2301      	movs	r3, #1
 80094c4:	64bb      	str	r3, [r7, #72]	@ 0x48
					}

					*(uint32_t*)(VarCmdTable[idx].var) = temp;
 80094c6:	4951      	ldr	r1, [pc, #324]	@ (800960c <SetVariable+0x5fc>)
 80094c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094ca:	4613      	mov	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	440b      	add	r3, r1
 80094d4:	3304      	adds	r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094da:	601a      	str	r2, [r3, #0]
					if((type & VAR_TYPE_PERSIST) != 0)
 80094dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 8108 	beq.w	80096f8 <SetVariable+0x6e8>
					{
						(void)ini_putl("", szObject, (long)temp, SETTINGS_FILE);
 80094e8:	4b3b      	ldr	r3, [pc, #236]	@ (80095d8 <SetVariable+0x5c8>)
 80094ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	483b      	ldr	r0, [pc, #236]	@ (80095dc <SetVariable+0x5cc>)
 80094f0:	f017 f86c 	bl	80205cc <ini_putl>
				}
				else
				{
					return CMD_READ_ONLY;
				}
			break;
 80094f4:	e100      	b.n	80096f8 <SetVariable+0x6e8>
					return CMD_READ_ONLY;
 80094f6:	2306      	movs	r3, #6
 80094f8:	e106      	b.n	8009708 <SetVariable+0x6f8>

			case VAR_TYPE_PORT:
				if(stricmp(pStrValue, "nce") == 0)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	4944      	ldr	r1, [pc, #272]	@ (8009610 <SetVariable+0x600>)
 80094fe:	4618      	mov	r0, r3
 8009500:	f019 fb30 	bl	8022b64 <strcasecmp>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d102      	bne.n	8009510 <SetVariable+0x500>
				{
					temp = 1;
 800950a:	2301      	movs	r3, #1
 800950c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800950e:	e00c      	b.n	800952a <SetVariable+0x51a>
				}
				else if(stricmp(pStrValue, "expressnet") == 0)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	4940      	ldr	r1, [pc, #256]	@ (8009614 <SetVariable+0x604>)
 8009514:	4618      	mov	r0, r3
 8009516:	f019 fb25 	bl	8022b64 <strcasecmp>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <SetVariable+0x516>
				{
					temp = 2;
 8009520:	2302      	movs	r3, #2
 8009522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009524:	e001      	b.n	800952a <SetVariable+0x51a>
				}
				else
				{
					temp = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	64bb      	str	r3, [r7, #72]	@ 0x48
				}
				*(uint32_t*)(VarCmdTable[idx].var) = temp;
 800952a:	4938      	ldr	r1, [pc, #224]	@ (800960c <SetVariable+0x5fc>)
 800952c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	3304      	adds	r3, #4
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800953e:	601a      	str	r2, [r3, #0]
				if((type & VAR_TYPE_PERSIST) != 0)
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 80d8 	beq.w	80096fc <SetVariable+0x6ec>
				{
					(void)ini_putl("", szObject, (long)temp, SETTINGS_FILE);
 800954c:	4b22      	ldr	r3, [pc, #136]	@ (80095d8 <SetVariable+0x5c8>)
 800954e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	4822      	ldr	r0, [pc, #136]	@ (80095dc <SetVariable+0x5cc>)
 8009554:	f017 f83a 	bl	80205cc <ini_putl>
				}
			break;
 8009558:	e0d0      	b.n	80096fc <SetVariable+0x6ec>
				}
			break;
#endif

	    	case VAR_TYPE_IP:
				if((type & VAR_TYPE_PERSIST) != 0)
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009560:	2b00      	cmp	r3, #0
 8009562:	d005      	beq.n	8009570 <SetVariable+0x560>
				{
					(void)ini_puts("", szObject, pStrValue, SETTINGS_FILE);
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	4b1c      	ldr	r3, [pc, #112]	@ (80095d8 <SetVariable+0x5c8>)
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	481c      	ldr	r0, [pc, #112]	@ (80095dc <SetVariable+0x5cc>)
 800956c:	f016 fc10 	bl	801fd90 <ini_puts>
				}
	    		temp = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	64bb      	str	r3, [r7, #72]	@ 0x48
	    	    for(i = 0; i < 4; i++)
 8009574:	2300      	movs	r3, #0
 8009576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009578:	e016      	b.n	80095a8 <SetVariable+0x598>
	    	    {
	    	    	pOct = strsep(&pStrValue, ".");
 800957a:	463b      	mov	r3, r7
 800957c:	4926      	ldr	r1, [pc, #152]	@ (8009618 <SetVariable+0x608>)
 800957e:	4618      	mov	r0, r3
 8009580:	f01b fe8c 	bl	802529c <strsep>
 8009584:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    	    	if(pOct != NULL)
 8009586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00a      	beq.n	80095a2 <SetVariable+0x592>
	    	    	{
	    	    		//temp |= atoi(pOct) << (3 - i) * 8;
	    	    		temp |= atoi(pOct) << i * 8;
 800958c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800958e:	f01b ff17 	bl	80253c0 <atoi>
 8009592:	4602      	mov	r2, r0
 8009594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800959e:	4313      	orrs	r3, r2
 80095a0:	64bb      	str	r3, [r7, #72]	@ 0x48
	    	    for(i = 0; i < 4; i++)
 80095a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095a4:	3301      	adds	r3, #1
 80095a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	dde5      	ble.n	800957a <SetVariable+0x56a>
	    	    	}
	    	    }

				*(uint32_t*)(VarCmdTable[idx].var) = temp;
 80095ae:	4917      	ldr	r1, [pc, #92]	@ (800960c <SetVariable+0x5fc>)
 80095b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	3304      	adds	r3, #4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095c2:	601a      	str	r2, [r3, #0]
	    	break;
 80095c4:	e09f      	b.n	8009706 <SetVariable+0x6f6>
 80095c6:	bf00      	nop
 80095c8:	2001c1b4 	.word	0x2001c1b4
 80095cc:	08026fdc 	.word	0x08026fdc
 80095d0:	2001b564 	.word	0x2001b564
 80095d4:	0802732c 	.word	0x0802732c
 80095d8:	08027428 	.word	0x08027428
 80095dc:	08026f8c 	.word	0x08026f8c
 80095e0:	08026ff8 	.word	0x08026ff8
 80095e4:	2001b568 	.word	0x2001b568
 80095e8:	08027334 	.word	0x08027334
 80095ec:	0802733c 	.word	0x0802733c
 80095f0:	08027344 	.word	0x08027344
 80095f4:	0802734c 	.word	0x0802734c
 80095f8:	08027354 	.word	0x08027354
 80095fc:	0802736c 	.word	0x0802736c
 8009600:	08027440 	.word	0x08027440
 8009604:	08027448 	.word	0x08027448
 8009608:	0802744c 	.word	0x0802744c
 800960c:	0802bb88 	.word	0x0802bb88
 8009610:	08027450 	.word	0x08027450
 8009614:	08027454 	.word	0x08027454
 8009618:	08027460 	.word	0x08027460

			case VAR_TYPE_FUNCTION:
			break;

			case VAR_TYPE_STRING:
				if((type & VAR_TYPE_READ_ONLY) == 0)
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009622:	2b00      	cmp	r3, #0
 8009624:	d119      	bne.n	800965a <SetVariable+0x64a>
				{
					// ToDo - put the string length in the table
					strncpy((char*)VarCmdTable[idx].var, pStrValue, 64);
 8009626:	493a      	ldr	r1, [pc, #232]	@ (8009710 <SetVariable+0x700>)
 8009628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	3304      	adds	r3, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	2240      	movs	r2, #64	@ 0x40
 800963c:	4618      	mov	r0, r3
 800963e:	f01c fe45 	bl	80262cc <strncpy>
					if((type & VAR_TYPE_PERSIST) != 0)
 8009642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009648:	2b00      	cmp	r3, #0
 800964a:	d059      	beq.n	8009700 <SetVariable+0x6f0>
					{
						(void)ini_puts("", szObject, pStrValue, SETTINGS_FILE);
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	4b31      	ldr	r3, [pc, #196]	@ (8009714 <SetVariable+0x704>)
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	4831      	ldr	r0, [pc, #196]	@ (8009718 <SetVariable+0x708>)
 8009654:	f016 fb9c 	bl	801fd90 <ini_puts>
				}
				else
				{
					return CMD_READ_ONLY;
				}
			break;
 8009658:	e052      	b.n	8009700 <SetVariable+0x6f0>
					return CMD_READ_ONLY;
 800965a:	2306      	movs	r3, #6
 800965c:	e054      	b.n	8009708 <SetVariable+0x6f8>

	    	case VAR_TYPE_RLED:
    			RedLed(GetLedPattern(pStrValue));
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fc8d 	bl	8008f80 <GetLedPattern>
 8009666:	4603      	mov	r3, r0
 8009668:	4618      	mov	r0, r3
 800966a:	f7fd fd7f 	bl	800716c <RedLed>
			break;
 800966e:	e04a      	b.n	8009706 <SetVariable+0x6f6>

	    	case VAR_TYPE_YLED:
	    		YellowLed(GetLedPattern(pStrValue));
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff fc84 	bl	8008f80 <GetLedPattern>
 8009678:	4603      	mov	r3, r0
 800967a:	4618      	mov	r0, r3
 800967c:	f7fd fd8e 	bl	800719c <YellowLed>
			break;
 8009680:	e041      	b.n	8009706 <SetVariable+0x6f6>

	    	case VAR_TYPE_GLED:
	    		GreenLed(GetLedPattern(pStrValue));
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff fc7b 	bl	8008f80 <GetLedPattern>
 800968a:	4603      	mov	r3, r0
 800968c:	4618      	mov	r0, r3
 800968e:	f7fd fd9d 	bl	80071cc <GreenLed>
			break;
 8009692:	e038      	b.n	8009706 <SetVariable+0x6f6>

	    	case VAR_TYPE_THEME:
				if((type & VAR_TYPE_READ_ONLY) == 0)
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800969a:	2b00      	cmp	r3, #0
 800969c:	d132      	bne.n	8009704 <SetVariable+0x6f4>
				{
					temp = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	64bb      	str	r3, [r7, #72]	@ 0x48
					if(stricmp(pStrValue, "light") == 0)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	491d      	ldr	r1, [pc, #116]	@ (800971c <SetVariable+0x70c>)
 80096a6:	4618      	mov	r0, r3
 80096a8:	f019 fa5c 	bl	8022b64 <strcasecmp>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <SetVariable+0x6a6>
					{
						temp = 1;
 80096b2:	2301      	movs	r3, #1
 80096b4:	64bb      	str	r3, [r7, #72]	@ 0x48
					}

					*(uint32_t*)(VarCmdTable[idx].var) = temp;
 80096b6:	4916      	ldr	r1, [pc, #88]	@ (8009710 <SetVariable+0x700>)
 80096b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	3304      	adds	r3, #4
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ca:	601a      	str	r2, [r3, #0]
					if((type & VAR_TYPE_PERSIST) != 0)
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d016      	beq.n	8009704 <SetVariable+0x6f4>
					{
						(void)ini_putl("", szObject, (long)temp, SETTINGS_FILE);
 80096d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009714 <SetVariable+0x704>)
 80096d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	480e      	ldr	r0, [pc, #56]	@ (8009718 <SetVariable+0x708>)
 80096de:	f016 ff75 	bl	80205cc <ini_putl>
					}
				}
	    	break;
 80096e2:	e00f      	b.n	8009704 <SetVariable+0x6f4>
			break;
 80096e4:	bf00      	nop
 80096e6:	e00e      	b.n	8009706 <SetVariable+0x6f6>
			break;
 80096e8:	bf00      	nop
 80096ea:	e00c      	b.n	8009706 <SetVariable+0x6f6>
			break;
 80096ec:	bf00      	nop
 80096ee:	e00a      	b.n	8009706 <SetVariable+0x6f6>
			break;
 80096f0:	bf00      	nop
 80096f2:	e008      	b.n	8009706 <SetVariable+0x6f6>
			break;
 80096f4:	bf00      	nop
 80096f6:	e006      	b.n	8009706 <SetVariable+0x6f6>
			break;
 80096f8:	bf00      	nop
 80096fa:	e004      	b.n	8009706 <SetVariable+0x6f6>
			break;
 80096fc:	bf00      	nop
 80096fe:	e002      	b.n	8009706 <SetVariable+0x6f6>
			break;
 8009700:	bf00      	nop
 8009702:	e000      	b.n	8009706 <SetVariable+0x6f6>
	    	break;
 8009704:	bf00      	nop
		}
	}
	return CMD_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3750      	adds	r7, #80	@ 0x50
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	0802bb88 	.word	0x0802bb88
 8009714:	08027428 	.word	0x08027428
 8009718:	08026f8c 	.word	0x08026f8c
 800971c:	08027404 	.word	0x08027404

08009720 <MathVariable>:
*
* @return	Shell Error value
*
*********************************************************************/
int MathVariable(const char* szObject, char* pStrValue, const int op)
{
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b089      	sub	sp, #36	@ 0x24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
	int idx;
	int i;
	int type;
	int temp;

	idx = FindVariable((char*)szObject);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7ff fb11 	bl	8008d54 <FindVariable>
 8009732:	61b8      	str	r0, [r7, #24]

	if(idx != -1)
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973a:	f000 80c9 	beq.w	80098d0 <MathVariable+0x1b0>
	{
		type = VarCmdTable[idx].type;
 800973e:	4967      	ldr	r1, [pc, #412]	@ (80098dc <MathVariable+0x1bc>)
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	440b      	add	r3, r1
 800974c:	3308      	adds	r3, #8
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	617b      	str	r3, [r7, #20]
		switch(type & VAR_TYPE_MASK)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009758:	2b2a      	cmp	r3, #42	@ 0x2a
 800975a:	f300 80b9 	bgt.w	80098d0 <MathVariable+0x1b0>
 800975e:	2b28      	cmp	r3, #40	@ 0x28
 8009760:	da20      	bge.n	80097a4 <MathVariable+0x84>
 8009762:	2b0b      	cmp	r3, #11
 8009764:	dc1b      	bgt.n	800979e <MathVariable+0x7e>
 8009766:	2b00      	cmp	r3, #0
 8009768:	f340 80b2 	ble.w	80098d0 <MathVariable+0x1b0>
 800976c:	3b01      	subs	r3, #1
 800976e:	2201      	movs	r2, #1
 8009770:	409a      	lsls	r2, r3
 8009772:	f240 63fa 	movw	r3, #1786	@ 0x6fa
 8009776:	4013      	ands	r3, r2
 8009778:	2b00      	cmp	r3, #0
 800977a:	bf14      	ite	ne
 800977c:	2301      	movne	r3, #1
 800977e:	2300      	moveq	r3, #0
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	f040 80a2 	bne.w	80098cc <MathVariable+0x1ac>
 8009788:	f240 1301 	movw	r3, #257	@ 0x101
 800978c:	4013      	ands	r3, r2
 800978e:	2b00      	cmp	r3, #0
 8009790:	bf14      	ite	ne
 8009792:	2301      	movne	r3, #1
 8009794:	2300      	moveq	r3, #0
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <MathVariable+0x84>
 800979c:	e098      	b.n	80098d0 <MathVariable+0x1b0>
 800979e:	2b14      	cmp	r3, #20
 80097a0:	f040 8096 	bne.w	80098d0 <MathVariable+0x1b0>
			case VAR_TYPE_ON_OFF:
	    	case VAR_TYPE_TRACK:
	    	case VAR_TYPE_SPEED:
			case VAR_TYPE_DIR:
			case VAR_TYPE_FUNCTION:
				if((type & VAR_TYPE_READ_ONLY) == 0)
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 808c 	bne.w	80098c8 <MathVariable+0x1a8>
				{
					// ToDo - fail if the number is improperly formatted
					i = FindVariable(pStrValue);
 80097b0:	68b8      	ldr	r0, [r7, #8]
 80097b2:	f7ff facf 	bl	8008d54 <FindVariable>
 80097b6:	6138      	str	r0, [r7, #16]
					if(i != -1)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d005      	beq.n	80097cc <MathVariable+0xac>
					{
						temp = GetVariableValue(i);
 80097c0:	6938      	ldr	r0, [r7, #16]
 80097c2:	f7ff fb0d 	bl	8008de0 <GetVariableValue>
 80097c6:	4603      	mov	r3, r0
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	e003      	b.n	80097d4 <MathVariable+0xb4>
					}
					else
					{
						temp = atoi(pStrValue);
 80097cc:	68b8      	ldr	r0, [r7, #8]
 80097ce:	f01b fdf7 	bl	80253c0 <atoi>
 80097d2:	61f8      	str	r0, [r7, #28]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d86b      	bhi.n	80098b2 <MathVariable+0x192>
 80097da:	a201      	add	r2, pc, #4	@ (adr r2, 80097e0 <MathVariable+0xc0>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	080097f1 	.word	0x080097f1
 80097e4:	0800981f 	.word	0x0800981f
 80097e8:	0800984d 	.word	0x0800984d
 80097ec:	0800987d 	.word	0x0800987d
					}

					switch(op)
					{
						case MV_ADD:
							*(uint32_t*)(VarCmdTable[idx].var) += temp;
 80097f0:	493a      	ldr	r1, [pc, #232]	@ (80098dc <MathVariable+0x1bc>)
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	3304      	adds	r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	69f9      	ldr	r1, [r7, #28]
 8009806:	4c35      	ldr	r4, [pc, #212]	@ (80098dc <MathVariable+0x1bc>)
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4423      	add	r3, r4
 8009814:	3304      	adds	r3, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	1842      	adds	r2, r0, r1
 800981a:	601a      	str	r2, [r3, #0]
						break;
 800981c:	e04c      	b.n	80098b8 <MathVariable+0x198>

						case MV_SUBTRACT:
							*(uint32_t*)(VarCmdTable[idx].var) -= temp;
 800981e:	492f      	ldr	r1, [pc, #188]	@ (80098dc <MathVariable+0x1bc>)
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	3304      	adds	r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	69f9      	ldr	r1, [r7, #28]
 8009834:	4c29      	ldr	r4, [pc, #164]	@ (80098dc <MathVariable+0x1bc>)
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4423      	add	r3, r4
 8009842:	3304      	adds	r3, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	1a42      	subs	r2, r0, r1
 8009848:	601a      	str	r2, [r3, #0]
						break;
 800984a:	e035      	b.n	80098b8 <MathVariable+0x198>

						case MV_MULTIPLY:
							*(uint32_t*)(VarCmdTable[idx].var) *= temp;
 800984c:	4923      	ldr	r1, [pc, #140]	@ (80098dc <MathVariable+0x1bc>)
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	3304      	adds	r3, #4
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6819      	ldr	r1, [r3, #0]
 8009860:	69f8      	ldr	r0, [r7, #28]
 8009862:	4c1e      	ldr	r4, [pc, #120]	@ (80098dc <MathVariable+0x1bc>)
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	4613      	mov	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4423      	add	r3, r4
 8009870:	3304      	adds	r3, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	fb00 f201 	mul.w	r2, r0, r1
 8009878:	601a      	str	r2, [r3, #0]
						break;
 800987a:	e01d      	b.n	80098b8 <MathVariable+0x198>

						case MV_DIVIDE:
							if(temp)
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d019      	beq.n	80098b6 <MathVariable+0x196>
							{
								*(uint32_t*)(VarCmdTable[idx].var) /= temp;
 8009882:	4916      	ldr	r1, [pc, #88]	@ (80098dc <MathVariable+0x1bc>)
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	3304      	adds	r3, #4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	69f9      	ldr	r1, [r7, #28]
 8009898:	4c10      	ldr	r4, [pc, #64]	@ (80098dc <MathVariable+0x1bc>)
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	4613      	mov	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4423      	add	r3, r4
 80098a6:	3304      	adds	r3, #4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	fbb0 f2f1 	udiv	r2, r0, r1
 80098ae:	601a      	str	r2, [r3, #0]
							}
						break;
 80098b0:	e001      	b.n	80098b6 <MathVariable+0x196>

						default:
							return CMD_BAD_PARAMS;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e00d      	b.n	80098d2 <MathVariable+0x1b2>
						break;
 80098b6:	bf00      	nop
						break;
					}

					(void)ini_putl("", szObject, (long)temp, SETTINGS_FILE);
 80098b8:	4b09      	ldr	r3, [pc, #36]	@ (80098e0 <MathVariable+0x1c0>)
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	4809      	ldr	r0, [pc, #36]	@ (80098e4 <MathVariable+0x1c4>)
 80098c0:	f016 fe84 	bl	80205cc <ini_putl>
					return CMD_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e004      	b.n	80098d2 <MathVariable+0x1b2>
				}
				else
				{
					return CMD_READ_ONLY;
 80098c8:	2306      	movs	r3, #6
 80098ca:	e002      	b.n	80098d2 <MathVariable+0x1b2>
			case VAR_TYPE_DATE_FMT:
	    	case VAR_TYPE_VER:
			case VAR_TYPE_PORT:
	    	case VAR_TYPE_IP:
			case VAR_TYPE_STRING:
				return CMD_READ_ONLY;
 80098cc:	2306      	movs	r3, #6
 80098ce:	e000      	b.n	80098d2 <MathVariable+0x1b2>
			break;
		}
	}
	return CMD_BAD_PARAMS;
 80098d0:	2301      	movs	r3, #1
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3724      	adds	r7, #36	@ 0x24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd90      	pop	{r4, r7, pc}
 80098da:	bf00      	nop
 80098dc:	0802bb88 	.word	0x0802bb88
 80098e0:	08027428 	.word	0x08027428
 80098e4:	08026f8c 	.word	0x08026f8c

080098e8 <GetNextPath>:
*
* @detail	move the pStr pointer by the length for each repeated call
*
*********************************************************************/
int GetNextPath(char* pStr, char* path)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	char* pBeginning = pStr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60bb      	str	r3, [r7, #8]

	int len = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
	while((*pStr != ';' && *pStr != ',') && *pStr != 0)
 80098fa:	e005      	b.n	8009908 <GetNextPath+0x20>
	{
		len++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
		pStr++;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3301      	adds	r3, #1
 8009906:	607b      	str	r3, [r7, #4]
	while((*pStr != ';' && *pStr != ',') && *pStr != 0)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b3b      	cmp	r3, #59	@ 0x3b
 800990e:	d007      	beq.n	8009920 <GetNextPath+0x38>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b2c      	cmp	r3, #44	@ 0x2c
 8009916:	d003      	beq.n	8009920 <GetNextPath+0x38>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1ed      	bne.n	80098fc <GetNextPath+0x14>
	}
	if(len)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <GetNextPath+0x54>
	{
		memcpy(path, pBeginning, len);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	461a      	mov	r2, r3
 800992a:	68b9      	ldr	r1, [r7, #8]
 800992c:	6838      	ldr	r0, [r7, #0]
 800992e:	f01c fdae 	bl	802648e <memcpy>
		path[len] = 0;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	4413      	add	r3, r2
 8009938:	2200      	movs	r2, #0
 800993a:	701a      	strb	r2, [r3, #0]
	}
	return len;
 800993c:	68fb      	ldr	r3, [r7, #12]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <MX_FATFS_Init>:
extern Diskio_drvTypeDef  USER_Driver;

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800994c:	4906      	ldr	r1, [pc, #24]	@ (8009968 <MX_FATFS_Init+0x20>)
 800994e:	4807      	ldr	r0, [pc, #28]	@ (800996c <MX_FATFS_Init+0x24>)
 8009950:	f012 f982 	bl	801bc58 <FATFS_LinkDriver>
 8009954:	4603      	mov	r3, r0
 8009956:	461a      	mov	r2, r3
 8009958:	4b05      	ldr	r3, [pc, #20]	@ (8009970 <MX_FATFS_Init+0x28>)
 800995a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  disk_initialize(0);
 800995c:	2000      	movs	r0, #0
 800995e:	f00e fbc1 	bl	80180e4 <disk_initialize>
  /* USER CODE END Init */
}
 8009962:	bf00      	nop
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	2001b678 	.word	0x2001b678
 800996c:	20000294 	.word	0x20000294
 8009970:	2001b674 	.word	0x2001b674

08009974 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8009978:	2200      	movs	r2, #0
 800997a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800997e:	4808      	ldr	r0, [pc, #32]	@ (80099a0 <SELECT+0x2c>)
 8009980:	f004 f942 	bl	800dc08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8009984:	2200      	movs	r2, #0
 8009986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800998a:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <SELECT+0x2c>)
 800998c:	f004 f93c 	bl	800dc08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8009990:	2200      	movs	r2, #0
 8009992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009996:	4802      	ldr	r0, [pc, #8]	@ (80099a0 <SELECT+0x2c>)
 8009998:	f004 f936 	bl	800dc08 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 800999c:	bf00      	nop
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	42020000 	.word	0x42020000

080099a4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80099a8:	2201      	movs	r2, #1
 80099aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80099ae:	4808      	ldr	r0, [pc, #32]	@ (80099d0 <DESELECT+0x2c>)
 80099b0:	f004 f92a 	bl	800dc08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80099b4:	2201      	movs	r2, #1
 80099b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80099ba:	4805      	ldr	r0, [pc, #20]	@ (80099d0 <DESELECT+0x2c>)
 80099bc:	f004 f924 	bl	800dc08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80099c0:	2201      	movs	r2, #1
 80099c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80099c6:	4802      	ldr	r0, [pc, #8]	@ (80099d0 <DESELECT+0x2c>)
 80099c8:	f004 f91e 	bl	800dc08 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 80099cc:	bf00      	nop
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	42020000 	.word	0x42020000

080099d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXP));
 80099de:	bf00      	nop
 80099e0:	4b08      	ldr	r3, [pc, #32]	@ (8009a04 <SPI_TxByte+0x30>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d1f8      	bne.n	80099e0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80099ee:	1df9      	adds	r1, r7, #7
 80099f0:	2364      	movs	r3, #100	@ 0x64
 80099f2:	2201      	movs	r2, #1
 80099f4:	4803      	ldr	r0, [pc, #12]	@ (8009a04 <SPI_TxByte+0x30>)
 80099f6:	f00a ff75 	bl	80148e4 <HAL_SPI_Transmit>
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	2001c1e4 	.word	0x2001c1e4

08009a08 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXP));
 8009a14:	bf00      	nop
 8009a16:	4b08      	ldr	r3, [pc, #32]	@ (8009a38 <SPI_TxBuffer+0x30>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	f003 0302 	and.w	r3, r3, #2
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d1f8      	bne.n	8009a16 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8009a24:	887a      	ldrh	r2, [r7, #2]
 8009a26:	2364      	movs	r3, #100	@ 0x64
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4803      	ldr	r0, [pc, #12]	@ (8009a38 <SPI_TxBuffer+0x30>)
 8009a2c:	f00a ff5a 	bl	80148e4 <HAL_SPI_Transmit>
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	2001c1e4 	.word	0x2001c1e4

08009a3c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8009a42:	23ff      	movs	r3, #255	@ 0xff
 8009a44:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXP));
 8009a46:	bf00      	nop
 8009a48:	4b09      	ldr	r3, [pc, #36]	@ (8009a70 <SPI_RxByte+0x34>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d1f8      	bne.n	8009a48 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8009a56:	1dba      	adds	r2, r7, #6
 8009a58:	1df9      	adds	r1, r7, #7
 8009a5a:	2364      	movs	r3, #100	@ 0x64
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4803      	ldr	r0, [pc, #12]	@ (8009a70 <SPI_RxByte+0x34>)
 8009a62:	f00b f955 	bl	8014d10 <HAL_SPI_TransmitReceive>

	return data;
 8009a66:	79bb      	ldrb	r3, [r7, #6]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	2001c1e4 	.word	0x2001c1e4

08009a74 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8009a7c:	f7ff ffde 	bl	8009a3c <SPI_RxByte>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	701a      	strb	r2, [r3, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
	uint8_t 	res;
	uint32_t    tickstart;

	/* timeout 500ms */
	tickstart = HAL_GetTick();
 8009a96:	f002 f88d 	bl	800bbb4 <HAL_GetTick>
 8009a9a:	6078      	str	r0, [r7, #4]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8009a9c:	f7ff ffce 	bl	8009a3c <SPI_RxByte>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	70fb      	strb	r3, [r7, #3]
	} while ((res != 0xFF) && ((HAL_GetTick() - tickstart) <= READT_WAIT_TIMEOUT));
 8009aa4:	78fb      	ldrb	r3, [r7, #3]
 8009aa6:	2bff      	cmp	r3, #255	@ 0xff
 8009aa8:	d007      	beq.n	8009aba <SD_ReadyWait+0x2a>
 8009aaa:	f002 f883 	bl	800bbb4 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009ab8:	d9f0      	bls.n	8009a9c <SD_ReadyWait+0xc>

	return res;
 8009aba:	78fb      	ldrb	r3, [r7, #3]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8009aca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8009ace:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8009ad0:	f7ff ff68 	bl	80099a4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60bb      	str	r3, [r7, #8]
 8009ad8:	e005      	b.n	8009ae6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8009ada:	20ff      	movs	r0, #255	@ 0xff
 8009adc:	f7ff ff7a 	bl	80099d4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60bb      	str	r3, [r7, #8]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b09      	cmp	r3, #9
 8009aea:	ddf6      	ble.n	8009ada <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8009aec:	f7ff ff42 	bl	8009974 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8009af0:	2340      	movs	r3, #64	@ 0x40
 8009af2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8009b04:	2395      	movs	r3, #149	@ 0x95
 8009b06:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8009b08:	463b      	mov	r3, r7
 8009b0a:	2106      	movs	r1, #6
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff ff7b 	bl	8009a08 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8009b12:	e002      	b.n	8009b1a <SD_PowerOn+0x56>
	{
		cnt--;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8009b1a:	f7ff ff8f 	bl	8009a3c <SPI_RxByte>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d002      	beq.n	8009b2a <SD_PowerOn+0x66>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1f4      	bne.n	8009b14 <SD_PowerOn+0x50>
	}

	DESELECT();
 8009b2a:	f7ff ff3b 	bl	80099a4 <DESELECT>
	SPI_TxByte(0XFF);
 8009b2e:	20ff      	movs	r0, #255	@ 0xff
 8009b30:	f7ff ff50 	bl	80099d4 <SPI_TxByte>

	PowerFlag = 1;
 8009b34:	4b03      	ldr	r3, [pc, #12]	@ (8009b44 <SD_PowerOn+0x80>)
 8009b36:	2201      	movs	r2, #1
 8009b38:	701a      	strb	r2, [r3, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	2001b67d 	.word	0x2001b67d

08009b48 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8009b4c:	4b03      	ldr	r3, [pc, #12]	@ (8009b5c <SD_PowerOff+0x14>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
}
 8009b52:	bf00      	nop
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	2001b67d 	.word	0x2001b67d

08009b60 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
	return PowerFlag;
 8009b64:	4b03      	ldr	r3, [pc, #12]	@ (8009b74 <SD_CheckPower+0x14>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	2001b67d 	.word	0x2001b67d

08009b78 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
	uint8_t 	token;
	uint32_t    tickstart;

	/* timeout 200ms */
	tickstart = HAL_GetTick();
 8009b82:	f002 f817 	bl	800bbb4 <HAL_GetTick>
 8009b86:	60f8      	str	r0, [r7, #12]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8009b88:	f7ff ff58 	bl	8009a3c <SPI_RxByte>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	72fb      	strb	r3, [r7, #11]
	} while((token == 0xFF) && ((HAL_GetTick() - tickstart) <= RX_DATA_TIMEOUT));
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	2bff      	cmp	r3, #255	@ 0xff
 8009b94:	d106      	bne.n	8009ba4 <SD_RxDataBlock+0x2c>
 8009b96:	f002 f80d 	bl	800bbb4 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2bc8      	cmp	r3, #200	@ 0xc8
 8009ba2:	d9f1      	bls.n	8009b88 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	2bfe      	cmp	r3, #254	@ 0xfe
 8009ba8:	d001      	beq.n	8009bae <SD_RxDataBlock+0x36>
 8009baa:	2300      	movs	r3, #0
 8009bac:	e00f      	b.n	8009bce <SD_RxDataBlock+0x56>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7ff ff5d 	bl	8009a74 <SPI_RxBytePtr>
	} while(len--);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	1e5a      	subs	r2, r3, #1
 8009bbe:	603a      	str	r2, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1f4      	bne.n	8009bae <SD_RxDataBlock+0x36>

	/* discard CRC */
	SPI_RxByte();
 8009bc4:	f7ff ff3a 	bl	8009a3c <SPI_RxByte>
	SPI_RxByte();
 8009bc8:	f7ff ff38 	bl	8009a3c <SPI_RxByte>

	return TRUE;
 8009bcc:	2301      	movs	r3, #1
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8009be6:	f7ff ff53 	bl	8009a90 <SD_ReadyWait>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2bff      	cmp	r3, #255	@ 0xff
 8009bee:	d001      	beq.n	8009bf4 <SD_TxDataBlock+0x1e>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	e02f      	b.n	8009c54 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7ff feec 	bl	80099d4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	2bfd      	cmp	r3, #253	@ 0xfd
 8009c00:	d020      	beq.n	8009c44 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8009c02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fefe 	bl	8009a08 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8009c0c:	f7ff ff16 	bl	8009a3c <SPI_RxByte>
		SPI_RxByte();
 8009c10:	f7ff ff14 	bl	8009a3c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8009c14:	e00b      	b.n	8009c2e <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8009c16:	f7ff ff11 	bl	8009a3c <SPI_RxByte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	f003 031f 	and.w	r3, r3, #31
 8009c24:	2b05      	cmp	r3, #5
 8009c26:	d006      	beq.n	8009c36 <SD_TxDataBlock+0x60>
			i++;
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	2b40      	cmp	r3, #64	@ 0x40
 8009c32:	d9f0      	bls.n	8009c16 <SD_TxDataBlock+0x40>
 8009c34:	e000      	b.n	8009c38 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8009c36:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8009c38:	bf00      	nop
 8009c3a:	f7ff feff 	bl	8009a3c <SPI_RxByte>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0fa      	beq.n	8009c3a <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	f003 031f 	and.w	r3, r3, #31
 8009c4a:	2b05      	cmp	r3, #5
 8009c4c:	d101      	bne.n	8009c52 <SD_TxDataBlock+0x7c>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e000      	b.n	8009c54 <SD_TxDataBlock+0x7e>

	return FALSE;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	6039      	str	r1, [r7, #0]
 8009c66:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8009c68:	f7ff ff12 	bl	8009a90 <SD_ReadyWait>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2bff      	cmp	r3, #255	@ 0xff
 8009c70:	d001      	beq.n	8009c76 <SD_SendCmd+0x1a>
 8009c72:	23ff      	movs	r3, #255	@ 0xff
 8009c74:	e042      	b.n	8009cfc <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff feab 	bl	80099d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	0e1b      	lsrs	r3, r3, #24
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff fea5 	bl	80099d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fe9f 	bl	80099d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	0a1b      	lsrs	r3, r3, #8
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff fe99 	bl	80099d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fe94 	bl	80099d4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	2b40      	cmp	r3, #64	@ 0x40
 8009cb0:	d102      	bne.n	8009cb8 <SD_SendCmd+0x5c>
 8009cb2:	2395      	movs	r3, #149	@ 0x95
 8009cb4:	73fb      	strb	r3, [r7, #15]
 8009cb6:	e007      	b.n	8009cc8 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	2b48      	cmp	r3, #72	@ 0x48
 8009cbc:	d102      	bne.n	8009cc4 <SD_SendCmd+0x68>
 8009cbe:	2387      	movs	r3, #135	@ 0x87
 8009cc0:	73fb      	strb	r3, [r7, #15]
 8009cc2:	e001      	b.n	8009cc8 <SD_SendCmd+0x6c>
	else crc = 1;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7ff fe82 	bl	80099d4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	2b4c      	cmp	r3, #76	@ 0x4c
 8009cd4:	d101      	bne.n	8009cda <SD_SendCmd+0x7e>
 8009cd6:	f7ff feb1 	bl	8009a3c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8009cda:	230a      	movs	r3, #10
 8009cdc:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8009cde:	f7ff fead 	bl	8009a3c <SPI_RxByte>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8009ce6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da05      	bge.n	8009cfa <SD_SendCmd+0x9e>
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	73bb      	strb	r3, [r7, #14]
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1f1      	bne.n	8009cde <SD_SendCmd+0x82>

	return res;
 8009cfa:	7b7b      	ldrb	r3, [r7, #13]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b08b      	sub	sp, #44	@ 0x2c
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t 			n, type, ocr[4];
	GPIO_InitTypeDef 	GPIO_InitStruct = {0};
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	605a      	str	r2, [r3, #4]
 8009d18:	609a      	str	r2, [r3, #8]
 8009d1a:	60da      	str	r2, [r3, #12]
 8009d1c:	611a      	str	r2, [r3, #16]
	uint32_t			tickstart;

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <SD_disk_initialize+0x24>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e102      	b.n	8009f2e <SD_disk_initialize+0x22a>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8009d28:	4b83      	ldr	r3, [pc, #524]	@ (8009f38 <SD_disk_initialize+0x234>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <SD_disk_initialize+0x3a>
 8009d36:	4b80      	ldr	r3, [pc, #512]	@ (8009f38 <SD_disk_initialize+0x234>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	e0f7      	b.n	8009f2e <SD_disk_initialize+0x22a>

	// initialize the CS pin
	GPIO_InitStruct.Pin = SD_CS_PIN;
 8009d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d42:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d44:	2301      	movs	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SD_CS_PORT, &GPIO_InitStruct);
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	4619      	mov	r1, r3
 8009d56:	4879      	ldr	r0, [pc, #484]	@ (8009f3c <SD_disk_initialize+0x238>)
 8009d58:	f003 fdec 	bl	800d934 <HAL_GPIO_Init>


	/* power on */
	SD_PowerOn();
 8009d5c:	f7ff feb2 	bl	8009ac4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8009d60:	f7ff fe08 	bl	8009974 <SELECT>

	/* check disk type */
	type = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	2040      	movs	r0, #64	@ 0x40
 8009d6e:	f7ff ff75 	bl	8009c5c <SD_SendCmd>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	f040 80c0 	bne.w	8009efa <SD_disk_initialize+0x1f6>
	{
		/* timeout 1 sec */
		tickstart = HAL_GetTick();
 8009d7a:	f001 ff1b 	bl	800bbb4 <HAL_GetTick>
 8009d7e:	6238      	str	r0, [r7, #32]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8009d80:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8009d84:	2048      	movs	r0, #72	@ 0x48
 8009d86:	f7ff ff69 	bl	8009c5c <SD_SendCmd>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d16a      	bne.n	8009e66 <SD_disk_initialize+0x162>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009d96:	e00f      	b.n	8009db8 <SD_disk_initialize+0xb4>
			{
				ocr[n] = SPI_RxByte();
 8009d98:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009d9c:	f7ff fe4e 	bl	8009a3c <SPI_RxByte>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8009da8:	443b      	add	r3, r7
 8009daa:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (n = 0; n < 4; n++)
 8009dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009db2:	3301      	adds	r3, #1
 8009db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d9eb      	bls.n	8009d98 <SD_disk_initialize+0x94>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8009dc0:	7fbb      	ldrb	r3, [r7, #30]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	f040 8099 	bne.w	8009efa <SD_disk_initialize+0x1f6>
 8009dc8:	7ffb      	ldrb	r3, [r7, #31]
 8009dca:	2baa      	cmp	r3, #170	@ 0xaa
 8009dcc:	f040 8095 	bne.w	8009efa <SD_disk_initialize+0x1f6>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	2077      	movs	r0, #119	@ 0x77
 8009dd4:	f7ff ff42 	bl	8009c5c <SD_SendCmd>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d807      	bhi.n	8009dee <SD_disk_initialize+0xea>
 8009dde:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009de2:	2069      	movs	r0, #105	@ 0x69
 8009de4:	f7ff ff3a 	bl	8009c5c <SD_SendCmd>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d008      	beq.n	8009e00 <SD_disk_initialize+0xfc>
				} while (((HAL_GetTick() - tickstart) <=  INITIALIZE_TIMEOUT));
 8009dee:	f001 fee1 	bl	800bbb4 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dfc:	d9e8      	bls.n	8009dd0 <SD_disk_initialize+0xcc>
 8009dfe:	e000      	b.n	8009e02 <SD_disk_initialize+0xfe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8009e00:	bf00      	nop

				/* READ_OCR */
				if (((HAL_GetTick() - tickstart) <=  INITIALIZE_TIMEOUT) && SD_SendCmd(CMD58, 0) == 0)
 8009e02:	f001 fed7 	bl	800bbb4 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e10:	d873      	bhi.n	8009efa <SD_disk_initialize+0x1f6>
 8009e12:	2100      	movs	r1, #0
 8009e14:	207a      	movs	r0, #122	@ 0x7a
 8009e16:	f7ff ff21 	bl	8009c5c <SD_SendCmd>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d16c      	bne.n	8009efa <SD_disk_initialize+0x1f6>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e26:	e00f      	b.n	8009e48 <SD_disk_initialize+0x144>
					{
						ocr[n] = SPI_RxByte();
 8009e28:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009e2c:	f7ff fe06 	bl	8009a3c <SPI_RxByte>
 8009e30:	4603      	mov	r3, r0
 8009e32:	461a      	mov	r2, r3
 8009e34:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8009e38:	443b      	add	r3, r7
 8009e3a:	f803 2c0c 	strb.w	r2, [r3, #-12]
					for (n = 0; n < 4; n++)
 8009e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e42:	3301      	adds	r3, #1
 8009e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	d9eb      	bls.n	8009e28 <SD_disk_initialize+0x124>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8009e50:	7f3b      	ldrb	r3, [r7, #28]
 8009e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <SD_disk_initialize+0x15a>
 8009e5a:	230c      	movs	r3, #12
 8009e5c:	e000      	b.n	8009e60 <SD_disk_initialize+0x15c>
 8009e5e:	2304      	movs	r3, #4
 8009e60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009e64:	e049      	b.n	8009efa <SD_disk_initialize+0x1f6>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8009e66:	2100      	movs	r1, #0
 8009e68:	2077      	movs	r0, #119	@ 0x77
 8009e6a:	f7ff fef7 	bl	8009c5c <SD_SendCmd>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d808      	bhi.n	8009e86 <SD_disk_initialize+0x182>
 8009e74:	2100      	movs	r1, #0
 8009e76:	2069      	movs	r0, #105	@ 0x69
 8009e78:	f7ff fef0 	bl	8009c5c <SD_SendCmd>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d801      	bhi.n	8009e86 <SD_disk_initialize+0x182>
 8009e82:	2302      	movs	r3, #2
 8009e84:	e000      	b.n	8009e88 <SD_disk_initialize+0x184>
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			do
			{
				if (type == CT_SD1)
 8009e8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d10e      	bne.n	8009eb2 <SD_disk_initialize+0x1ae>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8009e94:	2100      	movs	r1, #0
 8009e96:	2077      	movs	r0, #119	@ 0x77
 8009e98:	f7ff fee0 	bl	8009c5c <SD_SendCmd>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d80e      	bhi.n	8009ec0 <SD_disk_initialize+0x1bc>
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	2069      	movs	r0, #105	@ 0x69
 8009ea6:	f7ff fed9 	bl	8009c5c <SD_SendCmd>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d107      	bne.n	8009ec0 <SD_disk_initialize+0x1bc>
 8009eb0:	e010      	b.n	8009ed4 <SD_disk_initialize+0x1d0>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	2041      	movs	r0, #65	@ 0x41
 8009eb6:	f7ff fed1 	bl	8009c5c <SD_SendCmd>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d008      	beq.n	8009ed2 <SD_disk_initialize+0x1ce>
				}

			} while (((HAL_GetTick() - tickstart) <= INITIALIZE_TIMEOUT));
 8009ec0:	f001 fe78 	bl	800bbb4 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ece:	d9dd      	bls.n	8009e8c <SD_disk_initialize+0x188>
 8009ed0:	e000      	b.n	8009ed4 <SD_disk_initialize+0x1d0>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8009ed2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!(((HAL_GetTick() - tickstart) <= INITIALIZE_TIMEOUT)) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8009ed4:	f001 fe6e 	bl	800bbb4 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ee2:	d807      	bhi.n	8009ef4 <SD_disk_initialize+0x1f0>
 8009ee4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009ee8:	2050      	movs	r0, #80	@ 0x50
 8009eea:	f7ff feb7 	bl	8009c5c <SD_SendCmd>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <SD_disk_initialize+0x1f6>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}
	}

	CardType = type;
 8009efa:	4a11      	ldr	r2, [pc, #68]	@ (8009f40 <SD_disk_initialize+0x23c>)
 8009efc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f00:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8009f02:	f7ff fd4f 	bl	80099a4 <DESELECT>
	SPI_RxByte();
 8009f06:	f7ff fd99 	bl	8009a3c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8009f0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d008      	beq.n	8009f24 <SD_disk_initialize+0x220>
	{
		Stat &= ~STA_NOINIT;
 8009f12:	4b09      	ldr	r3, [pc, #36]	@ (8009f38 <SD_disk_initialize+0x234>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f023 0301 	bic.w	r3, r3, #1
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4b06      	ldr	r3, [pc, #24]	@ (8009f38 <SD_disk_initialize+0x234>)
 8009f20:	701a      	strb	r2, [r3, #0]
 8009f22:	e001      	b.n	8009f28 <SD_disk_initialize+0x224>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8009f24:	f7ff fe10 	bl	8009b48 <SD_PowerOff>
	}

	return Stat;
 8009f28:	4b03      	ldr	r3, [pc, #12]	@ (8009f38 <SD_disk_initialize+0x234>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	b2db      	uxtb	r3, r3
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	372c      	adds	r7, #44	@ 0x2c
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd90      	pop	{r4, r7, pc}
 8009f36:	bf00      	nop
 8009f38:	2000026c 	.word	0x2000026c
 8009f3c:	42020000 	.word	0x42020000
 8009f40:	2001b67c 	.word	0x2001b67c

08009f44 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <SD_disk_status+0x14>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e002      	b.n	8009f5e <SD_disk_status+0x1a>
	return Stat;
 8009f58:	4b04      	ldr	r3, [pc, #16]	@ (8009f6c <SD_disk_status+0x28>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	b2db      	uxtb	r3, r3
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	2000026c 	.word	0x2000026c

08009f70 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d102      	bne.n	8009f8c <SD_disk_read+0x1c>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <SD_disk_read+0x20>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	e051      	b.n	800a034 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f90:	4b2a      	ldr	r3, [pc, #168]	@ (800a03c <SD_disk_read+0xcc>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <SD_disk_read+0x32>
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e048      	b.n	800a034 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8009fa2:	4b27      	ldr	r3, [pc, #156]	@ (800a040 <SD_disk_read+0xd0>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <SD_disk_read+0x44>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	025b      	lsls	r3, r3, #9
 8009fb2:	607b      	str	r3, [r7, #4]

	SELECT();
 8009fb4:	f7ff fcde 	bl	8009974 <SELECT>

	if (count == 1)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d111      	bne.n	8009fe2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8009fbe:	6879      	ldr	r1, [r7, #4]
 8009fc0:	2051      	movs	r0, #81	@ 0x51
 8009fc2:	f7ff fe4b 	bl	8009c5c <SD_SendCmd>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d129      	bne.n	800a020 <SD_disk_read+0xb0>
 8009fcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009fd0:	68b8      	ldr	r0, [r7, #8]
 8009fd2:	f7ff fdd1 	bl	8009b78 <SD_RxDataBlock>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d021      	beq.n	800a020 <SD_disk_read+0xb0>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	e01e      	b.n	800a020 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	2052      	movs	r0, #82	@ 0x52
 8009fe6:	f7ff fe39 	bl	8009c5c <SD_SendCmd>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d117      	bne.n	800a020 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8009ff0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009ff4:	68b8      	ldr	r0, [r7, #8]
 8009ff6:	f7ff fdbf 	bl	8009b78 <SD_RxDataBlock>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00a      	beq.n	800a016 <SD_disk_read+0xa6>
				buff += 512;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a006:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	603b      	str	r3, [r7, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1ed      	bne.n	8009ff0 <SD_disk_read+0x80>
 800a014:	e000      	b.n	800a018 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800a016:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800a018:	2100      	movs	r1, #0
 800a01a:	204c      	movs	r0, #76	@ 0x4c
 800a01c:	f7ff fe1e 	bl	8009c5c <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800a020:	f7ff fcc0 	bl	80099a4 <DESELECT>
	SPI_RxByte();
 800a024:	f7ff fd0a 	bl	8009a3c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bf14      	ite	ne
 800a02e:	2301      	movne	r3, #1
 800a030:	2300      	moveq	r3, #0
 800a032:	b2db      	uxtb	r3, r3
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	2000026c 	.word	0x2000026c
 800a040:	2001b67c 	.word	0x2001b67c

0800a044 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60b9      	str	r1, [r7, #8]
 800a04c:	607a      	str	r2, [r7, #4]
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	4603      	mov	r3, r0
 800a052:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d102      	bne.n	800a060 <SD_disk_write+0x1c>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <SD_disk_write+0x20>
 800a060:	2304      	movs	r3, #4
 800a062:	e06b      	b.n	800a13c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a064:	4b37      	ldr	r3, [pc, #220]	@ (800a144 <SD_disk_write+0x100>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <SD_disk_write+0x32>
 800a072:	2303      	movs	r3, #3
 800a074:	e062      	b.n	800a13c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800a076:	4b33      	ldr	r3, [pc, #204]	@ (800a144 <SD_disk_write+0x100>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f003 0304 	and.w	r3, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <SD_disk_write+0x44>
 800a084:	2302      	movs	r3, #2
 800a086:	e059      	b.n	800a13c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800a088:	4b2f      	ldr	r3, [pc, #188]	@ (800a148 <SD_disk_write+0x104>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <SD_disk_write+0x56>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	025b      	lsls	r3, r3, #9
 800a098:	607b      	str	r3, [r7, #4]

	SELECT();
 800a09a:	f7ff fc6b 	bl	8009974 <SELECT>

	if (count == 1)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d110      	bne.n	800a0c6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	2058      	movs	r0, #88	@ 0x58
 800a0a8:	f7ff fdd8 	bl	8009c5c <SD_SendCmd>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d13a      	bne.n	800a128 <SD_disk_write+0xe4>
 800a0b2:	21fe      	movs	r1, #254	@ 0xfe
 800a0b4:	68b8      	ldr	r0, [r7, #8]
 800a0b6:	f7ff fd8e 	bl	8009bd6 <SD_TxDataBlock>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d033      	beq.n	800a128 <SD_disk_write+0xe4>
			count = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	e030      	b.n	800a128 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800a0c6:	4b20      	ldr	r3, [pc, #128]	@ (800a148 <SD_disk_write+0x104>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d007      	beq.n	800a0e2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	2077      	movs	r0, #119	@ 0x77
 800a0d6:	f7ff fdc1 	bl	8009c5c <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	2057      	movs	r0, #87	@ 0x57
 800a0de:	f7ff fdbd 	bl	8009c5c <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	2059      	movs	r0, #89	@ 0x59
 800a0e6:	f7ff fdb9 	bl	8009c5c <SD_SendCmd>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d11b      	bne.n	800a128 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800a0f0:	21fc      	movs	r1, #252	@ 0xfc
 800a0f2:	68b8      	ldr	r0, [r7, #8]
 800a0f4:	f7ff fd6f 	bl	8009bd6 <SD_TxDataBlock>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <SD_disk_write+0xd0>
				buff += 512;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a104:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	3b01      	subs	r3, #1
 800a10a:	603b      	str	r3, [r7, #0]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1ee      	bne.n	800a0f0 <SD_disk_write+0xac>
 800a112:	e000      	b.n	800a116 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800a114:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800a116:	21fd      	movs	r1, #253	@ 0xfd
 800a118:	2000      	movs	r0, #0
 800a11a:	f7ff fd5c 	bl	8009bd6 <SD_TxDataBlock>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <SD_disk_write+0xe4>
			{
				count = 1;
 800a124:	2301      	movs	r3, #1
 800a126:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800a128:	f7ff fc3c 	bl	80099a4 <DESELECT>
	SPI_RxByte();
 800a12c:	f7ff fc86 	bl	8009a3c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	bf14      	ite	ne
 800a136:	2301      	movne	r3, #1
 800a138:	2300      	moveq	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	2000026c 	.word	0x2000026c
 800a148:	2001b67c 	.word	0x2001b67c

0800a14c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800a14c:	b590      	push	{r4, r7, lr}
 800a14e:	b08b      	sub	sp, #44	@ 0x2c
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	603a      	str	r2, [r7, #0]
 800a156:	71fb      	strb	r3, [r7, #7]
 800a158:	460b      	mov	r3, r1
 800a15a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <SD_disk_ioctl+0x1e>
 800a166:	2304      	movs	r3, #4
 800a168:	e113      	b.n	800a392 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800a170:	79bb      	ldrb	r3, [r7, #6]
 800a172:	2b05      	cmp	r3, #5
 800a174:	d124      	bne.n	800a1c0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d012      	beq.n	800a1a4 <SD_disk_ioctl+0x58>
 800a17e:	2b02      	cmp	r3, #2
 800a180:	dc1a      	bgt.n	800a1b8 <SD_disk_ioctl+0x6c>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <SD_disk_ioctl+0x40>
 800a186:	2b01      	cmp	r3, #1
 800a188:	d006      	beq.n	800a198 <SD_disk_ioctl+0x4c>
 800a18a:	e015      	b.n	800a1b8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800a18c:	f7ff fcdc 	bl	8009b48 <SD_PowerOff>
			res = RES_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800a196:	e0fa      	b.n	800a38e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800a198:	f7ff fc94 	bl	8009ac4 <SD_PowerOn>
			res = RES_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800a1a2:	e0f4      	b.n	800a38e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	1c5c      	adds	r4, r3, #1
 800a1a8:	f7ff fcda 	bl	8009b60 <SD_CheckPower>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800a1b6:	e0ea      	b.n	800a38e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a1be:	e0e6      	b.n	800a38e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a1c0:	4b76      	ldr	r3, [pc, #472]	@ (800a39c <SD_disk_ioctl+0x250>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <SD_disk_ioctl+0x86>
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e0df      	b.n	800a392 <SD_disk_ioctl+0x246>

		SELECT();
 800a1d2:	f7ff fbcf 	bl	8009974 <SELECT>

		switch (ctrl)
 800a1d6:	79bb      	ldrb	r3, [r7, #6]
 800a1d8:	2b0d      	cmp	r3, #13
 800a1da:	f200 80c9 	bhi.w	800a370 <SD_disk_ioctl+0x224>
 800a1de:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e4 <SD_disk_ioctl+0x98>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a2db 	.word	0x0800a2db
 800a1e8:	0800a21d 	.word	0x0800a21d
 800a1ec:	0800a2cb 	.word	0x0800a2cb
 800a1f0:	0800a371 	.word	0x0800a371
 800a1f4:	0800a371 	.word	0x0800a371
 800a1f8:	0800a371 	.word	0x0800a371
 800a1fc:	0800a371 	.word	0x0800a371
 800a200:	0800a371 	.word	0x0800a371
 800a204:	0800a371 	.word	0x0800a371
 800a208:	0800a371 	.word	0x0800a371
 800a20c:	0800a371 	.word	0x0800a371
 800a210:	0800a2ed 	.word	0x0800a2ed
 800a214:	0800a311 	.word	0x0800a311
 800a218:	0800a335 	.word	0x0800a335
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800a21c:	2100      	movs	r1, #0
 800a21e:	2049      	movs	r0, #73	@ 0x49
 800a220:	f7ff fd1c 	bl	8009c5c <SD_SendCmd>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	f040 80a6 	bne.w	800a378 <SD_disk_ioctl+0x22c>
 800a22c:	f107 030c 	add.w	r3, r7, #12
 800a230:	2110      	movs	r1, #16
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fca0 	bl	8009b78 <SD_RxDataBlock>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 809c 	beq.w	800a378 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800a240:	7b3b      	ldrb	r3, [r7, #12]
 800a242:	099b      	lsrs	r3, r3, #6
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b01      	cmp	r3, #1
 800a248:	d10d      	bne.n	800a266 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800a24a:	7d7b      	ldrb	r3, [r7, #21]
 800a24c:	461a      	mov	r2, r3
 800a24e:	7d3b      	ldrb	r3, [r7, #20]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	b29b      	uxth	r3, r3
 800a254:	4413      	add	r3, r2
 800a256:	b29b      	uxth	r3, r3
 800a258:	3301      	adds	r3, #1
 800a25a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800a25c:	8bfb      	ldrh	r3, [r7, #30]
 800a25e:	029a      	lsls	r2, r3, #10
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e02d      	b.n	800a2c2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a266:	7c7b      	ldrb	r3, [r7, #17]
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	7dbb      	ldrb	r3, [r7, #22]
 800a270:	09db      	lsrs	r3, r3, #7
 800a272:	b2db      	uxtb	r3, r3
 800a274:	4413      	add	r3, r2
 800a276:	b2da      	uxtb	r2, r3
 800a278:	7d7b      	ldrb	r3, [r7, #21]
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0306 	and.w	r3, r3, #6
 800a282:	b2db      	uxtb	r3, r3
 800a284:	4413      	add	r3, r2
 800a286:	b2db      	uxtb	r3, r3
 800a288:	3302      	adds	r3, #2
 800a28a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800a28e:	7d3b      	ldrb	r3, [r7, #20]
 800a290:	099b      	lsrs	r3, r3, #6
 800a292:	b2db      	uxtb	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	7cfb      	ldrb	r3, [r7, #19]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	4413      	add	r3, r2
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	7cbb      	ldrb	r3, [r7, #18]
 800a2a2:	029b      	lsls	r3, r3, #10
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800a2b4:	8bfa      	ldrh	r2, [r7, #30]
 800a2b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2ba:	3b09      	subs	r3, #9
 800a2bc:	409a      	lsls	r2, r3
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 800a2c8:	e056      	b.n	800a378 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2d0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800a2d8:	e055      	b.n	800a386 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800a2da:	f7ff fbd9 	bl	8009a90 <SD_ReadyWait>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2bff      	cmp	r3, #255	@ 0xff
 800a2e2:	d14b      	bne.n	800a37c <SD_disk_ioctl+0x230>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800a2ea:	e047      	b.n	800a37c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	2049      	movs	r0, #73	@ 0x49
 800a2f0:	f7ff fcb4 	bl	8009c5c <SD_SendCmd>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d142      	bne.n	800a380 <SD_disk_ioctl+0x234>
 800a2fa:	2110      	movs	r1, #16
 800a2fc:	6a38      	ldr	r0, [r7, #32]
 800a2fe:	f7ff fc3b 	bl	8009b78 <SD_RxDataBlock>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d03b      	beq.n	800a380 <SD_disk_ioctl+0x234>
 800a308:	2300      	movs	r3, #0
 800a30a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800a30e:	e037      	b.n	800a380 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800a310:	2100      	movs	r1, #0
 800a312:	204a      	movs	r0, #74	@ 0x4a
 800a314:	f7ff fca2 	bl	8009c5c <SD_SendCmd>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d132      	bne.n	800a384 <SD_disk_ioctl+0x238>
 800a31e:	2110      	movs	r1, #16
 800a320:	6a38      	ldr	r0, [r7, #32]
 800a322:	f7ff fc29 	bl	8009b78 <SD_RxDataBlock>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d02b      	beq.n	800a384 <SD_disk_ioctl+0x238>
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800a332:	e027      	b.n	800a384 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800a334:	2100      	movs	r1, #0
 800a336:	207a      	movs	r0, #122	@ 0x7a
 800a338:	f7ff fc90 	bl	8009c5c <SD_SendCmd>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d116      	bne.n	800a370 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800a342:	2300      	movs	r3, #0
 800a344:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a348:	e00b      	b.n	800a362 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800a34a:	6a3c      	ldr	r4, [r7, #32]
 800a34c:	1c63      	adds	r3, r4, #1
 800a34e:	623b      	str	r3, [r7, #32]
 800a350:	f7ff fb74 	bl	8009a3c <SPI_RxByte>
 800a354:	4603      	mov	r3, r0
 800a356:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800a358:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a35c:	3301      	adds	r3, #1
 800a35e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a362:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a366:	2b03      	cmp	r3, #3
 800a368:	d9ef      	bls.n	800a34a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800a370:	2304      	movs	r3, #4
 800a372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a376:	e006      	b.n	800a386 <SD_disk_ioctl+0x23a>
			break;
 800a378:	bf00      	nop
 800a37a:	e004      	b.n	800a386 <SD_disk_ioctl+0x23a>
			break;
 800a37c:	bf00      	nop
 800a37e:	e002      	b.n	800a386 <SD_disk_ioctl+0x23a>
			break;
 800a380:	bf00      	nop
 800a382:	e000      	b.n	800a386 <SD_disk_ioctl+0x23a>
			break;
 800a384:	bf00      	nop
		}

		DESELECT();
 800a386:	f7ff fb0d 	bl	80099a4 <DESELECT>
		SPI_RxByte();
 800a38a:	f7ff fb57 	bl	8009a3c <SPI_RxByte>
	}

	return res;
 800a38e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a392:	4618      	mov	r0, r3
 800a394:	372c      	adds	r7, #44	@ 0x2c
 800a396:	46bd      	mov	sp, r7
 800a398:	bd90      	pop	{r4, r7, pc}
 800a39a:	bf00      	nop
 800a39c:	2000026c 	.word	0x2000026c

0800a3a0 <get_fattime>:

extern RTC_HandleTypeDef hrtc;


DWORD get_fattime (void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
	//RTC_t rtc;
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	//rtc_gettime( &rtc );
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800a3a6:	f107 0308 	add.w	r3, r7, #8
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4815      	ldr	r0, [pc, #84]	@ (800a404 <get_fattime+0x64>)
 800a3b0:	f009 feae 	bl	8014110 <HAL_RTC_GetTime>
	if(HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) == HAL_OK)
 800a3b4:	1d3b      	adds	r3, r7, #4
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4812      	ldr	r0, [pc, #72]	@ (800a404 <get_fattime+0x64>)
 800a3bc:	f009 ff90 	bl	80142e0 <HAL_RTC_GetDate>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d116      	bne.n	800a3f4 <get_fattime+0x54>
	{
		res =  (((DWORD)date.Year + 20) << 25)	// normalize to 1980
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	3314      	adds	r3, #20
 800a3ca:	065a      	lsls	r2, r3, #25
				| ((DWORD)date.Month << 21)
 800a3cc:	797b      	ldrb	r3, [r7, #5]
 800a3ce:	055b      	lsls	r3, r3, #21
 800a3d0:	431a      	orrs	r2, r3
				| ((DWORD)date.Date << 16)
 800a3d2:	79bb      	ldrb	r3, [r7, #6]
 800a3d4:	041b      	lsls	r3, r3, #16
 800a3d6:	4313      	orrs	r3, r2
				| (WORD)(time.Hours << 11)
 800a3d8:	7a3a      	ldrb	r2, [r7, #8]
 800a3da:	02d2      	lsls	r2, r2, #11
 800a3dc:	b292      	uxth	r2, r2
 800a3de:	4313      	orrs	r3, r2
				| (WORD)(time.Minutes << 5)
 800a3e0:	7a7a      	ldrb	r2, [r7, #9]
 800a3e2:	0152      	lsls	r2, r2, #5
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	4313      	orrs	r3, r2
				| (WORD)(time.Seconds >> 1);
 800a3e8:	7aba      	ldrb	r2, [r7, #10]
 800a3ea:	0852      	lsrs	r2, r2, #1
 800a3ec:	b2d2      	uxtb	r2, r2
		res =  (((DWORD)date.Year + 20) << 25)	// normalize to 1980
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	e001      	b.n	800a3f8 <get_fattime+0x58>
	}
	else
	{
		res =  0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61fb      	str	r3, [r7, #28]
	}
	return res;
 800a3f8:	69fb      	ldr	r3, [r7, #28]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	2001c1b4 	.word	0x2001c1b4

0800a408 <fat_to_time>:

void fat_to_time(WORD fattime, char* szTime)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	4603      	mov	r3, r0
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	80fb      	strh	r3, [r7, #6]
	int hours;
	int minutes;
	int seconds;

	hours = (fattime >> 11) & 0x1f;
 800a414:	88fb      	ldrh	r3, [r7, #6]
 800a416:	0adb      	lsrs	r3, r3, #11
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f003 031f 	and.w	r3, r3, #31
 800a41e:	617b      	str	r3, [r7, #20]
	minutes = (fattime >> 5) & 0x3f;
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	b29b      	uxth	r3, r3
 800a426:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a42a:	613b      	str	r3, [r7, #16]
	seconds = (fattime & 0x1f) * 2;
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	f003 031f 	and.w	r3, r3, #31
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	60fb      	str	r3, [r7, #12]
	
	sprintf(szTime, "%2d:%02d:%02d", hours, minutes, seconds);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	4904      	ldr	r1, [pc, #16]	@ (800a450 <fat_to_time+0x48>)
 800a440:	6838      	ldr	r0, [r7, #0]
 800a442:	f01b fddb 	bl	8025ffc <siprintf>

}
 800a446:	bf00      	nop
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	08027464 	.word	0x08027464

0800a454 <fat_to_date>:

void fat_to_date(WORD fatdate, char* szDate)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af02      	add	r7, sp, #8
 800a45a:	4603      	mov	r3, r0
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	80fb      	strh	r3, [r7, #6]
	int date;
	int month;
	int year;

	year = (fatdate >> 9) & 0x7f;
 800a460:	88fb      	ldrh	r3, [r7, #6]
 800a462:	0a5b      	lsrs	r3, r3, #9
 800a464:	b29b      	uxth	r3, r3
 800a466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a46a:	617b      	str	r3, [r7, #20]
	month = (fatdate >> 5) & 0xf;
 800a46c:	88fb      	ldrh	r3, [r7, #6]
 800a46e:	095b      	lsrs	r3, r3, #5
 800a470:	b29b      	uxth	r3, r3
 800a472:	f003 030f 	and.w	r3, r3, #15
 800a476:	613b      	str	r3, [r7, #16]
	date = fatdate & 0x1f;
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	f003 031f 	and.w	r3, r3, #31
 800a47e:	60fb      	str	r3, [r7, #12]
	
	sprintf(szDate, "%2d/%02d/%04d", date, month, year+1980);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f203 73bc 	addw	r3, r3, #1980	@ 0x7bc
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	4903      	ldr	r1, [pc, #12]	@ (800a49c <fat_to_date+0x48>)
 800a48e:	6838      	ldr	r0, [r7, #0]
 800a490:	f01b fdb4 	bl	8025ffc <siprintf>
}
 800a494:	bf00      	nop
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	08027474 	.word	0x08027474

0800a4a0 <FreeFilePointer>:
	}
	return NULL;
}

void FreeFilePointer(FIL* fp)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUM_FILE_POINTERS; i++)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e010      	b.n	800a4d0 <FreeFilePointer+0x30>
	{
		if(Files[i].File == fp)
 800a4ae:	4a0c      	ldr	r2, [pc, #48]	@ (800a4e0 <FreeFilePointer+0x40>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d106      	bne.n	800a4ca <FreeFilePointer+0x2a>
		{
			Files[i].Inuse = 0;
 800a4bc:	4a08      	ldr	r2, [pc, #32]	@ (800a4e0 <FreeFilePointer+0x40>)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	4413      	add	r3, r2
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	605a      	str	r2, [r3, #4]
			return;
 800a4c8:	e005      	b.n	800a4d6 <FreeFilePointer+0x36>
	for(int i = 0; i < NUM_FILE_POINTERS; i++)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	ddeb      	ble.n	800a4ae <FreeFilePointer+0xe>
		}
	}
}
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000270 	.word	0x20000270

0800a4e4 <fclose>:
*
* RESTRICTIONS:
*
**********************************************************************/
void fclose(FILE* fp)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	
	if(fp)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d008      	beq.n	800a504 <fclose+0x20>
	{
		f_close(fp);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f010 fa54 	bl	801a9a0 <f_close>

		if(fp)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <fclose+0x20>
		{
			//free(fp);
			//vPortFree(fp);
			FreeFilePointer(fp);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff ffce 	bl	800a4a0 <FreeFilePointer>
		}
	}
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a50c:	b590      	push	{r4, r7, lr}
 800a50e:	b0b7      	sub	sp, #220	@ 0xdc
 800a510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a512:	f001 fb13 	bl	800bb3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a516:	f000 f8f9 	bl	800a70c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_ICACHE_Disable();
 800a51a:	f003 fb9d 	bl	800dc58 <HAL_ICACHE_Disable>
  PCLK1Freq = HAL_RCC_GetPCLK1Freq();
 800a51e:	f004 fc17 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 800a522:	4603      	mov	r3, r0
 800a524:	4a65      	ldr	r2, [pc, #404]	@ (800a6bc <main+0x1b0>)
 800a526:	6013      	str	r3, [r2, #0]
  HAL_ICACHE_Enable();
 800a528:	f003 fb86 	bl	800dc38 <HAL_ICACHE_Enable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a52c:	f000 fbcc 	bl	800acc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a530:	f000 f970 	bl	800a814 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800a534:	f000 fa1c 	bl	800a970 <MX_FDCAN1_Init>
  MX_ETH_Init();
 800a538:	f000 f9ce 	bl	800a8d8 <MX_ETH_Init>
  MX_ICACHE_Init();
 800a53c:	f000 fa5e 	bl	800a9fc <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 800a540:	f000 fb44 	bl	800abcc <MX_USART3_UART_Init>
  MX_RTC_Init();
 800a544:	f000 fa66 	bl	800aa14 <MX_RTC_Init>
  MX_SPI3_Init();
 800a548:	f000 faec 	bl	800ab24 <MX_SPI3_Init>
  MX_USB_PCD_Init();
 800a54c:	f000 fb8a 	bl	800ac64 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* init code for FATFS */
  MX_FATFS_Init();
 800a550:	f7ff f9fa 	bl	8009948 <MX_FATFS_Init>
  /* Mount SD Card */
  if(f_mount(&fs, "", 0) != FR_OK)
 800a554:	2200      	movs	r2, #0
 800a556:	495a      	ldr	r1, [pc, #360]	@ (800a6c0 <main+0x1b4>)
 800a558:	485a      	ldr	r0, [pc, #360]	@ (800a6c4 <main+0x1b8>)
 800a55a:	f00f fc61 	bl	8019e20 <f_mount>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <main+0x5e>
  {
    RedLed(LED_EBLINK_1);
 800a564:	200f      	movs	r0, #15
 800a566:	f7fc fe01 	bl	800716c <RedLed>
  }

  (void)GetSettings();
 800a56a:	f7fc fee7 	bl	800733c <GetSettings>

  lVersion = VERSION;
 800a56e:	4b56      	ldr	r3, [pc, #344]	@ (800a6c8 <main+0x1bc>)
 800a570:	f242 7219 	movw	r2, #10009	@ 0x2719
 800a574:	601a      	str	r2, [r3, #0]
  lSerialNumber = MakeSerialNumber();
 800a576:	f000 fcbd 	bl	800aef4 <MakeSerialNumber>
 800a57a:	4603      	mov	r3, r0
 800a57c:	4a53      	ldr	r2, [pc, #332]	@ (800a6cc <main+0x1c0>)
 800a57e:	6013      	str	r3, [r2, #0]
  strcpy(szBuildDateVar, __DATE__);
 800a580:	4a53      	ldr	r2, [pc, #332]	@ (800a6d0 <main+0x1c4>)
 800a582:	4b54      	ldr	r3, [pc, #336]	@ (800a6d4 <main+0x1c8>)
 800a584:	4614      	mov	r4, r2
 800a586:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a588:	6020      	str	r0, [r4, #0]
 800a58a:	6061      	str	r1, [r4, #4]
 800a58c:	60a2      	str	r2, [r4, #8]

  // crashes in the interrupt if TI_NONE is selected
  MainTrackConfig();
 800a58e:	f7fc fff9 	bl	8007584 <MainTrackConfig>

  GreenLed(LED_NORMAL);
 800a592:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
 800a596:	f7fc fe19 	bl	80071cc <GreenLed>

  /* USER CODE END 2 */
	osKernelInitialize();
 800a59a:	f011 fbb3 	bl	801bd04 <osKernelInitialize>

	const osThreadAttr_t defaultTask_attributes = {
 800a59e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800a5a2:	2224      	movs	r2, #36	@ 0x24
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f01b fe3a 	bl	8026220 <memset>
 800a5ac:	4b4a      	ldr	r3, [pc, #296]	@ (800a6d8 <main+0x1cc>)
 800a5ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a5b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5ba:	2318      	movs	r3, #24
 800a5bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		.name = "defaultTask",
		.priority = (osPriority_t) osPriorityNormal,
		.stack_size = 2000
	};
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800a5c0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4844      	ldr	r0, [pc, #272]	@ (800a6dc <main+0x1d0>)
 800a5ca:	f011 fc03 	bl	801bdd4 <osThreadNew>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4a43      	ldr	r2, [pc, #268]	@ (800a6e0 <main+0x1d4>)
 800a5d2:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	const osThreadAttr_t shellTask_attributes = {
 800a5d4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800a5d8:	2224      	movs	r2, #36	@ 0x24
 800a5da:	2100      	movs	r1, #0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f01b fe1f 	bl	8026220 <memset>
 800a5e2:	4b40      	ldr	r3, [pc, #256]	@ (800a6e4 <main+0x1d8>)
 800a5e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a5e8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a5ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a5f0:	2324      	movs	r3, #36	@ 0x24
 800a5f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		.priority = (osPriority_t) osPriorityAboveNormal4,
		//.stack_size = 1024
		//.stack_size = 2000
		.stack_size = 3000
	};
	osThreadNew(ShellTask, NULL, &shellTask_attributes);
 800a5f6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	483a      	ldr	r0, [pc, #232]	@ (800a6e8 <main+0x1dc>)
 800a600:	f011 fbe8 	bl	801bdd4 <osThreadNew>

	const osThreadAttr_t scriptTask_attributes = {
 800a604:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a608:	2224      	movs	r2, #36	@ 0x24
 800a60a:	2100      	movs	r1, #0
 800a60c:	4618      	mov	r0, r3
 800a60e:	f01b fe07 	bl	8026220 <memset>
 800a612:	4b36      	ldr	r3, [pc, #216]	@ (800a6ec <main+0x1e0>)
 800a614:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a616:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a61a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a61e:	2321      	movs	r3, #33	@ 0x21
 800a620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		.priority = (osPriority_t) osPriorityAboveNormal1,
		//.stack_size = 1024
		//.stack_size = 2500
		.stack_size = 3000
	};
	osThreadNew(ScriptTask, NULL, &scriptTask_attributes);
 800a624:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a628:	461a      	mov	r2, r3
 800a62a:	2100      	movs	r1, #0
 800a62c:	4830      	ldr	r0, [pc, #192]	@ (800a6f0 <main+0x1e4>)
 800a62e:	f011 fbd1 	bl	801bdd4 <osThreadNew>

	const osThreadAttr_t ledTask_attributes = {
 800a632:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a636:	2224      	movs	r2, #36	@ 0x24
 800a638:	2100      	movs	r1, #0
 800a63a:	4618      	mov	r0, r3
 800a63c:	f01b fdf0 	bl	8026220 <memset>
 800a640:	4b2c      	ldr	r3, [pc, #176]	@ (800a6f4 <main+0x1e8>)
 800a642:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a648:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a64a:	2319      	movs	r3, #25
 800a64c:	663b      	str	r3, [r7, #96]	@ 0x60
		.name = "led",
		.priority = (osPriority_t) osPriorityNormal1,
		.stack_size = 256
	};
	osThreadNew(LedTask, NULL, &ledTask_attributes);
 800a64e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a652:	461a      	mov	r2, r3
 800a654:	2100      	movs	r1, #0
 800a656:	4828      	ldr	r0, [pc, #160]	@ (800a6f8 <main+0x1ec>)
 800a658:	f011 fbbc 	bl	801bdd4 <osThreadNew>

	const osThreadAttr_t commandstationTask_attributes = {
 800a65c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a660:	2224      	movs	r2, #36	@ 0x24
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f01b fddb 	bl	8026220 <memset>
 800a66a:	4b24      	ldr	r3, [pc, #144]	@ (800a6fc <main+0x1f0>)
 800a66c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a66e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a672:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a674:	2319      	movs	r3, #25
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
		.name = "commandstation",
		.priority = (osPriority_t) osPriorityNormal1,
		.stack_size = 3000
	};
	osThreadNew(CommandStationTask, NULL, &commandstationTask_attributes);
 800a678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a67c:	461a      	mov	r2, r3
 800a67e:	2100      	movs	r1, #0
 800a680:	481f      	ldr	r0, [pc, #124]	@ (800a700 <main+0x1f4>)
 800a682:	f011 fba7 	bl	801bdd4 <osThreadNew>

	const osThreadAttr_t inputTask_attributes = {
 800a686:	463b      	mov	r3, r7
 800a688:	2224      	movs	r2, #36	@ 0x24
 800a68a:	2100      	movs	r1, #0
 800a68c:	4618      	mov	r0, r3
 800a68e:	f01b fdc7 	bl	8026220 <memset>
 800a692:	4b1c      	ldr	r3, [pc, #112]	@ (800a704 <main+0x1f8>)
 800a694:	603b      	str	r3, [r7, #0]
 800a696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	2319      	movs	r3, #25
 800a69e:	61bb      	str	r3, [r7, #24]
		.name = "input",
		.priority = (osPriority_t) osPriorityNormal1,
		.stack_size = 256
	};
	osThreadNew(InputTask, NULL, &inputTask_attributes);
 800a6a0:	463b      	mov	r3, r7
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4818      	ldr	r0, [pc, #96]	@ (800a708 <main+0x1fc>)
 800a6a8:	f011 fb94 	bl	801bdd4 <osThreadNew>

	GreenLed(LED_NORMAL);
 800a6ac:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
 800a6b0:	f7fc fd8c 	bl	80071cc <GreenLed>
//k	telnet_server_init();

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800a6b4:	f011 fb5a 	bl	801bd6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a6b8:	bf00      	nop
 800a6ba:	e7fd      	b.n	800a6b8 <main+0x1ac>
 800a6bc:	2001c5ec 	.word	0x2001c5ec
 800a6c0:	08027484 	.word	0x08027484
 800a6c4:	2001c5f0 	.word	0x2001c5f0
 800a6c8:	2001b548 	.word	0x2001b548
 800a6cc:	2001b54c 	.word	0x2001b54c
 800a6d0:	2001b550 	.word	0x2001b550
 800a6d4:	08027488 	.word	0x08027488
 800a6d8:	08027494 	.word	0x08027494
 800a6dc:	0800af7f 	.word	0x0800af7f
 800a6e0:	2001c5e8 	.word	0x2001c5e8
 800a6e4:	080274a0 	.word	0x080274a0
 800a6e8:	08023965 	.word	0x08023965
 800a6ec:	080274a8 	.word	0x080274a8
 800a6f0:	0802397f 	.word	0x0802397f
 800a6f4:	080274b0 	.word	0x080274b0
 800a6f8:	08007305 	.word	0x08007305
 800a6fc:	080274b4 	.word	0x080274b4
 800a700:	08001091 	.word	0x08001091
 800a704:	080274c4 	.word	0x080274c4
 800a708:	08006fc9 	.word	0x08006fc9

0800a70c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b09c      	sub	sp, #112	@ 0x70
 800a710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a712:	f107 0320 	add.w	r3, r7, #32
 800a716:	2250      	movs	r2, #80	@ 0x50
 800a718:	2100      	movs	r1, #0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f01b fd80 	bl	8026220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a720:	f107 0308 	add.w	r3, r7, #8
 800a724:	2200      	movs	r2, #0
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	605a      	str	r2, [r3, #4]
 800a72a:	609a      	str	r2, [r3, #8]
 800a72c:	60da      	str	r2, [r3, #12]
 800a72e:	611a      	str	r2, [r3, #16]
 800a730:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a732:	4b36      	ldr	r3, [pc, #216]	@ (800a80c <SystemClock_Config+0x100>)
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	4a35      	ldr	r2, [pc, #212]	@ (800a80c <SystemClock_Config+0x100>)
 800a738:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a73c:	6113      	str	r3, [r2, #16]
 800a73e:	4b33      	ldr	r3, [pc, #204]	@ (800a80c <SystemClock_Config+0x100>)
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a74a:	bf00      	nop
 800a74c:	4b2f      	ldr	r3, [pc, #188]	@ (800a80c <SystemClock_Config+0x100>)
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b08      	cmp	r3, #8
 800a756:	d1f9      	bne.n	800a74c <SystemClock_Config+0x40>

  /** Configure LSE Drive Capability
  *  Warning : Only applied when the LSE is disabled.
  */
  HAL_PWR_EnableBkUpAccess();
 800a758:	f003 fba2 	bl	800dea0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a75c:	4b2c      	ldr	r3, [pc, #176]	@ (800a810 <SystemClock_Config+0x104>)
 800a75e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a762:	4a2b      	ldr	r2, [pc, #172]	@ (800a810 <SystemClock_Config+0x104>)
 800a764:	f023 0318 	bic.w	r3, r3, #24
 800a768:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800a76c:	233b      	movs	r3, #59	@ 0x3b
 800a76e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a774:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a776:	2301      	movs	r3, #1
 800a778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800a77a:	2308      	movs	r3, #8
 800a77c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a77e:	2340      	movs	r3, #64	@ 0x40
 800a780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a782:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a78c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800a78e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800a794:	2320      	movs	r3, #32
 800a796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a798:	2302      	movs	r3, #2
 800a79a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800a79c:	2302      	movs	r3, #2
 800a79e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800a7b4:	2308      	movs	r3, #8
 800a7b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a7c0:	f107 0320 	add.w	r3, r7, #32
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f003 fb8b 	bl	800dee0 <HAL_RCC_OscConfig>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800a7d0:	f000 fbf0 	bl	800afb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a7d4:	231f      	movs	r3, #31
 800a7d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800a7ec:	f107 0308 	add.w	r3, r7, #8
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f003 ffac 	bl	800e750 <HAL_RCC_ClockConfig>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800a7fe:	f000 fbd9 	bl	800afb4 <Error_Handler>
  }
}
 800a802:	bf00      	nop
 800a804:	3770      	adds	r7, #112	@ 0x70
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	44020800 	.word	0x44020800
 800a810:	44020c00 	.word	0x44020c00

0800a814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a81a:	463b      	mov	r3, r7
 800a81c:	2220      	movs	r2, #32
 800a81e:	2100      	movs	r1, #0
 800a820:	4618      	mov	r0, r3
 800a822:	f01b fcfd 	bl	8026220 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800a826:	4b2a      	ldr	r3, [pc, #168]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a828:	4a2a      	ldr	r2, [pc, #168]	@ (800a8d4 <MX_ADC1_Init+0xc0>)
 800a82a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a82c:	4b28      	ldr	r3, [pc, #160]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a82e:	2200      	movs	r2, #0
 800a830:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a832:	4b27      	ldr	r3, [pc, #156]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a834:	2200      	movs	r2, #0
 800a836:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a838:	4b25      	ldr	r3, [pc, #148]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a83e:	4b24      	ldr	r3, [pc, #144]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a840:	2200      	movs	r2, #0
 800a842:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a844:	4b22      	ldr	r3, [pc, #136]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a846:	2204      	movs	r2, #4
 800a848:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a84a:	4b21      	ldr	r3, [pc, #132]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a850:	4b1f      	ldr	r3, [pc, #124]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a852:	2200      	movs	r2, #0
 800a854:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800a856:	4b1e      	ldr	r3, [pc, #120]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a858:	2201      	movs	r2, #1
 800a85a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a85c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a864:	4b1a      	ldr	r3, [pc, #104]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a866:	2200      	movs	r2, #0
 800a868:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a86a:	4b19      	ldr	r3, [pc, #100]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a870:	4b17      	ldr	r3, [pc, #92]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800a878:	4b15      	ldr	r3, [pc, #84]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a87e:	4b14      	ldr	r3, [pc, #80]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a880:	2200      	movs	r2, #0
 800a882:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800a884:	4b12      	ldr	r3, [pc, #72]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a88c:	4810      	ldr	r0, [pc, #64]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a88e:	f001 fbd3 	bl	800c038 <HAL_ADC_Init>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800a898:	f000 fb8c 	bl	800afb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800a89c:	2301      	movs	r3, #1
 800a89e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a8a0:	2306      	movs	r3, #6
 800a8a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a8a8:	237f      	movs	r3, #127	@ 0x7f
 800a8aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4805      	ldr	r0, [pc, #20]	@ (800a8d0 <MX_ADC1_Init+0xbc>)
 800a8ba:	f001 fd11 	bl	800c2e0 <HAL_ADC_ConfigChannel>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800a8c4:	f000 fb76 	bl	800afb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a8c8:	bf00      	nop
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	2001c038 	.word	0x2001c038
 800a8d4:	42028000 	.word	0x42028000

0800a8d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800a8dc:	4b1e      	ldr	r3, [pc, #120]	@ (800a958 <MX_ETH_Init+0x80>)
 800a8de:	4a1f      	ldr	r2, [pc, #124]	@ (800a95c <MX_ETH_Init+0x84>)
 800a8e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a8e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a960 <MX_ETH_Init+0x88>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800a8e8:	4b1d      	ldr	r3, [pc, #116]	@ (800a960 <MX_ETH_Init+0x88>)
 800a8ea:	2280      	movs	r2, #128	@ 0x80
 800a8ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800a8ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a960 <MX_ETH_Init+0x88>)
 800a8f0:	22e1      	movs	r2, #225	@ 0xe1
 800a8f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800a8f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a960 <MX_ETH_Init+0x88>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800a8fa:	4b19      	ldr	r3, [pc, #100]	@ (800a960 <MX_ETH_Init+0x88>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800a900:	4b17      	ldr	r3, [pc, #92]	@ (800a960 <MX_ETH_Init+0x88>)
 800a902:	2200      	movs	r2, #0
 800a904:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800a906:	4b14      	ldr	r3, [pc, #80]	@ (800a958 <MX_ETH_Init+0x80>)
 800a908:	4a15      	ldr	r2, [pc, #84]	@ (800a960 <MX_ETH_Init+0x88>)
 800a90a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a90c:	4b12      	ldr	r3, [pc, #72]	@ (800a958 <MX_ETH_Init+0x80>)
 800a90e:	2201      	movs	r2, #1
 800a910:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a912:	4b11      	ldr	r3, [pc, #68]	@ (800a958 <MX_ETH_Init+0x80>)
 800a914:	4a13      	ldr	r2, [pc, #76]	@ (800a964 <MX_ETH_Init+0x8c>)
 800a916:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a918:	4b0f      	ldr	r3, [pc, #60]	@ (800a958 <MX_ETH_Init+0x80>)
 800a91a:	4a13      	ldr	r2, [pc, #76]	@ (800a968 <MX_ETH_Init+0x90>)
 800a91c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a91e:	4b0e      	ldr	r3, [pc, #56]	@ (800a958 <MX_ETH_Init+0x80>)
 800a920:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800a924:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800a926:	480c      	ldr	r0, [pc, #48]	@ (800a958 <MX_ETH_Init+0x80>)
 800a928:	f002 fa14 	bl	800cd54 <HAL_ETH_Init>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800a932:	f000 fb3f 	bl	800afb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfigTypeDef));
 800a936:	2238      	movs	r2, #56	@ 0x38
 800a938:	2100      	movs	r1, #0
 800a93a:	480c      	ldr	r0, [pc, #48]	@ (800a96c <MX_ETH_Init+0x94>)
 800a93c:	f01b fc70 	bl	8026220 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a940:	4b0a      	ldr	r3, [pc, #40]	@ (800a96c <MX_ETH_Init+0x94>)
 800a942:	2221      	movs	r2, #33	@ 0x21
 800a944:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a946:	4b09      	ldr	r3, [pc, #36]	@ (800a96c <MX_ETH_Init+0x94>)
 800a948:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a94c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a94e:	4b07      	ldr	r3, [pc, #28]	@ (800a96c <MX_ETH_Init+0x94>)
 800a950:	2200      	movs	r2, #0
 800a952:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800a954:	bf00      	nop
 800a956:	bd80      	pop	{r7, pc}
 800a958:	2001c0a0 	.word	0x2001c0a0
 800a95c:	40028000 	.word	0x40028000
 800a960:	2001c82c 	.word	0x2001c82c
 800a964:	2001bfd8 	.word	0x2001bfd8
 800a968:	2001bf78 	.word	0x2001bf78
 800a96c:	2001bf40 	.word	0x2001bf40

0800a970 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800a974:	4b1f      	ldr	r3, [pc, #124]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a976:	4a20      	ldr	r2, [pc, #128]	@ (800a9f8 <MX_FDCAN1_Init+0x88>)
 800a978:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800a97a:	4b1e      	ldr	r3, [pc, #120]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800a980:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a982:	2200      	movs	r2, #0
 800a984:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800a986:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a988:	2200      	movs	r2, #0
 800a98a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800a98c:	4b19      	ldr	r3, [pc, #100]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a98e:	2200      	movs	r2, #0
 800a990:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800a992:	4b18      	ldr	r3, [pc, #96]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a994:	2200      	movs	r2, #0
 800a996:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800a998:	4b16      	ldr	r3, [pc, #88]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800a99e:	4b15      	ldr	r3, [pc, #84]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800a9a4:	4b13      	ldr	r3, [pc, #76]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800a9aa:	4b12      	ldr	r3, [pc, #72]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 800a9b0:	4b10      	ldr	r3, [pc, #64]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800a9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800a9bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9be:	2201      	movs	r2, #1
 800a9c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800a9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800a9c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800a9ce:	4b09      	ldr	r3, [pc, #36]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800a9d4:	4b07      	ldr	r3, [pc, #28]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800a9da:	4b06      	ldr	r3, [pc, #24]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800a9e0:	4804      	ldr	r0, [pc, #16]	@ (800a9f4 <MX_FDCAN1_Init+0x84>)
 800a9e2:	f002 fdeb 	bl	800d5bc <HAL_FDCAN_Init>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800a9ec:	f000 fae2 	bl	800afb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800a9f0:	bf00      	nop
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	2001c150 	.word	0x2001c150
 800a9f8:	4000a400 	.word	0x4000a400

0800a9fc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800aa00:	f003 f91a 	bl	800dc38 <HAL_ICACHE_Enable>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d001      	beq.n	800aa0e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800aa0a:	f000 fad3 	bl	800afb4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800aa0e:	bf00      	nop
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08e      	sub	sp, #56	@ 0x38
 800aa18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800aa1a:	f107 031c 	add.w	r3, r7, #28
 800aa1e:	2200      	movs	r2, #0
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	605a      	str	r2, [r3, #4]
 800aa24:	609a      	str	r2, [r3, #8]
 800aa26:	60da      	str	r2, [r3, #12]
 800aa28:	611a      	str	r2, [r3, #16]
 800aa2a:	615a      	str	r2, [r3, #20]
 800aa2c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800aa2e:	f107 0308 	add.w	r3, r7, #8
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	605a      	str	r2, [r3, #4]
 800aa38:	609a      	str	r2, [r3, #8]
 800aa3a:	60da      	str	r2, [r3, #12]
 800aa3c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800aa3e:	2300      	movs	r3, #0
 800aa40:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800aa42:	4b36      	ldr	r3, [pc, #216]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa44:	4a36      	ldr	r2, [pc, #216]	@ (800ab20 <MX_RTC_Init+0x10c>)
 800aa46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800aa48:	4b34      	ldr	r3, [pc, #208]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800aa4e:	4b33      	ldr	r3, [pc, #204]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa50:	227f      	movs	r2, #127	@ 0x7f
 800aa52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800aa54:	4b31      	ldr	r3, [pc, #196]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa56:	22ff      	movs	r2, #255	@ 0xff
 800aa58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800aa5a:	4b30      	ldr	r3, [pc, #192]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800aa60:	4b2e      	ldr	r3, [pc, #184]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800aa66:	4b2d      	ldr	r3, [pc, #180]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800aa6c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aa72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800aa74:	4b29      	ldr	r3, [pc, #164]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800aa7a:	4b28      	ldr	r3, [pc, #160]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800aa80:	4826      	ldr	r0, [pc, #152]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aa82:	f009 fa31 	bl	8013ee8 <HAL_RTC_Init>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800aa8c:	f000 fa92 	bl	800afb4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800aa90:	2300      	movs	r3, #0
 800aa92:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800aa94:	2300      	movs	r3, #0
 800aa96:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800aaa0:	f107 031c 	add.w	r3, r7, #28
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	481d      	ldr	r0, [pc, #116]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aaa8:	f009 fd7e 	bl	80145a8 <HAL_RTCEx_PrivilegeModeSet>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800aab2:	f000 fa7f 	bl	800afb4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  #define RTC_COOKIE 0x5a5a5a5a
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == RTC_COOKIE)
 800aab6:	2100      	movs	r1, #0
 800aab8:	4818      	ldr	r0, [pc, #96]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aaba:	f009 fd5f 	bl	801457c <HAL_RTCEx_BKUPRead>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f1b3 3f5a 	cmp.w	r3, #1515870810	@ 0x5a5a5a5a
 800aac4:	d025      	beq.n	800ab12 <MX_RTC_Init+0xfe>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800aace:	2300      	movs	r3, #0
 800aad0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aad2:	2300      	movs	r3, #0
 800aad4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aad6:	2300      	movs	r3, #0
 800aad8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800aada:	f107 0308 	add.w	r3, r7, #8
 800aade:	2201      	movs	r2, #1
 800aae0:	4619      	mov	r1, r3
 800aae2:	480e      	ldr	r0, [pc, #56]	@ (800ab1c <MX_RTC_Init+0x108>)
 800aae4:	f009 fa82 	bl	8013fec <HAL_RTC_SetTime>
  {
//k    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800aae8:	2301      	movs	r3, #1
 800aaea:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800aaec:	2301      	movs	r3, #1
 800aaee:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800aaf8:	1d3b      	adds	r3, r7, #4
 800aafa:	2201      	movs	r2, #1
 800aafc:	4619      	mov	r1, r3
 800aafe:	4807      	ldr	r0, [pc, #28]	@ (800ab1c <MX_RTC_Init+0x108>)
 800ab00:	f009 fb68 	bl	80141d4 <HAL_RTC_SetDate>
  {
//k    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_COOKIE);
 800ab04:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
 800ab08:	2100      	movs	r1, #0
 800ab0a:	4804      	ldr	r0, [pc, #16]	@ (800ab1c <MX_RTC_Init+0x108>)
 800ab0c:	f009 fd1e 	bl	801454c <HAL_RTCEx_BKUPWrite>
 800ab10:	e000      	b.n	800ab14 <MX_RTC_Init+0x100>
	  return;
 800ab12:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 800ab14:	3738      	adds	r7, #56	@ 0x38
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	2001c1b4 	.word	0x2001c1b4
 800ab20:	44007800 	.word	0x44007800

0800ab24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ab28:	4b26      	ldr	r3, [pc, #152]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab2a:	4a27      	ldr	r2, [pc, #156]	@ (800abc8 <MX_SPI3_Init+0xa4>)
 800ab2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ab2e:	4b25      	ldr	r3, [pc, #148]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800ab34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ab36:	4b23      	ldr	r3, [pc, #140]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ab3c:	4b21      	ldr	r3, [pc, #132]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab3e:	2207      	movs	r2, #7
 800ab40:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab42:	4b20      	ldr	r3, [pc, #128]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ab48:	4b1e      	ldr	r3, [pc, #120]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ab4e:	4b1d      	ldr	r3, [pc, #116]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800ab54:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab56:	4b1b      	ldr	r3, [pc, #108]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab5c:	4b19      	ldr	r3, [pc, #100]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ab62:	4b18      	ldr	r3, [pc, #96]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab68:	4b16      	ldr	r3, [pc, #88]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 800ab6e:	4b15      	ldr	r3, [pc, #84]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab70:	2207      	movs	r2, #7
 800ab72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800ab74:	4b13      	ldr	r3, [pc, #76]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800ab7a:	4b12      	ldr	r3, [pc, #72]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800ab80:	4b10      	ldr	r3, [pc, #64]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800ab86:	4b0f      	ldr	r3, [pc, #60]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800ab92:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800ab98:	4b0a      	ldr	r3, [pc, #40]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800ab9e:	4b09      	ldr	r3, [pc, #36]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800aba4:	4b07      	ldr	r3, [pc, #28]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800abaa:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800abac:	2200      	movs	r2, #0
 800abae:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800abb0:	4804      	ldr	r0, [pc, #16]	@ (800abc4 <MX_SPI3_Init+0xa0>)
 800abb2:	f009 fd27 	bl	8014604 <HAL_SPI_Init>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <MX_SPI3_Init+0x9c>
  {
    Error_Handler();
 800abbc:	f000 f9fa 	bl	800afb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800abc0:	bf00      	nop
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	2001c1e4 	.word	0x2001c1e4
 800abc8:	40003c00 	.word	0x40003c00

0800abcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800abd0:	4b22      	ldr	r3, [pc, #136]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abd2:	4a23      	ldr	r2, [pc, #140]	@ (800ac60 <MX_USART3_UART_Init+0x94>)
 800abd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800abd6:	4b21      	ldr	r3, [pc, #132]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800abdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800abde:	4b1f      	ldr	r3, [pc, #124]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800abe4:	4b1d      	ldr	r3, [pc, #116]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800abea:	4b1c      	ldr	r3, [pc, #112]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abec:	2200      	movs	r2, #0
 800abee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800abf0:	4b1a      	ldr	r3, [pc, #104]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abf2:	220c      	movs	r2, #12
 800abf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800abf6:	4b19      	ldr	r3, [pc, #100]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800abfc:	4b17      	ldr	r3, [pc, #92]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ac02:	4b16      	ldr	r3, [pc, #88]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ac08:	4b14      	ldr	r3, [pc, #80]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ac0e:	4b13      	ldr	r3, [pc, #76]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ac14:	4811      	ldr	r0, [pc, #68]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800ac16:	f00c fb19 	bl	801724c <HAL_UART_Init>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800ac20:	f000 f9c8 	bl	800afb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ac24:	2100      	movs	r1, #0
 800ac26:	480d      	ldr	r0, [pc, #52]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800ac28:	f00d f91c 	bl	8017e64 <HAL_UARTEx_SetTxFifoThreshold>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800ac32:	f000 f9bf 	bl	800afb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ac36:	2100      	movs	r1, #0
 800ac38:	4808      	ldr	r0, [pc, #32]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800ac3a:	f00d f951 	bl	8017ee0 <HAL_UARTEx_SetRxFifoThreshold>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800ac44:	f000 f9b6 	bl	800afb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800ac48:	4804      	ldr	r0, [pc, #16]	@ (800ac5c <MX_USART3_UART_Init+0x90>)
 800ac4a:	f00d f8d2 	bl	8017df2 <HAL_UARTEx_DisableFifoMode>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800ac54:	f000 f9ae 	bl	800afb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ac58:	bf00      	nop
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	2001c274 	.word	0x2001c274
 800ac60:	40004800 	.word	0x40004800

0800ac64 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800ac68:	4b15      	ldr	r3, [pc, #84]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac6a:	4a16      	ldr	r2, [pc, #88]	@ (800acc4 <MX_USB_PCD_Init+0x60>)
 800ac6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800ac6e:	4b14      	ldr	r3, [pc, #80]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac70:	2208      	movs	r2, #8
 800ac72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800ac74:	4b12      	ldr	r3, [pc, #72]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac76:	2202      	movs	r2, #2
 800ac78:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac7a:	4b11      	ldr	r3, [pc, #68]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800ac80:	4b0f      	ldr	r3, [pc, #60]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800ac86:	4b0e      	ldr	r3, [pc, #56]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800ac92:	4b0b      	ldr	r3, [pc, #44]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800ac98:	4b09      	ldr	r3, [pc, #36]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800ac9e:	4b08      	ldr	r3, [pc, #32]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800aca4:	4b06      	ldr	r3, [pc, #24]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800acaa:	4805      	ldr	r0, [pc, #20]	@ (800acc0 <MX_USB_PCD_Init+0x5c>)
 800acac:	f003 f804 	bl	800dcb8 <HAL_PCD_Init>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800acb6:	f000 f97d 	bl	800afb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800acba:	bf00      	nop
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2001c308 	.word	0x2001c308
 800acc4:	40016000 	.word	0x40016000

0800acc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08e      	sub	sp, #56	@ 0x38
 800accc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	605a      	str	r2, [r3, #4]
 800acd8:	609a      	str	r2, [r3, #8]
 800acda:	60da      	str	r2, [r3, #12]
 800acdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800acde:	4b7d      	ldr	r3, [pc, #500]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ace0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ace4:	4a7b      	ldr	r2, [pc, #492]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ace6:	f043 0304 	orr.w	r3, r3, #4
 800acea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800acee:	4b79      	ldr	r3, [pc, #484]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800acf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acf4:	f003 0304 	and.w	r3, r3, #4
 800acf8:	623b      	str	r3, [r7, #32]
 800acfa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800acfc:	4b75      	ldr	r3, [pc, #468]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800acfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad02:	4a74      	ldr	r2, [pc, #464]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad04:	f043 0320 	orr.w	r3, r3, #32
 800ad08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ad0c:	4b71      	ldr	r3, [pc, #452]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad12:	f003 0320 	and.w	r3, r3, #32
 800ad16:	61fb      	str	r3, [r7, #28]
 800ad18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ad1a:	4b6e      	ldr	r3, [pc, #440]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad20:	4a6c      	ldr	r2, [pc, #432]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ad2a:	4b6a      	ldr	r3, [pc, #424]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad38:	4b66      	ldr	r3, [pc, #408]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad3e:	4a65      	ldr	r2, [pc, #404]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad40:	f043 0301 	orr.w	r3, r3, #1
 800ad44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ad48:	4b62      	ldr	r3, [pc, #392]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	617b      	str	r3, [r7, #20]
 800ad54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad56:	4b5f      	ldr	r3, [pc, #380]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad5c:	4a5d      	ldr	r2, [pc, #372]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad5e:	f043 0302 	orr.w	r3, r3, #2
 800ad62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ad66:	4b5b      	ldr	r3, [pc, #364]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad6c:	f003 0302 	and.w	r3, r3, #2
 800ad70:	613b      	str	r3, [r7, #16]
 800ad72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ad74:	4b57      	ldr	r3, [pc, #348]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad7a:	4a56      	ldr	r2, [pc, #344]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad7c:	f043 0310 	orr.w	r3, r3, #16
 800ad80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ad84:	4b53      	ldr	r3, [pc, #332]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad8a:	f003 0310 	and.w	r3, r3, #16
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ad92:	4b50      	ldr	r3, [pc, #320]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad98:	4a4e      	ldr	r2, [pc, #312]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ad9a:	f043 0308 	orr.w	r3, r3, #8
 800ad9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ada2:	4b4c      	ldr	r3, [pc, #304]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800ada4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ada8:	f003 0308 	and.w	r3, r3, #8
 800adac:	60bb      	str	r3, [r7, #8]
 800adae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800adb0:	4b48      	ldr	r3, [pc, #288]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800adb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adb6:	4a47      	ldr	r2, [pc, #284]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800adb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800adc0:	4b44      	ldr	r3, [pc, #272]	@ (800aed4 <MX_GPIO_Init+0x20c>)
 800adc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adca:	607b      	str	r3, [r7, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800adce:	2200      	movs	r2, #0
 800add0:	2110      	movs	r1, #16
 800add2:	4841      	ldr	r0, [pc, #260]	@ (800aed8 <MX_GPIO_Init+0x210>)
 800add4:	f002 ff18 	bl	800dc08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800add8:	2200      	movs	r2, #0
 800adda:	2101      	movs	r1, #1
 800addc:	483f      	ldr	r0, [pc, #252]	@ (800aedc <MX_GPIO_Init+0x214>)
 800adde:	f002 ff13 	bl	800dc08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800ade2:	2200      	movs	r2, #0
 800ade4:	2110      	movs	r1, #16
 800ade6:	483e      	ldr	r0, [pc, #248]	@ (800aee0 <MX_GPIO_Init+0x218>)
 800ade8:	f002 ff0e 	bl	800dc08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800adec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800adf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800adf2:	2300      	movs	r3, #0
 800adf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800adf6:	2302      	movs	r3, #2
 800adf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800adfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adfe:	4619      	mov	r1, r3
 800ae00:	4838      	ldr	r0, [pc, #224]	@ (800aee4 <MX_GPIO_Init+0x21c>)
 800ae02:	f002 fd97 	bl	800d934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800ae06:	2310      	movs	r3, #16
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae12:	2300      	movs	r3, #0
 800ae14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800ae16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	482e      	ldr	r0, [pc, #184]	@ (800aed8 <MX_GPIO_Init+0x210>)
 800ae1e:	f002 fd89 	bl	800d934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ae22:	2310      	movs	r3, #16
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae26:	2303      	movs	r3, #3
 800ae28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae32:	4619      	mov	r1, r3
 800ae34:	482c      	ldr	r0, [pc, #176]	@ (800aee8 <MX_GPIO_Init+0x220>)
 800ae36:	f002 fd7d 	bl	800d934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae46:	2300      	movs	r3, #0
 800ae48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800ae4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae4e:	4619      	mov	r1, r3
 800ae50:	4822      	ldr	r0, [pc, #136]	@ (800aedc <MX_GPIO_Init+0x214>)
 800ae52:	f002 fd6f 	bl	800d934 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_Pin IN1_Pin IN2_Pin IN3_Pin
                           SD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN0_Pin|IN1_Pin|IN2_Pin|IN3_Pin
 800ae56:	f24d 4301 	movw	r3, #54273	@ 0xd401
 800ae5a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SD_DETECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae60:	2301      	movs	r3, #1
 800ae62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4820      	ldr	r0, [pc, #128]	@ (800aeec <MX_GPIO_Init+0x224>)
 800ae6c:	f002 fd62 	bl	800d934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800ae70:	2310      	movs	r3, #16
 800ae72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae74:	2301      	movs	r3, #1
 800ae76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800ae80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae84:	4619      	mov	r1, r3
 800ae86:	4816      	ldr	r0, [pc, #88]	@ (800aee0 <MX_GPIO_Init+0x218>)
 800ae88:	f002 fd54 	bl	800d934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ae8c:	2380      	movs	r3, #128	@ 0x80
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae90:	2302      	movs	r3, #2
 800ae92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800ae9c:	2307      	movs	r3, #7
 800ae9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aea4:	4619      	mov	r1, r3
 800aea6:	480f      	ldr	r0, [pc, #60]	@ (800aee4 <MX_GPIO_Init+0x21c>)
 800aea8:	f002 fd44 	bl	800d934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800aeac:	2370      	movs	r3, #112	@ 0x70
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aebc:	2307      	movs	r3, #7
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aec4:	4619      	mov	r1, r3
 800aec6:	480a      	ldr	r0, [pc, #40]	@ (800aef0 <MX_GPIO_Init+0x228>)
 800aec8:	f002 fd34 	bl	800d934 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800aecc:	bf00      	nop
 800aece:	3738      	adds	r7, #56	@ 0x38
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	44020c00 	.word	0x44020c00
 800aed8:	42021400 	.word	0x42021400
 800aedc:	42020400 	.word	0x42020400
 800aee0:	42021800 	.word	0x42021800
 800aee4:	42020800 	.word	0x42020800
 800aee8:	42020000 	.word	0x42020000
 800aeec:	42021000 	.word	0x42021000
 800aef0:	42020c00 	.word	0x42020c00

0800aef4 <MakeSerialNumber>:
*
* RESTRICTIONS:
*
**********************************************************************/
uint32_t MakeSerialNumber(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
	uint32_t hash = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	617b      	str	r3, [r7, #20]
	uint32_t i;
	uint32_t DeviceID[3];

	HAL_ICACHE_Disable();
 800aefe:	f002 feab 	bl	800dc58 <HAL_ICACHE_Disable>
	DeviceID[0] = HAL_GetUIDw0();
 800af02:	f000 fe63 	bl	800bbcc <HAL_GetUIDw0>
 800af06:	4603      	mov	r3, r0
 800af08:	607b      	str	r3, [r7, #4]
	DeviceID[1] = HAL_GetUIDw1();
 800af0a:	f000 fe6b 	bl	800bbe4 <HAL_GetUIDw1>
 800af0e:	4603      	mov	r3, r0
 800af10:	60bb      	str	r3, [r7, #8]
	DeviceID[2] = HAL_GetUIDw2();
 800af12:	f000 fe73 	bl	800bbfc <HAL_GetUIDw2>
 800af16:	4603      	mov	r3, r0
 800af18:	60fb      	str	r3, [r7, #12]
	HAL_ICACHE_Enable();
 800af1a:	f002 fe8d 	bl	800dc38 <HAL_ICACHE_Enable>

    for(i = 0; i < 3; i++)
 800af1e:	2300      	movs	r3, #0
 800af20:	613b      	str	r3, [r7, #16]
 800af22:	e015      	b.n	800af50 <MakeSerialNumber+0x5c>
    {
        hash += DeviceID[i];
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	3318      	adds	r3, #24
 800af2a:	443b      	add	r3, r7
 800af2c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	4413      	add	r3, r2
 800af34:	617b      	str	r3, [r7, #20]
        hash += (hash << 10);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	029b      	lsls	r3, r3, #10
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4413      	add	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]
        hash ^= (hash >> 6);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	099b      	lsrs	r3, r3, #6
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	4053      	eors	r3, r2
 800af48:	617b      	str	r3, [r7, #20]
    for(i = 0; i < 3; i++)
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	3301      	adds	r3, #1
 800af4e:	613b      	str	r3, [r7, #16]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2b02      	cmp	r3, #2
 800af54:	d9e6      	bls.n	800af24 <MakeSerialNumber+0x30>
	}
	hash += (hash << 3);
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	4413      	add	r3, r2
 800af5e:	617b      	str	r3, [r7, #20]
	hash ^= (hash >> 11);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	0adb      	lsrs	r3, r3, #11
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	4053      	eors	r3, r2
 800af68:	617b      	str	r3, [r7, #20]
	hash += (hash << 15);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	03db      	lsls	r3, r3, #15
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4413      	add	r3, r2
 800af72:	617b      	str	r3, [r7, #20]
	return hash;
 800af74:	697b      	ldr	r3, [r7, #20]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <StartDefaultTask>:

/* USER CODE END 4 */

void StartDefaultTask(void *argument)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800af86:	2001      	movs	r0, #1
 800af88:	f010 ffce 	bl	801bf28 <osDelay>
 800af8c:	e7fb      	b.n	800af86 <StartDefaultTask+0x8>
	...

0800af90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a04      	ldr	r2, [pc, #16]	@ (800afb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d101      	bne.n	800afa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800afa2:	f000 fdf3 	bl	800bb8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	40012c00 	.word	0x40012c00

0800afb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800afb8:	b672      	cpsid	i
}
 800afba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800afbc:	bf00      	nop
 800afbe:	e7fd      	b.n	800afbc <Error_Handler+0x8>

0800afc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800afc0:	b480      	push	{r7}
 800afc2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afc4:	bf00      	nop
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
	...

0800afd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b0cc      	sub	sp, #304	@ 0x130
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800afda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800afde:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afe0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	605a      	str	r2, [r3, #4]
 800afea:	609a      	str	r2, [r3, #8]
 800afec:	60da      	str	r2, [r3, #12]
 800afee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aff4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800aff8:	4618      	mov	r0, r3
 800affa:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800affe:	461a      	mov	r2, r3
 800b000:	2100      	movs	r1, #0
 800b002:	f01b f90d 	bl	8026220 <memset>
  if(hadc->Instance==ADC1)
 800b006:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b00a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a30      	ldr	r2, [pc, #192]	@ (800b0d4 <HAL_ADC_MspInit+0x104>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d157      	bne.n	800b0c8 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800b018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b01c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800b020:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b024:	f04f 0300 	mov.w	r3, #0
 800b028:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800b02c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b030:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b03a:	f107 0310 	add.w	r3, r7, #16
 800b03e:	4618      	mov	r0, r3
 800b040:	f003 ff00 	bl	800ee44 <HAL_RCCEx_PeriphCLKConfig>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 800b04a:	f7ff ffb3 	bl	800afb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800b04e:	4b22      	ldr	r3, [pc, #136]	@ (800b0d8 <HAL_ADC_MspInit+0x108>)
 800b050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b054:	4a20      	ldr	r2, [pc, #128]	@ (800b0d8 <HAL_ADC_MspInit+0x108>)
 800b056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b05a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b05e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0d8 <HAL_ADC_MspInit+0x108>)
 800b060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b064:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800b068:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b06c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b076:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b07a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b07c:	4b16      	ldr	r3, [pc, #88]	@ (800b0d8 <HAL_ADC_MspInit+0x108>)
 800b07e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b082:	4a15      	ldr	r2, [pc, #84]	@ (800b0d8 <HAL_ADC_MspInit+0x108>)
 800b084:	f043 0301 	orr.w	r3, r3, #1
 800b088:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b08c:	4b12      	ldr	r3, [pc, #72]	@ (800b0d8 <HAL_ADC_MspInit+0x108>)
 800b08e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b092:	f003 0201 	and.w	r2, r3, #1
 800b096:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b09a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b0a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b0a8:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0bc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4806      	ldr	r0, [pc, #24]	@ (800b0dc <HAL_ADC_MspInit+0x10c>)
 800b0c4:	f002 fc36 	bl	800d934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b0c8:	bf00      	nop
 800b0ca:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	42028000 	.word	0x42028000
 800b0d8:	44020c00 	.word	0x44020c00
 800b0dc:	42020000 	.word	0x42020000

0800b0e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08e      	sub	sp, #56	@ 0x38
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	605a      	str	r2, [r3, #4]
 800b0f2:	609a      	str	r2, [r3, #8]
 800b0f4:	60da      	str	r2, [r3, #12]
 800b0f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a49      	ldr	r2, [pc, #292]	@ (800b224 <HAL_ETH_MspInit+0x144>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	f040 808b 	bne.w	800b21a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b104:	4b48      	ldr	r3, [pc, #288]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b10a:	4a47      	ldr	r2, [pc, #284]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b10c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800b114:	4b44      	ldr	r3, [pc, #272]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b11a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b11e:	623b      	str	r3, [r7, #32]
 800b120:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 800b122:	4b41      	ldr	r3, [pc, #260]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b128:	4a3f      	ldr	r2, [pc, #252]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b12a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b12e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800b132:	4b3d      	ldr	r3, [pc, #244]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b13c:	61fb      	str	r3, [r7, #28]
 800b13e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 800b140:	4b39      	ldr	r3, [pc, #228]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b146:	4a38      	ldr	r2, [pc, #224]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b14c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800b150:	4b35      	ldr	r3, [pc, #212]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b15a:	61bb      	str	r3, [r7, #24]
 800b15c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b15e:	4b32      	ldr	r3, [pc, #200]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b164:	4a30      	ldr	r2, [pc, #192]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b166:	f043 0304 	orr.w	r3, r3, #4
 800b16a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b16e:	4b2e      	ldr	r3, [pc, #184]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b17c:	4b2a      	ldr	r3, [pc, #168]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b17e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b182:	4a29      	ldr	r2, [pc, #164]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b184:	f043 0301 	orr.w	r3, r3, #1
 800b188:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b18c:	4b26      	ldr	r3, [pc, #152]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	613b      	str	r3, [r7, #16]
 800b198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b19a:	4b23      	ldr	r3, [pc, #140]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1a0:	4a21      	ldr	r2, [pc, #132]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b1a2:	f043 0302 	orr.w	r3, r3, #2
 800b1a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b1aa:	4b1f      	ldr	r3, [pc, #124]	@ (800b228 <HAL_ETH_MspInit+0x148>)
 800b1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1b0:	f003 0302 	and.w	r3, r3, #2
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB15     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b1b8:	2332      	movs	r3, #50	@ 0x32
 800b1ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1c8:	230b      	movs	r3, #11
 800b1ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4816      	ldr	r0, [pc, #88]	@ (800b22c <HAL_ETH_MspInit+0x14c>)
 800b1d4:	f002 fbae 	bl	800d934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_7;
 800b1d8:	23a6      	movs	r3, #166	@ 0xa6
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1dc:	2302      	movs	r3, #2
 800b1de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1e8:	230b      	movs	r3, #11
 800b1ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	480f      	ldr	r0, [pc, #60]	@ (800b230 <HAL_ETH_MspInit+0x150>)
 800b1f4:	f002 fb9e 	bl	800d934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 800b1f8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800b1fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1fe:	2302      	movs	r3, #2
 800b200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b202:	2300      	movs	r3, #0
 800b204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b206:	2302      	movs	r3, #2
 800b208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b20a:	230b      	movs	r3, #11
 800b20c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b20e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b212:	4619      	mov	r1, r3
 800b214:	4807      	ldr	r0, [pc, #28]	@ (800b234 <HAL_ETH_MspInit+0x154>)
 800b216:	f002 fb8d 	bl	800d934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800b21a:	bf00      	nop
 800b21c:	3738      	adds	r7, #56	@ 0x38
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40028000 	.word	0x40028000
 800b228:	44020c00 	.word	0x44020c00
 800b22c:	42020800 	.word	0x42020800
 800b230:	42020000 	.word	0x42020000
 800b234:	42020400 	.word	0x42020400

0800b238 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b0cc      	sub	sp, #304	@ 0x130
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b242:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b246:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b248:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	605a      	str	r2, [r3, #4]
 800b252:	609a      	str	r2, [r3, #8]
 800b254:	60da      	str	r2, [r3, #12]
 800b256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b25c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b260:	4618      	mov	r0, r3
 800b262:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800b266:	461a      	mov	r2, r3
 800b268:	2100      	movs	r1, #0
 800b26a:	f01a ffd9 	bl	8026220 <memset>
  if(hfdcan->Instance==FDCAN1)
 800b26e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b272:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a33      	ldr	r2, [pc, #204]	@ (800b348 <HAL_FDCAN_MspInit+0x110>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d15d      	bne.n	800b33c <HAL_FDCAN_MspInit+0x104>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800b280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b284:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800b288:	f04f 0200 	mov.w	r2, #0
 800b28c:	f04f 0304 	mov.w	r3, #4
 800b290:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800b294:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b298:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b2a2:	f107 0310 	add.w	r3, r7, #16
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f003 fdcc 	bl	800ee44 <HAL_RCCEx_PeriphCLKConfig>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 800b2b2:	f7ff fe7f 	bl	800afb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800b2b6:	4b25      	ldr	r3, [pc, #148]	@ (800b34c <HAL_FDCAN_MspInit+0x114>)
 800b2b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2bc:	4a23      	ldr	r2, [pc, #140]	@ (800b34c <HAL_FDCAN_MspInit+0x114>)
 800b2be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b2c2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800b2c6:	4b21      	ldr	r3, [pc, #132]	@ (800b34c <HAL_FDCAN_MspInit+0x114>)
 800b2c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2cc:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 800b2d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b2d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b2d8:	601a      	str	r2, [r3, #0]
 800b2da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b2de:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b2e2:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b2e4:	4b19      	ldr	r3, [pc, #100]	@ (800b34c <HAL_FDCAN_MspInit+0x114>)
 800b2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2ea:	4a18      	ldr	r2, [pc, #96]	@ (800b34c <HAL_FDCAN_MspInit+0x114>)
 800b2ec:	f043 0308 	orr.w	r3, r3, #8
 800b2f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b2f4:	4b15      	ldr	r3, [pc, #84]	@ (800b34c <HAL_FDCAN_MspInit+0x114>)
 800b2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2fa:	f003 0208 	and.w	r2, r3, #8
 800b2fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b302:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b30c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b310:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b312:	2303      	movs	r3, #3
 800b314:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b318:	2302      	movs	r3, #2
 800b31a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b324:	2300      	movs	r3, #0
 800b326:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800b32a:	2309      	movs	r3, #9
 800b32c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b330:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b334:	4619      	mov	r1, r3
 800b336:	4806      	ldr	r0, [pc, #24]	@ (800b350 <HAL_FDCAN_MspInit+0x118>)
 800b338:	f002 fafc 	bl	800d934 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800b33c:	bf00      	nop
 800b33e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	4000a400 	.word	0x4000a400
 800b34c:	44020c00 	.word	0x44020c00
 800b350:	42020c00 	.word	0x42020c00

0800b354 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b0c6      	sub	sp, #280	@ 0x118
 800b358:	af00      	add	r7, sp, #0
 800b35a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b35e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b362:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b364:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b36c:	4618      	mov	r0, r3
 800b36e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800b372:	461a      	mov	r2, r3
 800b374:	2100      	movs	r1, #0
 800b376:	f01a ff53 	bl	8026220 <memset>
  if(hrtc->Instance==RTC)
 800b37a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b37e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a21      	ldr	r2, [pc, #132]	@ (800b40c <HAL_RTC_MspInit+0xb8>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d13a      	bne.n	800b402 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b38c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b390:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800b394:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800b3a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b3a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3ac:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
//    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b3b0:	f107 0310 	add.w	r3, r7, #16
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f003 fd45 	bl	800ee44 <HAL_RCCEx_PeriphCLKConfig>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 800b3c0:	f7ff fdf8 	bl	800afb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b3c4:	4b12      	ldr	r3, [pc, #72]	@ (800b410 <HAL_RTC_MspInit+0xbc>)
 800b3c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ca:	4a11      	ldr	r2, [pc, #68]	@ (800b410 <HAL_RTC_MspInit+0xbc>)
 800b3cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800b3d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b410 <HAL_RTC_MspInit+0xbc>)
 800b3d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b3da:	4a0d      	ldr	r2, [pc, #52]	@ (800b410 <HAL_RTC_MspInit+0xbc>)
 800b3dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b3e0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b410 <HAL_RTC_MspInit+0xbc>)
 800b3e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b3ea:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800b3ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b3f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b3f6:	601a      	str	r2, [r3, #0]
 800b3f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b3fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b400:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b402:	bf00      	nop
 800b404:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	44007800 	.word	0x44007800
 800b410:	44020c00 	.word	0x44020c00

0800b414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b0cc      	sub	sp, #304	@ 0x130
 800b418:	af00      	add	r7, sp, #0
 800b41a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b41e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b422:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b424:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	605a      	str	r2, [r3, #4]
 800b42e:	609a      	str	r2, [r3, #8]
 800b430:	60da      	str	r2, [r3, #12]
 800b432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b434:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b438:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b43c:	4618      	mov	r0, r3
 800b43e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800b442:	461a      	mov	r2, r3
 800b444:	2100      	movs	r1, #0
 800b446:	f01a feeb 	bl	8026220 <memset>
  if(hspi->Instance==SPI3)
 800b44a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b44e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a33      	ldr	r2, [pc, #204]	@ (800b524 <HAL_SPI_MspInit+0x110>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d15e      	bne.n	800b51a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800b45c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b460:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800b464:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800b468:	f04f 0300 	mov.w	r3, #0
 800b46c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 800b470:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b474:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b47e:	f107 0310 	add.w	r3, r7, #16
 800b482:	4618      	mov	r0, r3
 800b484:	f003 fcde 	bl	800ee44 <HAL_RCCEx_PeriphCLKConfig>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 800b48e:	f7ff fd91 	bl	800afb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b492:	4b25      	ldr	r3, [pc, #148]	@ (800b528 <HAL_SPI_MspInit+0x114>)
 800b494:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b498:	4a23      	ldr	r2, [pc, #140]	@ (800b528 <HAL_SPI_MspInit+0x114>)
 800b49a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b49e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800b4a2:	4b21      	ldr	r3, [pc, #132]	@ (800b528 <HAL_SPI_MspInit+0x114>)
 800b4a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4a8:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800b4ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b4b4:	601a      	str	r2, [r3, #0]
 800b4b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4ba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b4be:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4c0:	4b19      	ldr	r3, [pc, #100]	@ (800b528 <HAL_SPI_MspInit+0x114>)
 800b4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4c6:	4a18      	ldr	r2, [pc, #96]	@ (800b528 <HAL_SPI_MspInit+0x114>)
 800b4c8:	f043 0304 	orr.w	r3, r3, #4
 800b4cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b4d0:	4b15      	ldr	r3, [pc, #84]	@ (800b528 <HAL_SPI_MspInit+0x114>)
 800b4d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4d6:	f003 0204 	and.w	r2, r3, #4
 800b4da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b4ec:	681b      	ldr	r3, [r3, #0]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800b4ee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b4f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b502:	2300      	movs	r3, #0
 800b504:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b508:	2306      	movs	r3, #6
 800b50a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b50e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b512:	4619      	mov	r1, r3
 800b514:	4805      	ldr	r0, [pc, #20]	@ (800b52c <HAL_SPI_MspInit+0x118>)
 800b516:	f002 fa0d 	bl	800d934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800b51a:	bf00      	nop
 800b51c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	40003c00 	.word	0x40003c00
 800b528:	44020c00 	.word	0x44020c00
 800b52c:	42020800 	.word	0x42020800

0800b530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b0cc      	sub	sp, #304	@ 0x130
 800b534:	af00      	add	r7, sp, #0
 800b536:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b53a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b53e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b540:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	605a      	str	r2, [r3, #4]
 800b54a:	609a      	str	r2, [r3, #8]
 800b54c:	60da      	str	r2, [r3, #12]
 800b54e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b554:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b558:	4618      	mov	r0, r3
 800b55a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800b55e:	461a      	mov	r2, r3
 800b560:	2100      	movs	r1, #0
 800b562:	f01a fe5d 	bl	8026220 <memset>
  if(huart->Instance==USART3)
 800b566:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b56a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a33      	ldr	r2, [pc, #204]	@ (800b640 <HAL_UART_MspInit+0x110>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d15d      	bne.n	800b634 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b578:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b57c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800b580:	f04f 0204 	mov.w	r2, #4
 800b584:	f04f 0300 	mov.w	r3, #0
 800b588:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b58c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b590:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b594:	2200      	movs	r2, #0
 800b596:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b598:	f107 0310 	add.w	r3, r7, #16
 800b59c:	4618      	mov	r0, r3
 800b59e:	f003 fc51 	bl	800ee44 <HAL_RCCEx_PeriphCLKConfig>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 800b5a8:	f7ff fd04 	bl	800afb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b5ac:	4b25      	ldr	r3, [pc, #148]	@ (800b644 <HAL_UART_MspInit+0x114>)
 800b5ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b5b2:	4a24      	ldr	r2, [pc, #144]	@ (800b644 <HAL_UART_MspInit+0x114>)
 800b5b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b5b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800b5bc:	4b21      	ldr	r3, [pc, #132]	@ (800b644 <HAL_UART_MspInit+0x114>)
 800b5be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b5c2:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 800b5c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b5ca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b5d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b5d8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5da:	4b1a      	ldr	r3, [pc, #104]	@ (800b644 <HAL_UART_MspInit+0x114>)
 800b5dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5e0:	4a18      	ldr	r2, [pc, #96]	@ (800b644 <HAL_UART_MspInit+0x114>)
 800b5e2:	f043 0308 	orr.w	r3, r3, #8
 800b5e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b5ea:	4b16      	ldr	r3, [pc, #88]	@ (800b644 <HAL_UART_MspInit+0x114>)
 800b5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5f0:	f003 0208 	and.w	r2, r3, #8
 800b5f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b5f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b602:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b606:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b608:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b60c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b610:	2302      	movs	r3, #2
 800b612:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b616:	2300      	movs	r3, #0
 800b618:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b61c:	2300      	movs	r3, #0
 800b61e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b622:	2307      	movs	r3, #7
 800b624:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b628:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b62c:	4619      	mov	r1, r3
 800b62e:	4806      	ldr	r0, [pc, #24]	@ (800b648 <HAL_UART_MspInit+0x118>)
 800b630:	f002 f980 	bl	800d934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b634:	bf00      	nop
 800b636:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	40004800 	.word	0x40004800
 800b644:	44020c00 	.word	0x44020c00
 800b648:	42020c00 	.word	0x42020c00

0800b64c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b0c6      	sub	sp, #280	@ 0x118
 800b650:	af00      	add	r7, sp, #0
 800b652:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b656:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b65a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b65c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b664:	4618      	mov	r0, r3
 800b666:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800b66a:	461a      	mov	r2, r3
 800b66c:	2100      	movs	r1, #0
 800b66e:	f01a fdd7 	bl	8026220 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800b672:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b676:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a1e      	ldr	r2, [pc, #120]	@ (800b6f8 <HAL_PCD_MspInit+0xac>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d133      	bne.n	800b6ec <HAL_PCD_MspInit+0xa0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b684:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b688:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800b68c:	f04f 0200 	mov.w	r2, #0
 800b690:	f04f 0310 	mov.w	r3, #16
 800b694:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b698:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b69c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a0:	2230      	movs	r2, #48	@ 0x30
 800b6a2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b6a6:	f107 0310 	add.w	r3, r7, #16
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f003 fbca 	bl	800ee44 <HAL_RCCEx_PeriphCLKConfig>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800b6b6:	f7ff fc7d 	bl	800afb4 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 800b6ba:	f002 fc01 	bl	800dec0 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b6be:	4b0f      	ldr	r3, [pc, #60]	@ (800b6fc <HAL_PCD_MspInit+0xb0>)
 800b6c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b6c4:	4a0d      	ldr	r2, [pc, #52]	@ (800b6fc <HAL_PCD_MspInit+0xb0>)
 800b6c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6ca:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b6fc <HAL_PCD_MspInit+0xb0>)
 800b6d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b6d4:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 800b6d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b6dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b6e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b6ea:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 800b6ec:	bf00      	nop
 800b6ee:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	40016000 	.word	0x40016000
 800b6fc:	44020c00 	.word	0x44020c00

0800b700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08e      	sub	sp, #56	@ 0x38
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b708:	4b2e      	ldr	r3, [pc, #184]	@ (800b7c4 <HAL_InitTick+0xc4>)
 800b70a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b70e:	4a2d      	ldr	r2, [pc, #180]	@ (800b7c4 <HAL_InitTick+0xc4>)
 800b710:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b714:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800b718:	4b2a      	ldr	r3, [pc, #168]	@ (800b7c4 <HAL_InitTick+0xc4>)
 800b71a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b71e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b722:	60fb      	str	r3, [r7, #12]
 800b724:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b726:	f107 0210 	add.w	r2, r7, #16
 800b72a:	f107 0314 	add.w	r3, r7, #20
 800b72e:	4611      	mov	r1, r2
 800b730:	4618      	mov	r0, r3
 800b732:	f003 fb4f 	bl	800edd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800b736:	f003 fb21 	bl	800ed7c <HAL_RCC_GetPCLK2Freq>
 800b73a:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800b73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73e:	095b      	lsrs	r3, r3, #5
 800b740:	4a21      	ldr	r2, [pc, #132]	@ (800b7c8 <HAL_InitTick+0xc8>)
 800b742:	fba2 2303 	umull	r2, r3, r2, r3
 800b746:	09db      	lsrs	r3, r3, #7
 800b748:	3b01      	subs	r3, #1
 800b74a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800b74c:	4b1f      	ldr	r3, [pc, #124]	@ (800b7cc <HAL_InitTick+0xcc>)
 800b74e:	4a20      	ldr	r2, [pc, #128]	@ (800b7d0 <HAL_InitTick+0xd0>)
 800b750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 800b752:	4b1e      	ldr	r3, [pc, #120]	@ (800b7cc <HAL_InitTick+0xcc>)
 800b754:	2263      	movs	r2, #99	@ 0x63
 800b756:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800b758:	4a1c      	ldr	r2, [pc, #112]	@ (800b7cc <HAL_InitTick+0xcc>)
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800b75e:	4b1b      	ldr	r3, [pc, #108]	@ (800b7cc <HAL_InitTick+0xcc>)
 800b760:	2200      	movs	r2, #0
 800b762:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b764:	4b19      	ldr	r3, [pc, #100]	@ (800b7cc <HAL_InitTick+0xcc>)
 800b766:	2200      	movs	r2, #0
 800b768:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800b76a:	4818      	ldr	r0, [pc, #96]	@ (800b7cc <HAL_InitTick+0xcc>)
 800b76c:	f009 fe23 	bl	80153b6 <HAL_TIM_Base_Init>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800b776:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d118      	bne.n	800b7b0 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800b77e:	4813      	ldr	r0, [pc, #76]	@ (800b7cc <HAL_InitTick+0xcc>)
 800b780:	f009 ff20 	bl	80155c4 <HAL_TIM_Base_Start_IT>
 800b784:	4603      	mov	r3, r0
 800b786:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800b78a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10e      	bne.n	800b7b0 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b0f      	cmp	r3, #15
 800b796:	d808      	bhi.n	800b7aa <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800b798:	2200      	movs	r2, #0
 800b79a:	6879      	ldr	r1, [r7, #4]
 800b79c:	202a      	movs	r0, #42	@ 0x2a
 800b79e:	f001 fa59 	bl	800cc54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b7a2:	4a0c      	ldr	r2, [pc, #48]	@ (800b7d4 <HAL_InitTick+0xd4>)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	e002      	b.n	800b7b0 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800b7b0:	202a      	movs	r0, #42	@ 0x2a
 800b7b2:	f001 fa69 	bl	800cc88 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 800b7b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3738      	adds	r7, #56	@ 0x38
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	44020c00 	.word	0x44020c00
 800b7c8:	0a7c5ac5 	.word	0x0a7c5ac5
 800b7cc:	2001c834 	.word	0x2001c834
 800b7d0:	40012c00 	.word	0x40012c00
 800b7d4:	200002a8 	.word	0x200002a8

0800b7d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b7dc:	bf00      	nop
 800b7de:	e7fd      	b.n	800b7dc <NMI_Handler+0x4>

0800b7e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b7e4:	bf00      	nop
 800b7e6:	e7fd      	b.n	800b7e4 <HardFault_Handler+0x4>

0800b7e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b7ec:	bf00      	nop
 800b7ee:	e7fd      	b.n	800b7ec <MemManage_Handler+0x4>

0800b7f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b7f4:	bf00      	nop
 800b7f6:	e7fd      	b.n	800b7f4 <BusFault_Handler+0x4>

0800b7f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b7fc:	bf00      	nop
 800b7fe:	e7fd      	b.n	800b7fc <UsageFault_Handler+0x4>

0800b800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b800:	b480      	push	{r7}
 800b802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b804:	bf00      	nop
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b814:	4802      	ldr	r0, [pc, #8]	@ (800b820 <TIM1_UP_IRQHandler+0x10>)
 800b816:	f00a f9fd 	bl	8015c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800b81a:	bf00      	nop
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	2001c834 	.word	0x2001c834

0800b824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
  return 1;
 800b828:	2301      	movs	r3, #1
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <_kill>:

int _kill(int pid, int sig)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b83e:	f01a fde3 	bl	8026408 <__errno>
 800b842:	4603      	mov	r3, r0
 800b844:	2216      	movs	r2, #22
 800b846:	601a      	str	r2, [r3, #0]
  return -1;
 800b848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <_exit>:

void _exit (int status)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b85c:	f04f 31ff 	mov.w	r1, #4294967295
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff ffe7 	bl	800b834 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b866:	bf00      	nop
 800b868:	e7fd      	b.n	800b866 <_exit+0x12>

0800b86a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b086      	sub	sp, #24
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	60b9      	str	r1, [r7, #8]
 800b874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b876:	2300      	movs	r3, #0
 800b878:	617b      	str	r3, [r7, #20]
 800b87a:	e00a      	b.n	800b892 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b87c:	f3af 8000 	nop.w
 800b880:	4601      	mov	r1, r0
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	60ba      	str	r2, [r7, #8]
 800b888:	b2ca      	uxtb	r2, r1
 800b88a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	3301      	adds	r3, #1
 800b890:	617b      	str	r3, [r7, #20]
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	429a      	cmp	r2, r3
 800b898:	dbf0      	blt.n	800b87c <_read+0x12>
  }

  return len;
 800b89a:	687b      	ldr	r3, [r7, #4]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	e009      	b.n	800b8ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	60ba      	str	r2, [r7, #8]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7f5 fb52 	bl	8000f68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	dbf1      	blt.n	800b8b6 <_write+0x12>
  }
  return len;
 800b8d2:	687b      	ldr	r3, [r7, #4]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <_close>:

int _close(int file)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b8e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b904:	605a      	str	r2, [r3, #4]
  return 0;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <_isatty>:

int _isatty(int file)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b91c:	2301      	movs	r3, #1
}
 800b91e:	4618      	mov	r0, r3
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b085      	sub	sp, #20
 800b92e:	af00      	add	r7, sp, #0
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b94a:	4b35      	ldr	r3, [pc, #212]	@ (800ba20 <SystemInit+0xdc>)
 800b94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b950:	4a33      	ldr	r2, [pc, #204]	@ (800ba20 <SystemInit+0xdc>)
 800b952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b956:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800b95a:	4b32      	ldr	r3, [pc, #200]	@ (800ba24 <SystemInit+0xe0>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800b960:	4b30      	ldr	r3, [pc, #192]	@ (800ba24 <SystemInit+0xe0>)
 800b962:	2200      	movs	r2, #0
 800b964:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800b966:	4b2f      	ldr	r3, [pc, #188]	@ (800ba24 <SystemInit+0xe0>)
 800b968:	2200      	movs	r2, #0
 800b96a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800b96c:	4b2d      	ldr	r3, [pc, #180]	@ (800ba24 <SystemInit+0xe0>)
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	492c      	ldr	r1, [pc, #176]	@ (800ba24 <SystemInit+0xe0>)
 800b972:	4b2d      	ldr	r3, [pc, #180]	@ (800ba28 <SystemInit+0xe4>)
 800b974:	4013      	ands	r3, r2
 800b976:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800b978:	4b2a      	ldr	r3, [pc, #168]	@ (800ba24 <SystemInit+0xe0>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800b97e:	4b29      	ldr	r3, [pc, #164]	@ (800ba24 <SystemInit+0xe0>)
 800b980:	2200      	movs	r2, #0
 800b982:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800b984:	4b27      	ldr	r3, [pc, #156]	@ (800ba24 <SystemInit+0xe0>)
 800b986:	2200      	movs	r2, #0
 800b988:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800b98a:	4b26      	ldr	r3, [pc, #152]	@ (800ba24 <SystemInit+0xe0>)
 800b98c:	4a27      	ldr	r2, [pc, #156]	@ (800ba2c <SystemInit+0xe8>)
 800b98e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800b990:	4b24      	ldr	r3, [pc, #144]	@ (800ba24 <SystemInit+0xe0>)
 800b992:	2200      	movs	r2, #0
 800b994:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800b996:	4b23      	ldr	r3, [pc, #140]	@ (800ba24 <SystemInit+0xe0>)
 800b998:	4a24      	ldr	r2, [pc, #144]	@ (800ba2c <SystemInit+0xe8>)
 800b99a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800b99c:	4b21      	ldr	r3, [pc, #132]	@ (800ba24 <SystemInit+0xe0>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800b9a2:	4b20      	ldr	r3, [pc, #128]	@ (800ba24 <SystemInit+0xe0>)
 800b9a4:	4a21      	ldr	r2, [pc, #132]	@ (800ba2c <SystemInit+0xe8>)
 800b9a6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800b9a8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba24 <SystemInit+0xe0>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800b9ae:	4b1d      	ldr	r3, [pc, #116]	@ (800ba24 <SystemInit+0xe0>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a1c      	ldr	r2, [pc, #112]	@ (800ba24 <SystemInit+0xe0>)
 800b9b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b9b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800b9ba:	4b1a      	ldr	r3, [pc, #104]	@ (800ba24 <SystemInit+0xe0>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b9c0:	4b17      	ldr	r3, [pc, #92]	@ (800ba20 <SystemInit+0xdc>)
 800b9c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b9c6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800b9c8:	4b19      	ldr	r3, [pc, #100]	@ (800ba30 <SystemInit+0xec>)
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800b9d0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800b9d8:	d003      	beq.n	800b9e2 <SystemInit+0x9e>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b9e0:	d117      	bne.n	800ba12 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800b9e2:	4b13      	ldr	r3, [pc, #76]	@ (800ba30 <SystemInit+0xec>)
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800b9ee:	4b10      	ldr	r3, [pc, #64]	@ (800ba30 <SystemInit+0xec>)
 800b9f0:	4a10      	ldr	r2, [pc, #64]	@ (800ba34 <SystemInit+0xf0>)
 800b9f2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800b9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800ba30 <SystemInit+0xec>)
 800b9f6:	4a10      	ldr	r2, [pc, #64]	@ (800ba38 <SystemInit+0xf4>)
 800b9f8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800b9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800ba30 <SystemInit+0xec>)
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	4a0c      	ldr	r2, [pc, #48]	@ (800ba30 <SystemInit+0xec>)
 800ba00:	f043 0302 	orr.w	r3, r3, #2
 800ba04:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800ba06:	4b0a      	ldr	r3, [pc, #40]	@ (800ba30 <SystemInit+0xec>)
 800ba08:	69db      	ldr	r3, [r3, #28]
 800ba0a:	4a09      	ldr	r2, [pc, #36]	@ (800ba30 <SystemInit+0xec>)
 800ba0c:	f043 0301 	orr.w	r3, r3, #1
 800ba10:	61d3      	str	r3, [r2, #28]
  }
}
 800ba12:	bf00      	nop
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	e000ed00 	.word	0xe000ed00
 800ba24:	44020c00 	.word	0x44020c00
 800ba28:	eae2eae3 	.word	0xeae2eae3
 800ba2c:	01010280 	.word	0x01010280
 800ba30:	40022000 	.word	0x40022000
 800ba34:	08192a3b 	.word	0x08192a3b
 800ba38:	4c5d6e7f 	.word	0x4c5d6e7f

0800ba3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe f95b 	bl	8009d04 <SD_disk_initialize>
 800ba4e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fe fa6d 	bl	8009f44 <SD_disk_status>
 800ba6a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60b9      	str	r1, [r7, #8]
 800ba7c:	607a      	str	r2, [r7, #4]
 800ba7e:	603b      	str	r3, [r7, #0]
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800ba84:	7bf8      	ldrb	r0, [r7, #15]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	68b9      	ldr	r1, [r7, #8]
 800ba8c:	f7fe fa70 	bl	8009f70 <SD_disk_read>
 800ba90:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	603b      	str	r3, [r7, #0]
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800baaa:	7bf8      	ldrb	r0, [r7, #15]
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	68b9      	ldr	r1, [r7, #8]
 800bab2:	f7fe fac7 	bl	800a044 <SD_disk_write>
 800bab6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	603a      	str	r2, [r7, #0]
 800baca:	71fb      	strb	r3, [r7, #7]
 800bacc:	460b      	mov	r3, r1
 800bace:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800bad0:	79b9      	ldrb	r1, [r7, #6]
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe fb38 	bl	800a14c <SD_disk_ioctl>
 800badc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800bae8:	480d      	ldr	r0, [pc, #52]	@ (800bb20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800baea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800baec:	f7ff ff2a 	bl	800b944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800baf0:	480c      	ldr	r0, [pc, #48]	@ (800bb24 <LoopForever+0x6>)
  ldr r1, =_edata
 800baf2:	490d      	ldr	r1, [pc, #52]	@ (800bb28 <LoopForever+0xa>)
  ldr r2, =_sidata
 800baf4:	4a0d      	ldr	r2, [pc, #52]	@ (800bb2c <LoopForever+0xe>)
  movs r3, #0
 800baf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800baf8:	e002      	b.n	800bb00 <LoopCopyDataInit>

0800bafa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bafa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bafc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bafe:	3304      	adds	r3, #4

0800bb00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bb00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bb02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bb04:	d3f9      	bcc.n	800bafa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bb06:	4a0a      	ldr	r2, [pc, #40]	@ (800bb30 <LoopForever+0x12>)
  ldr r4, =_ebss
 800bb08:	4c0a      	ldr	r4, [pc, #40]	@ (800bb34 <LoopForever+0x16>)
  movs r3, #0
 800bb0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bb0c:	e001      	b.n	800bb12 <LoopFillZerobss>

0800bb0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bb0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bb10:	3204      	adds	r2, #4

0800bb12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bb12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bb14:	d3fb      	bcc.n	800bb0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800bb16:	f01a fc7d 	bl	8026414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800bb1a:	f7fe fcf7 	bl	800a50c <main>

0800bb1e <LoopForever>:

LoopForever:
    b LoopForever
 800bb1e:	e7fe      	b.n	800bb1e <LoopForever>
  ldr   r0, =_estack
 800bb20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800bb24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bb28:	20001918 	.word	0x20001918
  ldr r2, =_sidata
 800bb2c:	0802c52c 	.word	0x0802c52c
  ldr r2, =_sbss
 800bb30:	20001918 	.word	0x20001918
  ldr r4, =_ebss
 800bb34:	2001f6e0 	.word	0x2001f6e0

0800bb38 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800bb38:	e7fe      	b.n	800bb38 <ADC1_IRQHandler>
	...

0800bb3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb40:	2003      	movs	r0, #3
 800bb42:	f001 f87c 	bl	800cc3e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800bb46:	f002 ffbb 	bl	800eac0 <HAL_RCC_GetSysClockFreq>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb80 <HAL_Init+0x44>)
 800bb4e:	6a1b      	ldr	r3, [r3, #32]
 800bb50:	f003 030f 	and.w	r3, r3, #15
 800bb54:	490b      	ldr	r1, [pc, #44]	@ (800bb84 <HAL_Init+0x48>)
 800bb56:	5ccb      	ldrb	r3, [r1, r3]
 800bb58:	fa22 f303 	lsr.w	r3, r2, r3
 800bb5c:	4a0a      	ldr	r2, [pc, #40]	@ (800bb88 <HAL_Init+0x4c>)
 800bb5e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bb60:	2004      	movs	r0, #4
 800bb62:	f001 f89f 	bl	800cca4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bb66:	200f      	movs	r0, #15
 800bb68:	f7ff fdca 	bl	800b700 <HAL_InitTick>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e002      	b.n	800bb7c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bb76:	f7ff fa23 	bl	800afc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	44020c00 	.word	0x44020c00
 800bb84:	0802bd40 	.word	0x0802bd40
 800bb88:	20000290 	.word	0x20000290

0800bb8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bb90:	4b06      	ldr	r3, [pc, #24]	@ (800bbac <HAL_IncTick+0x20>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	461a      	mov	r2, r3
 800bb96:	4b06      	ldr	r3, [pc, #24]	@ (800bbb0 <HAL_IncTick+0x24>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	4a04      	ldr	r2, [pc, #16]	@ (800bbb0 <HAL_IncTick+0x24>)
 800bb9e:	6013      	str	r3, [r2, #0]
}
 800bba0:	bf00      	nop
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	200002ac 	.word	0x200002ac
 800bbb0:	2001c880 	.word	0x2001c880

0800bbb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
  return uwTick;
 800bbb8:	4b03      	ldr	r3, [pc, #12]	@ (800bbc8 <HAL_GetTick+0x14>)
 800bbba:	681b      	ldr	r3, [r3, #0]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	2001c880 	.word	0x2001c880

0800bbcc <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800bbd0:	4b03      	ldr	r3, [pc, #12]	@ (800bbe0 <HAL_GetUIDw0+0x14>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	08fff800 	.word	0x08fff800

0800bbe4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800bbe8:	4b03      	ldr	r3, [pc, #12]	@ (800bbf8 <HAL_GetUIDw1+0x14>)
 800bbea:	681b      	ldr	r3, [r3, #0]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	08fff804 	.word	0x08fff804

0800bbfc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800bc00:	4b03      	ldr	r3, [pc, #12]	@ (800bc10 <HAL_GetUIDw2+0x14>)
 800bc02:	681b      	ldr	r3, [r3, #0]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	08fff808 	.word	0x08fff808

0800bc14 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 800bc1c:	4b07      	ldr	r3, [pc, #28]	@ (800bc3c <HAL_SBS_ETHInterfaceSelect+0x28>)
 800bc1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bc22:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800bc26:	4905      	ldr	r1, [pc, #20]	@ (800bc3c <HAL_SBS_ETHInterfaceSelect+0x28>)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	44000400 	.word	0x44000400

0800bc40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	431a      	orrs	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	609a      	str	r2, [r3, #8]
}
 800bc5a:	bf00      	nop
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	609a      	str	r2, [r3, #8]
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bcb6:	f043 0201 	orr.w	r2, r3, #1
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 800bcd4:	4b06      	ldr	r3, [pc, #24]	@ (800bcf0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800bcd6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bcda:	4a05      	ldr	r2, [pc, #20]	@ (800bcf0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800bcdc:	f043 0301 	orr.w	r3, r3, #1
 800bce0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	42028000 	.word	0x42028000

0800bcf4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
 800bd00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3360      	adds	r3, #96	@ 0x60
 800bd06:	461a      	mov	r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	4b08      	ldr	r3, [pc, #32]	@ (800bd38 <LL_ADC_SetOffset+0x44>)
 800bd16:	4013      	ands	r3, r2
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	4313      	orrs	r3, r2
 800bd24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800bd2c:	bf00      	nop
 800bd2e:	371c      	adds	r7, #28
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	03fff000 	.word	0x03fff000

0800bd3c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	3360      	adds	r3, #96	@ 0x60
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3360      	adds	r3, #96	@ 0x60
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	431a      	orrs	r2, r3
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800bd92:	bf00      	nop
 800bd94:	371c      	adds	r7, #28
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b087      	sub	sp, #28
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	60b9      	str	r1, [r7, #8]
 800bda8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3360      	adds	r3, #96	@ 0x60
 800bdae:	461a      	mov	r2, r3
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800bdc8:	bf00      	nop
 800bdca:	371c      	adds	r7, #28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3360      	adds	r3, #96	@ 0x60
 800bde4:	461a      	mov	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800bdfe:	bf00      	nop
 800be00:	371c      	adds	r7, #28
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	431a      	orrs	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	615a      	str	r2, [r3, #20]
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	3330      	adds	r3, #48	@ 0x30
 800be40:	461a      	mov	r2, r3
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	0a1b      	lsrs	r3, r3, #8
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	f003 030c 	and.w	r3, r3, #12
 800be4c:	4413      	add	r3, r2
 800be4e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	f003 031f 	and.w	r3, r3, #31
 800be5a:	211f      	movs	r1, #31
 800be5c:	fa01 f303 	lsl.w	r3, r1, r3
 800be60:	43db      	mvns	r3, r3
 800be62:	401a      	ands	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	0e9b      	lsrs	r3, r3, #26
 800be68:	f003 011f 	and.w	r1, r3, #31
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f003 031f 	and.w	r3, r3, #31
 800be72:	fa01 f303 	lsl.w	r3, r1, r3
 800be76:	431a      	orrs	r2, r3
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800be7c:	bf00      	nop
 800be7e:	371c      	adds	r7, #28
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3314      	adds	r3, #20
 800be98:	461a      	mov	r2, r3
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	0e5b      	lsrs	r3, r3, #25
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	f003 0304 	and.w	r3, r3, #4
 800bea4:	4413      	add	r3, r2
 800bea6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	0d1b      	lsrs	r3, r3, #20
 800beb0:	f003 031f 	and.w	r3, r3, #31
 800beb4:	2107      	movs	r1, #7
 800beb6:	fa01 f303 	lsl.w	r3, r1, r3
 800beba:	43db      	mvns	r3, r3
 800bebc:	401a      	ands	r2, r3
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	0d1b      	lsrs	r3, r3, #20
 800bec2:	f003 031f 	and.w	r3, r3, #31
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	fa01 f303 	lsl.w	r3, r1, r3
 800becc:	431a      	orrs	r2, r3
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800bed2:	bf00      	nop
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
	...

0800bee0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bef8:	43db      	mvns	r3, r3
 800befa:	401a      	ands	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f003 0318 	and.w	r3, r3, #24
 800bf02:	4908      	ldr	r1, [pc, #32]	@ (800bf24 <LL_ADC_SetChannelSingleDiff+0x44>)
 800bf04:	40d9      	lsrs	r1, r3
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	400b      	ands	r3, r1
 800bf0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800bf16:	bf00      	nop
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	000fffff 	.word	0x000fffff

0800bf28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800bf38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	6093      	str	r3, [r2, #8]
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf60:	d101      	bne.n	800bf66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800bf62:	2301      	movs	r3, #1
 800bf64:	e000      	b.n	800bf68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800bf84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bf88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfb0:	d101      	bne.n	800bfb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d101      	bne.n	800bfdc <LL_ADC_IsEnabled+0x18>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e000      	b.n	800bfde <LL_ADC_IsEnabled+0x1a>
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	370c      	adds	r7, #12
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800bfea:	b480      	push	{r7}
 800bfec:	b083      	sub	sp, #12
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f003 0304 	and.w	r3, r3, #4
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	d101      	bne.n	800c002 <LL_ADC_REG_IsConversionOngoing+0x18>
 800bffe:	2301      	movs	r3, #1
 800c000:	e000      	b.n	800c004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f003 0308 	and.w	r3, r3, #8
 800c020:	2b08      	cmp	r3, #8
 800c022:	d101      	bne.n	800c028 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800c024:	2301      	movs	r3, #1
 800c026:	e000      	b.n	800c02a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
	...

0800c038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c038:	b590      	push	{r4, r7, lr}
 800c03a:	b089      	sub	sp, #36	@ 0x24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800c044:	2300      	movs	r3, #0
 800c046:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e136      	b.n	800c2c0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d109      	bne.n	800c074 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7fe ffb5 	bl	800afd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4618      	mov	r0, r3
 800c07a:	f7ff ff67 	bl	800bf4c <LL_ADC_IsDeepPowerDownEnabled>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d004      	beq.n	800c08e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff ff4d 	bl	800bf28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff ff82 	bl	800bf9c <LL_ADC_IsInternalRegulatorEnabled>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d115      	bne.n	800c0ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff ff66 	bl	800bf74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c0a8:	4b87      	ldr	r3, [pc, #540]	@ (800c2c8 <HAL_ADC_Init+0x290>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	099b      	lsrs	r3, r3, #6
 800c0ae:	4a87      	ldr	r2, [pc, #540]	@ (800c2cc <HAL_ADC_Init+0x294>)
 800c0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b4:	099b      	lsrs	r3, r3, #6
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800c0bc:	e002      	b.n	800c0c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1f9      	bne.n	800c0be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff ff64 	bl	800bf9c <LL_ADC_IsInternalRegulatorEnabled>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10d      	bne.n	800c0f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0de:	f043 0210 	orr.w	r2, r3, #16
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0ea:	f043 0201 	orr.w	r2, r3, #1
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7ff ff75 	bl	800bfea <LL_ADC_REG_IsConversionOngoing>
 800c100:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c106:	f003 0310 	and.w	r3, r3, #16
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f040 80cf 	bne.w	800c2ae <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f040 80cb 	bne.w	800c2ae <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c11c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800c120:	f043 0202 	orr.w	r2, r3, #2
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff ff49 	bl	800bfc4 <LL_ADC_IsEnabled>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d110      	bne.n	800c15a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c138:	4865      	ldr	r0, [pc, #404]	@ (800c2d0 <HAL_ADC_Init+0x298>)
 800c13a:	f7ff ff43 	bl	800bfc4 <LL_ADC_IsEnabled>
 800c13e:	4604      	mov	r4, r0
 800c140:	4864      	ldr	r0, [pc, #400]	@ (800c2d4 <HAL_ADC_Init+0x29c>)
 800c142:	f7ff ff3f 	bl	800bfc4 <LL_ADC_IsEnabled>
 800c146:	4603      	mov	r3, r0
 800c148:	4323      	orrs	r3, r4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d105      	bne.n	800c15a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	4619      	mov	r1, r3
 800c154:	4860      	ldr	r0, [pc, #384]	@ (800c2d8 <HAL_ADC_Init+0x2a0>)
 800c156:	f7ff fd73 	bl	800bc40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7e5b      	ldrb	r3, [r3, #25]
 800c15e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c164:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800c16a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800c170:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c178:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c17a:	4313      	orrs	r3, r2
 800c17c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d106      	bne.n	800c196 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18c:	3b01      	subs	r3, #1
 800c18e:	045b      	lsls	r3, r3, #17
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	4313      	orrs	r3, r2
 800c194:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1aa:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68da      	ldr	r2, [r3, #12]
 800c1b8:	4b48      	ldr	r3, [pc, #288]	@ (800c2dc <HAL_ADC_Init+0x2a4>)
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	6812      	ldr	r2, [r2, #0]
 800c1c0:	69b9      	ldr	r1, [r7, #24]
 800c1c2:	430b      	orrs	r3, r1
 800c1c4:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff ff15 	bl	800c010 <LL_ADC_INJ_IsConversionOngoing>
 800c1e6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d13d      	bne.n	800c26a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d13a      	bne.n	800c26a <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	7e1b      	ldrb	r3, [r3, #24]
 800c1f8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c200:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 800c202:	4313      	orrs	r3, r2
 800c204:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c210:	f023 0302 	bic.w	r3, r3, #2
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	6812      	ldr	r2, [r2, #0]
 800c218:	69b9      	ldr	r1, [r7, #24]
 800c21a:	430b      	orrs	r3, r1
 800c21c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d118      	bne.n	800c25a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c232:	f023 0304 	bic.w	r3, r3, #4
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c23e:	4311      	orrs	r1, r2
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c244:	4311      	orrs	r1, r2
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c24a:	430a      	orrs	r2, r1
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f042 0201 	orr.w	r2, r2, #1
 800c256:	611a      	str	r2, [r3, #16]
 800c258:	e007      	b.n	800c26a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	691a      	ldr	r2, [r3, #16]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f022 0201 	bic.w	r2, r2, #1
 800c268:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10c      	bne.n	800c28c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c278:	f023 010f 	bic.w	r1, r3, #15
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	69db      	ldr	r3, [r3, #28]
 800c280:	1e5a      	subs	r2, r3, #1
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	631a      	str	r2, [r3, #48]	@ 0x30
 800c28a:	e007      	b.n	800c29c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f022 020f 	bic.w	r2, r2, #15
 800c29a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2a0:	f023 0303 	bic.w	r3, r3, #3
 800c2a4:	f043 0201 	orr.w	r2, r3, #1
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	659a      	str	r2, [r3, #88]	@ 0x58
 800c2ac:	e007      	b.n	800c2be <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2b2:	f043 0210 	orr.w	r2, r3, #16
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800c2be:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3724      	adds	r7, #36	@ 0x24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd90      	pop	{r4, r7, pc}
 800c2c8:	20000290 	.word	0x20000290
 800c2cc:	053e2d63 	.word	0x053e2d63
 800c2d0:	42028000 	.word	0x42028000
 800c2d4:	42028100 	.word	0x42028100
 800c2d8:	42028300 	.word	0x42028300
 800c2dc:	fff04007 	.word	0xfff04007

0800c2e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b0b6      	sub	sp, #216	@ 0xd8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d101      	bne.n	800c302 <HAL_ADC_ConfigChannel+0x22>
 800c2fe:	2302      	movs	r3, #2
 800c300:	e3d8      	b.n	800cab4 <HAL_ADC_ConfigChannel+0x7d4>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff fe6b 	bl	800bfea <LL_ADC_REG_IsConversionOngoing>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	f040 83bd 	bne.w	800ca96 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d104      	bne.n	800c32e <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff fccf 	bl	800bccc <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6818      	ldr	r0, [r3, #0]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	6859      	ldr	r1, [r3, #4]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7ff fd78 	bl	800be30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4618      	mov	r0, r3
 800c346:	f7ff fe50 	bl	800bfea <LL_ADC_REG_IsConversionOngoing>
 800c34a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4618      	mov	r0, r3
 800c354:	f7ff fe5c 	bl	800c010 <LL_ADC_INJ_IsConversionOngoing>
 800c358:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c35c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c360:	2b00      	cmp	r3, #0
 800c362:	f040 81d9 	bne.w	800c718 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c366:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f040 81d4 	bne.w	800c718 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c378:	d10f      	bne.n	800c39a <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2200      	movs	r2, #0
 800c384:	4619      	mov	r1, r3
 800c386:	f7ff fd7f 	bl	800be88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800c392:	4618      	mov	r0, r3
 800c394:	f7ff fd39 	bl	800be0a <LL_ADC_SetSamplingTimeCommonConfig>
 800c398:	e00e      	b.n	800c3b8 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6818      	ldr	r0, [r3, #0]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	6819      	ldr	r1, [r3, #0]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7ff fd6e 	bl	800be88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff fd29 	bl	800be0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	695a      	ldr	r2, [r3, #20]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	08db      	lsrs	r3, r3, #3
 800c3c4:	f003 0303 	and.w	r3, r3, #3
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	d022      	beq.n	800c420 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6818      	ldr	r0, [r3, #0]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	6919      	ldr	r1, [r3, #16]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c3ea:	f7ff fc83 	bl	800bcf4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	6919      	ldr	r1, [r3, #16]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f7ff fccf 	bl	800bd9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d102      	bne.n	800c416 <HAL_ADC_ConfigChannel+0x136>
 800c410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c414:	e000      	b.n	800c418 <HAL_ADC_ConfigChannel+0x138>
 800c416:	2300      	movs	r3, #0
 800c418:	461a      	mov	r2, r3
 800c41a:	f7ff fcdb 	bl	800bdd4 <LL_ADC_SetOffsetSaturation>
 800c41e:	e17b      	b.n	800c718 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff fc88 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c42c:	4603      	mov	r3, r0
 800c42e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10a      	bne.n	800c44c <HAL_ADC_ConfigChannel+0x16c>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2100      	movs	r1, #0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff fc7d 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c442:	4603      	mov	r3, r0
 800c444:	0e9b      	lsrs	r3, r3, #26
 800c446:	f003 021f 	and.w	r2, r3, #31
 800c44a:	e01e      	b.n	800c48a <HAL_ADC_ConfigChannel+0x1aa>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2100      	movs	r1, #0
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fc72 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c458:	4603      	mov	r3, r0
 800c45a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c45e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c462:	fa93 f3a3 	rbit	r3, r3
 800c466:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800c46a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c46e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800c472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800c47a:	2320      	movs	r3, #32
 800c47c:	e004      	b.n	800c488 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800c47e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c482:	fab3 f383 	clz	r3, r3
 800c486:	b2db      	uxtb	r3, r3
 800c488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c492:	2b00      	cmp	r3, #0
 800c494:	d105      	bne.n	800c4a2 <HAL_ADC_ConfigChannel+0x1c2>
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	0e9b      	lsrs	r3, r3, #26
 800c49c:	f003 031f 	and.w	r3, r3, #31
 800c4a0:	e018      	b.n	800c4d4 <HAL_ADC_ConfigChannel+0x1f4>
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c4ae:	fa93 f3a3 	rbit	r3, r3
 800c4b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800c4b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800c4be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 800c4c6:	2320      	movs	r3, #32
 800c4c8:	e004      	b.n	800c4d4 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 800c4ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c4ce:	fab3 f383 	clz	r3, r3
 800c4d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d106      	bne.n	800c4e6 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2100      	movs	r1, #0
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff fc41 	bl	800bd68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff fc25 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10a      	bne.n	800c512 <HAL_ADC_ConfigChannel+0x232>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2101      	movs	r1, #1
 800c502:	4618      	mov	r0, r3
 800c504:	f7ff fc1a 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c508:	4603      	mov	r3, r0
 800c50a:	0e9b      	lsrs	r3, r3, #26
 800c50c:	f003 021f 	and.w	r2, r3, #31
 800c510:	e01e      	b.n	800c550 <HAL_ADC_ConfigChannel+0x270>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2101      	movs	r1, #1
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fc0f 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c51e:	4603      	mov	r3, r0
 800c520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c528:	fa93 f3a3 	rbit	r3, r3
 800c52c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800c530:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800c538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d101      	bne.n	800c544 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 800c540:	2320      	movs	r3, #32
 800c542:	e004      	b.n	800c54e <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 800c544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c548:	fab3 f383 	clz	r3, r3
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d105      	bne.n	800c568 <HAL_ADC_ConfigChannel+0x288>
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	0e9b      	lsrs	r3, r3, #26
 800c562:	f003 031f 	and.w	r3, r3, #31
 800c566:	e018      	b.n	800c59a <HAL_ADC_ConfigChannel+0x2ba>
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c574:	fa93 f3a3 	rbit	r3, r3
 800c578:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800c57c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800c584:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800c58c:	2320      	movs	r3, #32
 800c58e:	e004      	b.n	800c59a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 800c590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c594:	fab3 f383 	clz	r3, r3
 800c598:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d106      	bne.n	800c5ac <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff fbde 	bl	800bd68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2102      	movs	r1, #2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff fbc2 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10a      	bne.n	800c5d8 <HAL_ADC_ConfigChannel+0x2f8>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2102      	movs	r1, #2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff fbb7 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	0e9b      	lsrs	r3, r3, #26
 800c5d2:	f003 021f 	and.w	r2, r3, #31
 800c5d6:	e01e      	b.n	800c616 <HAL_ADC_ConfigChannel+0x336>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2102      	movs	r1, #2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff fbac 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5ee:	fa93 f3a3 	rbit	r3, r3
 800c5f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800c5f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800c5fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c602:	2b00      	cmp	r3, #0
 800c604:	d101      	bne.n	800c60a <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 800c606:	2320      	movs	r3, #32
 800c608:	e004      	b.n	800c614 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 800c60a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c60e:	fab3 f383 	clz	r3, r3
 800c612:	b2db      	uxtb	r3, r3
 800c614:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d105      	bne.n	800c62e <HAL_ADC_ConfigChannel+0x34e>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	0e9b      	lsrs	r3, r3, #26
 800c628:	f003 031f 	and.w	r3, r3, #31
 800c62c:	e016      	b.n	800c65c <HAL_ADC_ConfigChannel+0x37c>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c636:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c63a:	fa93 f3a3 	rbit	r3, r3
 800c63e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800c640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c642:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800c646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800c64e:	2320      	movs	r3, #32
 800c650:	e004      	b.n	800c65c <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800c652:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c656:	fab3 f383 	clz	r3, r3
 800c65a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d106      	bne.n	800c66e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2200      	movs	r2, #0
 800c666:	2102      	movs	r1, #2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff fb7d 	bl	800bd68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2103      	movs	r1, #3
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff fb61 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <HAL_ADC_ConfigChannel+0x3ba>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2103      	movs	r1, #3
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7ff fb56 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c690:	4603      	mov	r3, r0
 800c692:	0e9b      	lsrs	r3, r3, #26
 800c694:	f003 021f 	and.w	r2, r3, #31
 800c698:	e017      	b.n	800c6ca <HAL_ADC_ConfigChannel+0x3ea>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2103      	movs	r1, #3
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff fb4b 	bl	800bd3c <LL_ADC_GetOffsetChannel>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6ac:	fa93 f3a3 	rbit	r3, r3
 800c6b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800c6b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800c6b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 800c6bc:	2320      	movs	r3, #32
 800c6be:	e003      	b.n	800c6c8 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 800c6c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6c2:	fab3 f383 	clz	r3, r3
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d105      	bne.n	800c6e2 <HAL_ADC_ConfigChannel+0x402>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	0e9b      	lsrs	r3, r3, #26
 800c6dc:	f003 031f 	and.w	r3, r3, #31
 800c6e0:	e011      	b.n	800c706 <HAL_ADC_ConfigChannel+0x426>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6ea:	fa93 f3a3 	rbit	r3, r3
 800c6ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800c6f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800c6f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d101      	bne.n	800c6fe <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 800c6fa:	2320      	movs	r3, #32
 800c6fc:	e003      	b.n	800c706 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800c6fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c700:	fab3 f383 	clz	r3, r3
 800c704:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c706:	429a      	cmp	r2, r3
 800c708:	d106      	bne.n	800c718 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2200      	movs	r2, #0
 800c710:	2103      	movs	r1, #3
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff fb28 	bl	800bd68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff fc51 	bl	800bfc4 <LL_ADC_IsEnabled>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	f040 813f 	bne.w	800c9a8 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	6819      	ldr	r1, [r3, #0]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	461a      	mov	r2, r3
 800c738:	f7ff fbd2 	bl	800bee0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	4a8e      	ldr	r2, [pc, #568]	@ (800c97c <HAL_ADC_ConfigChannel+0x69c>)
 800c742:	4293      	cmp	r3, r2
 800c744:	f040 8130 	bne.w	800c9a8 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10b      	bne.n	800c770 <HAL_ADC_ConfigChannel+0x490>
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	0e9b      	lsrs	r3, r3, #26
 800c75e:	3301      	adds	r3, #1
 800c760:	f003 031f 	and.w	r3, r3, #31
 800c764:	2b09      	cmp	r3, #9
 800c766:	bf94      	ite	ls
 800c768:	2301      	movls	r3, #1
 800c76a:	2300      	movhi	r3, #0
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	e019      	b.n	800c7a4 <HAL_ADC_ConfigChannel+0x4c4>
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c778:	fa93 f3a3 	rbit	r3, r3
 800c77c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800c77e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c780:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800c782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c784:	2b00      	cmp	r3, #0
 800c786:	d101      	bne.n	800c78c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800c788:	2320      	movs	r3, #32
 800c78a:	e003      	b.n	800c794 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800c78c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c78e:	fab3 f383 	clz	r3, r3
 800c792:	b2db      	uxtb	r3, r3
 800c794:	3301      	adds	r3, #1
 800c796:	f003 031f 	and.w	r3, r3, #31
 800c79a:	2b09      	cmp	r3, #9
 800c79c:	bf94      	ite	ls
 800c79e:	2301      	movls	r3, #1
 800c7a0:	2300      	movhi	r3, #0
 800c7a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d079      	beq.n	800c89c <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d107      	bne.n	800c7c4 <HAL_ADC_ConfigChannel+0x4e4>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	0e9b      	lsrs	r3, r3, #26
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	069b      	lsls	r3, r3, #26
 800c7be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c7c2:	e015      	b.n	800c7f0 <HAL_ADC_ConfigChannel+0x510>
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7cc:	fa93 f3a3 	rbit	r3, r3
 800c7d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800c7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800c7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 800c7dc:	2320      	movs	r3, #32
 800c7de:	e003      	b.n	800c7e8 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 800c7e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e2:	fab3 f383 	clz	r3, r3
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	069b      	lsls	r3, r3, #26
 800c7ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d109      	bne.n	800c810 <HAL_ADC_ConfigChannel+0x530>
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	0e9b      	lsrs	r3, r3, #26
 800c802:	3301      	adds	r3, #1
 800c804:	f003 031f 	and.w	r3, r3, #31
 800c808:	2101      	movs	r1, #1
 800c80a:	fa01 f303 	lsl.w	r3, r1, r3
 800c80e:	e017      	b.n	800c840 <HAL_ADC_ConfigChannel+0x560>
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c818:	fa93 f3a3 	rbit	r3, r3
 800c81c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800c81e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c820:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800c822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c824:	2b00      	cmp	r3, #0
 800c826:	d101      	bne.n	800c82c <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 800c828:	2320      	movs	r3, #32
 800c82a:	e003      	b.n	800c834 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 800c82c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c82e:	fab3 f383 	clz	r3, r3
 800c832:	b2db      	uxtb	r3, r3
 800c834:	3301      	adds	r3, #1
 800c836:	f003 031f 	and.w	r3, r3, #31
 800c83a:	2101      	movs	r1, #1
 800c83c:	fa01 f303 	lsl.w	r3, r1, r3
 800c840:	ea42 0103 	orr.w	r1, r2, r3
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10a      	bne.n	800c866 <HAL_ADC_ConfigChannel+0x586>
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	0e9b      	lsrs	r3, r3, #26
 800c856:	3301      	adds	r3, #1
 800c858:	f003 021f 	and.w	r2, r3, #31
 800c85c:	4613      	mov	r3, r2
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	4413      	add	r3, r2
 800c862:	051b      	lsls	r3, r3, #20
 800c864:	e018      	b.n	800c898 <HAL_ADC_ConfigChannel+0x5b8>
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86e:	fa93 f3a3 	rbit	r3, r3
 800c872:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800c874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800c878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800c87e:	2320      	movs	r3, #32
 800c880:	e003      	b.n	800c88a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800c882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c884:	fab3 f383 	clz	r3, r3
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	3301      	adds	r3, #1
 800c88c:	f003 021f 	and.w	r2, r3, #31
 800c890:	4613      	mov	r3, r2
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	4413      	add	r3, r2
 800c896:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c898:	430b      	orrs	r3, r1
 800c89a:	e080      	b.n	800c99e <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d107      	bne.n	800c8b8 <HAL_ADC_ConfigChannel+0x5d8>
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	0e9b      	lsrs	r3, r3, #26
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	069b      	lsls	r3, r3, #26
 800c8b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c8b6:	e015      	b.n	800c8e4 <HAL_ADC_ConfigChannel+0x604>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c0:	fa93 f3a3 	rbit	r3, r3
 800c8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800c8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 800c8d0:	2320      	movs	r3, #32
 800c8d2:	e003      	b.n	800c8dc <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d6:	fab3 f383 	clz	r3, r3
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	3301      	adds	r3, #1
 800c8de:	069b      	lsls	r3, r3, #26
 800c8e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d109      	bne.n	800c904 <HAL_ADC_ConfigChannel+0x624>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	0e9b      	lsrs	r3, r3, #26
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	f003 031f 	and.w	r3, r3, #31
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c902:	e017      	b.n	800c934 <HAL_ADC_ConfigChannel+0x654>
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c90a:	6a3b      	ldr	r3, [r7, #32]
 800c90c:	fa93 f3a3 	rbit	r3, r3
 800c910:	61fb      	str	r3, [r7, #28]
  return result;
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d101      	bne.n	800c920 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 800c91c:	2320      	movs	r3, #32
 800c91e:	e003      	b.n	800c928 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 800c920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c922:	fab3 f383 	clz	r3, r3
 800c926:	b2db      	uxtb	r3, r3
 800c928:	3301      	adds	r3, #1
 800c92a:	f003 031f 	and.w	r3, r3, #31
 800c92e:	2101      	movs	r1, #1
 800c930:	fa01 f303 	lsl.w	r3, r1, r3
 800c934:	ea42 0103 	orr.w	r1, r2, r3
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10d      	bne.n	800c960 <HAL_ADC_ConfigChannel+0x680>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	0e9b      	lsrs	r3, r3, #26
 800c94a:	3301      	adds	r3, #1
 800c94c:	f003 021f 	and.w	r2, r3, #31
 800c950:	4613      	mov	r3, r2
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	4413      	add	r3, r2
 800c956:	3b1e      	subs	r3, #30
 800c958:	051b      	lsls	r3, r3, #20
 800c95a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c95e:	e01d      	b.n	800c99c <HAL_ADC_ConfigChannel+0x6bc>
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	fa93 f3a3 	rbit	r3, r3
 800c96c:	613b      	str	r3, [r7, #16]
  return result;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d103      	bne.n	800c980 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800c978:	2320      	movs	r3, #32
 800c97a:	e005      	b.n	800c988 <HAL_ADC_ConfigChannel+0x6a8>
 800c97c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	fab3 f383 	clz	r3, r3
 800c986:	b2db      	uxtb	r3, r3
 800c988:	3301      	adds	r3, #1
 800c98a:	f003 021f 	and.w	r2, r3, #31
 800c98e:	4613      	mov	r3, r2
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	4413      	add	r3, r2
 800c994:	3b1e      	subs	r3, #30
 800c996:	051b      	lsls	r3, r3, #20
 800c998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c99c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	f7ff fa70 	bl	800be88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	4b43      	ldr	r3, [pc, #268]	@ (800cabc <HAL_ADC_ConfigChannel+0x7dc>)
 800c9ae:	4013      	ands	r3, r2
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d079      	beq.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c9b4:	4842      	ldr	r0, [pc, #264]	@ (800cac0 <HAL_ADC_ConfigChannel+0x7e0>)
 800c9b6:	f7ff f969 	bl	800bc8c <LL_ADC_GetCommonPathInternalCh>
 800c9ba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a40      	ldr	r2, [pc, #256]	@ (800cac4 <HAL_ADC_ConfigChannel+0x7e4>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d124      	bne.n	800ca12 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c9c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d11e      	bne.n	800ca12 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a3b      	ldr	r2, [pc, #236]	@ (800cac8 <HAL_ADC_ConfigChannel+0x7e8>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d164      	bne.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c9de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4835      	ldr	r0, [pc, #212]	@ (800cac0 <HAL_ADC_ConfigChannel+0x7e0>)
 800c9ea:	f7ff f93c 	bl	800bc66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c9ee:	4b37      	ldr	r3, [pc, #220]	@ (800cacc <HAL_ADC_ConfigChannel+0x7ec>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	099b      	lsrs	r3, r3, #6
 800c9f4:	4a36      	ldr	r2, [pc, #216]	@ (800cad0 <HAL_ADC_ConfigChannel+0x7f0>)
 800c9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9fa:	099b      	lsrs	r3, r3, #6
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ca02:	e002      	b.n	800ca0a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1f9      	bne.n	800ca04 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ca10:	e04a      	b.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a2f      	ldr	r2, [pc, #188]	@ (800cad4 <HAL_ADC_ConfigChannel+0x7f4>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d113      	bne.n	800ca44 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ca1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10d      	bne.n	800ca44 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a2a      	ldr	r2, [pc, #168]	@ (800cad8 <HAL_ADC_ConfigChannel+0x7f8>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d13a      	bne.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ca32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4820      	ldr	r0, [pc, #128]	@ (800cac0 <HAL_ADC_ConfigChannel+0x7e0>)
 800ca3e:	f7ff f912 	bl	800bc66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ca42:	e031      	b.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a24      	ldr	r2, [pc, #144]	@ (800cadc <HAL_ADC_ConfigChannel+0x7fc>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d113      	bne.n	800ca76 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ca4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10d      	bne.n	800ca76 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a1a      	ldr	r2, [pc, #104]	@ (800cac8 <HAL_ADC_ConfigChannel+0x7e8>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d121      	bne.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ca64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	4814      	ldr	r0, [pc, #80]	@ (800cac0 <HAL_ADC_ConfigChannel+0x7e0>)
 800ca70:	f7ff f8f9 	bl	800bc66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 800ca74:	e018      	b.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a19      	ldr	r2, [pc, #100]	@ (800cae0 <HAL_ADC_ConfigChannel+0x800>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d113      	bne.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a10      	ldr	r2, [pc, #64]	@ (800cac8 <HAL_ADC_ConfigChannel+0x7e8>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d00e      	beq.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff f90a 	bl	800bca8 <LL_ADC_EnableChannelVDDcore>
 800ca94:	e008      	b.n	800caa8 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca9a:	f043 0220 	orr.w	r2, r3, #32
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800cab0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	37d8      	adds	r7, #216	@ 0xd8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	80080000 	.word	0x80080000
 800cac0:	42028300 	.word	0x42028300
 800cac4:	c3210000 	.word	0xc3210000
 800cac8:	42028000 	.word	0x42028000
 800cacc:	20000290 	.word	0x20000290
 800cad0:	053e2d63 	.word	0x053e2d63
 800cad4:	43290000 	.word	0x43290000
 800cad8:	42028100 	.word	0x42028100
 800cadc:	c7520000 	.word	0xc7520000
 800cae0:	475a0000 	.word	0x475a0000

0800cae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f003 0307 	and.w	r3, r3, #7
 800caf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800caf4:	4b0c      	ldr	r3, [pc, #48]	@ (800cb28 <__NVIC_SetPriorityGrouping+0x44>)
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cb00:	4013      	ands	r3, r2
 800cb02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cb0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cb10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cb16:	4a04      	ldr	r2, [pc, #16]	@ (800cb28 <__NVIC_SetPriorityGrouping+0x44>)
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	60d3      	str	r3, [r2, #12]
}
 800cb1c:	bf00      	nop
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	e000ed00 	.word	0xe000ed00

0800cb2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cb30:	4b04      	ldr	r3, [pc, #16]	@ (800cb44 <__NVIC_GetPriorityGrouping+0x18>)
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	0a1b      	lsrs	r3, r3, #8
 800cb36:	f003 0307 	and.w	r3, r3, #7
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	e000ed00 	.word	0xe000ed00

0800cb48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	db0b      	blt.n	800cb72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb5a:	88fb      	ldrh	r3, [r7, #6]
 800cb5c:	f003 021f 	and.w	r2, r3, #31
 800cb60:	4907      	ldr	r1, [pc, #28]	@ (800cb80 <__NVIC_EnableIRQ+0x38>)
 800cb62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb66:	095b      	lsrs	r3, r3, #5
 800cb68:	2001      	movs	r0, #1
 800cb6a:	fa00 f202 	lsl.w	r2, r0, r2
 800cb6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cb72:	bf00      	nop
 800cb74:	370c      	adds	r7, #12
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	e000e100 	.word	0xe000e100

0800cb84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	6039      	str	r1, [r7, #0]
 800cb8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	db0a      	blt.n	800cbae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	490c      	ldr	r1, [pc, #48]	@ (800cbd0 <__NVIC_SetPriority+0x4c>)
 800cb9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cba2:	0112      	lsls	r2, r2, #4
 800cba4:	b2d2      	uxtb	r2, r2
 800cba6:	440b      	add	r3, r1
 800cba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cbac:	e00a      	b.n	800cbc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	4908      	ldr	r1, [pc, #32]	@ (800cbd4 <__NVIC_SetPriority+0x50>)
 800cbb4:	88fb      	ldrh	r3, [r7, #6]
 800cbb6:	f003 030f 	and.w	r3, r3, #15
 800cbba:	3b04      	subs	r3, #4
 800cbbc:	0112      	lsls	r2, r2, #4
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	440b      	add	r3, r1
 800cbc2:	761a      	strb	r2, [r3, #24]
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	e000e100 	.word	0xe000e100
 800cbd4:	e000ed00 	.word	0xe000ed00

0800cbd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b089      	sub	sp, #36	@ 0x24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f003 0307 	and.w	r3, r3, #7
 800cbea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	f1c3 0307 	rsb	r3, r3, #7
 800cbf2:	2b04      	cmp	r3, #4
 800cbf4:	bf28      	it	cs
 800cbf6:	2304      	movcs	r3, #4
 800cbf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	2b06      	cmp	r3, #6
 800cc00:	d902      	bls.n	800cc08 <NVIC_EncodePriority+0x30>
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	3b03      	subs	r3, #3
 800cc06:	e000      	b.n	800cc0a <NVIC_EncodePriority+0x32>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	fa02 f303 	lsl.w	r3, r2, r3
 800cc16:	43da      	mvns	r2, r3
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	401a      	ands	r2, r3
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cc20:	f04f 31ff 	mov.w	r1, #4294967295
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	fa01 f303 	lsl.w	r3, r1, r3
 800cc2a:	43d9      	mvns	r1, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc30:	4313      	orrs	r3, r2
         );
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3724      	adds	r7, #36	@ 0x24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b082      	sub	sp, #8
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7ff ff4c 	bl	800cae4 <__NVIC_SetPriorityGrouping>
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cc62:	f7ff ff63 	bl	800cb2c <__NVIC_GetPriorityGrouping>
 800cc66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	68b9      	ldr	r1, [r7, #8]
 800cc6c:	6978      	ldr	r0, [r7, #20]
 800cc6e:	f7ff ffb3 	bl	800cbd8 <NVIC_EncodePriority>
 800cc72:	4602      	mov	r2, r0
 800cc74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cc78:	4611      	mov	r1, r2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7ff ff82 	bl	800cb84 <__NVIC_SetPriority>
}
 800cc80:	bf00      	nop
 800cc82:	3718      	adds	r7, #24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cc92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff ff56 	bl	800cb48 <__NVIC_EnableIRQ>
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d844      	bhi.n	800cd3c <HAL_SYSTICK_CLKSourceConfig+0x98>
 800ccb2:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800ccdb 	.word	0x0800ccdb
 800ccbc:	0800ccf9 	.word	0x0800ccf9
 800ccc0:	0800cd1b 	.word	0x0800cd1b
 800ccc4:	0800cd3d 	.word	0x0800cd3d
 800ccc8:	0800cccd 	.word	0x0800cccd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800cccc:	4b1f      	ldr	r3, [pc, #124]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a1e      	ldr	r2, [pc, #120]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800ccd2:	f043 0304 	orr.w	r3, r3, #4
 800ccd6:	6013      	str	r3, [r2, #0]
      break;
 800ccd8:	e031      	b.n	800cd3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800ccda:	4b1c      	ldr	r3, [pc, #112]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a1b      	ldr	r2, [pc, #108]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cce0:	f023 0304 	bic.w	r3, r3, #4
 800cce4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800cce6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cce8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ccec:	4a18      	ldr	r2, [pc, #96]	@ (800cd50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800ccee:	f023 030c 	bic.w	r3, r3, #12
 800ccf2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800ccf6:	e022      	b.n	800cd3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800ccf8:	4b14      	ldr	r3, [pc, #80]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a13      	ldr	r2, [pc, #76]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800ccfe:	f023 0304 	bic.w	r3, r3, #4
 800cd02:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800cd04:	4b12      	ldr	r3, [pc, #72]	@ (800cd50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cd06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd0a:	f023 030c 	bic.w	r3, r3, #12
 800cd0e:	4a10      	ldr	r2, [pc, #64]	@ (800cd50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cd10:	f043 0304 	orr.w	r3, r3, #4
 800cd14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800cd18:	e011      	b.n	800cd3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800cd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a0b      	ldr	r2, [pc, #44]	@ (800cd4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cd20:	f023 0304 	bic.w	r3, r3, #4
 800cd24:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800cd26:	4b0a      	ldr	r3, [pc, #40]	@ (800cd50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cd28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd2c:	f023 030c 	bic.w	r3, r3, #12
 800cd30:	4a07      	ldr	r2, [pc, #28]	@ (800cd50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cd32:	f043 0308 	orr.w	r3, r3, #8
 800cd36:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800cd3a:	e000      	b.n	800cd3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800cd3c:	bf00      	nop
  }
}
 800cd3e:	bf00      	nop
 800cd40:	370c      	adds	r7, #12
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	e000e010 	.word	0xe000e010
 800cd50:	44020c00 	.word	0x44020c00

0800cd54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	e0e8      	b.n	800cf38 <HAL_ETH_Init+0x1e4>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d106      	bne.n	800cd7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2223      	movs	r2, #35	@ 0x23
 800cd74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7fe f9b1 	bl	800b0e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 800cd7e:	4b70      	ldr	r3, [pc, #448]	@ (800cf40 <HAL_ETH_Init+0x1ec>)
 800cd80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cd84:	4a6e      	ldr	r2, [pc, #440]	@ (800cf40 <HAL_ETH_Init+0x1ec>)
 800cd86:	f043 0302 	orr.w	r3, r3, #2
 800cd8a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800cd8e:	4b6c      	ldr	r3, [pc, #432]	@ (800cf40 <HAL_ETH_Init+0x1ec>)
 800cd90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cd94:	f003 0302 	and.w	r3, r3, #2
 800cd98:	60bb      	str	r3, [r7, #8]
 800cd9a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	7a1b      	ldrb	r3, [r3, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d103      	bne.n	800cdac <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 800cda4:	2000      	movs	r0, #0
 800cda6:	f7fe ff35 	bl	800bc14 <HAL_SBS_ETHInterfaceSelect>
 800cdaa:	e003      	b.n	800cdb4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 800cdac:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800cdb0:	f7fe ff30 	bl	800bc14 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 800cdb4:	4b63      	ldr	r3, [pc, #396]	@ (800cf44 <HAL_ETH_Init+0x1f0>)
 800cdb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	6812      	ldr	r2, [r2, #0]
 800cdc8:	f043 0301 	orr.w	r3, r3, #1
 800cdcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cdd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cdd2:	f7fe feef 	bl	800bbb4 <HAL_GetTick>
 800cdd6:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800cdd8:	e011      	b.n	800cdfe <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800cdda:	f7fe feeb 	bl	800bbb4 <HAL_GetTick>
 800cdde:	4602      	mov	r2, r0
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800cde8:	d909      	bls.n	800cdfe <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2204      	movs	r2, #4
 800cdee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	22e0      	movs	r2, #224	@ 0xe0
 800cdf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e09c      	b.n	800cf38 <HAL_ETH_Init+0x1e4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1e4      	bne.n	800cdda <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f89d 	bl	800cf50 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800ce16:	f001 ff7f 	bl	800ed18 <HAL_RCC_GetHCLKFreq>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	4a4a      	ldr	r2, [pc, #296]	@ (800cf48 <HAL_ETH_Init+0x1f4>)
 800ce1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce22:	0c9a      	lsrs	r2, r3, #18
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3a01      	subs	r2, #1
 800ce2a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fa80 	bl	800d334 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800ce40:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	6812      	ldr	r2, [r2, #0]
 800ce48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ce4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ce50:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	f003 0303 	and.w	r3, r3, #3
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d009      	beq.n	800ce74 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	22e0      	movs	r2, #224	@ 0xe0
 800ce6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e061      	b.n	800cf38 <HAL_ETH_Init+0x1e4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ce80:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ce84:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	6952      	ldr	r2, [r2, #20]
 800ce8c:	0051      	lsls	r1, r2, #1
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	6812      	ldr	r2, [r2, #0]
 800ce92:	430b      	orrs	r3, r1
 800ce94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ce98:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fae6 	bl	800d46e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fb2c 	bl	800d500 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	3305      	adds	r3, #5
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	021a      	lsls	r2, r3, #8
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	3304      	adds	r3, #4
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	4619      	mov	r1, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	430a      	orrs	r2, r1
 800cec2:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	3303      	adds	r3, #3
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	061a      	lsls	r2, r3, #24
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	3302      	adds	r3, #2
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	041b      	lsls	r3, r3, #16
 800ceda:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	3301      	adds	r3, #1
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800cee6:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800cef4:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800cef6:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	4b11      	ldr	r3, [pc, #68]	@ (800cf4c <HAL_ETH_Init+0x1f8>)
 800cf08:	430b      	orrs	r3, r1
 800cf0a:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6812      	ldr	r2, [r2, #0]
 800cf1a:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 800cf1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf22:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2210      	movs	r2, #16
 800cf32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	44020c00 	.word	0x44020c00
 800cf44:	44000400 	.word	0x44000400
 800cf48:	431bde83 	.word	0x431bde83
 800cf4c:	0c020060 	.word	0x0c020060

0800cf50 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800cf60:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800cf68:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800cf6a:	f001 fed5 	bl	800ed18 <HAL_RCC_GetHCLKFreq>
 800cf6e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	4a1a      	ldr	r2, [pc, #104]	@ (800cfdc <HAL_ETH_SetMDIOClockRange+0x8c>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d804      	bhi.n	800cf82 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	e022      	b.n	800cfc8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	4a16      	ldr	r2, [pc, #88]	@ (800cfe0 <HAL_ETH_SetMDIOClockRange+0x90>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d204      	bcs.n	800cf94 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	e019      	b.n	800cfc8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	4a13      	ldr	r2, [pc, #76]	@ (800cfe4 <HAL_ETH_SetMDIOClockRange+0x94>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d915      	bls.n	800cfc8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	4a12      	ldr	r2, [pc, #72]	@ (800cfe8 <HAL_ETH_SetMDIOClockRange+0x98>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d804      	bhi.n	800cfae <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	e00c      	b.n	800cfc8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	4a0e      	ldr	r2, [pc, #56]	@ (800cfec <HAL_ETH_SetMDIOClockRange+0x9c>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d804      	bhi.n	800cfc0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cfbc:	60fb      	str	r3, [r7, #12]
 800cfbe:	e003      	b.n	800cfc8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800cfc6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800cfd2:	bf00      	nop
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	02160ebf 	.word	0x02160ebf
 800cfe0:	03938700 	.word	0x03938700
 800cfe4:	05f5e0ff 	.word	0x05f5e0ff
 800cfe8:	08f0d17f 	.word	0x08f0d17f
 800cfec:	0ee6b27f 	.word	0x0ee6b27f

0800cff0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800d002:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	791b      	ldrb	r3, [r3, #4]
 800d008:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800d00a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	7b1b      	ldrb	r3, [r3, #12]
 800d010:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800d012:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	7b5b      	ldrb	r3, [r3, #13]
 800d018:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800d01a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	7b9b      	ldrb	r3, [r3, #14]
 800d020:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800d022:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	7bdb      	ldrb	r3, [r3, #15]
 800d028:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800d02a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	7c12      	ldrb	r2, [r2, #16]
 800d030:	2a00      	cmp	r2, #0
 800d032:	d102      	bne.n	800d03a <ETH_SetMACConfig+0x4a>
 800d034:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800d038:	e000      	b.n	800d03c <ETH_SetMACConfig+0x4c>
 800d03a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800d03c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800d03e:	683a      	ldr	r2, [r7, #0]
 800d040:	7c52      	ldrb	r2, [r2, #17]
 800d042:	2a00      	cmp	r2, #0
 800d044:	d102      	bne.n	800d04c <ETH_SetMACConfig+0x5c>
 800d046:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d04a:	e000      	b.n	800d04e <ETH_SetMACConfig+0x5e>
 800d04c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800d04e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	7c9b      	ldrb	r3, [r3, #18]
 800d054:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800d056:	431a      	orrs	r2, r3
               macconf->Speed |
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800d05c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800d062:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	7f1b      	ldrb	r3, [r3, #28]
 800d068:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800d06a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	7f5b      	ldrb	r3, [r3, #29]
 800d070:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800d072:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	7f92      	ldrb	r2, [r2, #30]
 800d078:	2a00      	cmp	r2, #0
 800d07a:	d102      	bne.n	800d082 <ETH_SetMACConfig+0x92>
 800d07c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d080:	e000      	b.n	800d084 <ETH_SetMACConfig+0x94>
 800d082:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800d084:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	7fdb      	ldrb	r3, [r3, #31]
 800d08a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800d08c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d094:	2a00      	cmp	r2, #0
 800d096:	d102      	bne.n	800d09e <ETH_SetMACConfig+0xae>
 800d098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d09c:	e000      	b.n	800d0a0 <ETH_SetMACConfig+0xb0>
 800d09e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800d0a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800d0a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800d0b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	4b57      	ldr	r3, [pc, #348]	@ (800d220 <ETH_SetMACConfig+0x230>)
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	6812      	ldr	r2, [r2, #0]
 800d0c8:	68f9      	ldr	r1, [r7, #12]
 800d0ca:	430b      	orrs	r3, r1
 800d0cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d0da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800d0dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d0e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800d0e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d0ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800d0f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800d0f8:	2a00      	cmp	r2, #0
 800d0fa:	d102      	bne.n	800d102 <ETH_SetMACConfig+0x112>
 800d0fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d100:	e000      	b.n	800d104 <ETH_SetMACConfig+0x114>
 800d102:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800d104:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800d10a:	4313      	orrs	r3, r2
 800d10c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	4b43      	ldr	r3, [pc, #268]	@ (800d224 <ETH_SetMACConfig+0x234>)
 800d116:	4013      	ands	r3, r2
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	6812      	ldr	r2, [r2, #0]
 800d11c:	68f9      	ldr	r1, [r7, #12]
 800d11e:	430b      	orrs	r3, r1
 800d120:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d128:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800d12e:	4313      	orrs	r3, r2
 800d130:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 800d13c:	f023 0301 	bic.w	r3, r3, #1
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	6812      	ldr	r2, [r2, #0]
 800d144:	68f9      	ldr	r1, [r7, #12]
 800d146:	430b      	orrs	r3, r1
 800d148:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800d150:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800d156:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800d15e:	2a00      	cmp	r2, #0
 800d160:	d101      	bne.n	800d166 <ETH_SetMACConfig+0x176>
 800d162:	2280      	movs	r2, #128	@ 0x80
 800d164:	e000      	b.n	800d168 <ETH_SetMACConfig+0x178>
 800d166:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800d168:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d16e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d17a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800d17e:	4013      	ands	r3, r2
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	6812      	ldr	r2, [r2, #0]
 800d184:	68f9      	ldr	r1, [r7, #12]
 800d186:	430b      	orrs	r3, r1
 800d188:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800d190:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800d198:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800d19a:	4313      	orrs	r3, r2
 800d19c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1a6:	f023 0103 	bic.w	r1, r3, #3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	430a      	orrs	r2, r1
 800d1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800d1be:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800d1da:	2a00      	cmp	r2, #0
 800d1dc:	d101      	bne.n	800d1e2 <ETH_SetMACConfig+0x1f2>
 800d1de:	2240      	movs	r2, #64	@ 0x40
 800d1e0:	e000      	b.n	800d1e4 <ETH_SetMACConfig+0x1f4>
 800d1e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800d1e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800d1ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800d1ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800d1f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800d204:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	430a      	orrs	r2, r1
 800d210:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800d214:	bf00      	nop
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	00048083 	.word	0x00048083
 800d224:	c0f88000 	.word	0xc0f88000

0800d228 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 800d240:	f023 0302 	bic.w	r3, r3, #2
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	6811      	ldr	r1, [r2, #0]
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	430b      	orrs	r3, r1
 800d24e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d252:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	791b      	ldrb	r3, [r3, #4]
 800d258:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800d25e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	7b1b      	ldrb	r3, [r3, #12]
 800d264:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800d266:	4313      	orrs	r3, r2
 800d268:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 800d278:	f023 0301 	bic.w	r3, r3, #1
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	430b      	orrs	r3, r1
 800d284:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d288:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	7b5b      	ldrb	r3, [r3, #13]
 800d28e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800d294:	4313      	orrs	r3, r2
 800d296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d2a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800d2a4:	4b21      	ldr	r3, [pc, #132]	@ (800d32c <ETH_SetDMAConfig+0x104>)
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	6812      	ldr	r2, [r2, #0]
 800d2ac:	68f9      	ldr	r1, [r7, #12]
 800d2ae:	430b      	orrs	r3, r1
 800d2b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d2b4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	7d1b      	ldrb	r3, [r3, #20]
 800d2c0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800d2c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	7f5b      	ldrb	r3, [r3, #29]
 800d2c8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d2d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800d2da:	4b15      	ldr	r3, [pc, #84]	@ (800d330 <ETH_SetDMAConfig+0x108>)
 800d2dc:	4013      	ands	r3, r2
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	6812      	ldr	r2, [r2, #0]
 800d2e2:	68f9      	ldr	r1, [r7, #12]
 800d2e4:	430b      	orrs	r3, r1
 800d2e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d2ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	7f1b      	ldrb	r3, [r3, #28]
 800d2f2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d304:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d30c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	6812      	ldr	r2, [r2, #0]
 800d314:	68f9      	ldr	r1, [r7, #12]
 800d316:	430b      	orrs	r3, r1
 800d318:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d31c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800d320:	bf00      	nop
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	fffec000 	.word	0xfffec000
 800d330:	ffc0efef 	.word	0xffc0efef

0800d334 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b0a4      	sub	sp, #144	@ 0x90
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800d33c:	2301      	movs	r3, #1
 800d33e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800d342:	2300      	movs	r3, #0
 800d344:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800d346:	2300      	movs	r3, #0
 800d348:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800d352:	2301      	movs	r3, #1
 800d354:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800d358:	2301      	movs	r3, #1
 800d35a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800d35e:	2301      	movs	r3, #1
 800d360:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800d364:	2300      	movs	r3, #0
 800d366:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800d370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d374:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800d376:	2300      	movs	r3, #0
 800d378:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800d37c:	2300      	movs	r3, #0
 800d37e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800d380:	2300      	movs	r3, #0
 800d382:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800d386:	2300      	movs	r3, #0
 800d388:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800d38c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800d390:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800d392:	2300      	movs	r3, #0
 800d394:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800d398:	2300      	movs	r3, #0
 800d39a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800d39c:	2301      	movs	r3, #1
 800d39e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800d3cc:	2320      	movs	r3, #32
 800d3ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800d3de:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800d3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800d3e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d3e8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800d3f0:	2302      	movs	r3, #2
 800d3f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800d402:	2300      	movs	r3, #0
 800d404:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800d408:	2301      	movs	r3, #1
 800d40a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800d40e:	2300      	movs	r3, #0
 800d410:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800d412:	2301      	movs	r3, #1
 800d414:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800d418:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7ff fde6 	bl	800cff0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800d424:	2301      	movs	r3, #1
 800d426:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800d428:	2301      	movs	r3, #1
 800d42a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800d42c:	2300      	movs	r3, #0
 800d42e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800d430:	2300      	movs	r3, #0
 800d432:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800d436:	2300      	movs	r3, #0
 800d438:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800d43e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d442:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800d444:	2300      	movs	r3, #0
 800d446:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800d448:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d44c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800d44e:	2300      	movs	r3, #0
 800d450:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800d454:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800d458:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800d45a:	f107 0308 	add.w	r3, r7, #8
 800d45e:	4619      	mov	r1, r3
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff fee1 	bl	800d228 <ETH_SetDMAConfig>
}
 800d466:	bf00      	nop
 800d468:	3790      	adds	r7, #144	@ 0x90
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800d46e:	b480      	push	{r7}
 800d470:	b085      	sub	sp, #20
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	e01d      	b.n	800d4b8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68d9      	ldr	r1, [r3, #12]
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	4613      	mov	r3, r2
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	4413      	add	r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	440b      	add	r3, r1
 800d48c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2200      	movs	r2, #0
 800d492:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2200      	movs	r2, #0
 800d498:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2200      	movs	r2, #0
 800d49e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	3206      	adds	r2, #6
 800d4ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b03      	cmp	r3, #3
 800d4bc:	d9de      	bls.n	800d47c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	68da      	ldr	r2, [r3, #12]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4e0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	68da      	ldr	r2, [r3, #12]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4f0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800d4f4:	bf00      	nop
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800d508:	2300      	movs	r3, #0
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	e023      	b.n	800d556 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6919      	ldr	r1, [r3, #16]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	4613      	mov	r3, r2
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	4413      	add	r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	440b      	add	r3, r1
 800d51e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2200      	movs	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2200      	movs	r2, #0
 800d52a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2200      	movs	r2, #0
 800d530:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	2200      	movs	r2, #0
 800d536:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2200      	movs	r2, #0
 800d53c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	2200      	movs	r2, #0
 800d542:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800d544:	68b9      	ldr	r1, [r7, #8]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	3212      	adds	r2, #18
 800d54c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3301      	adds	r3, #1
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d9d8      	bls.n	800d50e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d582:	461a      	mov	r2, r3
 800d584:	2303      	movs	r3, #3
 800d586:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	691a      	ldr	r2, [r3, #16]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d596:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5aa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800d5ae:	bf00      	nop
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
	...

0800d5bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d101      	bne.n	800d5ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e147      	b.n	800d85e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7fd fe28 	bl	800b238 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	699a      	ldr	r2, [r3, #24]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f022 0210 	bic.w	r2, r2, #16
 800d5f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d5f8:	f7fe fadc 	bl	800bbb4 <HAL_GetTick>
 800d5fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800d5fe:	e012      	b.n	800d626 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800d600:	f7fe fad8 	bl	800bbb4 <HAL_GetTick>
 800d604:	4602      	mov	r2, r0
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	2b0a      	cmp	r3, #10
 800d60c:	d90b      	bls.n	800d626 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d612:	f043 0201 	orr.w	r2, r3, #1
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2203      	movs	r2, #3
 800d61e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	e11b      	b.n	800d85e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	699b      	ldr	r3, [r3, #24]
 800d62c:	f003 0308 	and.w	r3, r3, #8
 800d630:	2b08      	cmp	r3, #8
 800d632:	d0e5      	beq.n	800d600 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	699a      	ldr	r2, [r3, #24]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f042 0201 	orr.w	r2, r2, #1
 800d642:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d644:	f7fe fab6 	bl	800bbb4 <HAL_GetTick>
 800d648:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800d64a:	e012      	b.n	800d672 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800d64c:	f7fe fab2 	bl	800bbb4 <HAL_GetTick>
 800d650:	4602      	mov	r2, r0
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	2b0a      	cmp	r3, #10
 800d658:	d90b      	bls.n	800d672 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d65e:	f043 0201 	orr.w	r2, r3, #1
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2203      	movs	r2, #3
 800d66a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	e0f5      	b.n	800d85e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	f003 0301 	and.w	r3, r3, #1
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d0e5      	beq.n	800d64c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	699a      	ldr	r2, [r3, #24]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f042 0202 	orr.w	r2, r2, #2
 800d68e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a74      	ldr	r2, [pc, #464]	@ (800d868 <HAL_FDCAN_Init+0x2ac>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d103      	bne.n	800d6a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800d69a:	4a74      	ldr	r2, [pc, #464]	@ (800d86c <HAL_FDCAN_Init+0x2b0>)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7c1b      	ldrb	r3, [r3, #16]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d108      	bne.n	800d6bc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	699a      	ldr	r2, [r3, #24]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d6b8:	619a      	str	r2, [r3, #24]
 800d6ba:	e007      	b.n	800d6cc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	699a      	ldr	r2, [r3, #24]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d6ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	7c5b      	ldrb	r3, [r3, #17]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d108      	bne.n	800d6e6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	699a      	ldr	r2, [r3, #24]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d6e2:	619a      	str	r2, [r3, #24]
 800d6e4:	e007      	b.n	800d6f6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699a      	ldr	r2, [r3, #24]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d6f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7c9b      	ldrb	r3, [r3, #18]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d108      	bne.n	800d710 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	699a      	ldr	r2, [r3, #24]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d70c:	619a      	str	r2, [r3, #24]
 800d70e:	e007      	b.n	800d720 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	699a      	ldr	r2, [r3, #24]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d71e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	689a      	ldr	r2, [r3, #8]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	430a      	orrs	r2, r1
 800d734:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	699a      	ldr	r2, [r3, #24]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800d744:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	691a      	ldr	r2, [r3, #16]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f022 0210 	bic.w	r2, r2, #16
 800d754:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d108      	bne.n	800d770 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	699a      	ldr	r2, [r3, #24]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f042 0204 	orr.w	r2, r2, #4
 800d76c:	619a      	str	r2, [r3, #24]
 800d76e:	e02c      	b.n	800d7ca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d028      	beq.n	800d7ca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d01c      	beq.n	800d7ba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	699a      	ldr	r2, [r3, #24]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d78e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	691a      	ldr	r2, [r3, #16]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f042 0210 	orr.w	r2, r2, #16
 800d79e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	2b03      	cmp	r3, #3
 800d7a6:	d110      	bne.n	800d7ca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	699a      	ldr	r2, [r3, #24]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f042 0220 	orr.w	r2, r2, #32
 800d7b6:	619a      	str	r2, [r3, #24]
 800d7b8:	e007      	b.n	800d7ca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	699a      	ldr	r2, [r3, #24]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f042 0220 	orr.w	r2, r2, #32
 800d7c8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	69db      	ldr	r3, [r3, #28]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d7da:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a1b      	ldr	r3, [r3, #32]
 800d7e0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800d7e2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	695b      	ldr	r3, [r3, #20]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800d7f2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d7f4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d7fe:	d115      	bne.n	800d82c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d804:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80a:	3b01      	subs	r3, #1
 800d80c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d80e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d814:	3b01      	subs	r3, #1
 800d816:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800d818:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d820:	3b01      	subs	r3, #1
 800d822:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800d828:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d82a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	430a      	orrs	r2, r1
 800d83e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f814 	bl	800d870 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	4000a400 	.word	0x4000a400
 800d86c:	4000a500 	.word	0x4000a500

0800d870 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800d878:	4b2c      	ldr	r3, [pc, #176]	@ (800d92c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800d87a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a2b      	ldr	r2, [pc, #172]	@ (800d930 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d103      	bne.n	800d88e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d88c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d89c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a4:	041a      	lsls	r2, r3, #16
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8c2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ca:	061a      	lsls	r2, r3, #24
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	60fb      	str	r3, [r7, #12]
 800d902:	e005      	b.n	800d910 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	3304      	adds	r3, #4
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d3f3      	bcc.n	800d904 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800d91c:	bf00      	nop
 800d91e:	bf00      	nop
 800d920:	3714      	adds	r7, #20
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	4000ac00 	.word	0x4000ac00
 800d930:	4000a800 	.word	0x4000a800

0800d934 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800d93e:	2300      	movs	r3, #0
 800d940:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800d942:	e136      	b.n	800dbb2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	2101      	movs	r1, #1
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	fa01 f303 	lsl.w	r3, r1, r3
 800d950:	4013      	ands	r3, r2
 800d952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8128 	beq.w	800dbac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	2b02      	cmp	r3, #2
 800d962:	d003      	beq.n	800d96c <HAL_GPIO_Init+0x38>
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	2b12      	cmp	r3, #18
 800d96a:	d125      	bne.n	800d9b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	08da      	lsrs	r2, r3, #3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3208      	adds	r2, #8
 800d974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d978:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	f003 0307 	and.w	r3, r3, #7
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	220f      	movs	r2, #15
 800d984:	fa02 f303 	lsl.w	r3, r2, r3
 800d988:	43db      	mvns	r3, r3
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	4013      	ands	r3, r2
 800d98e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	f003 020f 	and.w	r2, r3, #15
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	f003 0307 	and.w	r3, r3, #7
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	08da      	lsrs	r2, r3, #3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	3208      	adds	r2, #8
 800d9b2:	6979      	ldr	r1, [r7, #20]
 800d9b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	2203      	movs	r2, #3
 800d9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c8:	43db      	mvns	r3, r3
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f003 0203 	and.w	r2, r3, #3
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d00b      	beq.n	800da0c <HAL_GPIO_Init+0xd8>
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d007      	beq.n	800da0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800da00:	2b11      	cmp	r3, #17
 800da02:	d003      	beq.n	800da0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	2b12      	cmp	r3, #18
 800da0a:	d130      	bne.n	800da6e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	2203      	movs	r2, #3
 800da18:	fa02 f303 	lsl.w	r3, r2, r3
 800da1c:	43db      	mvns	r3, r3
 800da1e:	697a      	ldr	r2, [r7, #20]
 800da20:	4013      	ands	r3, r2
 800da22:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	68da      	ldr	r2, [r3, #12]
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	fa02 f303 	lsl.w	r3, r2, r3
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	4313      	orrs	r3, r2
 800da34:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800da42:	2201      	movs	r2, #1
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	fa02 f303 	lsl.w	r3, r2, r3
 800da4a:	43db      	mvns	r3, r3
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	4013      	ands	r3, r2
 800da50:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	091b      	lsrs	r3, r3, #4
 800da58:	f003 0201 	and.w	r2, r3, #1
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	fa02 f303 	lsl.w	r3, r2, r3
 800da62:	697a      	ldr	r2, [r7, #20]
 800da64:	4313      	orrs	r3, r2
 800da66:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	2b03      	cmp	r3, #3
 800da74:	d017      	beq.n	800daa6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	2203      	movs	r2, #3
 800da82:	fa02 f303 	lsl.w	r3, r2, r3
 800da86:	43db      	mvns	r3, r3
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	4013      	ands	r3, r2
 800da8c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	689a      	ldr	r2, [r3, #8]
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	005b      	lsls	r3, r3, #1
 800da96:	fa02 f303 	lsl.w	r3, r2, r3
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d07c      	beq.n	800dbac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800dab2:	4a47      	ldr	r2, [pc, #284]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	089b      	lsrs	r3, r3, #2
 800dab8:	3318      	adds	r3, #24
 800daba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dabe:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	f003 0303 	and.w	r3, r3, #3
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	220f      	movs	r2, #15
 800daca:	fa02 f303 	lsl.w	r3, r2, r3
 800dace:	43db      	mvns	r3, r3
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	4013      	ands	r3, r2
 800dad4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	0a9a      	lsrs	r2, r3, #10
 800dada:	4b3e      	ldr	r3, [pc, #248]	@ (800dbd4 <HAL_GPIO_Init+0x2a0>)
 800dadc:	4013      	ands	r3, r2
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	f002 0203 	and.w	r2, r2, #3
 800dae4:	00d2      	lsls	r2, r2, #3
 800dae6:	4093      	lsls	r3, r2
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	4313      	orrs	r3, r2
 800daec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800daee:	4938      	ldr	r1, [pc, #224]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	089b      	lsrs	r3, r3, #2
 800daf4:	3318      	adds	r3, #24
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800dafc:	4b34      	ldr	r3, [pc, #208]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	43db      	mvns	r3, r3
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	4013      	ands	r3, r2
 800db0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d003      	beq.n	800db20 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800db20:	4a2b      	ldr	r2, [pc, #172]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800db26:	4b2a      	ldr	r3, [pc, #168]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	43db      	mvns	r3, r3
 800db30:	697a      	ldr	r2, [r7, #20]
 800db32:	4013      	ands	r3, r2
 800db34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d003      	beq.n	800db4a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	4313      	orrs	r3, r2
 800db48:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800db4a:	4a21      	ldr	r2, [pc, #132]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800db50:	4b1f      	ldr	r3, [pc, #124]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800db52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db56:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	43db      	mvns	r3, r3
 800db5c:	697a      	ldr	r2, [r7, #20]
 800db5e:	4013      	ands	r3, r2
 800db60:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d003      	beq.n	800db76 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	4313      	orrs	r3, r2
 800db74:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800db76:	4a16      	ldr	r2, [pc, #88]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800db7e:	4b14      	ldr	r3, [pc, #80]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800db80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	43db      	mvns	r3, r3
 800db8a:	697a      	ldr	r2, [r7, #20]
 800db8c:	4013      	ands	r3, r2
 800db8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d003      	beq.n	800dba4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800db9c:	697a      	ldr	r2, [r7, #20]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800dba4:	4a0a      	ldr	r2, [pc, #40]	@ (800dbd0 <HAL_GPIO_Init+0x29c>)
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	fa22 f303 	lsr.w	r3, r2, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f47f aec1 	bne.w	800d944 <HAL_GPIO_Init+0x10>
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	bf00      	nop
 800dbc6:	371c      	adds	r7, #28
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	44022000 	.word	0x44022000
 800dbd4:	002f7f7f 	.word	0x002f7f7f

0800dbd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	691a      	ldr	r2, [r3, #16]
 800dbe8:	887b      	ldrh	r3, [r7, #2]
 800dbea:	4013      	ands	r3, r2
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	73fb      	strb	r3, [r7, #15]
 800dbf4:	e001      	b.n	800dbfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	807b      	strh	r3, [r7, #2]
 800dc14:	4613      	mov	r3, r2
 800dc16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dc18:	787b      	ldrb	r3, [r7, #1]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d003      	beq.n	800dc26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800dc1e:	887a      	ldrh	r2, [r7, #2]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800dc24:	e002      	b.n	800dc2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800dc26:	887a      	ldrh	r2, [r7, #2]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800dc2c:	bf00      	nop
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800dc3c:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <HAL_ICACHE_Enable+0x1c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a04      	ldr	r2, [pc, #16]	@ (800dc54 <HAL_ICACHE_Enable+0x1c>)
 800dc42:	f043 0301 	orr.w	r3, r3, #1
 800dc46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	40030400 	.word	0x40030400

0800dc58 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800dc62:	4b14      	ldr	r3, [pc, #80]	@ (800dcb4 <HAL_ICACHE_Disable+0x5c>)
 800dc64:	2202      	movs	r2, #2
 800dc66:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 800dc68:	4b12      	ldr	r3, [pc, #72]	@ (800dcb4 <HAL_ICACHE_Disable+0x5c>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a11      	ldr	r2, [pc, #68]	@ (800dcb4 <HAL_ICACHE_Disable+0x5c>)
 800dc6e:	f023 0301 	bic.w	r3, r3, #1
 800dc72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dc74:	f7fd ff9e 	bl	800bbb4 <HAL_GetTick>
 800dc78:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800dc7a:	e00f      	b.n	800dc9c <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 800dc7c:	f7fd ff9a 	bl	800bbb4 <HAL_GetTick>
 800dc80:	4602      	mov	r2, r0
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d908      	bls.n	800dc9c <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800dc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800dcb4 <HAL_ICACHE_Disable+0x5c>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 0301 	and.w	r3, r3, #1
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800dc96:	2303      	movs	r3, #3
 800dc98:	71fb      	strb	r3, [r7, #7]
        break;
 800dc9a:	e005      	b.n	800dca8 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800dc9c:	4b05      	ldr	r3, [pc, #20]	@ (800dcb4 <HAL_ICACHE_Disable+0x5c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 0301 	and.w	r3, r3, #1
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1e9      	bne.n	800dc7c <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 800dca8:	79fb      	ldrb	r3, [r7, #7]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	40030400 	.word	0x40030400

0800dcb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af02      	add	r7, sp, #8
 800dcbe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e0c3      	b.n	800de52 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d106      	bne.n	800dce4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7fd fcb4 	bl	800b64c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2203      	movs	r2, #3
 800dce8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f00a f981 	bl	8017ff8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]
 800dcfa:	e03f      	b.n	800dd7c <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dcfc:	7bfa      	ldrb	r2, [r7, #15]
 800dcfe:	6879      	ldr	r1, [r7, #4]
 800dd00:	4613      	mov	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	00db      	lsls	r3, r3, #3
 800dd08:	440b      	add	r3, r1
 800dd0a:	3315      	adds	r3, #21
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dd10:	7bfa      	ldrb	r2, [r7, #15]
 800dd12:	6879      	ldr	r1, [r7, #4]
 800dd14:	4613      	mov	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	440b      	add	r3, r1
 800dd1e:	3314      	adds	r3, #20
 800dd20:	7bfa      	ldrb	r2, [r7, #15]
 800dd22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dd24:	7bfa      	ldrb	r2, [r7, #15]
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	440b      	add	r3, r1
 800dd32:	3317      	adds	r3, #23
 800dd34:	2200      	movs	r2, #0
 800dd36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dd38:	7bfa      	ldrb	r2, [r7, #15]
 800dd3a:	6879      	ldr	r1, [r7, #4]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	440b      	add	r3, r1
 800dd46:	3324      	adds	r3, #36	@ 0x24
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dd4c:	7bfa      	ldrb	r2, [r7, #15]
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	4613      	mov	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	440b      	add	r3, r1
 800dd5a:	3328      	adds	r3, #40	@ 0x28
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dd60:	7bfb      	ldrb	r3, [r7, #15]
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	4613      	mov	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4413      	add	r3, r2
 800dd6c:	00db      	lsls	r3, r3, #3
 800dd6e:	440b      	add	r3, r1
 800dd70:	3304      	adds	r3, #4
 800dd72:	2200      	movs	r2, #0
 800dd74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	73fb      	strb	r3, [r7, #15]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	791b      	ldrb	r3, [r3, #4]
 800dd80:	7bfa      	ldrb	r2, [r7, #15]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d3ba      	bcc.n	800dcfc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd86:	2300      	movs	r3, #0
 800dd88:	73fb      	strb	r3, [r7, #15]
 800dd8a:	e044      	b.n	800de16 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dd8c:	7bfa      	ldrb	r2, [r7, #15]
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	4613      	mov	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4413      	add	r3, r2
 800dd96:	00db      	lsls	r3, r3, #3
 800dd98:	440b      	add	r3, r1
 800dd9a:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800dd9e:	2200      	movs	r2, #0
 800dda0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dda2:	7bfa      	ldrb	r2, [r7, #15]
 800dda4:	6879      	ldr	r1, [r7, #4]
 800dda6:	4613      	mov	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4413      	add	r3, r2
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	440b      	add	r3, r1
 800ddb0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ddb4:	7bfa      	ldrb	r2, [r7, #15]
 800ddb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ddb8:	7bfa      	ldrb	r2, [r7, #15]
 800ddba:	6879      	ldr	r1, [r7, #4]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	440b      	add	r3, r1
 800ddc6:	f203 1357 	addw	r3, r3, #343	@ 0x157
 800ddca:	2200      	movs	r2, #0
 800ddcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ddce:	7bfa      	ldrb	r2, [r7, #15]
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	00db      	lsls	r3, r3, #3
 800ddda:	440b      	add	r3, r1
 800dddc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dde0:	2200      	movs	r2, #0
 800dde2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dde4:	7bfa      	ldrb	r2, [r7, #15]
 800dde6:	6879      	ldr	r1, [r7, #4]
 800dde8:	4613      	mov	r3, r2
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	00db      	lsls	r3, r3, #3
 800ddf0:	440b      	add	r3, r1
 800ddf2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ddfa:	7bfa      	ldrb	r2, [r7, #15]
 800ddfc:	6879      	ldr	r1, [r7, #4]
 800ddfe:	4613      	mov	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	440b      	add	r3, r1
 800de08:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800de0c:	2200      	movs	r2, #0
 800de0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de10:	7bfb      	ldrb	r3, [r7, #15]
 800de12:	3301      	adds	r3, #1
 800de14:	73fb      	strb	r3, [r7, #15]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	791b      	ldrb	r3, [r3, #4]
 800de1a:	7bfa      	ldrb	r2, [r7, #15]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d3b5      	bcc.n	800dd8c <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6818      	ldr	r0, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	7c1a      	ldrb	r2, [r3, #16]
 800de28:	f88d 2000 	strb.w	r2, [sp]
 800de2c:	3304      	adds	r3, #4
 800de2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de30:	f00a f91a 	bl	8018068 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2201      	movs	r2, #1
 800de3e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	7b1b      	ldrb	r3, [r3, #12]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d102      	bne.n	800de50 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f805 	bl	800de5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800de5a:	b480      	push	{r7}
 800de5c:	b085      	sub	sp, #20
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de7c:	f043 0201 	orr.w	r2, r3, #1
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de88:	f043 0202 	orr.w	r2, r3, #2
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
	...

0800dea0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800dea0:	b480      	push	{r7}
 800dea2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800dea4:	4b05      	ldr	r3, [pc, #20]	@ (800debc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dea8:	4a04      	ldr	r2, [pc, #16]	@ (800debc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800deaa:	f043 0301 	orr.w	r3, r3, #1
 800deae:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800deb0:	bf00      	nop
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	44020800 	.word	0x44020800

0800dec0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800dec0:	b480      	push	{r7}
 800dec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 800dec4:	4b05      	ldr	r3, [pc, #20]	@ (800dedc <HAL_PWREx_EnableVddUSB+0x1c>)
 800dec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dec8:	4a04      	ldr	r2, [pc, #16]	@ (800dedc <HAL_PWREx_EnableVddUSB+0x1c>)
 800deca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dece:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800ded0:	bf00      	nop
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	44020800 	.word	0x44020800

0800dee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d102      	bne.n	800def4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	f000 bc28 	b.w	800e744 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800def4:	4b94      	ldr	r3, [pc, #592]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800def6:	69db      	ldr	r3, [r3, #28]
 800def8:	f003 0318 	and.w	r3, r3, #24
 800defc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800defe:	4b92      	ldr	r3, [pc, #584]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df02:	f003 0303 	and.w	r3, r3, #3
 800df06:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f003 0310 	and.w	r3, r3, #16
 800df10:	2b00      	cmp	r3, #0
 800df12:	d05b      	beq.n	800dfcc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2b08      	cmp	r3, #8
 800df18:	d005      	beq.n	800df26 <HAL_RCC_OscConfig+0x46>
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	2b18      	cmp	r3, #24
 800df1e:	d114      	bne.n	800df4a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	2b02      	cmp	r3, #2
 800df24:	d111      	bne.n	800df4a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	69db      	ldr	r3, [r3, #28]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d102      	bne.n	800df34 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800df2e:	2301      	movs	r3, #1
 800df30:	f000 bc08 	b.w	800e744 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800df34:	4b84      	ldr	r3, [pc, #528]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a1b      	ldr	r3, [r3, #32]
 800df40:	041b      	lsls	r3, r3, #16
 800df42:	4981      	ldr	r1, [pc, #516]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df44:	4313      	orrs	r3, r2
 800df46:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800df48:	e040      	b.n	800dfcc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	69db      	ldr	r3, [r3, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d023      	beq.n	800df9a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800df52:	4b7d      	ldr	r3, [pc, #500]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a7c      	ldr	r2, [pc, #496]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df5e:	f7fd fe29 	bl	800bbb4 <HAL_GetTick>
 800df62:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800df64:	e008      	b.n	800df78 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800df66:	f7fd fe25 	bl	800bbb4 <HAL_GetTick>
 800df6a:	4602      	mov	r2, r0
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	2b02      	cmp	r3, #2
 800df72:	d901      	bls.n	800df78 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800df74:	2303      	movs	r3, #3
 800df76:	e3e5      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800df78:	4b73      	ldr	r3, [pc, #460]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800df80:	2b00      	cmp	r3, #0
 800df82:	d0f0      	beq.n	800df66 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800df84:	4b70      	ldr	r3, [pc, #448]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df86:	699b      	ldr	r3, [r3, #24]
 800df88:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	041b      	lsls	r3, r3, #16
 800df92:	496d      	ldr	r1, [pc, #436]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df94:	4313      	orrs	r3, r2
 800df96:	618b      	str	r3, [r1, #24]
 800df98:	e018      	b.n	800dfcc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800df9a:	4b6b      	ldr	r3, [pc, #428]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a6a      	ldr	r2, [pc, #424]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800dfa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dfa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfa6:	f7fd fe05 	bl	800bbb4 <HAL_GetTick>
 800dfaa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800dfac:	e008      	b.n	800dfc0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800dfae:	f7fd fe01 	bl	800bbb4 <HAL_GetTick>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	2b02      	cmp	r3, #2
 800dfba:	d901      	bls.n	800dfc0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800dfbc:	2303      	movs	r3, #3
 800dfbe:	e3c1      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800dfc0:	4b61      	ldr	r3, [pc, #388]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1f0      	bne.n	800dfae <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f003 0301 	and.w	r3, r3, #1
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f000 80a0 	beq.w	800e11a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	2b10      	cmp	r3, #16
 800dfde:	d005      	beq.n	800dfec <HAL_RCC_OscConfig+0x10c>
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	2b18      	cmp	r3, #24
 800dfe4:	d109      	bne.n	800dffa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	2b03      	cmp	r3, #3
 800dfea:	d106      	bne.n	800dffa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f040 8092 	bne.w	800e11a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e3a4      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e002:	d106      	bne.n	800e012 <HAL_RCC_OscConfig+0x132>
 800e004:	4b50      	ldr	r3, [pc, #320]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a4f      	ldr	r2, [pc, #316]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e00a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e00e:	6013      	str	r3, [r2, #0]
 800e010:	e058      	b.n	800e0c4 <HAL_RCC_OscConfig+0x1e4>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d112      	bne.n	800e040 <HAL_RCC_OscConfig+0x160>
 800e01a:	4b4b      	ldr	r3, [pc, #300]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a4a      	ldr	r2, [pc, #296]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e024:	6013      	str	r3, [r2, #0]
 800e026:	4b48      	ldr	r3, [pc, #288]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a47      	ldr	r2, [pc, #284]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e02c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e030:	6013      	str	r3, [r2, #0]
 800e032:	4b45      	ldr	r3, [pc, #276]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a44      	ldr	r2, [pc, #272]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e038:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	e041      	b.n	800e0c4 <HAL_RCC_OscConfig+0x1e4>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e048:	d112      	bne.n	800e070 <HAL_RCC_OscConfig+0x190>
 800e04a:	4b3f      	ldr	r3, [pc, #252]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a3e      	ldr	r2, [pc, #248]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e054:	6013      	str	r3, [r2, #0]
 800e056:	4b3c      	ldr	r3, [pc, #240]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a3b      	ldr	r2, [pc, #236]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e05c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	4b39      	ldr	r3, [pc, #228]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a38      	ldr	r2, [pc, #224]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e06c:	6013      	str	r3, [r2, #0]
 800e06e:	e029      	b.n	800e0c4 <HAL_RCC_OscConfig+0x1e4>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800e078:	d112      	bne.n	800e0a0 <HAL_RCC_OscConfig+0x1c0>
 800e07a:	4b33      	ldr	r3, [pc, #204]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a32      	ldr	r2, [pc, #200]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e084:	6013      	str	r3, [r2, #0]
 800e086:	4b30      	ldr	r3, [pc, #192]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a2f      	ldr	r2, [pc, #188]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e08c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e090:	6013      	str	r3, [r2, #0]
 800e092:	4b2d      	ldr	r3, [pc, #180]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a2c      	ldr	r2, [pc, #176]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	e011      	b.n	800e0c4 <HAL_RCC_OscConfig+0x1e4>
 800e0a0:	4b29      	ldr	r3, [pc, #164]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a28      	ldr	r2, [pc, #160]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e0a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e0aa:	6013      	str	r3, [r2, #0]
 800e0ac:	4b26      	ldr	r3, [pc, #152]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a25      	ldr	r2, [pc, #148]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e0b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	4b23      	ldr	r3, [pc, #140]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a22      	ldr	r2, [pc, #136]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e0be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e0c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d013      	beq.n	800e0f4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0cc:	f7fd fd72 	bl	800bbb4 <HAL_GetTick>
 800e0d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e0d2:	e008      	b.n	800e0e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800e0d4:	f7fd fd6e 	bl	800bbb4 <HAL_GetTick>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	2b64      	cmp	r3, #100	@ 0x64
 800e0e0:	d901      	bls.n	800e0e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	e32e      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e0e6:	4b18      	ldr	r3, [pc, #96]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0f0      	beq.n	800e0d4 <HAL_RCC_OscConfig+0x1f4>
 800e0f2:	e012      	b.n	800e11a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0f4:	f7fd fd5e 	bl	800bbb4 <HAL_GetTick>
 800e0f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e0fa:	e008      	b.n	800e10e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800e0fc:	f7fd fd5a 	bl	800bbb4 <HAL_GetTick>
 800e100:	4602      	mov	r2, r0
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	2b64      	cmp	r3, #100	@ 0x64
 800e108:	d901      	bls.n	800e10e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800e10a:	2303      	movs	r3, #3
 800e10c:	e31a      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e10e:	4b0e      	ldr	r3, [pc, #56]	@ (800e148 <HAL_RCC_OscConfig+0x268>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f0      	bne.n	800e0fc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f003 0302 	and.w	r3, r3, #2
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 809a 	beq.w	800e25c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d005      	beq.n	800e13a <HAL_RCC_OscConfig+0x25a>
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	2b18      	cmp	r3, #24
 800e132:	d149      	bne.n	800e1c8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d146      	bne.n	800e1c8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d104      	bne.n	800e14c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e2fe      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
 800e146:	bf00      	nop
 800e148:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d11c      	bne.n	800e18c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800e152:	4b9a      	ldr	r3, [pc, #616]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f003 0218 	and.w	r2, r3, #24
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d014      	beq.n	800e18c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800e162:	4b96      	ldr	r3, [pc, #600]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f023 0218 	bic.w	r2, r3, #24
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	4993      	ldr	r1, [pc, #588]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e170:	4313      	orrs	r3, r2
 800e172:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800e174:	f000 fdd0 	bl	800ed18 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e178:	4b91      	ldr	r3, [pc, #580]	@ (800e3c0 <HAL_RCC_OscConfig+0x4e0>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fd fabf 	bl	800b700 <HAL_InitTick>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d001      	beq.n	800e18c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e2db      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e18c:	f7fd fd12 	bl	800bbb4 <HAL_GetTick>
 800e190:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e192:	e008      	b.n	800e1a6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800e194:	f7fd fd0e 	bl	800bbb4 <HAL_GetTick>
 800e198:	4602      	mov	r2, r0
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d901      	bls.n	800e1a6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	e2ce      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e1a6:	4b85      	ldr	r3, [pc, #532]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f003 0302 	and.w	r3, r3, #2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0f0      	beq.n	800e194 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800e1b2:	4b82      	ldr	r3, [pc, #520]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e1b4:	691b      	ldr	r3, [r3, #16]
 800e1b6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	695b      	ldr	r3, [r3, #20]
 800e1be:	041b      	lsls	r3, r3, #16
 800e1c0:	497e      	ldr	r1, [pc, #504]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800e1c6:	e049      	b.n	800e25c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d02c      	beq.n	800e22a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800e1d0:	4b7a      	ldr	r3, [pc, #488]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f023 0218 	bic.w	r2, r3, #24
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	4977      	ldr	r1, [pc, #476]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800e1e2:	4b76      	ldr	r3, [pc, #472]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a75      	ldr	r2, [pc, #468]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e1e8:	f043 0301 	orr.w	r3, r3, #1
 800e1ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1ee:	f7fd fce1 	bl	800bbb4 <HAL_GetTick>
 800e1f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e1f4:	e008      	b.n	800e208 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800e1f6:	f7fd fcdd 	bl	800bbb4 <HAL_GetTick>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	2b02      	cmp	r3, #2
 800e202:	d901      	bls.n	800e208 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	e29d      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e208:	4b6c      	ldr	r3, [pc, #432]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f003 0302 	and.w	r3, r3, #2
 800e210:	2b00      	cmp	r3, #0
 800e212:	d0f0      	beq.n	800e1f6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800e214:	4b69      	ldr	r3, [pc, #420]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e216:	691b      	ldr	r3, [r3, #16]
 800e218:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	041b      	lsls	r3, r3, #16
 800e222:	4966      	ldr	r1, [pc, #408]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e224:	4313      	orrs	r3, r2
 800e226:	610b      	str	r3, [r1, #16]
 800e228:	e018      	b.n	800e25c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e22a:	4b64      	ldr	r3, [pc, #400]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a63      	ldr	r2, [pc, #396]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e230:	f023 0301 	bic.w	r3, r3, #1
 800e234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e236:	f7fd fcbd 	bl	800bbb4 <HAL_GetTick>
 800e23a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e23c:	e008      	b.n	800e250 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800e23e:	f7fd fcb9 	bl	800bbb4 <HAL_GetTick>
 800e242:	4602      	mov	r2, r0
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d901      	bls.n	800e250 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800e24c:	2303      	movs	r3, #3
 800e24e:	e279      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e250:	4b5a      	ldr	r3, [pc, #360]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f003 0302 	and.w	r3, r3, #2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1f0      	bne.n	800e23e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f003 0308 	and.w	r3, r3, #8
 800e264:	2b00      	cmp	r3, #0
 800e266:	d03c      	beq.n	800e2e2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01c      	beq.n	800e2aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e270:	4b52      	ldr	r3, [pc, #328]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e276:	4a51      	ldr	r2, [pc, #324]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e278:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e27c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e280:	f7fd fc98 	bl	800bbb4 <HAL_GetTick>
 800e284:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800e286:	e008      	b.n	800e29a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800e288:	f7fd fc94 	bl	800bbb4 <HAL_GetTick>
 800e28c:	4602      	mov	r2, r0
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	2b02      	cmp	r3, #2
 800e294:	d901      	bls.n	800e29a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800e296:	2303      	movs	r3, #3
 800e298:	e254      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800e29a:	4b48      	ldr	r3, [pc, #288]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e29c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e2a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0ef      	beq.n	800e288 <HAL_RCC_OscConfig+0x3a8>
 800e2a8:	e01b      	b.n	800e2e2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e2aa:	4b44      	ldr	r3, [pc, #272]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e2ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e2b0:	4a42      	ldr	r2, [pc, #264]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e2b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e2b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2ba:	f7fd fc7b 	bl	800bbb4 <HAL_GetTick>
 800e2be:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800e2c0:	e008      	b.n	800e2d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800e2c2:	f7fd fc77 	bl	800bbb4 <HAL_GetTick>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d901      	bls.n	800e2d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	e237      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800e2d4:	4b39      	ldr	r3, [pc, #228]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e2d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e2da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1ef      	bne.n	800e2c2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 0304 	and.w	r3, r3, #4
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f000 80d2 	beq.w	800e494 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800e2f0:	4b34      	ldr	r3, [pc, #208]	@ (800e3c4 <HAL_RCC_OscConfig+0x4e4>)
 800e2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f4:	f003 0301 	and.w	r3, r3, #1
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d118      	bne.n	800e32e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800e2fc:	4b31      	ldr	r3, [pc, #196]	@ (800e3c4 <HAL_RCC_OscConfig+0x4e4>)
 800e2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e300:	4a30      	ldr	r2, [pc, #192]	@ (800e3c4 <HAL_RCC_OscConfig+0x4e4>)
 800e302:	f043 0301 	orr.w	r3, r3, #1
 800e306:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e308:	f7fd fc54 	bl	800bbb4 <HAL_GetTick>
 800e30c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800e30e:	e008      	b.n	800e322 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e310:	f7fd fc50 	bl	800bbb4 <HAL_GetTick>
 800e314:	4602      	mov	r2, r0
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d901      	bls.n	800e322 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800e31e:	2303      	movs	r3, #3
 800e320:	e210      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800e322:	4b28      	ldr	r3, [pc, #160]	@ (800e3c4 <HAL_RCC_OscConfig+0x4e4>)
 800e324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d0f0      	beq.n	800e310 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	2b01      	cmp	r3, #1
 800e334:	d108      	bne.n	800e348 <HAL_RCC_OscConfig+0x468>
 800e336:	4b21      	ldr	r3, [pc, #132]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e33c:	4a1f      	ldr	r2, [pc, #124]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e33e:	f043 0301 	orr.w	r3, r3, #1
 800e342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e346:	e074      	b.n	800e432 <HAL_RCC_OscConfig+0x552>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d118      	bne.n	800e382 <HAL_RCC_OscConfig+0x4a2>
 800e350:	4b1a      	ldr	r3, [pc, #104]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e356:	4a19      	ldr	r2, [pc, #100]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e358:	f023 0301 	bic.w	r3, r3, #1
 800e35c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e360:	4b16      	ldr	r3, [pc, #88]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e366:	4a15      	ldr	r2, [pc, #84]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e36c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e370:	4b12      	ldr	r3, [pc, #72]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e376:	4a11      	ldr	r2, [pc, #68]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e378:	f023 0304 	bic.w	r3, r3, #4
 800e37c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e380:	e057      	b.n	800e432 <HAL_RCC_OscConfig+0x552>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	2b05      	cmp	r3, #5
 800e388:	d11e      	bne.n	800e3c8 <HAL_RCC_OscConfig+0x4e8>
 800e38a:	4b0c      	ldr	r3, [pc, #48]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e38c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e390:	4a0a      	ldr	r2, [pc, #40]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e392:	f043 0304 	orr.w	r3, r3, #4
 800e396:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e39a:	4b08      	ldr	r3, [pc, #32]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e39c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3a0:	4a06      	ldr	r2, [pc, #24]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e3a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e3aa:	4b04      	ldr	r3, [pc, #16]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e3ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3b0:	4a02      	ldr	r2, [pc, #8]	@ (800e3bc <HAL_RCC_OscConfig+0x4dc>)
 800e3b2:	f043 0301 	orr.w	r3, r3, #1
 800e3b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e3ba:	e03a      	b.n	800e432 <HAL_RCC_OscConfig+0x552>
 800e3bc:	44020c00 	.word	0x44020c00
 800e3c0:	200002a8 	.word	0x200002a8
 800e3c4:	44020800 	.word	0x44020800
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	2b85      	cmp	r3, #133	@ 0x85
 800e3ce:	d118      	bne.n	800e402 <HAL_RCC_OscConfig+0x522>
 800e3d0:	4ba2      	ldr	r3, [pc, #648]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e3d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3d6:	4aa1      	ldr	r2, [pc, #644]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e3d8:	f043 0304 	orr.w	r3, r3, #4
 800e3dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e3e0:	4b9e      	ldr	r3, [pc, #632]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e3e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3e6:	4a9d      	ldr	r2, [pc, #628]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e3e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e3f0:	4b9a      	ldr	r3, [pc, #616]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e3f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3f6:	4a99      	ldr	r2, [pc, #612]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e3f8:	f043 0301 	orr.w	r3, r3, #1
 800e3fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e400:	e017      	b.n	800e432 <HAL_RCC_OscConfig+0x552>
 800e402:	4b96      	ldr	r3, [pc, #600]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e408:	4a94      	ldr	r2, [pc, #592]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e40a:	f023 0301 	bic.w	r3, r3, #1
 800e40e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e412:	4b92      	ldr	r3, [pc, #584]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e418:	4a90      	ldr	r2, [pc, #576]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e41a:	f023 0304 	bic.w	r3, r3, #4
 800e41e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e422:	4b8e      	ldr	r3, [pc, #568]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e428:	4a8c      	ldr	r2, [pc, #560]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e42a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e42e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d016      	beq.n	800e468 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e43a:	f7fd fbbb 	bl	800bbb4 <HAL_GetTick>
 800e43e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e440:	e00a      	b.n	800e458 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e442:	f7fd fbb7 	bl	800bbb4 <HAL_GetTick>
 800e446:	4602      	mov	r2, r0
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e450:	4293      	cmp	r3, r2
 800e452:	d901      	bls.n	800e458 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800e454:	2303      	movs	r3, #3
 800e456:	e175      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e458:	4b80      	ldr	r3, [pc, #512]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e45a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e45e:	f003 0302 	and.w	r3, r3, #2
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0ed      	beq.n	800e442 <HAL_RCC_OscConfig+0x562>
 800e466:	e015      	b.n	800e494 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e468:	f7fd fba4 	bl	800bbb4 <HAL_GetTick>
 800e46c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e46e:	e00a      	b.n	800e486 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e470:	f7fd fba0 	bl	800bbb4 <HAL_GetTick>
 800e474:	4602      	mov	r2, r0
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e47e:	4293      	cmp	r3, r2
 800e480:	d901      	bls.n	800e486 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800e482:	2303      	movs	r3, #3
 800e484:	e15e      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e486:	4b75      	ldr	r3, [pc, #468]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e48c:	f003 0302 	and.w	r3, r3, #2
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1ed      	bne.n	800e470 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f003 0320 	and.w	r3, r3, #32
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d036      	beq.n	800e50e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d019      	beq.n	800e4dc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e4a8:	4b6c      	ldr	r3, [pc, #432]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a6b      	ldr	r2, [pc, #428]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e4ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e4b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4b4:	f7fd fb7e 	bl	800bbb4 <HAL_GetTick>
 800e4b8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800e4ba:	e008      	b.n	800e4ce <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800e4bc:	f7fd fb7a 	bl	800bbb4 <HAL_GetTick>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	2b02      	cmp	r3, #2
 800e4c8:	d901      	bls.n	800e4ce <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	e13a      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800e4ce:	4b63      	ldr	r3, [pc, #396]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d0f0      	beq.n	800e4bc <HAL_RCC_OscConfig+0x5dc>
 800e4da:	e018      	b.n	800e50e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e4dc:	4b5f      	ldr	r3, [pc, #380]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a5e      	ldr	r2, [pc, #376]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e4e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e4e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4e8:	f7fd fb64 	bl	800bbb4 <HAL_GetTick>
 800e4ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800e4ee:	e008      	b.n	800e502 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800e4f0:	f7fd fb60 	bl	800bbb4 <HAL_GetTick>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	2b02      	cmp	r3, #2
 800e4fc:	d901      	bls.n	800e502 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800e4fe:	2303      	movs	r3, #3
 800e500:	e120      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800e502:	4b56      	ldr	r3, [pc, #344]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1f0      	bne.n	800e4f0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e512:	2b00      	cmp	r3, #0
 800e514:	f000 8115 	beq.w	800e742 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	2b18      	cmp	r3, #24
 800e51c:	f000 80af 	beq.w	800e67e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e524:	2b02      	cmp	r3, #2
 800e526:	f040 8086 	bne.w	800e636 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800e52a:	4b4c      	ldr	r3, [pc, #304]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a4b      	ldr	r2, [pc, #300]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e536:	f7fd fb3d 	bl	800bbb4 <HAL_GetTick>
 800e53a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800e53c:	e008      	b.n	800e550 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800e53e:	f7fd fb39 	bl	800bbb4 <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d901      	bls.n	800e550 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e0f9      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800e550:	4b42      	ldr	r3, [pc, #264]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1f0      	bne.n	800e53e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800e55c:	4b3f      	ldr	r3, [pc, #252]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e560:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e564:	f023 0303 	bic.w	r3, r3, #3
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e570:	0212      	lsls	r2, r2, #8
 800e572:	430a      	orrs	r2, r1
 800e574:	4939      	ldr	r1, [pc, #228]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e576:	4313      	orrs	r3, r2
 800e578:	628b      	str	r3, [r1, #40]	@ 0x28
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e57e:	3b01      	subs	r3, #1
 800e580:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e588:	3b01      	subs	r3, #1
 800e58a:	025b      	lsls	r3, r3, #9
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	431a      	orrs	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e594:	3b01      	subs	r3, #1
 800e596:	041b      	lsls	r3, r3, #16
 800e598:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e59c:	431a      	orrs	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	061b      	lsls	r3, r3, #24
 800e5a6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e5aa:	492c      	ldr	r1, [pc, #176]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800e5b0:	4b2a      	ldr	r3, [pc, #168]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5b4:	4a29      	ldr	r2, [pc, #164]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5b6:	f023 0310 	bic.w	r3, r3, #16
 800e5ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5c0:	4a26      	ldr	r2, [pc, #152]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5c2:	00db      	lsls	r3, r3, #3
 800e5c4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800e5c6:	4b25      	ldr	r3, [pc, #148]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5ca:	4a24      	ldr	r2, [pc, #144]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5cc:	f043 0310 	orr.w	r3, r3, #16
 800e5d0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800e5d2:	4b22      	ldr	r3, [pc, #136]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5d6:	f023 020c 	bic.w	r2, r3, #12
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5de:	491f      	ldr	r1, [pc, #124]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800e5e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e8:	f023 0220 	bic.w	r2, r3, #32
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5f0:	491a      	ldr	r1, [pc, #104]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e5f6:	4b19      	ldr	r3, [pc, #100]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fa:	4a18      	ldr	r2, [pc, #96]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e5fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e600:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800e602:	4b16      	ldr	r3, [pc, #88]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4a15      	ldr	r2, [pc, #84]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e608:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e60c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e60e:	f7fd fad1 	bl	800bbb4 <HAL_GetTick>
 800e612:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800e614:	e008      	b.n	800e628 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800e616:	f7fd facd 	bl	800bbb4 <HAL_GetTick>
 800e61a:	4602      	mov	r2, r0
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	2b02      	cmp	r3, #2
 800e622:	d901      	bls.n	800e628 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800e624:	2303      	movs	r3, #3
 800e626:	e08d      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800e628:	4b0c      	ldr	r3, [pc, #48]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e630:	2b00      	cmp	r3, #0
 800e632:	d0f0      	beq.n	800e616 <HAL_RCC_OscConfig+0x736>
 800e634:	e085      	b.n	800e742 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800e636:	4b09      	ldr	r3, [pc, #36]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a08      	ldr	r2, [pc, #32]	@ (800e65c <HAL_RCC_OscConfig+0x77c>)
 800e63c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e642:	f7fd fab7 	bl	800bbb4 <HAL_GetTick>
 800e646:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800e648:	e00a      	b.n	800e660 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800e64a:	f7fd fab3 	bl	800bbb4 <HAL_GetTick>
 800e64e:	4602      	mov	r2, r0
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	2b02      	cmp	r3, #2
 800e656:	d903      	bls.n	800e660 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800e658:	2303      	movs	r3, #3
 800e65a:	e073      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
 800e65c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800e660:	4b3a      	ldr	r3, [pc, #232]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1ee      	bne.n	800e64a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800e66c:	4b37      	ldr	r3, [pc, #220]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e670:	4a36      	ldr	r2, [pc, #216]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e672:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800e676:	f023 0303 	bic.w	r3, r3, #3
 800e67a:	6293      	str	r3, [r2, #40]	@ 0x28
 800e67c:	e061      	b.n	800e742 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800e67e:	4b33      	ldr	r3, [pc, #204]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e682:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e684:	4b31      	ldr	r3, [pc, #196]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e688:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d031      	beq.n	800e6f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	f003 0203 	and.w	r2, r3, #3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d12a      	bne.n	800e6f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	0a1b      	lsrs	r3, r3, #8
 800e6a4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d122      	bne.n	800e6f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6ba:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d11a      	bne.n	800e6f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	0a5b      	lsrs	r3, r3, #9
 800e6c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6cc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d111      	bne.n	800e6f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	0c1b      	lsrs	r3, r3, #16
 800e6d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d108      	bne.n	800e6f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	0e1b      	lsrs	r3, r3, #24
 800e6e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d001      	beq.n	800e6fa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e024      	b.n	800e744 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800e6fa:	4b14      	ldr	r3, [pc, #80]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6fe:	08db      	lsrs	r3, r3, #3
 800e700:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800e708:	429a      	cmp	r2, r3
 800e70a:	d01a      	beq.n	800e742 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800e70c:	4b0f      	ldr	r3, [pc, #60]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e710:	4a0e      	ldr	r2, [pc, #56]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e712:	f023 0310 	bic.w	r3, r3, #16
 800e716:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e718:	f7fd fa4c 	bl	800bbb4 <HAL_GetTick>
 800e71c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800e71e:	bf00      	nop
 800e720:	f7fd fa48 	bl	800bbb4 <HAL_GetTick>
 800e724:	4602      	mov	r2, r0
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	4293      	cmp	r3, r2
 800e72a:	d0f9      	beq.n	800e720 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e730:	4a06      	ldr	r2, [pc, #24]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e732:	00db      	lsls	r3, r3, #3
 800e734:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800e736:	4b05      	ldr	r3, [pc, #20]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e73a:	4a04      	ldr	r2, [pc, #16]	@ (800e74c <HAL_RCC_OscConfig+0x86c>)
 800e73c:	f043 0310 	orr.w	r3, r3, #16
 800e740:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3720      	adds	r7, #32
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	44020c00 	.word	0x44020c00

0800e750 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	e19e      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e764:	4b83      	ldr	r3, [pc, #524]	@ (800e974 <HAL_RCC_ClockConfig+0x224>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f003 030f 	and.w	r3, r3, #15
 800e76c:	683a      	ldr	r2, [r7, #0]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d910      	bls.n	800e794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e772:	4b80      	ldr	r3, [pc, #512]	@ (800e974 <HAL_RCC_ClockConfig+0x224>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f023 020f 	bic.w	r2, r3, #15
 800e77a:	497e      	ldr	r1, [pc, #504]	@ (800e974 <HAL_RCC_ClockConfig+0x224>)
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	4313      	orrs	r3, r2
 800e780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e782:	4b7c      	ldr	r3, [pc, #496]	@ (800e974 <HAL_RCC_ClockConfig+0x224>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f003 030f 	and.w	r3, r3, #15
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d001      	beq.n	800e794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e790:	2301      	movs	r3, #1
 800e792:	e186      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f003 0310 	and.w	r3, r3, #16
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d012      	beq.n	800e7c6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	695a      	ldr	r2, [r3, #20]
 800e7a4:	4b74      	ldr	r3, [pc, #464]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	0a1b      	lsrs	r3, r3, #8
 800e7aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d909      	bls.n	800e7c6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800e7b2:	4b71      	ldr	r3, [pc, #452]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e7b4:	6a1b      	ldr	r3, [r3, #32]
 800e7b6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	021b      	lsls	r3, r3, #8
 800e7c0:	496d      	ldr	r1, [pc, #436]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f003 0308 	and.w	r3, r3, #8
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d012      	beq.n	800e7f8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	691a      	ldr	r2, [r3, #16]
 800e7d6:	4b68      	ldr	r3, [pc, #416]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	091b      	lsrs	r3, r3, #4
 800e7dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d909      	bls.n	800e7f8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800e7e4:	4b64      	ldr	r3, [pc, #400]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e7e6:	6a1b      	ldr	r3, [r3, #32]
 800e7e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	691b      	ldr	r3, [r3, #16]
 800e7f0:	011b      	lsls	r3, r3, #4
 800e7f2:	4961      	ldr	r1, [pc, #388]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f003 0304 	and.w	r3, r3, #4
 800e800:	2b00      	cmp	r3, #0
 800e802:	d010      	beq.n	800e826 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68da      	ldr	r2, [r3, #12]
 800e808:	4b5b      	ldr	r3, [pc, #364]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e80a:	6a1b      	ldr	r3, [r3, #32]
 800e80c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e810:	429a      	cmp	r2, r3
 800e812:	d908      	bls.n	800e826 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800e814:	4b58      	ldr	r3, [pc, #352]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e816:	6a1b      	ldr	r3, [r3, #32]
 800e818:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	4955      	ldr	r1, [pc, #340]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e822:	4313      	orrs	r3, r2
 800e824:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f003 0302 	and.w	r3, r3, #2
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d010      	beq.n	800e854 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	689a      	ldr	r2, [r3, #8]
 800e836:	4b50      	ldr	r3, [pc, #320]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	f003 030f 	and.w	r3, r3, #15
 800e83e:	429a      	cmp	r2, r3
 800e840:	d908      	bls.n	800e854 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800e842:	4b4d      	ldr	r3, [pc, #308]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e844:	6a1b      	ldr	r3, [r3, #32]
 800e846:	f023 020f 	bic.w	r2, r3, #15
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	494a      	ldr	r1, [pc, #296]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e850:	4313      	orrs	r3, r2
 800e852:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 8093 	beq.w	800e988 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	2b03      	cmp	r3, #3
 800e868:	d107      	bne.n	800e87a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800e86a:	4b43      	ldr	r3, [pc, #268]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e872:	2b00      	cmp	r3, #0
 800e874:	d121      	bne.n	800e8ba <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	e113      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	2b02      	cmp	r3, #2
 800e880:	d107      	bne.n	800e892 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e882:	4b3d      	ldr	r3, [pc, #244]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d115      	bne.n	800e8ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	e107      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d107      	bne.n	800e8aa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800e89a:	4b37      	ldr	r3, [pc, #220]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d109      	bne.n	800e8ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e0fb      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e8aa:	4b33      	ldr	r3, [pc, #204]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f003 0302 	and.w	r3, r3, #2
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d101      	bne.n	800e8ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e0f3      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800e8ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e8bc:	69db      	ldr	r3, [r3, #28]
 800e8be:	f023 0203 	bic.w	r2, r3, #3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	492c      	ldr	r1, [pc, #176]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8cc:	f7fd f972 	bl	800bbb4 <HAL_GetTick>
 800e8d0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	d112      	bne.n	800e900 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e8da:	e00a      	b.n	800e8f2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800e8dc:	f7fd f96a 	bl	800bbb4 <HAL_GetTick>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d901      	bls.n	800e8f2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	e0d7      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e8f2:	4b21      	ldr	r3, [pc, #132]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e8f4:	69db      	ldr	r3, [r3, #28]
 800e8f6:	f003 0318 	and.w	r3, r3, #24
 800e8fa:	2b18      	cmp	r3, #24
 800e8fc:	d1ee      	bne.n	800e8dc <HAL_RCC_ClockConfig+0x18c>
 800e8fe:	e043      	b.n	800e988 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	2b02      	cmp	r3, #2
 800e906:	d112      	bne.n	800e92e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e908:	e00a      	b.n	800e920 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800e90a:	f7fd f953 	bl	800bbb4 <HAL_GetTick>
 800e90e:	4602      	mov	r2, r0
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e918:	4293      	cmp	r3, r2
 800e91a:	d901      	bls.n	800e920 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800e91c:	2303      	movs	r3, #3
 800e91e:	e0c0      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e920:	4b15      	ldr	r3, [pc, #84]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e922:	69db      	ldr	r3, [r3, #28]
 800e924:	f003 0318 	and.w	r3, r3, #24
 800e928:	2b10      	cmp	r3, #16
 800e92a:	d1ee      	bne.n	800e90a <HAL_RCC_ClockConfig+0x1ba>
 800e92c:	e02c      	b.n	800e988 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d122      	bne.n	800e97c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800e936:	e00a      	b.n	800e94e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800e938:	f7fd f93c 	bl	800bbb4 <HAL_GetTick>
 800e93c:	4602      	mov	r2, r0
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e946:	4293      	cmp	r3, r2
 800e948:	d901      	bls.n	800e94e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800e94a:	2303      	movs	r3, #3
 800e94c:	e0a9      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800e94e:	4b0a      	ldr	r3, [pc, #40]	@ (800e978 <HAL_RCC_ClockConfig+0x228>)
 800e950:	69db      	ldr	r3, [r3, #28]
 800e952:	f003 0318 	and.w	r3, r3, #24
 800e956:	2b08      	cmp	r3, #8
 800e958:	d1ee      	bne.n	800e938 <HAL_RCC_ClockConfig+0x1e8>
 800e95a:	e015      	b.n	800e988 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800e95c:	f7fd f92a 	bl	800bbb4 <HAL_GetTick>
 800e960:	4602      	mov	r2, r0
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d906      	bls.n	800e97c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800e96e:	2303      	movs	r3, #3
 800e970:	e097      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
 800e972:	bf00      	nop
 800e974:	40022000 	.word	0x40022000
 800e978:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e97c:	4b4b      	ldr	r3, [pc, #300]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800e97e:	69db      	ldr	r3, [r3, #28]
 800e980:	f003 0318 	and.w	r3, r3, #24
 800e984:	2b00      	cmp	r3, #0
 800e986:	d1e9      	bne.n	800e95c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f003 0302 	and.w	r3, r3, #2
 800e990:	2b00      	cmp	r3, #0
 800e992:	d010      	beq.n	800e9b6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	689a      	ldr	r2, [r3, #8]
 800e998:	4b44      	ldr	r3, [pc, #272]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800e99a:	6a1b      	ldr	r3, [r3, #32]
 800e99c:	f003 030f 	and.w	r3, r3, #15
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d208      	bcs.n	800e9b6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800e9a4:	4b41      	ldr	r3, [pc, #260]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800e9a6:	6a1b      	ldr	r3, [r3, #32]
 800e9a8:	f023 020f 	bic.w	r2, r3, #15
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	493e      	ldr	r1, [pc, #248]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e9b6:	4b3e      	ldr	r3, [pc, #248]	@ (800eab0 <HAL_RCC_ClockConfig+0x360>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f003 030f 	and.w	r3, r3, #15
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d210      	bcs.n	800e9e6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e9c4:	4b3a      	ldr	r3, [pc, #232]	@ (800eab0 <HAL_RCC_ClockConfig+0x360>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f023 020f 	bic.w	r2, r3, #15
 800e9cc:	4938      	ldr	r1, [pc, #224]	@ (800eab0 <HAL_RCC_ClockConfig+0x360>)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e9d4:	4b36      	ldr	r3, [pc, #216]	@ (800eab0 <HAL_RCC_ClockConfig+0x360>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f003 030f 	and.w	r3, r3, #15
 800e9dc:	683a      	ldr	r2, [r7, #0]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d001      	beq.n	800e9e6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e05d      	b.n	800eaa2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f003 0304 	and.w	r3, r3, #4
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d010      	beq.n	800ea14 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68da      	ldr	r2, [r3, #12]
 800e9f6:	4b2d      	ldr	r3, [pc, #180]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d208      	bcs.n	800ea14 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800ea02:	4b2a      	ldr	r3, [pc, #168]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	4927      	ldr	r1, [pc, #156]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea10:	4313      	orrs	r3, r2
 800ea12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f003 0308 	and.w	r3, r3, #8
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d012      	beq.n	800ea46 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	691a      	ldr	r2, [r3, #16]
 800ea24:	4b21      	ldr	r3, [pc, #132]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea26:	6a1b      	ldr	r3, [r3, #32]
 800ea28:	091b      	lsrs	r3, r3, #4
 800ea2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d209      	bcs.n	800ea46 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800ea32:	4b1e      	ldr	r3, [pc, #120]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	011b      	lsls	r3, r3, #4
 800ea40:	491a      	ldr	r1, [pc, #104]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea42:	4313      	orrs	r3, r2
 800ea44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f003 0310 	and.w	r3, r3, #16
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d012      	beq.n	800ea78 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	695a      	ldr	r2, [r3, #20]
 800ea56:	4b15      	ldr	r3, [pc, #84]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	0a1b      	lsrs	r3, r3, #8
 800ea5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d209      	bcs.n	800ea78 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800ea64:	4b11      	ldr	r3, [pc, #68]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	695b      	ldr	r3, [r3, #20]
 800ea70:	021b      	lsls	r3, r3, #8
 800ea72:	490e      	ldr	r1, [pc, #56]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea74:	4313      	orrs	r3, r2
 800ea76:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ea78:	f000 f822 	bl	800eac0 <HAL_RCC_GetSysClockFreq>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	4b0b      	ldr	r3, [pc, #44]	@ (800eaac <HAL_RCC_ClockConfig+0x35c>)
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	f003 030f 	and.w	r3, r3, #15
 800ea86:	490b      	ldr	r1, [pc, #44]	@ (800eab4 <HAL_RCC_ClockConfig+0x364>)
 800ea88:	5ccb      	ldrb	r3, [r1, r3]
 800ea8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea8e:	4a0a      	ldr	r2, [pc, #40]	@ (800eab8 <HAL_RCC_ClockConfig+0x368>)
 800ea90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ea92:	4b0a      	ldr	r3, [pc, #40]	@ (800eabc <HAL_RCC_ClockConfig+0x36c>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fc fe32 	bl	800b700 <HAL_InitTick>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800eaa0:	7afb      	ldrb	r3, [r7, #11]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	44020c00 	.word	0x44020c00
 800eab0:	40022000 	.word	0x40022000
 800eab4:	0802bd40 	.word	0x0802bd40
 800eab8:	20000290 	.word	0x20000290
 800eabc:	200002a8 	.word	0x200002a8

0800eac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b089      	sub	sp, #36	@ 0x24
 800eac4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800eac6:	4b8c      	ldr	r3, [pc, #560]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eac8:	69db      	ldr	r3, [r3, #28]
 800eaca:	f003 0318 	and.w	r3, r3, #24
 800eace:	2b08      	cmp	r3, #8
 800ead0:	d102      	bne.n	800ead8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ead2:	4b8a      	ldr	r3, [pc, #552]	@ (800ecfc <HAL_RCC_GetSysClockFreq+0x23c>)
 800ead4:	61fb      	str	r3, [r7, #28]
 800ead6:	e107      	b.n	800ece8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ead8:	4b87      	ldr	r3, [pc, #540]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eada:	69db      	ldr	r3, [r3, #28]
 800eadc:	f003 0318 	and.w	r3, r3, #24
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d112      	bne.n	800eb0a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800eae4:	4b84      	ldr	r3, [pc, #528]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f003 0320 	and.w	r3, r3, #32
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d009      	beq.n	800eb04 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800eaf0:	4b81      	ldr	r3, [pc, #516]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	08db      	lsrs	r3, r3, #3
 800eaf6:	f003 0303 	and.w	r3, r3, #3
 800eafa:	4a81      	ldr	r2, [pc, #516]	@ (800ed00 <HAL_RCC_GetSysClockFreq+0x240>)
 800eafc:	fa22 f303 	lsr.w	r3, r2, r3
 800eb00:	61fb      	str	r3, [r7, #28]
 800eb02:	e0f1      	b.n	800ece8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800eb04:	4b7e      	ldr	r3, [pc, #504]	@ (800ed00 <HAL_RCC_GetSysClockFreq+0x240>)
 800eb06:	61fb      	str	r3, [r7, #28]
 800eb08:	e0ee      	b.n	800ece8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800eb0a:	4b7b      	ldr	r3, [pc, #492]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb0c:	69db      	ldr	r3, [r3, #28]
 800eb0e:	f003 0318 	and.w	r3, r3, #24
 800eb12:	2b10      	cmp	r3, #16
 800eb14:	d102      	bne.n	800eb1c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800eb16:	4b7b      	ldr	r3, [pc, #492]	@ (800ed04 <HAL_RCC_GetSysClockFreq+0x244>)
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	e0e5      	b.n	800ece8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800eb1c:	4b76      	ldr	r3, [pc, #472]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb1e:	69db      	ldr	r3, [r3, #28]
 800eb20:	f003 0318 	and.w	r3, r3, #24
 800eb24:	2b18      	cmp	r3, #24
 800eb26:	f040 80dd 	bne.w	800ece4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800eb2a:	4b73      	ldr	r3, [pc, #460]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb2e:	f003 0303 	and.w	r3, r3, #3
 800eb32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800eb34:	4b70      	ldr	r3, [pc, #448]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb38:	0a1b      	lsrs	r3, r3, #8
 800eb3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800eb40:	4b6d      	ldr	r3, [pc, #436]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb44:	091b      	lsrs	r3, r3, #4
 800eb46:	f003 0301 	and.w	r3, r3, #1
 800eb4a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800eb4c:	4b6a      	ldr	r3, [pc, #424]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800eb50:	08db      	lsrs	r3, r3, #3
 800eb52:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	fb02 f303 	mul.w	r3, r2, r3
 800eb5c:	ee07 3a90 	vmov	s15, r3
 800eb60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb64:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f000 80b7 	beq.w	800ecde <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d003      	beq.n	800eb7e <HAL_RCC_GetSysClockFreq+0xbe>
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	2b03      	cmp	r3, #3
 800eb7a:	d056      	beq.n	800ec2a <HAL_RCC_GetSysClockFreq+0x16a>
 800eb7c:	e077      	b.n	800ec6e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800eb7e:	4b5e      	ldr	r3, [pc, #376]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f003 0320 	and.w	r3, r3, #32
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d02d      	beq.n	800ebe6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800eb8a:	4b5b      	ldr	r3, [pc, #364]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	08db      	lsrs	r3, r3, #3
 800eb90:	f003 0303 	and.w	r3, r3, #3
 800eb94:	4a5a      	ldr	r2, [pc, #360]	@ (800ed00 <HAL_RCC_GetSysClockFreq+0x240>)
 800eb96:	fa22 f303 	lsr.w	r3, r2, r3
 800eb9a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	ee07 3a90 	vmov	s15, r3
 800eba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	ee07 3a90 	vmov	s15, r3
 800ebac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebb4:	4b50      	ldr	r3, [pc, #320]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800ebb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebbc:	ee07 3a90 	vmov	s15, r3
 800ebc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800ebc4:	ed97 6a02 	vldr	s12, [r7, #8]
 800ebc8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800ed08 <HAL_RCC_GetSysClockFreq+0x248>
 800ebcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ebd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800ebd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ebd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ebdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebe0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800ebe4:	e065      	b.n	800ecb2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	ee07 3a90 	vmov	s15, r3
 800ebec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebf0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800ed0c <HAL_RCC_GetSysClockFreq+0x24c>
 800ebf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebf8:	4b3f      	ldr	r3, [pc, #252]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800ebfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec00:	ee07 3a90 	vmov	s15, r3
 800ec04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec08:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec0c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ed08 <HAL_RCC_GetSysClockFreq+0x248>
 800ec10:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec24:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800ec28:	e043      	b.n	800ecb2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	ee07 3a90 	vmov	s15, r3
 800ec30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec34:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800ed10 <HAL_RCC_GetSysClockFreq+0x250>
 800ec38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec3c:	4b2e      	ldr	r3, [pc, #184]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800ec3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec44:	ee07 3a90 	vmov	s15, r3
 800ec48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec50:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800ed08 <HAL_RCC_GetSysClockFreq+0x248>
 800ec54:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec60:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec68:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800ec6c:	e021      	b.n	800ecb2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	ee07 3a90 	vmov	s15, r3
 800ec74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec78:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ed14 <HAL_RCC_GetSysClockFreq+0x254>
 800ec7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec80:	4b1d      	ldr	r3, [pc, #116]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800ec82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec88:	ee07 3a90 	vmov	s15, r3
 800ec8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec90:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec94:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800ed08 <HAL_RCC_GetSysClockFreq+0x248>
 800ec98:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800eca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800eca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800ecb0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800ecb2:	4b11      	ldr	r3, [pc, #68]	@ (800ecf8 <HAL_RCC_GetSysClockFreq+0x238>)
 800ecb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecb6:	0a5b      	lsrs	r3, r3, #9
 800ecb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	ee07 3a90 	vmov	s15, r3
 800ecc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ecca:	edd7 6a06 	vldr	s13, [r7, #24]
 800ecce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecd6:	ee17 3a90 	vmov	r3, s15
 800ecda:	61fb      	str	r3, [r7, #28]
 800ecdc:	e004      	b.n	800ece8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	61fb      	str	r3, [r7, #28]
 800ece2:	e001      	b.n	800ece8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800ece4:	4b06      	ldr	r3, [pc, #24]	@ (800ed00 <HAL_RCC_GetSysClockFreq+0x240>)
 800ece6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800ece8:	69fb      	ldr	r3, [r7, #28]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3724      	adds	r7, #36	@ 0x24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	44020c00 	.word	0x44020c00
 800ecfc:	003d0900 	.word	0x003d0900
 800ed00:	03d09000 	.word	0x03d09000
 800ed04:	017d7840 	.word	0x017d7840
 800ed08:	46000000 	.word	0x46000000
 800ed0c:	4c742400 	.word	0x4c742400
 800ed10:	4bbebc20 	.word	0x4bbebc20
 800ed14:	4a742400 	.word	0x4a742400

0800ed18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800ed1c:	f7ff fed0 	bl	800eac0 <HAL_RCC_GetSysClockFreq>
 800ed20:	4602      	mov	r2, r0
 800ed22:	4b08      	ldr	r3, [pc, #32]	@ (800ed44 <HAL_RCC_GetHCLKFreq+0x2c>)
 800ed24:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800ed26:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800ed2a:	4907      	ldr	r1, [pc, #28]	@ (800ed48 <HAL_RCC_GetHCLKFreq+0x30>)
 800ed2c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800ed2e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800ed32:	fa22 f303 	lsr.w	r3, r2, r3
 800ed36:	4a05      	ldr	r2, [pc, #20]	@ (800ed4c <HAL_RCC_GetHCLKFreq+0x34>)
 800ed38:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800ed3a:	4b04      	ldr	r3, [pc, #16]	@ (800ed4c <HAL_RCC_GetHCLKFreq+0x34>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	44020c00 	.word	0x44020c00
 800ed48:	0802bd40 	.word	0x0802bd40
 800ed4c:	20000290 	.word	0x20000290

0800ed50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800ed54:	f7ff ffe0 	bl	800ed18 <HAL_RCC_GetHCLKFreq>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	4b06      	ldr	r3, [pc, #24]	@ (800ed74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ed5c:	6a1b      	ldr	r3, [r3, #32]
 800ed5e:	091b      	lsrs	r3, r3, #4
 800ed60:	f003 0307 	and.w	r3, r3, #7
 800ed64:	4904      	ldr	r1, [pc, #16]	@ (800ed78 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ed66:	5ccb      	ldrb	r3, [r1, r3]
 800ed68:	f003 031f 	and.w	r3, r3, #31
 800ed6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	44020c00 	.word	0x44020c00
 800ed78:	0802bd50 	.word	0x0802bd50

0800ed7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800ed80:	f7ff ffca 	bl	800ed18 <HAL_RCC_GetHCLKFreq>
 800ed84:	4602      	mov	r2, r0
 800ed86:	4b06      	ldr	r3, [pc, #24]	@ (800eda0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ed88:	6a1b      	ldr	r3, [r3, #32]
 800ed8a:	0a1b      	lsrs	r3, r3, #8
 800ed8c:	f003 0307 	and.w	r3, r3, #7
 800ed90:	4904      	ldr	r1, [pc, #16]	@ (800eda4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ed92:	5ccb      	ldrb	r3, [r1, r3]
 800ed94:	f003 031f 	and.w	r3, r3, #31
 800ed98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	44020c00 	.word	0x44020c00
 800eda4:	0802bd50 	.word	0x0802bd50

0800eda8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800edac:	f7ff ffb4 	bl	800ed18 <HAL_RCC_GetHCLKFreq>
 800edb0:	4602      	mov	r2, r0
 800edb2:	4b06      	ldr	r3, [pc, #24]	@ (800edcc <HAL_RCC_GetPCLK3Freq+0x24>)
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	0b1b      	lsrs	r3, r3, #12
 800edb8:	f003 0307 	and.w	r3, r3, #7
 800edbc:	4904      	ldr	r1, [pc, #16]	@ (800edd0 <HAL_RCC_GetPCLK3Freq+0x28>)
 800edbe:	5ccb      	ldrb	r3, [r1, r3]
 800edc0:	f003 031f 	and.w	r3, r3, #31
 800edc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800edc8:	4618      	mov	r0, r3
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	44020c00 	.word	0x44020c00
 800edd0:	0802bd50 	.word	0x0802bd50

0800edd4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	221f      	movs	r2, #31
 800ede2:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800ede4:	4b15      	ldr	r3, [pc, #84]	@ (800ee3c <HAL_RCC_GetClockConfig+0x68>)
 800ede6:	69db      	ldr	r3, [r3, #28]
 800ede8:	f003 0203 	and.w	r2, r3, #3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 800edf0:	4b12      	ldr	r3, [pc, #72]	@ (800ee3c <HAL_RCC_GetClockConfig+0x68>)
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f003 020f 	and.w	r2, r3, #15
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	091b      	lsrs	r3, r3, #4
 800ee0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	0a1b      	lsrs	r3, r3, #8
 800ee1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ee22:	4b07      	ldr	r3, [pc, #28]	@ (800ee40 <HAL_RCC_GetClockConfig+0x6c>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f003 020f 	and.w	r2, r3, #15
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	601a      	str	r2, [r3, #0]
}
 800ee2e:	bf00      	nop
 800ee30:	3714      	adds	r7, #20
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	44020c00 	.word	0x44020c00
 800ee40:	40022000 	.word	0x40022000

0800ee44 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ee44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee48:	b0d8      	sub	sp, #352	@ 0x160
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ee50:	2300      	movs	r3, #0
 800ee52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ee56:	2300      	movs	r3, #0
 800ee58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ee5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ee60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee64:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800ee68:	2500      	movs	r5, #0
 800ee6a:	ea54 0305 	orrs.w	r3, r4, r5
 800ee6e:	d00b      	beq.n	800ee88 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800ee70:	4bcd      	ldr	r3, [pc, #820]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ee72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ee76:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800ee7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ee7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee80:	4ac9      	ldr	r2, [pc, #804]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ee82:	430b      	orrs	r3, r1
 800ee84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ee88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ee8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee90:	f002 0801 	and.w	r8, r2, #1
 800ee94:	f04f 0900 	mov.w	r9, #0
 800ee98:	ea58 0309 	orrs.w	r3, r8, r9
 800ee9c:	d042      	beq.n	800ef24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800ee9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eea4:	2b05      	cmp	r3, #5
 800eea6:	d823      	bhi.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800eea8:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800eeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeae:	bf00      	nop
 800eeb0:	0800eef9 	.word	0x0800eef9
 800eeb4:	0800eec9 	.word	0x0800eec9
 800eeb8:	0800eedd 	.word	0x0800eedd
 800eebc:	0800eef9 	.word	0x0800eef9
 800eec0:	0800eef9 	.word	0x0800eef9
 800eec4:	0800eef9 	.word	0x0800eef9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800eec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eecc:	3308      	adds	r3, #8
 800eece:	4618      	mov	r0, r3
 800eed0:	f004 feda 	bl	8013c88 <RCCEx_PLL2_Config>
 800eed4:	4603      	mov	r3, r0
 800eed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800eeda:	e00e      	b.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800eedc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eee0:	3330      	adds	r3, #48	@ 0x30
 800eee2:	4618      	mov	r0, r3
 800eee4:	f004 ff68 	bl	8013db8 <RCCEx_PLL3_Config>
 800eee8:	4603      	mov	r3, r0
 800eeea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800eeee:	e004      	b.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800eef6:	e000      	b.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800eef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eefa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d10c      	bne.n	800ef1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ef02:	4ba9      	ldr	r3, [pc, #676]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ef04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ef08:	f023 0107 	bic.w	r1, r3, #7
 800ef0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ef10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ef12:	4aa5      	ldr	r2, [pc, #660]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ef14:	430b      	orrs	r3, r1
 800ef16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ef1a:	e003      	b.n	800ef24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ef20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ef24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ef28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2c:	f002 0a02 	and.w	sl, r2, #2
 800ef30:	f04f 0b00 	mov.w	fp, #0
 800ef34:	ea5a 030b 	orrs.w	r3, sl, fp
 800ef38:	f000 8088 	beq.w	800f04c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800ef3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ef40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef42:	2b28      	cmp	r3, #40	@ 0x28
 800ef44:	d868      	bhi.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800ef46:	a201      	add	r2, pc, #4	@ (adr r2, 800ef4c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800ef48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4c:	0800f021 	.word	0x0800f021
 800ef50:	0800f019 	.word	0x0800f019
 800ef54:	0800f019 	.word	0x0800f019
 800ef58:	0800f019 	.word	0x0800f019
 800ef5c:	0800f019 	.word	0x0800f019
 800ef60:	0800f019 	.word	0x0800f019
 800ef64:	0800f019 	.word	0x0800f019
 800ef68:	0800f019 	.word	0x0800f019
 800ef6c:	0800eff1 	.word	0x0800eff1
 800ef70:	0800f019 	.word	0x0800f019
 800ef74:	0800f019 	.word	0x0800f019
 800ef78:	0800f019 	.word	0x0800f019
 800ef7c:	0800f019 	.word	0x0800f019
 800ef80:	0800f019 	.word	0x0800f019
 800ef84:	0800f019 	.word	0x0800f019
 800ef88:	0800f019 	.word	0x0800f019
 800ef8c:	0800f005 	.word	0x0800f005
 800ef90:	0800f019 	.word	0x0800f019
 800ef94:	0800f019 	.word	0x0800f019
 800ef98:	0800f019 	.word	0x0800f019
 800ef9c:	0800f019 	.word	0x0800f019
 800efa0:	0800f019 	.word	0x0800f019
 800efa4:	0800f019 	.word	0x0800f019
 800efa8:	0800f019 	.word	0x0800f019
 800efac:	0800f021 	.word	0x0800f021
 800efb0:	0800f019 	.word	0x0800f019
 800efb4:	0800f019 	.word	0x0800f019
 800efb8:	0800f019 	.word	0x0800f019
 800efbc:	0800f019 	.word	0x0800f019
 800efc0:	0800f019 	.word	0x0800f019
 800efc4:	0800f019 	.word	0x0800f019
 800efc8:	0800f019 	.word	0x0800f019
 800efcc:	0800f021 	.word	0x0800f021
 800efd0:	0800f019 	.word	0x0800f019
 800efd4:	0800f019 	.word	0x0800f019
 800efd8:	0800f019 	.word	0x0800f019
 800efdc:	0800f019 	.word	0x0800f019
 800efe0:	0800f019 	.word	0x0800f019
 800efe4:	0800f019 	.word	0x0800f019
 800efe8:	0800f019 	.word	0x0800f019
 800efec:	0800f021 	.word	0x0800f021
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800eff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eff4:	3308      	adds	r3, #8
 800eff6:	4618      	mov	r0, r3
 800eff8:	f004 fe46 	bl	8013c88 <RCCEx_PLL2_Config>
 800effc:	4603      	mov	r3, r0
 800effe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800f002:	e00e      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f008:	3330      	adds	r3, #48	@ 0x30
 800f00a:	4618      	mov	r0, r3
 800f00c:	f004 fed4 	bl	8013db8 <RCCEx_PLL3_Config>
 800f010:	4603      	mov	r3, r0
 800f012:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800f016:	e004      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f01e:	e000      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800f020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10c      	bne.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800f02a:	4b5f      	ldr	r3, [pc, #380]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800f02c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f030:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800f034:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f03a:	4a5b      	ldr	r2, [pc, #364]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800f03c:	430b      	orrs	r3, r1
 800f03e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f042:	e003      	b.n	800f04c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f044:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f048:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f04c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	f002 0304 	and.w	r3, r2, #4
 800f058:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800f05c:	2300      	movs	r3, #0
 800f05e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800f062:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800f066:	460b      	mov	r3, r1
 800f068:	4313      	orrs	r3, r2
 800f06a:	d04e      	beq.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800f06c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f072:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800f076:	d02c      	beq.n	800f0d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800f078:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800f07c:	d825      	bhi.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800f07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f082:	d028      	beq.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f088:	d81f      	bhi.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800f08a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f08c:	d025      	beq.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0x296>
 800f08e:	2bc0      	cmp	r3, #192	@ 0xc0
 800f090:	d81b      	bhi.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800f092:	2b80      	cmp	r3, #128	@ 0x80
 800f094:	d00f      	beq.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800f096:	2b80      	cmp	r3, #128	@ 0x80
 800f098:	d817      	bhi.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d01f      	beq.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800f09e:	2b40      	cmp	r3, #64	@ 0x40
 800f0a0:	d113      	bne.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f0a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f004 fded 	bl	8013c88 <RCCEx_PLL2_Config>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800f0b4:	e014      	b.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f0b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f0ba:	3330      	adds	r3, #48	@ 0x30
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f004 fe7b 	bl	8013db8 <RCCEx_PLL3_Config>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800f0c8:	e00a      	b.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f0d0:	e006      	b.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800f0d2:	bf00      	nop
 800f0d4:	e004      	b.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800f0d6:	bf00      	nop
 800f0d8:	e002      	b.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800f0da:	bf00      	nop
 800f0dc:	e000      	b.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800f0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10c      	bne.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800f0e8:	4b2f      	ldr	r3, [pc, #188]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800f0ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f0ee:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800f0f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f0f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f0f8:	4a2b      	ldr	r2, [pc, #172]	@ (800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800f0fa:	430b      	orrs	r3, r1
 800f0fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f100:	e003      	b.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f102:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f106:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f10a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f112:	f002 0308 	and.w	r3, r2, #8
 800f116:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800f11a:	2300      	movs	r3, #0
 800f11c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800f120:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800f124:	460b      	mov	r3, r1
 800f126:	4313      	orrs	r3, r2
 800f128:	d056      	beq.n	800f1d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800f12a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f12e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f130:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800f134:	d031      	beq.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x356>
 800f136:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800f13a:	d82a      	bhi.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800f13c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f140:	d02d      	beq.n	800f19e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800f142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f146:	d824      	bhi.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800f148:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f14c:	d029      	beq.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800f14e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f152:	d81e      	bhi.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800f154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f158:	d011      	beq.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800f15a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f15e:	d818      	bhi.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800f160:	2b00      	cmp	r3, #0
 800f162:	d023      	beq.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 800f164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f168:	d113      	bne.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f16a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f16e:	3308      	adds	r3, #8
 800f170:	4618      	mov	r0, r3
 800f172:	f004 fd89 	bl	8013c88 <RCCEx_PLL2_Config>
 800f176:	4603      	mov	r3, r0
 800f178:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800f17c:	e017      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f17e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f182:	3330      	adds	r3, #48	@ 0x30
 800f184:	4618      	mov	r0, r3
 800f186:	f004 fe17 	bl	8013db8 <RCCEx_PLL3_Config>
 800f18a:	4603      	mov	r3, r0
 800f18c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800f190:	e00d      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f198:	e009      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800f19a:	bf00      	nop
 800f19c:	e007      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800f19e:	bf00      	nop
 800f1a0:	e005      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800f1a2:	bf00      	nop
 800f1a4:	e003      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800f1a6:	bf00      	nop
 800f1a8:	44020c00 	.word	0x44020c00
        break;
 800f1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10c      	bne.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800f1b6:	4bbb      	ldr	r3, [pc, #748]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f1b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f1bc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800f1c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f1c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f1c6:	4ab7      	ldr	r2, [pc, #732]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f1c8:	430b      	orrs	r3, r1
 800f1ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f1ce:	e003      	b.n	800f1d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f1d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f1d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e0:	f002 0310 	and.w	r3, r2, #16
 800f1e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800f1ee:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	d053      	beq.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800f1f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f1fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f202:	d031      	beq.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800f204:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f208:	d82a      	bhi.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800f20a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f20e:	d02d      	beq.n	800f26c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800f210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f214:	d824      	bhi.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800f216:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f21a:	d029      	beq.n	800f270 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800f21c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f220:	d81e      	bhi.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800f222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f226:	d011      	beq.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800f228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f22c:	d818      	bhi.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d020      	beq.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800f232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f236:	d113      	bne.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f23c:	3308      	adds	r3, #8
 800f23e:	4618      	mov	r0, r3
 800f240:	f004 fd22 	bl	8013c88 <RCCEx_PLL2_Config>
 800f244:	4603      	mov	r3, r0
 800f246:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800f24a:	e014      	b.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f24c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f250:	3330      	adds	r3, #48	@ 0x30
 800f252:	4618      	mov	r0, r3
 800f254:	f004 fdb0 	bl	8013db8 <RCCEx_PLL3_Config>
 800f258:	4603      	mov	r3, r0
 800f25a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800f25e:	e00a      	b.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f260:	2301      	movs	r3, #1
 800f262:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f266:	e006      	b.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800f268:	bf00      	nop
 800f26a:	e004      	b.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800f26c:	bf00      	nop
 800f26e:	e002      	b.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800f270:	bf00      	nop
 800f272:	e000      	b.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800f274:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f276:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10c      	bne.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800f27e:	4b89      	ldr	r3, [pc, #548]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f284:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800f288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f28c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f28e:	4a85      	ldr	r2, [pc, #532]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f290:	430b      	orrs	r3, r1
 800f292:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f296:	e003      	b.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f298:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f29c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f2a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a8:	f002 0320 	and.w	r3, r2, #32
 800f2ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800f2b6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	d053      	beq.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800f2c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f2c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2c6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800f2ca:	d031      	beq.n	800f330 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800f2cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800f2d0:	d82a      	bhi.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800f2d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2d6:	d02d      	beq.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800f2d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2dc:	d824      	bhi.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800f2de:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800f2e2:	d029      	beq.n	800f338 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800f2e4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800f2e8:	d81e      	bhi.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800f2ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2ee:	d011      	beq.n	800f314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800f2f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2f4:	d818      	bhi.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d020      	beq.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800f2fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f2fe:	d113      	bne.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f304:	3308      	adds	r3, #8
 800f306:	4618      	mov	r0, r3
 800f308:	f004 fcbe 	bl	8013c88 <RCCEx_PLL2_Config>
 800f30c:	4603      	mov	r3, r0
 800f30e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800f312:	e014      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f318:	3330      	adds	r3, #48	@ 0x30
 800f31a:	4618      	mov	r0, r3
 800f31c:	f004 fd4c 	bl	8013db8 <RCCEx_PLL3_Config>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800f326:	e00a      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f328:	2301      	movs	r3, #1
 800f32a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f32e:	e006      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800f330:	bf00      	nop
 800f332:	e004      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800f334:	bf00      	nop
 800f336:	e002      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800f338:	bf00      	nop
 800f33a:	e000      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800f33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f33e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10c      	bne.n	800f360 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800f346:	4b57      	ldr	r3, [pc, #348]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f34c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800f350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f356:	4a53      	ldr	r2, [pc, #332]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f358:	430b      	orrs	r3, r1
 800f35a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f35e:	e003      	b.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f360:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f364:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f368:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f370:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f374:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800f378:	2300      	movs	r3, #0
 800f37a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800f37e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800f382:	460b      	mov	r3, r1
 800f384:	4313      	orrs	r3, r2
 800f386:	d053      	beq.n	800f430 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800f388:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f38e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800f392:	d031      	beq.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800f394:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800f398:	d82a      	bhi.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800f39a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f39e:	d02d      	beq.n	800f3fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800f3a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3a4:	d824      	bhi.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800f3a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800f3aa:	d029      	beq.n	800f400 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f3ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800f3b0:	d81e      	bhi.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800f3b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f3b6:	d011      	beq.n	800f3dc <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f3b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f3bc:	d818      	bhi.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d020      	beq.n	800f404 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800f3c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f3c6:	d113      	bne.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f3c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f3cc:	3308      	adds	r3, #8
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f004 fc5a 	bl	8013c88 <RCCEx_PLL2_Config>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800f3da:	e014      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f3dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f3e0:	3330      	adds	r3, #48	@ 0x30
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f004 fce8 	bl	8013db8 <RCCEx_PLL3_Config>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800f3ee:	e00a      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f3f6:	e006      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800f3f8:	bf00      	nop
 800f3fa:	e004      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800f3fc:	bf00      	nop
 800f3fe:	e002      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800f400:	bf00      	nop
 800f402:	e000      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800f404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f406:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10c      	bne.n	800f428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800f40e:	4b25      	ldr	r3, [pc, #148]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f414:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800f418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f41c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f41e:	4a21      	ldr	r2, [pc, #132]	@ (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800f420:	430b      	orrs	r3, r1
 800f422:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f426:	e003      	b.n	800f430 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f42c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f438:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f43c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800f440:	2300      	movs	r3, #0
 800f442:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800f446:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800f44a:	460b      	mov	r3, r1
 800f44c:	4313      	orrs	r3, r2
 800f44e:	d055      	beq.n	800f4fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800f450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f456:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800f45a:	d033      	beq.n	800f4c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800f45c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800f460:	d82c      	bhi.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800f462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f466:	d02f      	beq.n	800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800f468:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f46c:	d826      	bhi.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800f46e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f472:	d02b      	beq.n	800f4cc <HAL_RCCEx_PeriphCLKConfig+0x688>
 800f474:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f478:	d820      	bhi.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800f47a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f47e:	d013      	beq.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800f480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f484:	d81a      	bhi.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800f486:	2b00      	cmp	r3, #0
 800f488:	d022      	beq.n	800f4d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800f48a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f48e:	d115      	bne.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f494:	3308      	adds	r3, #8
 800f496:	4618      	mov	r0, r3
 800f498:	f004 fbf6 	bl	8013c88 <RCCEx_PLL2_Config>
 800f49c:	4603      	mov	r3, r0
 800f49e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800f4a2:	e016      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800f4a4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f4a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f4ac:	3330      	adds	r3, #48	@ 0x30
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f004 fc82 	bl	8013db8 <RCCEx_PLL3_Config>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800f4ba:	e00a      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f4c2:	e006      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800f4c4:	bf00      	nop
 800f4c6:	e004      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800f4c8:	bf00      	nop
 800f4ca:	e002      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800f4cc:	bf00      	nop
 800f4ce:	e000      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800f4d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d10c      	bne.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800f4da:	4bbb      	ldr	r3, [pc, #748]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f4dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f4e0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800f4e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f4e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f4ea:	4ab7      	ldr	r2, [pc, #732]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f4ec:	430b      	orrs	r3, r1
 800f4ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f4f2:	e003      	b.n	800f4fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f4f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800f4fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800f508:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800f50c:	2300      	movs	r3, #0
 800f50e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800f512:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800f516:	460b      	mov	r3, r1
 800f518:	4313      	orrs	r3, r2
 800f51a:	d053      	beq.n	800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800f51c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f522:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f526:	d031      	beq.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0x748>
 800f528:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f52c:	d82a      	bhi.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800f52e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f532:	d02d      	beq.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800f534:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f538:	d824      	bhi.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800f53a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f53e:	d029      	beq.n	800f594 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800f540:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f544:	d81e      	bhi.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800f546:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f54a:	d011      	beq.n	800f570 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800f54c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f550:	d818      	bhi.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800f552:	2b00      	cmp	r3, #0
 800f554:	d020      	beq.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800f556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f55a:	d113      	bne.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f55c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f560:	3308      	adds	r3, #8
 800f562:	4618      	mov	r0, r3
 800f564:	f004 fb90 	bl	8013c88 <RCCEx_PLL2_Config>
 800f568:	4603      	mov	r3, r0
 800f56a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800f56e:	e014      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f570:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f574:	3330      	adds	r3, #48	@ 0x30
 800f576:	4618      	mov	r0, r3
 800f578:	f004 fc1e 	bl	8013db8 <RCCEx_PLL3_Config>
 800f57c:	4603      	mov	r3, r0
 800f57e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800f582:	e00a      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f584:	2301      	movs	r3, #1
 800f586:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f58a:	e006      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800f58c:	bf00      	nop
 800f58e:	e004      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800f590:	bf00      	nop
 800f592:	e002      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800f594:	bf00      	nop
 800f596:	e000      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800f598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f59a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d10c      	bne.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800f5a2:	4b89      	ldr	r3, [pc, #548]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f5a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f5a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800f5ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f5b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f5b2:	4a85      	ldr	r2, [pc, #532]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f5b4:	430b      	orrs	r3, r1
 800f5b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f5ba:	e003      	b.n	800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f5c0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800f5c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5cc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800f5d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800f5da:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800f5de:	460b      	mov	r3, r1
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	d055      	beq.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800f5e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5ec:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800f5f0:	d031      	beq.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800f5f2:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800f5f6:	d82a      	bhi.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800f5f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5fc:	d02d      	beq.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800f5fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f602:	d824      	bhi.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800f604:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800f608:	d029      	beq.n	800f65e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800f60a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800f60e:	d81e      	bhi.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800f610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f614:	d011      	beq.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800f616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f61a:	d818      	bhi.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d020      	beq.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800f620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f624:	d113      	bne.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f62a:	3308      	adds	r3, #8
 800f62c:	4618      	mov	r0, r3
 800f62e:	f004 fb2b 	bl	8013c88 <RCCEx_PLL2_Config>
 800f632:	4603      	mov	r3, r0
 800f634:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800f638:	e014      	b.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f63a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f63e:	3330      	adds	r3, #48	@ 0x30
 800f640:	4618      	mov	r0, r3
 800f642:	f004 fbb9 	bl	8013db8 <RCCEx_PLL3_Config>
 800f646:	4603      	mov	r3, r0
 800f648:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800f64c:	e00a      	b.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f654:	e006      	b.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800f656:	bf00      	nop
 800f658:	e004      	b.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800f65a:	bf00      	nop
 800f65c:	e002      	b.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800f65e:	bf00      	nop
 800f660:	e000      	b.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800f662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f664:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10d      	bne.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800f66c:	4b56      	ldr	r3, [pc, #344]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f66e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f672:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800f676:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f67e:	4a52      	ldr	r2, [pc, #328]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f680:	430b      	orrs	r3, r1
 800f682:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f686:	e003      	b.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f688:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f68c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800f690:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f698:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800f69c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800f6a6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	d044      	beq.n	800f73a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800f6b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6b8:	2b05      	cmp	r3, #5
 800f6ba:	d823      	bhi.n	800f704 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800f6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800f6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c2:	bf00      	nop
 800f6c4:	0800f70d 	.word	0x0800f70d
 800f6c8:	0800f6dd 	.word	0x0800f6dd
 800f6cc:	0800f6f1 	.word	0x0800f6f1
 800f6d0:	0800f70d 	.word	0x0800f70d
 800f6d4:	0800f70d 	.word	0x0800f70d
 800f6d8:	0800f70d 	.word	0x0800f70d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f6dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f6e0:	3308      	adds	r3, #8
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f004 fad0 	bl	8013c88 <RCCEx_PLL2_Config>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800f6ee:	e00e      	b.n	800f70e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f6f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f6f4:	3330      	adds	r3, #48	@ 0x30
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f004 fb5e 	bl	8013db8 <RCCEx_PLL3_Config>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800f702:	e004      	b.n	800f70e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f704:	2301      	movs	r3, #1
 800f706:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f70a:	e000      	b.n	800f70e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800f70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f70e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f712:	2b00      	cmp	r3, #0
 800f714:	d10d      	bne.n	800f732 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800f716:	4b2c      	ldr	r3, [pc, #176]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f718:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f71c:	f023 0107 	bic.w	r1, r3, #7
 800f720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f728:	4a27      	ldr	r2, [pc, #156]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800f72a:	430b      	orrs	r3, r1
 800f72c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f730:	e003      	b.n	800f73a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f732:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f736:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800f73a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f742:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800f746:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f74a:	2300      	movs	r3, #0
 800f74c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f750:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800f754:	460b      	mov	r3, r1
 800f756:	4313      	orrs	r3, r2
 800f758:	d04f      	beq.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800f75a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f762:	2b50      	cmp	r3, #80	@ 0x50
 800f764:	d029      	beq.n	800f7ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 800f766:	2b50      	cmp	r3, #80	@ 0x50
 800f768:	d823      	bhi.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800f76a:	2b40      	cmp	r3, #64	@ 0x40
 800f76c:	d027      	beq.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800f76e:	2b40      	cmp	r3, #64	@ 0x40
 800f770:	d81f      	bhi.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800f772:	2b30      	cmp	r3, #48	@ 0x30
 800f774:	d025      	beq.n	800f7c2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800f776:	2b30      	cmp	r3, #48	@ 0x30
 800f778:	d81b      	bhi.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800f77a:	2b20      	cmp	r3, #32
 800f77c:	d00f      	beq.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800f77e:	2b20      	cmp	r3, #32
 800f780:	d817      	bhi.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800f782:	2b00      	cmp	r3, #0
 800f784:	d022      	beq.n	800f7cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 800f786:	2b10      	cmp	r3, #16
 800f788:	d113      	bne.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f78a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f78e:	3308      	adds	r3, #8
 800f790:	4618      	mov	r0, r3
 800f792:	f004 fa79 	bl	8013c88 <RCCEx_PLL2_Config>
 800f796:	4603      	mov	r3, r0
 800f798:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800f79c:	e017      	b.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f79e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f7a2:	3330      	adds	r3, #48	@ 0x30
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f004 fb07 	bl	8013db8 <RCCEx_PLL3_Config>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800f7b0:	e00d      	b.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f7b8:	e009      	b.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800f7ba:	bf00      	nop
 800f7bc:	e007      	b.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800f7be:	bf00      	nop
 800f7c0:	e005      	b.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800f7c2:	bf00      	nop
 800f7c4:	e003      	b.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800f7c6:	bf00      	nop
 800f7c8:	44020c00 	.word	0x44020c00
        break;
 800f7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d10d      	bne.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800f7d6:	4baf      	ldr	r3, [pc, #700]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f7d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f7dc:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800f7e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7e8:	4aaa      	ldr	r2, [pc, #680]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f7ea:	430b      	orrs	r3, r1
 800f7ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f7f0:	e003      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f7f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f7fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f802:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800f806:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f80a:	2300      	movs	r3, #0
 800f80c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f810:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800f814:	460b      	mov	r3, r1
 800f816:	4313      	orrs	r3, r2
 800f818:	d055      	beq.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800f81a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f822:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f826:	d031      	beq.n	800f88c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800f828:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f82c:	d82a      	bhi.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800f82e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f832:	d02d      	beq.n	800f890 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800f834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f838:	d824      	bhi.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800f83a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f83e:	d029      	beq.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800f840:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f844:	d81e      	bhi.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800f846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f84a:	d011      	beq.n	800f870 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800f84c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f850:	d818      	bhi.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800f852:	2b00      	cmp	r3, #0
 800f854:	d020      	beq.n	800f898 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800f856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f85a:	d113      	bne.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f85c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f860:	3308      	adds	r3, #8
 800f862:	4618      	mov	r0, r3
 800f864:	f004 fa10 	bl	8013c88 <RCCEx_PLL2_Config>
 800f868:	4603      	mov	r3, r0
 800f86a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800f86e:	e014      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f874:	3330      	adds	r3, #48	@ 0x30
 800f876:	4618      	mov	r0, r3
 800f878:	f004 fa9e 	bl	8013db8 <RCCEx_PLL3_Config>
 800f87c:	4603      	mov	r3, r0
 800f87e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800f882:	e00a      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f88a:	e006      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800f88c:	bf00      	nop
 800f88e:	e004      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800f890:	bf00      	nop
 800f892:	e002      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800f894:	bf00      	nop
 800f896:	e000      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800f898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f89a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d10d      	bne.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800f8a2:	4b7c      	ldr	r3, [pc, #496]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f8a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f8a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800f8ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f8b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f8b4:	4a77      	ldr	r2, [pc, #476]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f8b6:	430b      	orrs	r3, r1
 800f8b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f8bc:	e003      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f8c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f8c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800f8d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f8dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	d03d      	beq.n	800f962 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800f8e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f8f2:	d01b      	beq.n	800f92c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800f8f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f8f8:	d814      	bhi.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800f8fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8fe:	d017      	beq.n	800f930 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800f900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f904:	d80e      	bhi.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800f906:	2b00      	cmp	r3, #0
 800f908:	d014      	beq.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800f90a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f90e:	d109      	bne.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f914:	3330      	adds	r3, #48	@ 0x30
 800f916:	4618      	mov	r0, r3
 800f918:	f004 fa4e 	bl	8013db8 <RCCEx_PLL3_Config>
 800f91c:	4603      	mov	r3, r0
 800f91e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800f922:	e008      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f924:	2301      	movs	r3, #1
 800f926:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f92a:	e004      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800f92c:	bf00      	nop
 800f92e:	e002      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800f930:	bf00      	nop
 800f932:	e000      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800f934:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f936:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10d      	bne.n	800f95a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800f93e:	4b55      	ldr	r3, [pc, #340]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f940:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f944:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f950:	4a50      	ldr	r2, [pc, #320]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f952:	430b      	orrs	r3, r1
 800f954:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800f958:	e003      	b.n	800f962 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f95a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f95e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800f96e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f972:	2300      	movs	r3, #0
 800f974:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f978:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800f97c:	460b      	mov	r3, r1
 800f97e:	4313      	orrs	r3, r2
 800f980:	d03d      	beq.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800f982:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f98a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800f98e:	d01b      	beq.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800f990:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800f994:	d814      	bhi.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800f996:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f99a:	d017      	beq.n	800f9cc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800f99c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f9a0:	d80e      	bhi.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d014      	beq.n	800f9d0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800f9a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f9aa:	d109      	bne.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f9ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f9b0:	3330      	adds	r3, #48	@ 0x30
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f004 fa00 	bl	8013db8 <RCCEx_PLL3_Config>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800f9be:	e008      	b.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f9c6:	e004      	b.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800f9c8:	bf00      	nop
 800f9ca:	e002      	b.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800f9cc:	bf00      	nop
 800f9ce:	e000      	b.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800f9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10d      	bne.n	800f9f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800f9da:	4b2e      	ldr	r3, [pc, #184]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f9dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f9e0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800f9e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f9e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f9ec:	4a29      	ldr	r2, [pc, #164]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800f9ee:	430b      	orrs	r3, r1
 800f9f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800f9f4:	e003      	b.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f9fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f9fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa06:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800fa0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fa0e:	2300      	movs	r3, #0
 800fa10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800fa14:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800fa18:	460b      	mov	r3, r1
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	d040      	beq.n	800faa0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800fa1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fa26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fa2a:	d01b      	beq.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800fa2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fa30:	d814      	bhi.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800fa32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fa36:	d017      	beq.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800fa38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fa3c:	d80e      	bhi.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d014      	beq.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800fa42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa46:	d109      	bne.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fa48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa4c:	3330      	adds	r3, #48	@ 0x30
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f004 f9b2 	bl	8013db8 <RCCEx_PLL3_Config>
 800fa54:	4603      	mov	r3, r0
 800fa56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800fa5a:	e008      	b.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fa62:	e004      	b.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800fa64:	bf00      	nop
 800fa66:	e002      	b.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800fa68:	bf00      	nop
 800fa6a:	e000      	b.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800fa6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d110      	bne.n	800fa98 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800fa76:	4b07      	ldr	r3, [pc, #28]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800fa78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fa7c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800fa80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fa88:	4a02      	ldr	r2, [pc, #8]	@ (800fa94 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800fa8a:	430b      	orrs	r3, r1
 800fa8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800fa90:	e006      	b.n	800faa0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800fa92:	bf00      	nop
 800fa94:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fa9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800faa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	2100      	movs	r1, #0
 800faaa:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800faae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fab6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800faba:	460b      	mov	r3, r1
 800fabc:	4313      	orrs	r3, r2
 800fabe:	d03d      	beq.n	800fb3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800fac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fac8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800facc:	d01b      	beq.n	800fb06 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800face:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800fad2:	d814      	bhi.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800fad4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fad8:	d017      	beq.n	800fb0a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800fada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fade:	d80e      	bhi.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d014      	beq.n	800fb0e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800fae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fae8:	d109      	bne.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800faea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800faee:	3330      	adds	r3, #48	@ 0x30
 800faf0:	4618      	mov	r0, r3
 800faf2:	f004 f961 	bl	8013db8 <RCCEx_PLL3_Config>
 800faf6:	4603      	mov	r3, r0
 800faf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800fafc:	e008      	b.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fafe:	2301      	movs	r3, #1
 800fb00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fb04:	e004      	b.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800fb06:	bf00      	nop
 800fb08:	e002      	b.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800fb0a:	bf00      	nop
 800fb0c:	e000      	b.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800fb0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d10d      	bne.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800fb18:	4bbe      	ldr	r3, [pc, #760]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fb1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fb1e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800fb22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fb2a:	4aba      	ldr	r2, [pc, #744]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fb2c:	430b      	orrs	r3, r1
 800fb2e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800fb32:	e003      	b.n	800fb3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fb38:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800fb3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb44:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800fb48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800fb52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800fb56:	460b      	mov	r3, r1
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	d035      	beq.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800fb5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fb64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb68:	d015      	beq.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800fb6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb6e:	d80e      	bhi.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d012      	beq.n	800fb9a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800fb74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fb78:	d109      	bne.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fb7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb7e:	3330      	adds	r3, #48	@ 0x30
 800fb80:	4618      	mov	r0, r3
 800fb82:	f004 f919 	bl	8013db8 <RCCEx_PLL3_Config>
 800fb86:	4603      	mov	r3, r0
 800fb88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800fb8c:	e006      	b.n	800fb9c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fb94:	e002      	b.n	800fb9c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800fb96:	bf00      	nop
 800fb98:	e000      	b.n	800fb9c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800fb9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10d      	bne.n	800fbc0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800fba4:	4b9b      	ldr	r3, [pc, #620]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fba6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fbaa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800fbae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fbb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fbb6:	4a97      	ldr	r2, [pc, #604]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fbb8:	430b      	orrs	r3, r1
 800fbba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800fbbe:	e003      	b.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fbc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fbc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800fbd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fbda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fbde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	d00e      	beq.n	800fc06 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800fbe8:	4b8a      	ldr	r3, [pc, #552]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fbea:	69db      	ldr	r3, [r3, #28]
 800fbec:	4a89      	ldr	r2, [pc, #548]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fbee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fbf2:	61d3      	str	r3, [r2, #28]
 800fbf4:	4b87      	ldr	r3, [pc, #540]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fbf6:	69d9      	ldr	r1, [r3, #28]
 800fbf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fbfc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800fc00:	4a84      	ldr	r2, [pc, #528]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fc02:	430b      	orrs	r3, r1
 800fc04:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fc06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800fc12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fc16:	2300      	movs	r3, #0
 800fc18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fc1c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800fc20:	460b      	mov	r3, r1
 800fc22:	4313      	orrs	r3, r2
 800fc24:	d055      	beq.n	800fcd2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800fc26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fc2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fc2e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800fc32:	d031      	beq.n	800fc98 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800fc34:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800fc38:	d82a      	bhi.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800fc3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc3e:	d02d      	beq.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800fc40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc44:	d824      	bhi.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800fc46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc4a:	d029      	beq.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800fc4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc50:	d81e      	bhi.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800fc52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc56:	d011      	beq.n	800fc7c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800fc58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc5c:	d818      	bhi.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d020      	beq.n	800fca4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800fc62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fc66:	d113      	bne.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fc68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f004 f80a 	bl	8013c88 <RCCEx_PLL2_Config>
 800fc74:	4603      	mov	r3, r0
 800fc76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800fc7a:	e014      	b.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fc7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fc80:	3330      	adds	r3, #48	@ 0x30
 800fc82:	4618      	mov	r0, r3
 800fc84:	f004 f898 	bl	8013db8 <RCCEx_PLL3_Config>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800fc8e:	e00a      	b.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc90:	2301      	movs	r3, #1
 800fc92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fc96:	e006      	b.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800fc98:	bf00      	nop
 800fc9a:	e004      	b.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800fc9c:	bf00      	nop
 800fc9e:	e002      	b.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800fca0:	bf00      	nop
 800fca2:	e000      	b.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800fca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fca6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d10d      	bne.n	800fcca <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800fcae:	4b59      	ldr	r3, [pc, #356]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fcb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800fcb4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800fcb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fcbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fcc0:	4a54      	ldr	r2, [pc, #336]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fcc2:	430b      	orrs	r3, r1
 800fcc4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800fcc8:	e003      	b.n	800fcd2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fcce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fcd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800fcde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fce2:	2300      	movs	r3, #0
 800fce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fce8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800fcec:	460b      	mov	r3, r1
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	d055      	beq.n	800fd9e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800fcf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fcf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fcfa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fcfe:	d031      	beq.n	800fd64 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800fd00:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fd04:	d82a      	bhi.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800fd06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd0a:	d02d      	beq.n	800fd68 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800fd0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd10:	d824      	bhi.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800fd12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fd16:	d029      	beq.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800fd18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fd1c:	d81e      	bhi.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800fd1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd22:	d011      	beq.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800fd24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd28:	d818      	bhi.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d020      	beq.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800fd2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd32:	d113      	bne.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fd34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd38:	3308      	adds	r3, #8
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f003 ffa4 	bl	8013c88 <RCCEx_PLL2_Config>
 800fd40:	4603      	mov	r3, r0
 800fd42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800fd46:	e014      	b.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fd48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd4c:	3330      	adds	r3, #48	@ 0x30
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f004 f832 	bl	8013db8 <RCCEx_PLL3_Config>
 800fd54:	4603      	mov	r3, r0
 800fd56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800fd5a:	e00a      	b.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fd62:	e006      	b.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800fd64:	bf00      	nop
 800fd66:	e004      	b.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800fd68:	bf00      	nop
 800fd6a:	e002      	b.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800fd6c:	bf00      	nop
 800fd6e:	e000      	b.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800fd70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d10d      	bne.n	800fd96 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800fd7a:	4b26      	ldr	r3, [pc, #152]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fd7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800fd80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800fd84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fd8c:	4a21      	ldr	r2, [pc, #132]	@ (800fe14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800fd8e:	430b      	orrs	r3, r1
 800fd90:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800fd94:	e003      	b.n	800fd9e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fd9a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800fd9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda6:	2100      	movs	r1, #0
 800fda8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800fdac:	f003 0320 	and.w	r3, r3, #32
 800fdb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fdb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	d057      	beq.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800fdbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fdc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fdc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fdca:	d033      	beq.n	800fe34 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800fdcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fdd0:	d82c      	bhi.n	800fe2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800fdd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fdd6:	d02f      	beq.n	800fe38 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800fdd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fddc:	d826      	bhi.n	800fe2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800fdde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fde2:	d02b      	beq.n	800fe3c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800fde4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fde8:	d820      	bhi.n	800fe2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800fdea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fdee:	d013      	beq.n	800fe18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fdf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fdf4:	d81a      	bhi.n	800fe2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d022      	beq.n	800fe40 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800fdfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdfe:	d115      	bne.n	800fe2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fe00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe04:	3308      	adds	r3, #8
 800fe06:	4618      	mov	r0, r3
 800fe08:	f003 ff3e 	bl	8013c88 <RCCEx_PLL2_Config>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800fe12:	e016      	b.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800fe14:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fe18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe1c:	3330      	adds	r3, #48	@ 0x30
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f003 ffca 	bl	8013db8 <RCCEx_PLL3_Config>
 800fe24:	4603      	mov	r3, r0
 800fe26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800fe2a:	e00a      	b.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fe32:	e006      	b.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800fe34:	bf00      	nop
 800fe36:	e004      	b.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800fe38:	bf00      	nop
 800fe3a:	e002      	b.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800fe3c:	bf00      	nop
 800fe3e:	e000      	b.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800fe40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d10d      	bne.n	800fe66 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800fe4a:	4bbb      	ldr	r3, [pc, #748]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800fe4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800fe50:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800fe54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fe5c:	4ab6      	ldr	r2, [pc, #728]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800fe5e:	430b      	orrs	r3, r1
 800fe60:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800fe64:	e003      	b.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fe6a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800fe6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe76:	2100      	movs	r1, #0
 800fe78:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800fe7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800fe84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	d055      	beq.n	800ff3a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800fe8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fe96:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800fe9a:	d031      	beq.n	800ff00 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800fe9c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800fea0:	d82a      	bhi.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800fea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fea6:	d02d      	beq.n	800ff04 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800fea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800feac:	d824      	bhi.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800feae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800feb2:	d029      	beq.n	800ff08 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800feb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800feb8:	d81e      	bhi.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800feba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800febe:	d011      	beq.n	800fee4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800fec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fec4:	d818      	bhi.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d020      	beq.n	800ff0c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800feca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fece:	d113      	bne.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fed4:	3308      	adds	r3, #8
 800fed6:	4618      	mov	r0, r3
 800fed8:	f003 fed6 	bl	8013c88 <RCCEx_PLL2_Config>
 800fedc:	4603      	mov	r3, r0
 800fede:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800fee2:	e014      	b.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fee8:	3330      	adds	r3, #48	@ 0x30
 800feea:	4618      	mov	r0, r3
 800feec:	f003 ff64 	bl	8013db8 <RCCEx_PLL3_Config>
 800fef0:	4603      	mov	r3, r0
 800fef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800fef6:	e00a      	b.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fef8:	2301      	movs	r3, #1
 800fefa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fefe:	e006      	b.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ff00:	bf00      	nop
 800ff02:	e004      	b.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ff04:	bf00      	nop
 800ff06:	e002      	b.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ff08:	bf00      	nop
 800ff0a:	e000      	b.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ff0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10d      	bne.n	800ff32 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800ff16:	4b88      	ldr	r3, [pc, #544]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ff18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ff1c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800ff20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ff24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ff28:	4a83      	ldr	r2, [pc, #524]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ff2a:	430b      	orrs	r3, r1
 800ff2c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ff30:	e003      	b.n	800ff3a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ff36:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800ff3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff42:	2100      	movs	r1, #0
 800ff44:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800ff48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ff50:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ff54:	460b      	mov	r3, r1
 800ff56:	4313      	orrs	r3, r2
 800ff58:	d055      	beq.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800ff5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ff5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ff62:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ff66:	d031      	beq.n	800ffcc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800ff68:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ff6c:	d82a      	bhi.n	800ffc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800ff6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ff72:	d02d      	beq.n	800ffd0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800ff74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ff78:	d824      	bhi.n	800ffc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800ff7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ff7e:	d029      	beq.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800ff80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ff84:	d81e      	bhi.n	800ffc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800ff86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ff8a:	d011      	beq.n	800ffb0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800ff8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ff90:	d818      	bhi.n	800ffc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d020      	beq.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800ff96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ff9a:	d113      	bne.n	800ffc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ff9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ffa0:	3308      	adds	r3, #8
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f003 fe70 	bl	8013c88 <RCCEx_PLL2_Config>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800ffae:	e014      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ffb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ffb4:	3330      	adds	r3, #48	@ 0x30
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f003 fefe 	bl	8013db8 <RCCEx_PLL3_Config>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800ffc2:	e00a      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ffca:	e006      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ffcc:	bf00      	nop
 800ffce:	e004      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ffd0:	bf00      	nop
 800ffd2:	e002      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ffd4:	bf00      	nop
 800ffd6:	e000      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ffd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d10d      	bne.n	800fffe <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800ffe2:	4b55      	ldr	r3, [pc, #340]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ffe4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ffe8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ffec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fff4:	4a50      	ldr	r2, [pc, #320]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800fff6:	430b      	orrs	r3, r1
 800fff8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800fffc:	e003      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fffe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010002:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8010006:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000e:	2100      	movs	r1, #0
 8010010:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8010014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010018:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801001c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8010020:	460b      	mov	r3, r1
 8010022:	4313      	orrs	r3, r2
 8010024:	d055      	beq.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8010026:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801002a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801002e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010032:	d031      	beq.n	8010098 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8010034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010038:	d82a      	bhi.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 801003a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801003e:	d02d      	beq.n	801009c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8010040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010044:	d824      	bhi.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8010046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801004a:	d029      	beq.n	80100a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 801004c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010050:	d81e      	bhi.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8010052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010056:	d011      	beq.n	801007c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8010058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801005c:	d818      	bhi.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 801005e:	2b00      	cmp	r3, #0
 8010060:	d020      	beq.n	80100a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8010062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010066:	d113      	bne.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801006c:	3308      	adds	r3, #8
 801006e:	4618      	mov	r0, r3
 8010070:	f003 fe0a 	bl	8013c88 <RCCEx_PLL2_Config>
 8010074:	4603      	mov	r3, r0
 8010076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 801007a:	e014      	b.n	80100a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801007c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010080:	3330      	adds	r3, #48	@ 0x30
 8010082:	4618      	mov	r0, r3
 8010084:	f003 fe98 	bl	8013db8 <RCCEx_PLL3_Config>
 8010088:	4603      	mov	r3, r0
 801008a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 801008e:	e00a      	b.n	80100a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010096:	e006      	b.n	80100a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8010098:	bf00      	nop
 801009a:	e004      	b.n	80100a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 801009c:	bf00      	nop
 801009e:	e002      	b.n	80100a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80100a0:	bf00      	nop
 80100a2:	e000      	b.n	80100a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80100a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d10d      	bne.n	80100ca <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80100ae:	4b22      	ldr	r3, [pc, #136]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80100b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80100b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80100b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80100bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80100c0:	4a1d      	ldr	r2, [pc, #116]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80100c2:	430b      	orrs	r3, r1
 80100c4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80100c8:	e003      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80100ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80100d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80100d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100da:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80100de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80100e2:	2300      	movs	r3, #0
 80100e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80100e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80100ec:	460b      	mov	r3, r1
 80100ee:	4313      	orrs	r3, r2
 80100f0:	d055      	beq.n	801019e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80100f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80100f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80100fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80100fe:	d035      	beq.n	801016c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8010100:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010104:	d82e      	bhi.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8010106:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801010a:	d031      	beq.n	8010170 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 801010c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010110:	d828      	bhi.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8010112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010116:	d01b      	beq.n	8010150 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8010118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801011c:	d822      	bhi.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 801011e:	2b00      	cmp	r3, #0
 8010120:	d003      	beq.n	801012a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8010122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010126:	d009      	beq.n	801013c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8010128:	e01c      	b.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801012a:	4b03      	ldr	r3, [pc, #12]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 801012c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801012e:	4a02      	ldr	r2, [pc, #8]	@ (8010138 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8010130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010134:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8010136:	e01c      	b.n	8010172 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8010138:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801013c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010140:	3308      	adds	r3, #8
 8010142:	4618      	mov	r0, r3
 8010144:	f003 fda0 	bl	8013c88 <RCCEx_PLL2_Config>
 8010148:	4603      	mov	r3, r0
 801014a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 801014e:	e010      	b.n	8010172 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8010150:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010154:	3330      	adds	r3, #48	@ 0x30
 8010156:	4618      	mov	r0, r3
 8010158:	f003 fe2e 	bl	8013db8 <RCCEx_PLL3_Config>
 801015c:	4603      	mov	r3, r0
 801015e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8010162:	e006      	b.n	8010172 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801016a:	e002      	b.n	8010172 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 801016c:	bf00      	nop
 801016e:	e000      	b.n	8010172 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8010170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10d      	bne.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 801017a:	4bc3      	ldr	r3, [pc, #780]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801017c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010180:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010188:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801018c:	4abe      	ldr	r2, [pc, #760]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801018e:	430b      	orrs	r3, r1
 8010190:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010194:	e003      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010196:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801019a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 801019e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80101a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80101aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80101ae:	2300      	movs	r3, #0
 80101b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80101b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80101b8:	460b      	mov	r3, r1
 80101ba:	4313      	orrs	r3, r2
 80101bc:	d051      	beq.n	8010262 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80101be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80101c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80101c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80101ca:	d033      	beq.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80101cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80101d0:	d82c      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80101d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80101d6:	d02d      	beq.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80101d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80101dc:	d826      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80101de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101e2:	d019      	beq.n	8010218 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80101e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101e8:	d820      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d003      	beq.n	80101f6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80101ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80101f2:	d007      	beq.n	8010204 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80101f4:	e01a      	b.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101f6:	4ba4      	ldr	r3, [pc, #656]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80101f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101fa:	4aa3      	ldr	r2, [pc, #652]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80101fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010200:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8010202:	e018      	b.n	8010236 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010208:	3308      	adds	r3, #8
 801020a:	4618      	mov	r0, r3
 801020c:	f003 fd3c 	bl	8013c88 <RCCEx_PLL2_Config>
 8010210:	4603      	mov	r3, r0
 8010212:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8010216:	e00e      	b.n	8010236 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8010218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801021c:	3330      	adds	r3, #48	@ 0x30
 801021e:	4618      	mov	r0, r3
 8010220:	f003 fdca 	bl	8013db8 <RCCEx_PLL3_Config>
 8010224:	4603      	mov	r3, r0
 8010226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 801022a:	e004      	b.n	8010236 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801022c:	2301      	movs	r3, #1
 801022e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010232:	e000      	b.n	8010236 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8010234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010236:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10d      	bne.n	801025a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 801023e:	4b92      	ldr	r3, [pc, #584]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8010240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010244:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8010248:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801024c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010250:	4a8d      	ldr	r2, [pc, #564]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8010252:	430b      	orrs	r3, r1
 8010254:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010258:	e003      	b.n	8010262 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801025a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801025e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8010262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801026e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010270:	2300      	movs	r3, #0
 8010272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010274:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8010278:	460b      	mov	r3, r1
 801027a:	4313      	orrs	r3, r2
 801027c:	d032      	beq.n	80102e4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 801027e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010282:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010286:	2b05      	cmp	r3, #5
 8010288:	d80f      	bhi.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x1466>
 801028a:	2b03      	cmp	r3, #3
 801028c:	d211      	bcs.n	80102b2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 801028e:	2b01      	cmp	r3, #1
 8010290:	d911      	bls.n	80102b6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8010292:	2b02      	cmp	r3, #2
 8010294:	d109      	bne.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801029a:	3308      	adds	r3, #8
 801029c:	4618      	mov	r0, r3
 801029e:	f003 fcf3 	bl	8013c88 <RCCEx_PLL2_Config>
 80102a2:	4603      	mov	r3, r0
 80102a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80102a8:	e006      	b.n	80102b8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80102aa:	2301      	movs	r3, #1
 80102ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80102b0:	e002      	b.n	80102b8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80102b2:	bf00      	nop
 80102b4:	e000      	b.n	80102b8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80102b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80102b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10d      	bne.n	80102dc <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80102c0:	4b71      	ldr	r3, [pc, #452]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80102c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80102c6:	f023 0107 	bic.w	r1, r3, #7
 80102ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80102ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80102d2:	4a6d      	ldr	r2, [pc, #436]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80102d4:	430b      	orrs	r3, r1
 80102d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80102da:	e003      	b.n	80102e4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80102e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80102e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80102e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ec:	2100      	movs	r1, #0
 80102ee:	6739      	str	r1, [r7, #112]	@ 0x70
 80102f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80102f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80102f6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80102fa:	460b      	mov	r3, r1
 80102fc:	4313      	orrs	r3, r2
 80102fe:	d024      	beq.n	801034a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8010300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010308:	2b00      	cmp	r3, #0
 801030a:	d005      	beq.n	8010318 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 801030c:	2b08      	cmp	r3, #8
 801030e:	d005      	beq.n	801031c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010310:	2301      	movs	r3, #1
 8010312:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010316:	e002      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8010318:	bf00      	nop
 801031a:	e000      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 801031c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801031e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010322:	2b00      	cmp	r3, #0
 8010324:	d10d      	bne.n	8010342 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8010326:	4b58      	ldr	r3, [pc, #352]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8010328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801032c:	f023 0108 	bic.w	r1, r3, #8
 8010330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010338:	4a53      	ldr	r2, [pc, #332]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801033a:	430b      	orrs	r3, r1
 801033c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010340:	e003      	b.n	801034a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010342:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010346:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801034a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8010356:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010358:	2300      	movs	r3, #0
 801035a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801035c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8010360:	460b      	mov	r3, r1
 8010362:	4313      	orrs	r3, r2
 8010364:	f000 80b9 	beq.w	80104da <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8010368:	4b48      	ldr	r3, [pc, #288]	@ (801048c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 801036a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801036c:	4a47      	ldr	r2, [pc, #284]	@ (801048c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 801036e:	f043 0301 	orr.w	r3, r3, #1
 8010372:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010374:	f7fb fc1e 	bl	800bbb4 <HAL_GetTick>
 8010378:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 801037c:	e00b      	b.n	8010396 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801037e:	f7fb fc19 	bl	800bbb4 <HAL_GetTick>
 8010382:	4602      	mov	r2, r0
 8010384:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8010388:	1ad3      	subs	r3, r2, r3
 801038a:	2b02      	cmp	r3, #2
 801038c:	d903      	bls.n	8010396 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 801038e:	2303      	movs	r3, #3
 8010390:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010394:	e005      	b.n	80103a2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8010396:	4b3d      	ldr	r3, [pc, #244]	@ (801048c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8010398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801039a:	f003 0301 	and.w	r3, r3, #1
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d0ed      	beq.n	801037e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80103a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f040 8093 	bne.w	80104d2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80103ac:	4b36      	ldr	r3, [pc, #216]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80103ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80103b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80103b6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80103ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d023      	beq.n	801040a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80103c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80103c6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80103ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d01b      	beq.n	801040a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80103d2:	4b2d      	ldr	r3, [pc, #180]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80103d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80103d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80103dc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80103e0:	4b29      	ldr	r3, [pc, #164]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80103e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80103e6:	4a28      	ldr	r2, [pc, #160]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80103e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80103ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80103f0:	4b25      	ldr	r3, [pc, #148]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80103f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80103f6:	4a24      	ldr	r2, [pc, #144]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80103f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80103fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010400:	4a21      	ldr	r2, [pc, #132]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8010402:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8010406:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801040a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801040e:	f003 0301 	and.w	r3, r3, #1
 8010412:	2b00      	cmp	r3, #0
 8010414:	d019      	beq.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010416:	f7fb fbcd 	bl	800bbb4 <HAL_GetTick>
 801041a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801041e:	e00d      	b.n	801043c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010420:	f7fb fbc8 	bl	800bbb4 <HAL_GetTick>
 8010424:	4602      	mov	r2, r0
 8010426:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801042a:	1ad2      	subs	r2, r2, r3
 801042c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8010430:	429a      	cmp	r2, r3
 8010432:	d903      	bls.n	801043c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8010434:	2303      	movs	r3, #3
 8010436:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 801043a:	e006      	b.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801043c:	4b12      	ldr	r3, [pc, #72]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801043e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010442:	f003 0302 	and.w	r3, r3, #2
 8010446:	2b00      	cmp	r3, #0
 8010448:	d0ea      	beq.n	8010420 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 801044a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801044e:	2b00      	cmp	r3, #0
 8010450:	d13a      	bne.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8010452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010456:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801045a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801045e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010462:	d115      	bne.n	8010490 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8010464:	4b08      	ldr	r3, [pc, #32]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8010466:	69db      	ldr	r3, [r3, #28]
 8010468:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801046c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010470:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8010474:	091b      	lsrs	r3, r3, #4
 8010476:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801047a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 801047e:	4a02      	ldr	r2, [pc, #8]	@ (8010488 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8010480:	430b      	orrs	r3, r1
 8010482:	61d3      	str	r3, [r2, #28]
 8010484:	e00a      	b.n	801049c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8010486:	bf00      	nop
 8010488:	44020c00 	.word	0x44020c00
 801048c:	44020800 	.word	0x44020800
 8010490:	4b9f      	ldr	r3, [pc, #636]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010492:	69db      	ldr	r3, [r3, #28]
 8010494:	4a9e      	ldr	r2, [pc, #632]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010496:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801049a:	61d3      	str	r3, [r2, #28]
 801049c:	4b9c      	ldr	r3, [pc, #624]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801049e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80104a2:	4a9b      	ldr	r2, [pc, #620]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80104a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80104a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80104ac:	4b98      	ldr	r3, [pc, #608]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80104ae:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80104b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80104b6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80104ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80104be:	4a94      	ldr	r2, [pc, #592]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80104c0:	430b      	orrs	r3, r1
 80104c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80104c6:	e008      	b.n	80104da <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80104c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80104cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80104d0:	e003      	b.n	80104da <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80104d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80104da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80104e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80104e8:	2300      	movs	r3, #0
 80104ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80104ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80104f0:	460b      	mov	r3, r1
 80104f2:	4313      	orrs	r3, r2
 80104f4:	d035      	beq.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80104f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80104fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80104fe:	2b30      	cmp	r3, #48	@ 0x30
 8010500:	d014      	beq.n	801052c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8010502:	2b30      	cmp	r3, #48	@ 0x30
 8010504:	d80e      	bhi.n	8010524 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8010506:	2b20      	cmp	r3, #32
 8010508:	d012      	beq.n	8010530 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 801050a:	2b20      	cmp	r3, #32
 801050c:	d80a      	bhi.n	8010524 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 801050e:	2b00      	cmp	r3, #0
 8010510:	d010      	beq.n	8010534 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8010512:	2b10      	cmp	r3, #16
 8010514:	d106      	bne.n	8010524 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010516:	4b7e      	ldr	r3, [pc, #504]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801051a:	4a7d      	ldr	r2, [pc, #500]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801051c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010520:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8010522:	e008      	b.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801052a:	e004      	b.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 801052c:	bf00      	nop
 801052e:	e002      	b.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8010530:	bf00      	nop
 8010532:	e000      	b.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8010534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010536:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10d      	bne.n	801055a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 801053e:	4b74      	ldr	r3, [pc, #464]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010544:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8010548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801054c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010550:	4a6f      	ldr	r2, [pc, #444]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010552:	430b      	orrs	r3, r1
 8010554:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010558:	e003      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801055a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801055e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8010562:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801056e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010570:	2300      	movs	r3, #0
 8010572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010574:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8010578:	460b      	mov	r3, r1
 801057a:	4313      	orrs	r3, r2
 801057c:	d033      	beq.n	80105e6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 801057e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010582:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 801058a:	2b40      	cmp	r3, #64	@ 0x40
 801058c:	d007      	beq.n	801059e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 801058e:	e010      	b.n	80105b2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010590:	4b5f      	ldr	r3, [pc, #380]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010594:	4a5e      	ldr	r2, [pc, #376]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801059a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 801059c:	e00d      	b.n	80105ba <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801059e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80105a2:	3308      	adds	r3, #8
 80105a4:	4618      	mov	r0, r3
 80105a6:	f003 fb6f 	bl	8013c88 <RCCEx_PLL2_Config>
 80105aa:	4603      	mov	r3, r0
 80105ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80105b0:	e003      	b.n	80105ba <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80105b2:	2301      	movs	r3, #1
 80105b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80105b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d10d      	bne.n	80105de <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80105c2:	4b53      	ldr	r3, [pc, #332]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80105c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80105c8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80105cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80105d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80105d4:	4a4e      	ldr	r2, [pc, #312]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80105d6:	430b      	orrs	r3, r1
 80105d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80105dc:	e003      	b.n	80105e6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80105e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80105e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80105ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80105f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80105f4:	2300      	movs	r3, #0
 80105f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80105f8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80105fc:	460b      	mov	r3, r1
 80105fe:	4313      	orrs	r3, r2
 8010600:	d033      	beq.n	801066a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8010602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010606:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d002      	beq.n	8010614 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 801060e:	2b80      	cmp	r3, #128	@ 0x80
 8010610:	d007      	beq.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8010612:	e010      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010614:	4b3e      	ldr	r3, [pc, #248]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010618:	4a3d      	ldr	r2, [pc, #244]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801061a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801061e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8010620:	e00d      	b.n	801063e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010626:	3308      	adds	r3, #8
 8010628:	4618      	mov	r0, r3
 801062a:	f003 fb2d 	bl	8013c88 <RCCEx_PLL2_Config>
 801062e:	4603      	mov	r3, r0
 8010630:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8010634:	e003      	b.n	801063e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8010636:	2301      	movs	r3, #1
 8010638:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801063c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801063e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010642:	2b00      	cmp	r3, #0
 8010644:	d10d      	bne.n	8010662 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8010646:	4b32      	ldr	r3, [pc, #200]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010648:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801064c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8010650:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010654:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010658:	4a2d      	ldr	r2, [pc, #180]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801065a:	430b      	orrs	r3, r1
 801065c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8010660:	e003      	b.n	801066a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010662:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010666:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 801066a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8010676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010678:	2300      	movs	r3, #0
 801067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801067c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8010680:	460b      	mov	r3, r1
 8010682:	4313      	orrs	r3, r2
 8010684:	d04a      	beq.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8010686:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801068e:	2b04      	cmp	r3, #4
 8010690:	d827      	bhi.n	80106e2 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8010692:	a201      	add	r2, pc, #4	@ (adr r2, 8010698 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8010694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010698:	080106ad 	.word	0x080106ad
 801069c:	080106bb 	.word	0x080106bb
 80106a0:	080106cf 	.word	0x080106cf
 80106a4:	080106eb 	.word	0x080106eb
 80106a8:	080106eb 	.word	0x080106eb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80106ac:	4b18      	ldr	r3, [pc, #96]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80106ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106b0:	4a17      	ldr	r2, [pc, #92]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80106b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80106b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80106b8:	e018      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80106ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80106be:	3308      	adds	r3, #8
 80106c0:	4618      	mov	r0, r3
 80106c2:	f003 fae1 	bl	8013c88 <RCCEx_PLL2_Config>
 80106c6:	4603      	mov	r3, r0
 80106c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80106cc:	e00e      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80106ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80106d2:	3330      	adds	r3, #48	@ 0x30
 80106d4:	4618      	mov	r0, r3
 80106d6:	f003 fb6f 	bl	8013db8 <RCCEx_PLL3_Config>
 80106da:	4603      	mov	r3, r0
 80106dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80106e0:	e004      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80106e2:	2301      	movs	r3, #1
 80106e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80106e8:	e000      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80106ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80106ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10f      	bne.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80106f4:	4b06      	ldr	r3, [pc, #24]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80106f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106fa:	f023 0107 	bic.w	r1, r3, #7
 80106fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010706:	4a02      	ldr	r2, [pc, #8]	@ (8010710 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8010708:	430b      	orrs	r3, r1
 801070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801070e:	e005      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8010710:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010714:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010718:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 801071c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010724:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8010728:	643b      	str	r3, [r7, #64]	@ 0x40
 801072a:	2300      	movs	r3, #0
 801072c:	647b      	str	r3, [r7, #68]	@ 0x44
 801072e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8010732:	460b      	mov	r3, r1
 8010734:	4313      	orrs	r3, r2
 8010736:	f000 8081 	beq.w	801083c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 801073a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801073e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010742:	2b20      	cmp	r3, #32
 8010744:	d85f      	bhi.n	8010806 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8010746:	a201      	add	r2, pc, #4	@ (adr r2, 801074c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8010748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074c:	080107d1 	.word	0x080107d1
 8010750:	08010807 	.word	0x08010807
 8010754:	08010807 	.word	0x08010807
 8010758:	08010807 	.word	0x08010807
 801075c:	08010807 	.word	0x08010807
 8010760:	08010807 	.word	0x08010807
 8010764:	08010807 	.word	0x08010807
 8010768:	08010807 	.word	0x08010807
 801076c:	080107df 	.word	0x080107df
 8010770:	08010807 	.word	0x08010807
 8010774:	08010807 	.word	0x08010807
 8010778:	08010807 	.word	0x08010807
 801077c:	08010807 	.word	0x08010807
 8010780:	08010807 	.word	0x08010807
 8010784:	08010807 	.word	0x08010807
 8010788:	08010807 	.word	0x08010807
 801078c:	080107f3 	.word	0x080107f3
 8010790:	08010807 	.word	0x08010807
 8010794:	08010807 	.word	0x08010807
 8010798:	08010807 	.word	0x08010807
 801079c:	08010807 	.word	0x08010807
 80107a0:	08010807 	.word	0x08010807
 80107a4:	08010807 	.word	0x08010807
 80107a8:	08010807 	.word	0x08010807
 80107ac:	0801080f 	.word	0x0801080f
 80107b0:	08010807 	.word	0x08010807
 80107b4:	08010807 	.word	0x08010807
 80107b8:	08010807 	.word	0x08010807
 80107bc:	08010807 	.word	0x08010807
 80107c0:	08010807 	.word	0x08010807
 80107c4:	08010807 	.word	0x08010807
 80107c8:	08010807 	.word	0x08010807
 80107cc:	0801080f 	.word	0x0801080f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107d0:	4bab      	ldr	r3, [pc, #684]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80107d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107d4:	4aaa      	ldr	r2, [pc, #680]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80107d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80107da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80107dc:	e018      	b.n	8010810 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80107de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80107e2:	3308      	adds	r3, #8
 80107e4:	4618      	mov	r0, r3
 80107e6:	f003 fa4f 	bl	8013c88 <RCCEx_PLL2_Config>
 80107ea:	4603      	mov	r3, r0
 80107ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80107f0:	e00e      	b.n	8010810 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80107f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80107f6:	3330      	adds	r3, #48	@ 0x30
 80107f8:	4618      	mov	r0, r3
 80107fa:	f003 fadd 	bl	8013db8 <RCCEx_PLL3_Config>
 80107fe:	4603      	mov	r3, r0
 8010800:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8010804:	e004      	b.n	8010810 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010806:	2301      	movs	r3, #1
 8010808:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801080c:	e000      	b.n	8010810 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 801080e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010810:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010814:	2b00      	cmp	r3, #0
 8010816:	d10d      	bne.n	8010834 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8010818:	4b99      	ldr	r3, [pc, #612]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801081e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8010822:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010826:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801082a:	4a95      	ldr	r2, [pc, #596]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801082c:	430b      	orrs	r3, r1
 801082e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010832:	e003      	b.n	801083c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010834:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010838:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 801083c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8010848:	63bb      	str	r3, [r7, #56]	@ 0x38
 801084a:	2300      	movs	r3, #0
 801084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801084e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8010852:	460b      	mov	r3, r1
 8010854:	4313      	orrs	r3, r2
 8010856:	d04e      	beq.n	80108f6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8010858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801085c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010864:	d02e      	beq.n	80108c4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8010866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801086a:	d827      	bhi.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 801086c:	2bc0      	cmp	r3, #192	@ 0xc0
 801086e:	d02b      	beq.n	80108c8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8010870:	2bc0      	cmp	r3, #192	@ 0xc0
 8010872:	d823      	bhi.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8010874:	2b80      	cmp	r3, #128	@ 0x80
 8010876:	d017      	beq.n	80108a8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8010878:	2b80      	cmp	r3, #128	@ 0x80
 801087a:	d81f      	bhi.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 801087c:	2b00      	cmp	r3, #0
 801087e:	d002      	beq.n	8010886 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8010880:	2b40      	cmp	r3, #64	@ 0x40
 8010882:	d007      	beq.n	8010894 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8010884:	e01a      	b.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010886:	4b7e      	ldr	r3, [pc, #504]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8010888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801088a:	4a7d      	ldr	r2, [pc, #500]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010890:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8010892:	e01a      	b.n	80108ca <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010898:	3308      	adds	r3, #8
 801089a:	4618      	mov	r0, r3
 801089c:	f003 f9f4 	bl	8013c88 <RCCEx_PLL2_Config>
 80108a0:	4603      	mov	r3, r0
 80108a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80108a6:	e010      	b.n	80108ca <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80108a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80108ac:	3330      	adds	r3, #48	@ 0x30
 80108ae:	4618      	mov	r0, r3
 80108b0:	f003 fa82 	bl	8013db8 <RCCEx_PLL3_Config>
 80108b4:	4603      	mov	r3, r0
 80108b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80108ba:	e006      	b.n	80108ca <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80108bc:	2301      	movs	r3, #1
 80108be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80108c2:	e002      	b.n	80108ca <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80108c4:	bf00      	nop
 80108c6:	e000      	b.n	80108ca <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80108c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80108ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10d      	bne.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80108d2:	4b6b      	ldr	r3, [pc, #428]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80108d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80108dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80108e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80108e4:	4a66      	ldr	r2, [pc, #408]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80108e6:	430b      	orrs	r3, r1
 80108e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108ec:	e003      	b.n	80108f6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80108f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80108f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80108fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8010902:	633b      	str	r3, [r7, #48]	@ 0x30
 8010904:	2300      	movs	r3, #0
 8010906:	637b      	str	r3, [r7, #52]	@ 0x34
 8010908:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801090c:	460b      	mov	r3, r1
 801090e:	4313      	orrs	r3, r2
 8010910:	d055      	beq.n	80109be <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8010912:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010916:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801091a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 801091e:	d031      	beq.n	8010984 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8010920:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8010924:	d82a      	bhi.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8010926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801092a:	d02d      	beq.n	8010988 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 801092c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010930:	d824      	bhi.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8010932:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010936:	d029      	beq.n	801098c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8010938:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801093c:	d81e      	bhi.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 801093e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010942:	d011      	beq.n	8010968 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8010944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010948:	d818      	bhi.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 801094a:	2b00      	cmp	r3, #0
 801094c:	d020      	beq.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 801094e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010952:	d113      	bne.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010954:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010958:	3308      	adds	r3, #8
 801095a:	4618      	mov	r0, r3
 801095c:	f003 f994 	bl	8013c88 <RCCEx_PLL2_Config>
 8010960:	4603      	mov	r3, r0
 8010962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8010966:	e014      	b.n	8010992 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8010968:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801096c:	3330      	adds	r3, #48	@ 0x30
 801096e:	4618      	mov	r0, r3
 8010970:	f003 fa22 	bl	8013db8 <RCCEx_PLL3_Config>
 8010974:	4603      	mov	r3, r0
 8010976:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 801097a:	e00a      	b.n	8010992 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801097c:	2301      	movs	r3, #1
 801097e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010982:	e006      	b.n	8010992 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8010984:	bf00      	nop
 8010986:	e004      	b.n	8010992 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8010988:	bf00      	nop
 801098a:	e002      	b.n	8010992 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 801098c:	bf00      	nop
 801098e:	e000      	b.n	8010992 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8010990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010992:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010996:	2b00      	cmp	r3, #0
 8010998:	d10d      	bne.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 801099a:	4b39      	ldr	r3, [pc, #228]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80109a0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80109a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80109a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80109ac:	4a34      	ldr	r2, [pc, #208]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80109ae:	430b      	orrs	r3, r1
 80109b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80109b4:	e003      	b.n	80109be <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80109ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80109be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80109ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80109cc:	2300      	movs	r3, #0
 80109ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80109d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80109d4:	460b      	mov	r3, r1
 80109d6:	4313      	orrs	r3, r2
 80109d8:	d058      	beq.n	8010a8c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80109da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80109de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80109e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80109e6:	d031      	beq.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80109e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80109ec:	d82a      	bhi.n	8010a44 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80109ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80109f2:	d02d      	beq.n	8010a50 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80109f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80109f8:	d824      	bhi.n	8010a44 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80109fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80109fe:	d029      	beq.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8010a00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010a04:	d81e      	bhi.n	8010a44 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8010a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a0a:	d011      	beq.n	8010a30 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8010a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a10:	d818      	bhi.n	8010a44 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d020      	beq.n	8010a58 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8010a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a1a:	d113      	bne.n	8010a44 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a20:	3308      	adds	r3, #8
 8010a22:	4618      	mov	r0, r3
 8010a24:	f003 f930 	bl	8013c88 <RCCEx_PLL2_Config>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8010a2e:	e014      	b.n	8010a5a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8010a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a34:	3330      	adds	r3, #48	@ 0x30
 8010a36:	4618      	mov	r0, r3
 8010a38:	f003 f9be 	bl	8013db8 <RCCEx_PLL3_Config>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8010a42:	e00a      	b.n	8010a5a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010a44:	2301      	movs	r3, #1
 8010a46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010a4a:	e006      	b.n	8010a5a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8010a4c:	bf00      	nop
 8010a4e:	e004      	b.n	8010a5a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8010a50:	bf00      	nop
 8010a52:	e002      	b.n	8010a5a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8010a54:	bf00      	nop
 8010a56:	e000      	b.n	8010a5a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8010a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d110      	bne.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8010a62:	4b07      	ldr	r3, [pc, #28]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8010a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010a68:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8010a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010a74:	4902      	ldr	r1, [pc, #8]	@ (8010a80 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8010a76:	4313      	orrs	r3, r2
 8010a78:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8010a7c:	e006      	b.n	8010a8c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8010a7e:	bf00      	nop
 8010a80:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010a88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a94:	2100      	movs	r1, #0
 8010a96:	6239      	str	r1, [r7, #32]
 8010a98:	f003 0301 	and.w	r3, r3, #1
 8010a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	d055      	beq.n	8010b54 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8010aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010ab0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8010ab4:	d031      	beq.n	8010b1a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8010ab6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8010aba:	d82a      	bhi.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8010abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010ac0:	d02d      	beq.n	8010b1e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8010ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010ac6:	d824      	bhi.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8010ac8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8010acc:	d029      	beq.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8010ace:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8010ad2:	d81e      	bhi.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8010ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ad8:	d011      	beq.n	8010afe <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8010ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ade:	d818      	bhi.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d020      	beq.n	8010b26 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8010ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010ae8:	d113      	bne.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010aee:	3308      	adds	r3, #8
 8010af0:	4618      	mov	r0, r3
 8010af2:	f003 f8c9 	bl	8013c88 <RCCEx_PLL2_Config>
 8010af6:	4603      	mov	r3, r0
 8010af8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010afc:	e014      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8010afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010b02:	3330      	adds	r3, #48	@ 0x30
 8010b04:	4618      	mov	r0, r3
 8010b06:	f003 f957 	bl	8013db8 <RCCEx_PLL3_Config>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010b10:	e00a      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010b12:	2301      	movs	r3, #1
 8010b14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010b18:	e006      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8010b1a:	bf00      	nop
 8010b1c:	e004      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8010b1e:	bf00      	nop
 8010b20:	e002      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8010b22:	bf00      	nop
 8010b24:	e000      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8010b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010b28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d10d      	bne.n	8010b4c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8010b30:	4b88      	ldr	r3, [pc, #544]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b36:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8010b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010b42:	4984      	ldr	r1, [pc, #528]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010b44:	4313      	orrs	r3, r2
 8010b46:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8010b4a:	e003      	b.n	8010b54 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010b50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8010b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	61b9      	str	r1, [r7, #24]
 8010b60:	f003 0302 	and.w	r3, r3, #2
 8010b64:	61fb      	str	r3, [r7, #28]
 8010b66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	d03d      	beq.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8010b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010b74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010b78:	2b03      	cmp	r3, #3
 8010b7a:	d81c      	bhi.n	8010bb6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8010b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8010b84 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8010b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b82:	bf00      	nop
 8010b84:	08010bbf 	.word	0x08010bbf
 8010b88:	08010b95 	.word	0x08010b95
 8010b8c:	08010ba3 	.word	0x08010ba3
 8010b90:	08010bbf 	.word	0x08010bbf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010b94:	4b6f      	ldr	r3, [pc, #444]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b98:	4a6e      	ldr	r2, [pc, #440]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010b9e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8010ba0:	e00e      	b.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f003 f86d 	bl	8013c88 <RCCEx_PLL2_Config>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8010bb4:	e004      	b.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010bbc:	e000      	b.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8010bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010bc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d10d      	bne.n	8010be4 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8010bc8:	4b62      	ldr	r3, [pc, #392]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010bca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010bce:	f023 0203 	bic.w	r2, r3, #3
 8010bd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010bd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010bda:	495e      	ldr	r1, [pc, #376]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8010be2:	e003      	b.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010be4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010be8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	6139      	str	r1, [r7, #16]
 8010bf8:	f003 0304 	and.w	r3, r3, #4
 8010bfc:	617b      	str	r3, [r7, #20]
 8010bfe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010c02:	460b      	mov	r3, r1
 8010c04:	4313      	orrs	r3, r2
 8010c06:	d03a      	beq.n	8010c7e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8010c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010c0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c14:	d00e      	beq.n	8010c34 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8010c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c1a:	d815      	bhi.n	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d017      	beq.n	8010c50 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8010c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c24:	d110      	bne.n	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c26:	4b4b      	ldr	r3, [pc, #300]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010c30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8010c32:	e00e      	b.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010c38:	3308      	adds	r3, #8
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f003 f824 	bl	8013c88 <RCCEx_PLL2_Config>
 8010c40:	4603      	mov	r3, r0
 8010c42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8010c46:	e004      	b.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010c4e:	e000      	b.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8010c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d10d      	bne.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8010c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010c68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010c6c:	4939      	ldr	r1, [pc, #228]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8010c74:	e003      	b.n	8010c7e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010c7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010c7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c86:	2100      	movs	r1, #0
 8010c88:	60b9      	str	r1, [r7, #8]
 8010c8a:	f003 0310 	and.w	r3, r3, #16
 8010c8e:	60fb      	str	r3, [r7, #12]
 8010c90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010c94:	460b      	mov	r3, r1
 8010c96:	4313      	orrs	r3, r2
 8010c98:	d038      	beq.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8010c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010c9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8010ca2:	2b30      	cmp	r3, #48	@ 0x30
 8010ca4:	d01b      	beq.n	8010cde <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8010ca6:	2b30      	cmp	r3, #48	@ 0x30
 8010ca8:	d815      	bhi.n	8010cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8010caa:	2b10      	cmp	r3, #16
 8010cac:	d002      	beq.n	8010cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8010cae:	2b20      	cmp	r3, #32
 8010cb0:	d007      	beq.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8010cb2:	e010      	b.n	8010cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010cb4:	4b27      	ldr	r3, [pc, #156]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cb8:	4a26      	ldr	r2, [pc, #152]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010cbe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8010cc0:	e00e      	b.n	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8010cc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010cc6:	3330      	adds	r3, #48	@ 0x30
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f003 f875 	bl	8013db8 <RCCEx_PLL3_Config>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8010cd4:	e004      	b.n	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010cdc:	e000      	b.n	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8010cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ce0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10d      	bne.n	8010d04 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8010ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010cea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010cee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010cf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010cf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8010cfa:	4916      	ldr	r1, [pc, #88]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010cfc:	4313      	orrs	r3, r2
 8010cfe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8010d02:	e003      	b.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010d08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d14:	2100      	movs	r1, #0
 8010d16:	6039      	str	r1, [r7, #0]
 8010d18:	f003 0308 	and.w	r3, r3, #8
 8010d1c:	607b      	str	r3, [r7, #4]
 8010d1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010d22:	460b      	mov	r3, r1
 8010d24:	4313      	orrs	r3, r2
 8010d26:	d00c      	beq.n	8010d42 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8010d28:	4b0a      	ldr	r3, [pc, #40]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010d2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010d36:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8010d3a:	4906      	ldr	r1, [pc, #24]	@ (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010d3c:	4313      	orrs	r3, r2
 8010d3e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8010d42:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010d52:	bf00      	nop
 8010d54:	44020c00 	.word	0x44020c00

08010d58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b08b      	sub	sp, #44	@ 0x2c
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8010d60:	4bad      	ldr	r3, [pc, #692]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d68:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8010d6a:	4bab      	ldr	r3, [pc, #684]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d6e:	f003 0303 	and.w	r3, r3, #3
 8010d72:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8010d74:	4ba8      	ldr	r3, [pc, #672]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d78:	0a1b      	lsrs	r3, r3, #8
 8010d7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010d7e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8010d80:	4ba5      	ldr	r3, [pc, #660]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d84:	f003 0310 	and.w	r3, r3, #16
 8010d88:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8010d8a:	4ba3      	ldr	r3, [pc, #652]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d8e:	08db      	lsrs	r3, r3, #3
 8010d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d94:	697a      	ldr	r2, [r7, #20]
 8010d96:	fb02 f303 	mul.w	r3, r2, r3
 8010d9a:	ee07 3a90 	vmov	s15, r3
 8010d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010da2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f000 8126 	beq.w	8010ffa <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	2b03      	cmp	r3, #3
 8010db2:	d053      	beq.n	8010e5c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	2b03      	cmp	r3, #3
 8010db8:	d86f      	bhi.n	8010e9a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d003      	beq.n	8010dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d02b      	beq.n	8010e1e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8010dc6:	e068      	b.n	8010e9a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010dc8:	4b93      	ldr	r3, [pc, #588]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	08db      	lsrs	r3, r3, #3
 8010dce:	f003 0303 	and.w	r3, r3, #3
 8010dd2:	4a92      	ldr	r2, [pc, #584]	@ (801101c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8010dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8010dd8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	ee07 3a90 	vmov	s15, r3
 8010de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	ee07 3a90 	vmov	s15, r3
 8010dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010df2:	6a3b      	ldr	r3, [r7, #32]
 8010df4:	ee07 3a90 	vmov	s15, r3
 8010df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010dfc:	ed97 6a04 	vldr	s12, [r7, #16]
 8010e00:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8011020 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8010e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8010e1c:	e068      	b.n	8010ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8010e1e:	69bb      	ldr	r3, [r7, #24]
 8010e20:	ee07 3a90 	vmov	s15, r3
 8010e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e28:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8011024 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8010e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e30:	6a3b      	ldr	r3, [r7, #32]
 8010e32:	ee07 3a90 	vmov	s15, r3
 8010e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8010e3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8011020 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8010e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8010e5a:	e049      	b.n	8010ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	ee07 3a90 	vmov	s15, r3
 8010e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e66:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8011028 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8010e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e6e:	6a3b      	ldr	r3, [r7, #32]
 8010e70:	ee07 3a90 	vmov	s15, r3
 8010e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e78:	ed97 6a04 	vldr	s12, [r7, #16]
 8010e7c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8011020 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8010e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8010e98:	e02a      	b.n	8010ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	08db      	lsrs	r3, r3, #3
 8010ea0:	f003 0303 	and.w	r3, r3, #3
 8010ea4:	4a5d      	ldr	r2, [pc, #372]	@ (801101c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8010ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8010eaa:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	ee07 3a90 	vmov	s15, r3
 8010eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	ee07 3a90 	vmov	s15, r3
 8010ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	ee07 3a90 	vmov	s15, r3
 8010eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ece:	ed97 6a04 	vldr	s12, [r7, #16]
 8010ed2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8011020 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8010ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8010eee:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ef0:	4b49      	ldr	r3, [pc, #292]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010efc:	d121      	bne.n	8010f42 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8010efe:	4b46      	ldr	r3, [pc, #280]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d017      	beq.n	8010f3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8010f0a:	4b43      	ldr	r3, [pc, #268]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f0e:	0a5b      	lsrs	r3, r3, #9
 8010f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f14:	ee07 3a90 	vmov	s15, r3
 8010f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8010f1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f20:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8010f24:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f30:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	601a      	str	r2, [r3, #0]
 8010f38:	e006      	b.n	8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	601a      	str	r2, [r3, #0]
 8010f40:	e002      	b.n	8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2200      	movs	r2, #0
 8010f46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010f48:	4b33      	ldr	r3, [pc, #204]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010f54:	d121      	bne.n	8010f9a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8010f56:	4b30      	ldr	r3, [pc, #192]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d017      	beq.n	8010f92 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8010f62:	4b2d      	ldr	r3, [pc, #180]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f66:	0c1b      	lsrs	r3, r3, #16
 8010f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f6c:	ee07 3a90 	vmov	s15, r3
 8010f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8010f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f78:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8010f7c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f88:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	605a      	str	r2, [r3, #4]
 8010f90:	e006      	b.n	8010fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	605a      	str	r2, [r3, #4]
 8010f98:	e002      	b.n	8010fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010fac:	d121      	bne.n	8010ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8010fae:	4b1a      	ldr	r3, [pc, #104]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d017      	beq.n	8010fea <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8010fba:	4b17      	ldr	r3, [pc, #92]	@ (8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fbe:	0e1b      	lsrs	r3, r3, #24
 8010fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fc4:	ee07 3a90 	vmov	s15, r3
 8010fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8010fcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8010fd4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fe0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010fe8:	e010      	b.n	801100c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2200      	movs	r2, #0
 8010fee:	609a      	str	r2, [r3, #8]
}
 8010ff0:	e00c      	b.n	801100c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	609a      	str	r2, [r3, #8]
}
 8010ff8:	e008      	b.n	801100c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2200      	movs	r2, #0
 8011004:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2200      	movs	r2, #0
 801100a:	609a      	str	r2, [r3, #8]
}
 801100c:	bf00      	nop
 801100e:	372c      	adds	r7, #44	@ 0x2c
 8011010:	46bd      	mov	sp, r7
 8011012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011016:	4770      	bx	lr
 8011018:	44020c00 	.word	0x44020c00
 801101c:	03d09000 	.word	0x03d09000
 8011020:	46000000 	.word	0x46000000
 8011024:	4a742400 	.word	0x4a742400
 8011028:	4bbebc20 	.word	0x4bbebc20

0801102c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 801102c:	b480      	push	{r7}
 801102e:	b08b      	sub	sp, #44	@ 0x2c
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8011034:	4bad      	ldr	r3, [pc, #692]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801103c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 801103e:	4bab      	ldr	r3, [pc, #684]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011042:	f003 0303 	and.w	r3, r3, #3
 8011046:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8011048:	4ba8      	ldr	r3, [pc, #672]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801104a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801104c:	0a1b      	lsrs	r3, r3, #8
 801104e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011052:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8011054:	4ba5      	ldr	r3, [pc, #660]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011058:	f003 0310 	and.w	r3, r3, #16
 801105c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 801105e:	4ba3      	ldr	r3, [pc, #652]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011062:	08db      	lsrs	r3, r3, #3
 8011064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	fb02 f303 	mul.w	r3, r2, r3
 801106e:	ee07 3a90 	vmov	s15, r3
 8011072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011076:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 801107a:	69bb      	ldr	r3, [r7, #24]
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 8126 	beq.w	80112ce <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	2b03      	cmp	r3, #3
 8011086:	d053      	beq.n	8011130 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	2b03      	cmp	r3, #3
 801108c:	d86f      	bhi.n	801116e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	2b01      	cmp	r3, #1
 8011092:	d003      	beq.n	801109c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	2b02      	cmp	r3, #2
 8011098:	d02b      	beq.n	80110f2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 801109a:	e068      	b.n	801116e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801109c:	4b93      	ldr	r3, [pc, #588]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	08db      	lsrs	r3, r3, #3
 80110a2:	f003 0303 	and.w	r3, r3, #3
 80110a6:	4a92      	ldr	r2, [pc, #584]	@ (80112f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80110a8:	fa22 f303 	lsr.w	r3, r2, r3
 80110ac:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	ee07 3a90 	vmov	s15, r3
 80110b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110b8:	69bb      	ldr	r3, [r7, #24]
 80110ba:	ee07 3a90 	vmov	s15, r3
 80110be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110c6:	6a3b      	ldr	r3, [r7, #32]
 80110c8:	ee07 3a90 	vmov	s15, r3
 80110cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80110d4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80112f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80110d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80110e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80110f0:	e068      	b.n	80111c4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	ee07 3a90 	vmov	s15, r3
 80110f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110fc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80112f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8011100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011104:	6a3b      	ldr	r3, [r7, #32]
 8011106:	ee07 3a90 	vmov	s15, r3
 801110a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801110e:	ed97 6a04 	vldr	s12, [r7, #16]
 8011112:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80112f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8011116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801111a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801111e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801112a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 801112e:	e049      	b.n	80111c4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	ee07 3a90 	vmov	s15, r3
 8011136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801113a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80112fc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 801113e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011142:	6a3b      	ldr	r3, [r7, #32]
 8011144:	ee07 3a90 	vmov	s15, r3
 8011148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801114c:	ed97 6a04 	vldr	s12, [r7, #16]
 8011150:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80112f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8011154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801115c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011168:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 801116c:	e02a      	b.n	80111c4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801116e:	4b5f      	ldr	r3, [pc, #380]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	08db      	lsrs	r3, r3, #3
 8011174:	f003 0303 	and.w	r3, r3, #3
 8011178:	4a5d      	ldr	r2, [pc, #372]	@ (80112f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 801117a:	fa22 f303 	lsr.w	r3, r2, r3
 801117e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	ee07 3a90 	vmov	s15, r3
 8011186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	ee07 3a90 	vmov	s15, r3
 8011190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011198:	6a3b      	ldr	r3, [r7, #32]
 801119a:	ee07 3a90 	vmov	s15, r3
 801119e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80111a6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80112f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80111aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80111b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80111c2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80111c4:	4b49      	ldr	r3, [pc, #292]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80111cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80111d0:	d121      	bne.n	8011216 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80111d2:	4b46      	ldr	r3, [pc, #280]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80111d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d017      	beq.n	801120e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80111de:	4b43      	ldr	r3, [pc, #268]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80111e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111e2:	0a5b      	lsrs	r3, r3, #9
 80111e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111e8:	ee07 3a90 	vmov	s15, r3
 80111ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80111f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80111f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80111f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80111fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011204:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	601a      	str	r2, [r3, #0]
 801120c:	e006      	b.n	801121c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2200      	movs	r2, #0
 8011212:	601a      	str	r2, [r3, #0]
 8011214:	e002      	b.n	801121c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801121c:	4b33      	ldr	r3, [pc, #204]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011228:	d121      	bne.n	801126e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 801122a:	4b30      	ldr	r3, [pc, #192]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801122c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011232:	2b00      	cmp	r3, #0
 8011234:	d017      	beq.n	8011266 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8011236:	4b2d      	ldr	r3, [pc, #180]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801123a:	0c1b      	lsrs	r3, r3, #16
 801123c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011240:	ee07 3a90 	vmov	s15, r3
 8011244:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8011248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801124c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8011250:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801125c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	605a      	str	r2, [r3, #4]
 8011264:	e006      	b.n	8011274 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	605a      	str	r2, [r3, #4]
 801126c:	e002      	b.n	8011274 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2200      	movs	r2, #0
 8011272:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011274:	4b1d      	ldr	r3, [pc, #116]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801127c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011280:	d121      	bne.n	80112c6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8011282:	4b1a      	ldr	r3, [pc, #104]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801128a:	2b00      	cmp	r3, #0
 801128c:	d017      	beq.n	80112be <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801128e:	4b17      	ldr	r3, [pc, #92]	@ (80112ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8011290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011292:	0e1b      	lsrs	r3, r3, #24
 8011294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011298:	ee07 3a90 	vmov	s15, r3
 801129c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80112a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80112a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80112a8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80112ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112b4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80112bc:	e010      	b.n	80112e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	609a      	str	r2, [r3, #8]
}
 80112c4:	e00c      	b.n	80112e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2200      	movs	r2, #0
 80112ca:	609a      	str	r2, [r3, #8]
}
 80112cc:	e008      	b.n	80112e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2200      	movs	r2, #0
 80112d2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2200      	movs	r2, #0
 80112de:	609a      	str	r2, [r3, #8]
}
 80112e0:	bf00      	nop
 80112e2:	372c      	adds	r7, #44	@ 0x2c
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr
 80112ec:	44020c00 	.word	0x44020c00
 80112f0:	03d09000 	.word	0x03d09000
 80112f4:	46000000 	.word	0x46000000
 80112f8:	4a742400 	.word	0x4a742400
 80112fc:	4bbebc20 	.word	0x4bbebc20

08011300 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8011300:	b480      	push	{r7}
 8011302:	b08b      	sub	sp, #44	@ 0x2c
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8011308:	4bad      	ldr	r3, [pc, #692]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801130c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011310:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8011312:	4bab      	ldr	r3, [pc, #684]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8011314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011316:	f003 0303 	and.w	r3, r3, #3
 801131a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 801131c:	4ba8      	ldr	r3, [pc, #672]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011320:	0a1b      	lsrs	r3, r3, #8
 8011322:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011326:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8011328:	4ba5      	ldr	r3, [pc, #660]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801132c:	f003 0310 	and.w	r3, r3, #16
 8011330:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8011332:	4ba3      	ldr	r3, [pc, #652]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8011334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011336:	08db      	lsrs	r3, r3, #3
 8011338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801133c:	697a      	ldr	r2, [r7, #20]
 801133e:	fb02 f303 	mul.w	r3, r2, r3
 8011342:	ee07 3a90 	vmov	s15, r3
 8011346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801134a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	2b00      	cmp	r3, #0
 8011352:	f000 8126 	beq.w	80115a2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	2b03      	cmp	r3, #3
 801135a:	d053      	beq.n	8011404 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	2b03      	cmp	r3, #3
 8011360:	d86f      	bhi.n	8011442 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	2b01      	cmp	r3, #1
 8011366:	d003      	beq.n	8011370 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	2b02      	cmp	r3, #2
 801136c:	d02b      	beq.n	80113c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 801136e:	e068      	b.n	8011442 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011370:	4b93      	ldr	r3, [pc, #588]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	08db      	lsrs	r3, r3, #3
 8011376:	f003 0303 	and.w	r3, r3, #3
 801137a:	4a92      	ldr	r2, [pc, #584]	@ (80115c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 801137c:	fa22 f303 	lsr.w	r3, r2, r3
 8011380:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	ee07 3a90 	vmov	s15, r3
 8011388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	ee07 3a90 	vmov	s15, r3
 8011392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801139a:	6a3b      	ldr	r3, [r7, #32]
 801139c:	ee07 3a90 	vmov	s15, r3
 80113a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80113a8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80115c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80113ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80113b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80113c4:	e068      	b.n	8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	ee07 3a90 	vmov	s15, r3
 80113cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113d0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80115cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80113d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	ee07 3a90 	vmov	s15, r3
 80113de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80113e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80115c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80113ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80113f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8011402:	e049      	b.n	8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	ee07 3a90 	vmov	s15, r3
 801140a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801140e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80115d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8011412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011416:	6a3b      	ldr	r3, [r7, #32]
 8011418:	ee07 3a90 	vmov	s15, r3
 801141c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011420:	ed97 6a04 	vldr	s12, [r7, #16]
 8011424:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80115c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8011428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801142c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011430:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011438:	ee67 7a27 	vmul.f32	s15, s14, s15
 801143c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8011440:	e02a      	b.n	8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011442:	4b5f      	ldr	r3, [pc, #380]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	08db      	lsrs	r3, r3, #3
 8011448:	f003 0303 	and.w	r3, r3, #3
 801144c:	4a5d      	ldr	r2, [pc, #372]	@ (80115c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 801144e:	fa22 f303 	lsr.w	r3, r2, r3
 8011452:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	ee07 3a90 	vmov	s15, r3
 801145a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	ee07 3a90 	vmov	s15, r3
 8011464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801146c:	6a3b      	ldr	r3, [r7, #32]
 801146e:	ee07 3a90 	vmov	s15, r3
 8011472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011476:	ed97 6a04 	vldr	s12, [r7, #16]
 801147a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80115c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 801147e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801148a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011492:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8011496:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011498:	4b49      	ldr	r3, [pc, #292]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80114a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80114a4:	d121      	bne.n	80114ea <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80114a6:	4b46      	ldr	r3, [pc, #280]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80114a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d017      	beq.n	80114e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80114b2:	4b43      	ldr	r3, [pc, #268]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80114b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114b6:	0a5b      	lsrs	r3, r3, #9
 80114b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80114bc:	ee07 3a90 	vmov	s15, r3
 80114c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80114c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80114c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80114cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80114d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114d8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	601a      	str	r2, [r3, #0]
 80114e0:	e006      	b.n	80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	601a      	str	r2, [r3, #0]
 80114e8:	e002      	b.n	80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2200      	movs	r2, #0
 80114ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80114f0:	4b33      	ldr	r3, [pc, #204]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80114f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80114fc:	d121      	bne.n	8011542 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80114fe:	4b30      	ldr	r3, [pc, #192]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8011500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011506:	2b00      	cmp	r3, #0
 8011508:	d017      	beq.n	801153a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801150a:	4b2d      	ldr	r3, [pc, #180]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801150e:	0c1b      	lsrs	r3, r3, #16
 8011510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011514:	ee07 3a90 	vmov	s15, r3
 8011518:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 801151c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011520:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8011524:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011530:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	605a      	str	r2, [r3, #4]
 8011538:	e006      	b.n	8011548 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2200      	movs	r2, #0
 801153e:	605a      	str	r2, [r3, #4]
 8011540:	e002      	b.n	8011548 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2200      	movs	r2, #0
 8011546:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011548:	4b1d      	ldr	r3, [pc, #116]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011554:	d121      	bne.n	801159a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8011556:	4b1a      	ldr	r3, [pc, #104]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8011558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801155a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801155e:	2b00      	cmp	r3, #0
 8011560:	d017      	beq.n	8011592 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8011562:	4b17      	ldr	r3, [pc, #92]	@ (80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8011564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011566:	0e1b      	lsrs	r3, r3, #24
 8011568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801156c:	ee07 3a90 	vmov	s15, r3
 8011570:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8011574:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011578:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 801157c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011588:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8011590:	e010      	b.n	80115b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2200      	movs	r2, #0
 8011596:	609a      	str	r2, [r3, #8]
}
 8011598:	e00c      	b.n	80115b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	609a      	str	r2, [r3, #8]
}
 80115a0:	e008      	b.n	80115b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2200      	movs	r2, #0
 80115ac:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2200      	movs	r2, #0
 80115b2:	609a      	str	r2, [r3, #8]
}
 80115b4:	bf00      	nop
 80115b6:	372c      	adds	r7, #44	@ 0x2c
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr
 80115c0:	44020c00 	.word	0x44020c00
 80115c4:	03d09000 	.word	0x03d09000
 80115c8:	46000000 	.word	0x46000000
 80115cc:	4a742400 	.word	0x4a742400
 80115d0:	4bbebc20 	.word	0x4bbebc20

080115d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80115d4:	b590      	push	{r4, r7, lr}
 80115d6:	b08f      	sub	sp, #60	@ 0x3c
 80115d8:	af00      	add	r7, sp, #0
 80115da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80115de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80115e2:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80115e6:	4321      	orrs	r1, r4
 80115e8:	d150      	bne.n	801168c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80115ea:	4b26      	ldr	r3, [pc, #152]	@ (8011684 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80115ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80115f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80115f4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80115f6:	4b23      	ldr	r3, [pc, #140]	@ (8011684 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80115f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80115fc:	f003 0302 	and.w	r3, r3, #2
 8011600:	2b02      	cmp	r3, #2
 8011602:	d108      	bne.n	8011616 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8011604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801160a:	d104      	bne.n	8011616 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 801160c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011610:	637b      	str	r3, [r7, #52]	@ 0x34
 8011612:	f002 bb2a 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8011616:	4b1b      	ldr	r3, [pc, #108]	@ (8011684 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8011618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801161c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011624:	d108      	bne.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8011626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801162c:	d104      	bne.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 801162e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8011632:	637b      	str	r3, [r7, #52]	@ 0x34
 8011634:	f002 bb19 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8011638:	4b12      	ldr	r3, [pc, #72]	@ (8011684 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011644:	d119      	bne.n	801167a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8011646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801164c:	d115      	bne.n	801167a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 801164e:	4b0d      	ldr	r3, [pc, #52]	@ (8011684 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8011650:	69db      	ldr	r3, [r3, #28]
 8011652:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8011656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801165a:	d30a      	bcc.n	8011672 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 801165c:	4b09      	ldr	r3, [pc, #36]	@ (8011684 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801165e:	69db      	ldr	r3, [r3, #28]
 8011660:	0a1b      	lsrs	r3, r3, #8
 8011662:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011666:	4a08      	ldr	r2, [pc, #32]	@ (8011688 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8011668:	fbb2 f3f3 	udiv	r3, r2, r3
 801166c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 801166e:	f002 bafc 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8011672:	2300      	movs	r3, #0
 8011674:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8011676:	f002 baf8 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 801167a:	2300      	movs	r3, #0
 801167c:	637b      	str	r3, [r7, #52]	@ 0x34
 801167e:	f002 baf4 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011682:	bf00      	nop
 8011684:	44020c00 	.word	0x44020c00
 8011688:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 801168c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011690:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8011694:	ea50 0104 	orrs.w	r1, r0, r4
 8011698:	f001 8275 	beq.w	8012b86 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 801169c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116a0:	2801      	cmp	r0, #1
 80116a2:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80116a6:	f082 82dd 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80116aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116ae:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80116b2:	ea50 0104 	orrs.w	r1, r0, r4
 80116b6:	f001 816c 	beq.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80116ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116be:	2801      	cmp	r0, #1
 80116c0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80116c4:	f082 82ce 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80116c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116cc:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80116d0:	ea50 0104 	orrs.w	r1, r0, r4
 80116d4:	f001 8602 	beq.w	80132dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80116d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116dc:	2801      	cmp	r0, #1
 80116de:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80116e2:	f082 82bf 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80116e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116ea:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80116ee:	ea50 0104 	orrs.w	r1, r0, r4
 80116f2:	f001 854c 	beq.w	801318e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80116f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116fa:	2801      	cmp	r0, #1
 80116fc:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8011700:	f082 82b0 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011708:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 801170c:	ea50 0104 	orrs.w	r1, r0, r4
 8011710:	f001 849e 	beq.w	8013050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8011714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011718:	2801      	cmp	r0, #1
 801171a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 801171e:	f082 82a1 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011726:	f1a1 0420 	sub.w	r4, r1, #32
 801172a:	ea50 0104 	orrs.w	r1, r0, r4
 801172e:	f001 83e8 	beq.w	8012f02 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8011732:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011736:	2801      	cmp	r0, #1
 8011738:	f171 0120 	sbcs.w	r1, r1, #32
 801173c:	f082 8292 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011744:	f1a1 0410 	sub.w	r4, r1, #16
 8011748:	ea50 0104 	orrs.w	r1, r0, r4
 801174c:	f002 8256 	beq.w	8013bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8011750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011754:	2801      	cmp	r0, #1
 8011756:	f171 0110 	sbcs.w	r1, r1, #16
 801175a:	f082 8283 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801175e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011762:	f1a1 0408 	sub.w	r4, r1, #8
 8011766:	ea50 0104 	orrs.w	r1, r0, r4
 801176a:	f002 81cc 	beq.w	8013b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 801176e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011772:	2801      	cmp	r0, #1
 8011774:	f171 0108 	sbcs.w	r1, r1, #8
 8011778:	f082 8274 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801177c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011780:	1f0c      	subs	r4, r1, #4
 8011782:	ea50 0104 	orrs.w	r1, r0, r4
 8011786:	f001 8648 	beq.w	801341a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 801178a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801178e:	2801      	cmp	r0, #1
 8011790:	f171 0104 	sbcs.w	r1, r1, #4
 8011794:	f082 8266 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011798:	e9d7 0100 	ldrd	r0, r1, [r7]
 801179c:	1e8c      	subs	r4, r1, #2
 801179e:	ea50 0104 	orrs.w	r1, r0, r4
 80117a2:	f002 8143 	beq.w	8013a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80117a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117aa:	2801      	cmp	r0, #1
 80117ac:	f171 0102 	sbcs.w	r1, r1, #2
 80117b0:	f082 8258 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80117b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117b8:	1e4c      	subs	r4, r1, #1
 80117ba:	ea50 0104 	orrs.w	r1, r0, r4
 80117be:	f002 80ce 	beq.w	801395e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80117c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117c6:	2801      	cmp	r0, #1
 80117c8:	f171 0101 	sbcs.w	r1, r1, #1
 80117cc:	f082 824a 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80117d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117d4:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80117d8:	4321      	orrs	r1, r4
 80117da:	f002 8059 	beq.w	8013890 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80117de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117e2:	4cd9      	ldr	r4, [pc, #868]	@ (8011b48 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80117e4:	42a0      	cmp	r0, r4
 80117e6:	f171 0100 	sbcs.w	r1, r1, #0
 80117ea:	f082 823b 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80117ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117f2:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80117f6:	4321      	orrs	r1, r4
 80117f8:	f001 87d9 	beq.w	80137ae <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80117fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011800:	4cd2      	ldr	r4, [pc, #840]	@ (8011b4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8011802:	42a0      	cmp	r0, r4
 8011804:	f171 0100 	sbcs.w	r1, r1, #0
 8011808:	f082 822c 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801180c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011810:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8011814:	4321      	orrs	r1, r4
 8011816:	f001 8751 	beq.w	80136bc <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 801181a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801181e:	4ccc      	ldr	r4, [pc, #816]	@ (8011b50 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8011820:	42a0      	cmp	r0, r4
 8011822:	f171 0100 	sbcs.w	r1, r1, #0
 8011826:	f082 821d 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801182a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801182e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8011832:	4321      	orrs	r1, r4
 8011834:	f001 869a 	beq.w	801356c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8011838:	e9d7 0100 	ldrd	r0, r1, [r7]
 801183c:	4cc5      	ldr	r4, [pc, #788]	@ (8011b54 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 801183e:	42a0      	cmp	r0, r4
 8011840:	f171 0100 	sbcs.w	r1, r1, #0
 8011844:	f082 820e 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011848:	e9d7 0100 	ldrd	r0, r1, [r7]
 801184c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8011850:	4321      	orrs	r1, r4
 8011852:	f001 8612 	beq.w	801347a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8011856:	e9d7 0100 	ldrd	r0, r1, [r7]
 801185a:	4cbf      	ldr	r4, [pc, #764]	@ (8011b58 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 801185c:	42a0      	cmp	r0, r4
 801185e:	f171 0100 	sbcs.w	r1, r1, #0
 8011862:	f082 81ff 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011866:	e9d7 0100 	ldrd	r0, r1, [r7]
 801186a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 801186e:	4321      	orrs	r1, r4
 8011870:	f002 817e 	beq.w	8013b70 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8011874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011878:	4cb8      	ldr	r4, [pc, #736]	@ (8011b5c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 801187a:	42a0      	cmp	r0, r4
 801187c:	f171 0100 	sbcs.w	r1, r1, #0
 8011880:	f082 81f0 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011888:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 801188c:	4321      	orrs	r1, r4
 801188e:	f000 829e 	beq.w	8011dce <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8011892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011896:	4cb2      	ldr	r4, [pc, #712]	@ (8011b60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011898:	42a0      	cmp	r0, r4
 801189a:	f171 0100 	sbcs.w	r1, r1, #0
 801189e:	f082 81e1 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80118a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118a6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80118aa:	4321      	orrs	r1, r4
 80118ac:	f000 826d 	beq.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80118b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118b4:	4cab      	ldr	r4, [pc, #684]	@ (8011b64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80118b6:	42a0      	cmp	r0, r4
 80118b8:	f171 0100 	sbcs.w	r1, r1, #0
 80118bc:	f082 81d2 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80118c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118c4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80118c8:	4321      	orrs	r1, r4
 80118ca:	f001 800d 	beq.w	80128e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80118ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118d2:	4ca5      	ldr	r4, [pc, #660]	@ (8011b68 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80118d4:	42a0      	cmp	r0, r4
 80118d6:	f171 0100 	sbcs.w	r1, r1, #0
 80118da:	f082 81c3 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80118de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118e2:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80118e6:	4321      	orrs	r1, r4
 80118e8:	f000 81d0 	beq.w	8011c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80118ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118f0:	4c9e      	ldr	r4, [pc, #632]	@ (8011b6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80118f2:	42a0      	cmp	r0, r4
 80118f4:	f171 0100 	sbcs.w	r1, r1, #0
 80118f8:	f082 81b4 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80118fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011900:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8011904:	4321      	orrs	r1, r4
 8011906:	f000 8142 	beq.w	8011b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 801190a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801190e:	4c98      	ldr	r4, [pc, #608]	@ (8011b70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8011910:	42a0      	cmp	r0, r4
 8011912:	f171 0100 	sbcs.w	r1, r1, #0
 8011916:	f082 81a5 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801191a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801191e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8011922:	4321      	orrs	r1, r4
 8011924:	f001 824e 	beq.w	8012dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8011928:	e9d7 0100 	ldrd	r0, r1, [r7]
 801192c:	4c91      	ldr	r4, [pc, #580]	@ (8011b74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 801192e:	42a0      	cmp	r0, r4
 8011930:	f171 0100 	sbcs.w	r1, r1, #0
 8011934:	f082 8196 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011938:	e9d7 0100 	ldrd	r0, r1, [r7]
 801193c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8011940:	4321      	orrs	r1, r4
 8011942:	f001 8197 	beq.w	8012c74 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8011946:	e9d7 0100 	ldrd	r0, r1, [r7]
 801194a:	4c8b      	ldr	r4, [pc, #556]	@ (8011b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 801194c:	42a0      	cmp	r0, r4
 801194e:	f171 0100 	sbcs.w	r1, r1, #0
 8011952:	f082 8187 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011956:	e9d7 0100 	ldrd	r0, r1, [r7]
 801195a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 801195e:	4321      	orrs	r1, r4
 8011960:	f001 8154 	beq.w	8012c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8011964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011968:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 801196c:	f171 0100 	sbcs.w	r1, r1, #0
 8011970:	f082 8178 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011978:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 801197c:	4321      	orrs	r1, r4
 801197e:	f001 80b7 	beq.w	8012af0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8011982:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011986:	f248 0401 	movw	r4, #32769	@ 0x8001
 801198a:	42a0      	cmp	r0, r4
 801198c:	f171 0100 	sbcs.w	r1, r1, #0
 8011990:	f082 8168 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011998:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 801199c:	4321      	orrs	r1, r4
 801199e:	f001 8064 	beq.w	8012a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80119a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119a6:	f244 0401 	movw	r4, #16385	@ 0x4001
 80119aa:	42a0      	cmp	r0, r4
 80119ac:	f171 0100 	sbcs.w	r1, r1, #0
 80119b0:	f082 8158 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80119b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119b8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80119bc:	4321      	orrs	r1, r4
 80119be:	f001 8011 	beq.w	80129e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80119c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119c6:	f242 0401 	movw	r4, #8193	@ 0x2001
 80119ca:	42a0      	cmp	r0, r4
 80119cc:	f171 0100 	sbcs.w	r1, r1, #0
 80119d0:	f082 8148 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80119d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119d8:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80119dc:	4321      	orrs	r1, r4
 80119de:	f000 871e 	beq.w	801281e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80119e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119e6:	f241 0401 	movw	r4, #4097	@ 0x1001
 80119ea:	42a0      	cmp	r0, r4
 80119ec:	f171 0100 	sbcs.w	r1, r1, #0
 80119f0:	f082 8138 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80119f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119f8:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80119fc:	4321      	orrs	r1, r4
 80119fe:	f000 86a8 	beq.w	8012752 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8011a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a06:	f640 0401 	movw	r4, #2049	@ 0x801
 8011a0a:	42a0      	cmp	r0, r4
 8011a0c:	f171 0100 	sbcs.w	r1, r1, #0
 8011a10:	f082 8128 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011a14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a18:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8011a1c:	4321      	orrs	r1, r4
 8011a1e:	f000 8632 	beq.w	8012686 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8011a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a26:	f240 4401 	movw	r4, #1025	@ 0x401
 8011a2a:	42a0      	cmp	r0, r4
 8011a2c:	f171 0100 	sbcs.w	r1, r1, #0
 8011a30:	f082 8118 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a38:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8011a3c:	4321      	orrs	r1, r4
 8011a3e:	f000 85b0 	beq.w	80125a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8011a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a46:	f240 2401 	movw	r4, #513	@ 0x201
 8011a4a:	42a0      	cmp	r0, r4
 8011a4c:	f171 0100 	sbcs.w	r1, r1, #0
 8011a50:	f082 8108 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a58:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8011a5c:	4321      	orrs	r1, r4
 8011a5e:	f000 8535 	beq.w	80124cc <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8011a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a66:	f240 1401 	movw	r4, #257	@ 0x101
 8011a6a:	42a0      	cmp	r0, r4
 8011a6c:	f171 0100 	sbcs.w	r1, r1, #0
 8011a70:	f082 80f8 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a78:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8011a7c:	4321      	orrs	r1, r4
 8011a7e:	f000 84ba 	beq.w	80123f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8011a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a86:	2881      	cmp	r0, #129	@ 0x81
 8011a88:	f171 0100 	sbcs.w	r1, r1, #0
 8011a8c:	f082 80ea 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a94:	2821      	cmp	r0, #33	@ 0x21
 8011a96:	f171 0100 	sbcs.w	r1, r1, #0
 8011a9a:	d26f      	bcs.n	8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8011a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011aa0:	4301      	orrs	r1, r0
 8011aa2:	f002 80df 	beq.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011aaa:	1e42      	subs	r2, r0, #1
 8011aac:	f141 33ff 	adc.w	r3, r1, #4294967295
 8011ab0:	2a20      	cmp	r2, #32
 8011ab2:	f173 0100 	sbcs.w	r1, r3, #0
 8011ab6:	f082 80d5 	bcs.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011aba:	2a1f      	cmp	r2, #31
 8011abc:	f202 80d2 	bhi.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8011ac0:	a101      	add	r1, pc, #4	@ (adr r1, 8011ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8011ac2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011ac6:	bf00      	nop
 8011ac8:	08011e29 	.word	0x08011e29
 8011acc:	08011ef5 	.word	0x08011ef5
 8011ad0:	08013c65 	.word	0x08013c65
 8011ad4:	08011fb5 	.word	0x08011fb5
 8011ad8:	08013c65 	.word	0x08013c65
 8011adc:	08013c65 	.word	0x08013c65
 8011ae0:	08013c65 	.word	0x08013c65
 8011ae4:	08012085 	.word	0x08012085
 8011ae8:	08013c65 	.word	0x08013c65
 8011aec:	08013c65 	.word	0x08013c65
 8011af0:	08013c65 	.word	0x08013c65
 8011af4:	08013c65 	.word	0x08013c65
 8011af8:	08013c65 	.word	0x08013c65
 8011afc:	08013c65 	.word	0x08013c65
 8011b00:	08013c65 	.word	0x08013c65
 8011b04:	08012167 	.word	0x08012167
 8011b08:	08013c65 	.word	0x08013c65
 8011b0c:	08013c65 	.word	0x08013c65
 8011b10:	08013c65 	.word	0x08013c65
 8011b14:	08013c65 	.word	0x08013c65
 8011b18:	08013c65 	.word	0x08013c65
 8011b1c:	08013c65 	.word	0x08013c65
 8011b20:	08013c65 	.word	0x08013c65
 8011b24:	08013c65 	.word	0x08013c65
 8011b28:	08013c65 	.word	0x08013c65
 8011b2c:	08013c65 	.word	0x08013c65
 8011b30:	08013c65 	.word	0x08013c65
 8011b34:	08013c65 	.word	0x08013c65
 8011b38:	08013c65 	.word	0x08013c65
 8011b3c:	08013c65 	.word	0x08013c65
 8011b40:	08013c65 	.word	0x08013c65
 8011b44:	0801223d 	.word	0x0801223d
 8011b48:	80000001 	.word	0x80000001
 8011b4c:	40000001 	.word	0x40000001
 8011b50:	20000001 	.word	0x20000001
 8011b54:	10000001 	.word	0x10000001
 8011b58:	08000001 	.word	0x08000001
 8011b5c:	04000001 	.word	0x04000001
 8011b60:	00800001 	.word	0x00800001
 8011b64:	00400001 	.word	0x00400001
 8011b68:	00200001 	.word	0x00200001
 8011b6c:	00100001 	.word	0x00100001
 8011b70:	00080001 	.word	0x00080001
 8011b74:	00040001 	.word	0x00040001
 8011b78:	00020001 	.word	0x00020001
 8011b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b80:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8011b84:	430b      	orrs	r3, r1
 8011b86:	f000 83c4 	beq.w	8012312 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8011b8a:	f002 b86b 	b.w	8013c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8011b8e:	4ba1      	ldr	r3, [pc, #644]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011b94:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8011b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011ba0:	d036      	beq.n	8011c10 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ba4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011ba8:	d86b      	bhi.n	8011c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8011baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011bb0:	d02b      	beq.n	8011c0a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8011bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011bb8:	d863      	bhi.n	8011c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8011bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011bc0:	d01b      	beq.n	8011bfa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011bc8:	d85b      	bhi.n	8011c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8011bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d004      	beq.n	8011bda <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011bd6:	d008      	beq.n	8011bea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8011bd8:	e053      	b.n	8011c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011bda:	f107 0320 	add.w	r3, r7, #32
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff f8ba 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8011be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011be8:	e04e      	b.n	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011bea:	f107 0314 	add.w	r3, r7, #20
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ff fa1c 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011bf8:	e046      	b.n	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011bfa:	f107 0308 	add.w	r3, r7, #8
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7ff fb7e 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011c08:	e03e      	b.n	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011c0a:	4b83      	ldr	r3, [pc, #524]	@ (8011e18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8011c0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011c0e:	e03b      	b.n	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011c10:	4b80      	ldr	r3, [pc, #512]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011c16:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011c1c:	4b7d      	ldr	r3, [pc, #500]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f003 0302 	and.w	r3, r3, #2
 8011c24:	2b02      	cmp	r3, #2
 8011c26:	d10c      	bne.n	8011c42 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8011c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d109      	bne.n	8011c42 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011c2e:	4b79      	ldr	r3, [pc, #484]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	08db      	lsrs	r3, r3, #3
 8011c34:	f003 0303 	and.w	r3, r3, #3
 8011c38:	4a78      	ldr	r2, [pc, #480]	@ (8011e1c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8011c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8011c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c40:	e01e      	b.n	8011c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011c42:	4b74      	ldr	r3, [pc, #464]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c4e:	d106      	bne.n	8011c5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c56:	d102      	bne.n	8011c5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011c58:	4b71      	ldr	r3, [pc, #452]	@ (8011e20 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8011c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c5c:	e010      	b.n	8011c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011c6a:	d106      	bne.n	8011c7a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8011c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011c72:	d102      	bne.n	8011c7a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8011c74:	4b6b      	ldr	r3, [pc, #428]	@ (8011e24 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8011c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c78:	e002      	b.n	8011c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8011c7e:	e003      	b.n	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8011c80:	e002      	b.n	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8011c82:	2300      	movs	r3, #0
 8011c84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011c86:	bf00      	nop
          }
        }
        break;
 8011c88:	f001 bfef 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8011c8c:	4b61      	ldr	r3, [pc, #388]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011c92:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8011c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011c9e:	d036      	beq.n	8011d0e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8011ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011ca6:	d86b      	bhi.n	8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8011ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011caa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8011cae:	d02b      	beq.n	8011d08 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8011cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cb2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8011cb6:	d863      	bhi.n	8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8011cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011cbe:	d01b      	beq.n	8011cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8011cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011cc6:	d85b      	bhi.n	8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8011cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d004      	beq.n	8011cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8011cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8011cd4:	d008      	beq.n	8011ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8011cd6:	e053      	b.n	8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011cd8:	f107 0320 	add.w	r3, r7, #32
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff f83b 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011ce6:	e04e      	b.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011ce8:	f107 0314 	add.w	r3, r7, #20
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7ff f99d 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011cf6:	e046      	b.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cf8:	f107 0308 	add.w	r3, r7, #8
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7ff faff 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011d06:	e03e      	b.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011d08:	4b43      	ldr	r3, [pc, #268]	@ (8011e18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8011d0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011d0c:	e03b      	b.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011d0e:	4b41      	ldr	r3, [pc, #260]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011d14:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f003 0302 	and.w	r3, r3, #2
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	d10c      	bne.n	8011d40 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8011d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d109      	bne.n	8011d40 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011d2c:	4b39      	ldr	r3, [pc, #228]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	08db      	lsrs	r3, r3, #3
 8011d32:	f003 0303 	and.w	r3, r3, #3
 8011d36:	4a39      	ldr	r2, [pc, #228]	@ (8011e1c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8011d38:	fa22 f303 	lsr.w	r3, r2, r3
 8011d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d3e:	e01e      	b.n	8011d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011d40:	4b34      	ldr	r3, [pc, #208]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d4c:	d106      	bne.n	8011d5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8011d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d54:	d102      	bne.n	8011d5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011d56:	4b32      	ldr	r3, [pc, #200]	@ (8011e20 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8011d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d5a:	e010      	b.n	8011d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011d68:	d106      	bne.n	8011d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8011d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011d70:	d102      	bne.n	8011d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8011d72:	4b2c      	ldr	r3, [pc, #176]	@ (8011e24 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8011d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d76:	e002      	b.n	8011d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8011d7c:	e003      	b.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8011d7e:	e002      	b.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8011d80:	2300      	movs	r3, #0
 8011d82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011d84:	bf00      	nop
          }
        }
        break;
 8011d86:	f001 bf70 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8011d8a:	4b22      	ldr	r3, [pc, #136]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011d8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d94:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8011d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d108      	bne.n	8011dae <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011d9c:	f107 0320 	add.w	r3, r7, #32
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fe ffd9 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011da8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8011daa:	f001 bf5e 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8011dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db0:	2b40      	cmp	r3, #64	@ 0x40
 8011db2:	d108      	bne.n	8011dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011db4:	f107 0314 	add.w	r3, r7, #20
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7ff f937 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011dbe:	69fb      	ldr	r3, [r7, #28]
 8011dc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011dc2:	f001 bf52 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011dca:	f001 bf4e 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8011dce:	4b11      	ldr	r3, [pc, #68]	@ (8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011dd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011dd8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8011dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d108      	bne.n	8011df2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011de0:	f107 0320 	add.w	r3, r7, #32
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7fe ffb7 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8011dee:	f001 bf3c 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8011df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011df4:	2b80      	cmp	r3, #128	@ 0x80
 8011df6:	d108      	bne.n	8011e0a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011df8:	f107 0314 	add.w	r3, r7, #20
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7ff f915 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011e06:	f001 bf30 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011e0e:	f001 bf2c 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011e12:	bf00      	nop
 8011e14:	44020c00 	.word	0x44020c00
 8011e18:	00bb8000 	.word	0x00bb8000
 8011e1c:	03d09000 	.word	0x03d09000
 8011e20:	003d0900 	.word	0x003d0900
 8011e24:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8011e28:	4b9d      	ldr	r3, [pc, #628]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011e2e:	f003 0307 	and.w	r3, r3, #7
 8011e32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8011e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d104      	bne.n	8011e44 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8011e3a:	f7fc ff9f 	bl	800ed7c <HAL_RCC_GetPCLK2Freq>
 8011e3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8011e40:	f001 bf13 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8011e44:	4b96      	ldr	r3, [pc, #600]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011e50:	d10a      	bne.n	8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8011e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d107      	bne.n	8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e58:	f107 0314 	add.w	r3, r7, #20
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7ff f8e5 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e66:	e043      	b.n	8011ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8011e68:	4b8d      	ldr	r3, [pc, #564]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e74:	d10a      	bne.n	8011e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8011e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	d107      	bne.n	8011e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e7c:	f107 0308 	add.w	r3, r7, #8
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7ff fa3d 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e8a:	e031      	b.n	8011ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8011e8c:	4b84      	ldr	r3, [pc, #528]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f003 0302 	and.w	r3, r3, #2
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	d10c      	bne.n	8011eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8011e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e9a:	2b03      	cmp	r3, #3
 8011e9c:	d109      	bne.n	8011eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011e9e:	4b80      	ldr	r3, [pc, #512]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	08db      	lsrs	r3, r3, #3
 8011ea4:	f003 0303 	and.w	r3, r3, #3
 8011ea8:	4a7e      	ldr	r2, [pc, #504]	@ (80120a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8011eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8011eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8011eb0:	e01e      	b.n	8011ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8011eb2:	4b7b      	ldr	r3, [pc, #492]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ebe:	d105      	bne.n	8011ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8011ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec2:	2b04      	cmp	r3, #4
 8011ec4:	d102      	bne.n	8011ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8011ec6:	4b78      	ldr	r3, [pc, #480]	@ (80120a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8011ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011eca:	e011      	b.n	8011ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8011ecc:	4b74      	ldr	r3, [pc, #464]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011ed2:	f003 0302 	and.w	r3, r3, #2
 8011ed6:	2b02      	cmp	r3, #2
 8011ed8:	d106      	bne.n	8011ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8011eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011edc:	2b05      	cmp	r3, #5
 8011ede:	d103      	bne.n	8011ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8011ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ee6:	e003      	b.n	8011ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011eec:	f001 bebd 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011ef0:	f001 bebb 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8011ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011efe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8011f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d104      	bne.n	8011f10 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011f06:	f7fc ff23 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8011f0a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8011f0c:	f001 bead 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8011f10:	4b63      	ldr	r3, [pc, #396]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011f1c:	d10a      	bne.n	8011f34 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f20:	2b08      	cmp	r3, #8
 8011f22:	d107      	bne.n	8011f34 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011f24:	f107 0314 	add.w	r3, r7, #20
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7ff f87f 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f32:	e03d      	b.n	8011fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8011f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f36:	2b10      	cmp	r3, #16
 8011f38:	d108      	bne.n	8011f4c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011f3a:	f107 0308 	add.w	r3, r7, #8
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7ff f9de 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011f48:	f001 be8f 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8011f4c:	4b54      	ldr	r3, [pc, #336]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f003 0302 	and.w	r3, r3, #2
 8011f54:	2b02      	cmp	r3, #2
 8011f56:	d10c      	bne.n	8011f72 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8011f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f5a:	2b18      	cmp	r3, #24
 8011f5c:	d109      	bne.n	8011f72 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011f5e:	4b50      	ldr	r3, [pc, #320]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	08db      	lsrs	r3, r3, #3
 8011f64:	f003 0303 	and.w	r3, r3, #3
 8011f68:	4a4e      	ldr	r2, [pc, #312]	@ (80120a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8011f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8011f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f70:	e01e      	b.n	8011fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8011f72:	4b4b      	ldr	r3, [pc, #300]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f7e:	d105      	bne.n	8011f8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f82:	2b20      	cmp	r3, #32
 8011f84:	d102      	bne.n	8011f8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8011f86:	4b48      	ldr	r3, [pc, #288]	@ (80120a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8011f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f8a:	e011      	b.n	8011fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8011f8c:	4b44      	ldr	r3, [pc, #272]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011f92:	f003 0302 	and.w	r3, r3, #2
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	d106      	bne.n	8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8011f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f9c:	2b28      	cmp	r3, #40	@ 0x28
 8011f9e:	d103      	bne.n	8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8011fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011fa6:	e003      	b.n	8011fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011fac:	f001 be5d 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011fb0:	f001 be5b 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8011fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011fba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8011fbe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8011fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d104      	bne.n	8011fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011fc6:	f7fc fec3 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8011fca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8011fcc:	f001 be4d 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8011fd0:	4b33      	ldr	r3, [pc, #204]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011fdc:	d10a      	bne.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8011fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fe0:	2b40      	cmp	r3, #64	@ 0x40
 8011fe2:	d107      	bne.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011fe4:	f107 0314 	add.w	r3, r7, #20
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7ff f81f 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011fee:	69bb      	ldr	r3, [r7, #24]
 8011ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ff2:	e045      	b.n	8012080 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8011ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012000:	d10a      	bne.n	8012018 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8012002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012004:	2b80      	cmp	r3, #128	@ 0x80
 8012006:	d107      	bne.n	8012018 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012008:	f107 0308 	add.w	r3, r7, #8
 801200c:	4618      	mov	r0, r3
 801200e:	f7ff f977 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	637b      	str	r3, [r7, #52]	@ 0x34
 8012016:	e033      	b.n	8012080 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8012018:	4b21      	ldr	r3, [pc, #132]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f003 0302 	and.w	r3, r3, #2
 8012020:	2b02      	cmp	r3, #2
 8012022:	d10c      	bne.n	801203e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8012024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012026:	2bc0      	cmp	r3, #192	@ 0xc0
 8012028:	d109      	bne.n	801203e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801202a:	4b1d      	ldr	r3, [pc, #116]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	08db      	lsrs	r3, r3, #3
 8012030:	f003 0303 	and.w	r3, r3, #3
 8012034:	4a1b      	ldr	r2, [pc, #108]	@ (80120a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8012036:	fa22 f303 	lsr.w	r3, r2, r3
 801203a:	637b      	str	r3, [r7, #52]	@ 0x34
 801203c:	e020      	b.n	8012080 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 801203e:	4b18      	ldr	r3, [pc, #96]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801204a:	d106      	bne.n	801205a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 801204c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801204e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012052:	d102      	bne.n	801205a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8012054:	4b14      	ldr	r3, [pc, #80]	@ (80120a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8012056:	637b      	str	r3, [r7, #52]	@ 0x34
 8012058:	e012      	b.n	8012080 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 801205a:	4b11      	ldr	r3, [pc, #68]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 801205c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012060:	f003 0302 	and.w	r3, r3, #2
 8012064:	2b02      	cmp	r3, #2
 8012066:	d107      	bne.n	8012078 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8012068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801206a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 801206e:	d103      	bne.n	8012078 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8012070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012074:	637b      	str	r3, [r7, #52]	@ 0x34
 8012076:	e003      	b.n	8012080 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8012078:	2300      	movs	r3, #0
 801207a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801207c:	f001 bdf5 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012080:	f001 bdf3 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8012084:	4b06      	ldr	r3, [pc, #24]	@ (80120a0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8012086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801208a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 801208e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8012090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012092:	2b00      	cmp	r3, #0
 8012094:	d10a      	bne.n	80120ac <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012096:	f7fc fe5b 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 801209a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 801209c:	f001 bde5 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80120a0:	44020c00 	.word	0x44020c00
 80120a4:	03d09000 	.word	0x03d09000
 80120a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80120ac:	4ba0      	ldr	r3, [pc, #640]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80120b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80120b8:	d10b      	bne.n	80120d2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80120ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120c0:	d107      	bne.n	80120d2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80120c2:	f107 0314 	add.w	r3, r7, #20
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fe ffb0 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80120d0:	e047      	b.n	8012162 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80120d2:	4b97      	ldr	r3, [pc, #604]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80120da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80120de:	d10b      	bne.n	80120f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80120e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80120e6:	d107      	bne.n	80120f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120e8:	f107 0308 	add.w	r3, r7, #8
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7ff f907 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80120f6:	e034      	b.n	8012162 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80120f8:	4b8d      	ldr	r3, [pc, #564]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f003 0302 	and.w	r3, r3, #2
 8012100:	2b02      	cmp	r3, #2
 8012102:	d10d      	bne.n	8012120 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8012104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012106:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801210a:	d109      	bne.n	8012120 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801210c:	4b88      	ldr	r3, [pc, #544]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	08db      	lsrs	r3, r3, #3
 8012112:	f003 0303 	and.w	r3, r3, #3
 8012116:	4a87      	ldr	r2, [pc, #540]	@ (8012334 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8012118:	fa22 f303 	lsr.w	r3, r2, r3
 801211c:	637b      	str	r3, [r7, #52]	@ 0x34
 801211e:	e020      	b.n	8012162 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8012120:	4b83      	ldr	r3, [pc, #524]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801212c:	d106      	bne.n	801213c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 801212e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012134:	d102      	bne.n	801213c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8012136:	4b80      	ldr	r3, [pc, #512]	@ (8012338 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8012138:	637b      	str	r3, [r7, #52]	@ 0x34
 801213a:	e012      	b.n	8012162 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 801213c:	4b7c      	ldr	r3, [pc, #496]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801213e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012142:	f003 0302 	and.w	r3, r3, #2
 8012146:	2b02      	cmp	r3, #2
 8012148:	d107      	bne.n	801215a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 801214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801214c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8012150:	d103      	bne.n	801215a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8012152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012156:	637b      	str	r3, [r7, #52]	@ 0x34
 8012158:	e003      	b.n	8012162 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 801215a:	2300      	movs	r3, #0
 801215c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801215e:	f001 bd84 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012162:	f001 bd82 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8012166:	4b72      	ldr	r3, [pc, #456]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8012168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801216c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8012170:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8012172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012174:	2b00      	cmp	r3, #0
 8012176:	d104      	bne.n	8012182 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012178:	f7fc fdea 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 801217c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 801217e:	f001 bd74 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8012182:	4b6b      	ldr	r3, [pc, #428]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801218a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801218e:	d10b      	bne.n	80121a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8012190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012196:	d107      	bne.n	80121a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012198:	f107 0314 	add.w	r3, r7, #20
 801219c:	4618      	mov	r0, r3
 801219e:	f7fe ff45 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80121a2:	69bb      	ldr	r3, [r7, #24]
 80121a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80121a6:	e047      	b.n	8012238 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80121a8:	4b61      	ldr	r3, [pc, #388]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80121b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80121b4:	d10b      	bne.n	80121ce <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80121b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80121bc:	d107      	bne.n	80121ce <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80121be:	f107 0308 	add.w	r3, r7, #8
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7ff f89c 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80121cc:	e034      	b.n	8012238 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80121ce:	4b58      	ldr	r3, [pc, #352]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f003 0302 	and.w	r3, r3, #2
 80121d6:	2b02      	cmp	r3, #2
 80121d8:	d10d      	bne.n	80121f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80121da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80121e0:	d109      	bne.n	80121f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80121e2:	4b53      	ldr	r3, [pc, #332]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	08db      	lsrs	r3, r3, #3
 80121e8:	f003 0303 	and.w	r3, r3, #3
 80121ec:	4a51      	ldr	r2, [pc, #324]	@ (8012334 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80121ee:	fa22 f303 	lsr.w	r3, r2, r3
 80121f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80121f4:	e020      	b.n	8012238 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80121f6:	4b4e      	ldr	r3, [pc, #312]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80121fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012202:	d106      	bne.n	8012212 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8012204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801220a:	d102      	bne.n	8012212 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 801220c:	4b4a      	ldr	r3, [pc, #296]	@ (8012338 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 801220e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012210:	e012      	b.n	8012238 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8012212:	4b47      	ldr	r3, [pc, #284]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8012214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012218:	f003 0302 	and.w	r3, r3, #2
 801221c:	2b02      	cmp	r3, #2
 801221e:	d107      	bne.n	8012230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8012220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012222:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8012226:	d103      	bne.n	8012230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8012228:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801222c:	637b      	str	r3, [r7, #52]	@ 0x34
 801222e:	e003      	b.n	8012238 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8012230:	2300      	movs	r3, #0
 8012232:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012234:	f001 bd19 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012238:	f001 bd17 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 801223c:	4b3c      	ldr	r3, [pc, #240]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801223e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012242:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8012246:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8012248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801224a:	2b00      	cmp	r3, #0
 801224c:	d104      	bne.n	8012258 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801224e:	f7fc fd7f 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8012252:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8012254:	f001 bd09 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8012258:	4b35      	ldr	r3, [pc, #212]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012264:	d10b      	bne.n	801227e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8012266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801226c:	d107      	bne.n	801227e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801226e:	f107 0314 	add.w	r3, r7, #20
 8012272:	4618      	mov	r0, r3
 8012274:	f7fe feda 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	637b      	str	r3, [r7, #52]	@ 0x34
 801227c:	e047      	b.n	801230e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 801227e:	4b2c      	ldr	r3, [pc, #176]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801228a:	d10b      	bne.n	80122a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 801228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801228e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012292:	d107      	bne.n	80122a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012294:	f107 0308 	add.w	r3, r7, #8
 8012298:	4618      	mov	r0, r3
 801229a:	f7ff f831 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80122a2:	e034      	b.n	801230e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80122a4:	4b22      	ldr	r3, [pc, #136]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f003 0302 	and.w	r3, r3, #2
 80122ac:	2b02      	cmp	r3, #2
 80122ae:	d10d      	bne.n	80122cc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80122b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80122b6:	d109      	bne.n	80122cc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80122b8:	4b1d      	ldr	r3, [pc, #116]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	08db      	lsrs	r3, r3, #3
 80122be:	f003 0303 	and.w	r3, r3, #3
 80122c2:	4a1c      	ldr	r2, [pc, #112]	@ (8012334 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80122c4:	fa22 f303 	lsr.w	r3, r2, r3
 80122c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80122ca:	e020      	b.n	801230e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80122cc:	4b18      	ldr	r3, [pc, #96]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80122d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122d8:	d106      	bne.n	80122e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80122da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80122e0:	d102      	bne.n	80122e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80122e2:	4b15      	ldr	r3, [pc, #84]	@ (8012338 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80122e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80122e6:	e012      	b.n	801230e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80122e8:	4b11      	ldr	r3, [pc, #68]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80122ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80122ee:	f003 0302 	and.w	r3, r3, #2
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d107      	bne.n	8012306 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80122f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80122fc:	d103      	bne.n	8012306 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80122fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012302:	637b      	str	r3, [r7, #52]	@ 0x34
 8012304:	e003      	b.n	801230e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8012306:	2300      	movs	r3, #0
 8012308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801230a:	f001 bcae 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801230e:	f001 bcac 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8012312:	4b07      	ldr	r3, [pc, #28]	@ (8012330 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8012314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012318:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 801231c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 801231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012320:	2b00      	cmp	r3, #0
 8012322:	d10b      	bne.n	801233c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012324:	f7fc fd14 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8012328:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 801232a:	f001 bc9e 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801232e:	bf00      	nop
 8012330:	44020c00 	.word	0x44020c00
 8012334:	03d09000 	.word	0x03d09000
 8012338:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 801233c:	4ba0      	ldr	r3, [pc, #640]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012344:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012348:	d10b      	bne.n	8012362 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 801234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801234c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012350:	d107      	bne.n	8012362 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012352:	f107 0314 	add.w	r3, r7, #20
 8012356:	4618      	mov	r0, r3
 8012358:	f7fe fe68 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801235c:	69bb      	ldr	r3, [r7, #24]
 801235e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012360:	e047      	b.n	80123f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8012362:	4b97      	ldr	r3, [pc, #604]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801236a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801236e:	d10b      	bne.n	8012388 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8012370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012372:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8012376:	d107      	bne.n	8012388 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012378:	f107 0308 	add.w	r3, r7, #8
 801237c:	4618      	mov	r0, r3
 801237e:	f7fe ffbf 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	637b      	str	r3, [r7, #52]	@ 0x34
 8012386:	e034      	b.n	80123f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8012388:	4b8d      	ldr	r3, [pc, #564]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	f003 0302 	and.w	r3, r3, #2
 8012390:	2b02      	cmp	r3, #2
 8012392:	d10d      	bne.n	80123b0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8012394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012396:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 801239a:	d109      	bne.n	80123b0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801239c:	4b88      	ldr	r3, [pc, #544]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	08db      	lsrs	r3, r3, #3
 80123a2:	f003 0303 	and.w	r3, r3, #3
 80123a6:	4a87      	ldr	r2, [pc, #540]	@ (80125c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80123a8:	fa22 f303 	lsr.w	r3, r2, r3
 80123ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80123ae:	e020      	b.n	80123f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80123b0:	4b83      	ldr	r3, [pc, #524]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80123b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123bc:	d106      	bne.n	80123cc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80123be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80123c4:	d102      	bne.n	80123cc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80123c6:	4b80      	ldr	r3, [pc, #512]	@ (80125c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80123c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80123ca:	e012      	b.n	80123f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80123cc:	4b7c      	ldr	r3, [pc, #496]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80123ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80123d2:	f003 0302 	and.w	r3, r3, #2
 80123d6:	2b02      	cmp	r3, #2
 80123d8:	d107      	bne.n	80123ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80123da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80123e0:	d103      	bne.n	80123ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80123e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80123e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80123e8:	e003      	b.n	80123f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80123ea:	2300      	movs	r3, #0
 80123ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80123ee:	f001 bc3c 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80123f2:	f001 bc3a 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80123f6:	4b72      	ldr	r3, [pc, #456]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80123f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80123fc:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8012400:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8012402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012404:	2b00      	cmp	r3, #0
 8012406:	d104      	bne.n	8012412 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012408:	f7fc fca2 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 801240c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 801240e:	f001 bc2c 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8012412:	4b6b      	ldr	r3, [pc, #428]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801241a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801241e:	d10b      	bne.n	8012438 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8012420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012426:	d107      	bne.n	8012438 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012428:	f107 0314 	add.w	r3, r7, #20
 801242c:	4618      	mov	r0, r3
 801242e:	f7fe fdfd 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012432:	69bb      	ldr	r3, [r7, #24]
 8012434:	637b      	str	r3, [r7, #52]	@ 0x34
 8012436:	e047      	b.n	80124c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8012438:	4b61      	ldr	r3, [pc, #388]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012444:	d10b      	bne.n	801245e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8012446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012448:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801244c:	d107      	bne.n	801245e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801244e:	f107 0308 	add.w	r3, r7, #8
 8012452:	4618      	mov	r0, r3
 8012454:	f7fe ff54 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	637b      	str	r3, [r7, #52]	@ 0x34
 801245c:	e034      	b.n	80124c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 801245e:	4b58      	ldr	r3, [pc, #352]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	f003 0302 	and.w	r3, r3, #2
 8012466:	2b02      	cmp	r3, #2
 8012468:	d10d      	bne.n	8012486 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 801246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801246c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012470:	d109      	bne.n	8012486 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012472:	4b53      	ldr	r3, [pc, #332]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	08db      	lsrs	r3, r3, #3
 8012478:	f003 0303 	and.w	r3, r3, #3
 801247c:	4a51      	ldr	r2, [pc, #324]	@ (80125c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 801247e:	fa22 f303 	lsr.w	r3, r2, r3
 8012482:	637b      	str	r3, [r7, #52]	@ 0x34
 8012484:	e020      	b.n	80124c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8012486:	4b4e      	ldr	r3, [pc, #312]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801248e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012492:	d106      	bne.n	80124a2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8012494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012496:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801249a:	d102      	bne.n	80124a2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 801249c:	4b4a      	ldr	r3, [pc, #296]	@ (80125c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 801249e:	637b      	str	r3, [r7, #52]	@ 0x34
 80124a0:	e012      	b.n	80124c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80124a2:	4b47      	ldr	r3, [pc, #284]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80124a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80124a8:	f003 0302 	and.w	r3, r3, #2
 80124ac:	2b02      	cmp	r3, #2
 80124ae:	d107      	bne.n	80124c0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80124b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124b2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80124b6:	d103      	bne.n	80124c0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80124b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80124bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80124be:	e003      	b.n	80124c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80124c0:	2300      	movs	r3, #0
 80124c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80124c4:	f001 bbd1 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80124c8:	f001 bbcf 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80124cc:	4b3c      	ldr	r3, [pc, #240]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80124ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80124d2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80124d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80124d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d104      	bne.n	80124e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80124de:	f7fc fc37 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 80124e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80124e4:	f001 bbc1 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80124e8:	4b35      	ldr	r3, [pc, #212]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80124f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80124f4:	d10b      	bne.n	801250e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80124f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80124fc:	d107      	bne.n	801250e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124fe:	f107 0314 	add.w	r3, r7, #20
 8012502:	4618      	mov	r0, r3
 8012504:	f7fe fd92 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	637b      	str	r3, [r7, #52]	@ 0x34
 801250c:	e047      	b.n	801259e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 801250e:	4b2c      	ldr	r3, [pc, #176]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801251a:	d10b      	bne.n	8012534 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 801251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801251e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012522:	d107      	bne.n	8012534 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012524:	f107 0308 	add.w	r3, r7, #8
 8012528:	4618      	mov	r0, r3
 801252a:	f7fe fee9 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	637b      	str	r3, [r7, #52]	@ 0x34
 8012532:	e034      	b.n	801259e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8012534:	4b22      	ldr	r3, [pc, #136]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f003 0302 	and.w	r3, r3, #2
 801253c:	2b02      	cmp	r3, #2
 801253e:	d10d      	bne.n	801255c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8012540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012542:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012546:	d109      	bne.n	801255c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012548:	4b1d      	ldr	r3, [pc, #116]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	08db      	lsrs	r3, r3, #3
 801254e:	f003 0303 	and.w	r3, r3, #3
 8012552:	4a1c      	ldr	r2, [pc, #112]	@ (80125c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8012554:	fa22 f303 	lsr.w	r3, r2, r3
 8012558:	637b      	str	r3, [r7, #52]	@ 0x34
 801255a:	e020      	b.n	801259e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 801255c:	4b18      	ldr	r3, [pc, #96]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012568:	d106      	bne.n	8012578 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 801256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801256c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012570:	d102      	bne.n	8012578 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8012572:	4b15      	ldr	r3, [pc, #84]	@ (80125c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8012574:	637b      	str	r3, [r7, #52]	@ 0x34
 8012576:	e012      	b.n	801259e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8012578:	4b11      	ldr	r3, [pc, #68]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801257a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801257e:	f003 0302 	and.w	r3, r3, #2
 8012582:	2b02      	cmp	r3, #2
 8012584:	d107      	bne.n	8012596 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8012586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012588:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801258c:	d103      	bne.n	8012596 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 801258e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012592:	637b      	str	r3, [r7, #52]	@ 0x34
 8012594:	e003      	b.n	801259e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8012596:	2300      	movs	r3, #0
 8012598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801259a:	f001 bb66 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801259e:	f001 bb64 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80125a2:	4b07      	ldr	r3, [pc, #28]	@ (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80125a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80125a8:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80125ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80125ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d10b      	bne.n	80125cc <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80125b4:	f7fc fbcc 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 80125b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80125ba:	f001 bb56 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80125be:	bf00      	nop
 80125c0:	44020c00 	.word	0x44020c00
 80125c4:	03d09000 	.word	0x03d09000
 80125c8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80125cc:	4ba1      	ldr	r3, [pc, #644]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80125d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80125d8:	d10b      	bne.n	80125f2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80125da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80125e0:	d107      	bne.n	80125f2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80125e2:	f107 0314 	add.w	r3, r7, #20
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fe fd20 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80125f0:	e047      	b.n	8012682 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80125f2:	4b98      	ldr	r3, [pc, #608]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80125fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80125fe:	d10b      	bne.n	8012618 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8012600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012606:	d107      	bne.n	8012618 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012608:	f107 0308 	add.w	r3, r7, #8
 801260c:	4618      	mov	r0, r3
 801260e:	f7fe fe77 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	637b      	str	r3, [r7, #52]	@ 0x34
 8012616:	e034      	b.n	8012682 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8012618:	4b8e      	ldr	r3, [pc, #568]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f003 0302 	and.w	r3, r3, #2
 8012620:	2b02      	cmp	r3, #2
 8012622:	d10d      	bne.n	8012640 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8012624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012626:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 801262a:	d109      	bne.n	8012640 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801262c:	4b89      	ldr	r3, [pc, #548]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	08db      	lsrs	r3, r3, #3
 8012632:	f003 0303 	and.w	r3, r3, #3
 8012636:	4a88      	ldr	r2, [pc, #544]	@ (8012858 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8012638:	fa22 f303 	lsr.w	r3, r2, r3
 801263c:	637b      	str	r3, [r7, #52]	@ 0x34
 801263e:	e020      	b.n	8012682 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8012640:	4b84      	ldr	r3, [pc, #528]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801264c:	d106      	bne.n	801265c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 801264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012654:	d102      	bne.n	801265c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8012656:	4b81      	ldr	r3, [pc, #516]	@ (801285c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8012658:	637b      	str	r3, [r7, #52]	@ 0x34
 801265a:	e012      	b.n	8012682 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 801265c:	4b7d      	ldr	r3, [pc, #500]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801265e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012662:	f003 0302 	and.w	r3, r3, #2
 8012666:	2b02      	cmp	r3, #2
 8012668:	d107      	bne.n	801267a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 801266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801266c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8012670:	d103      	bne.n	801267a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8012672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012676:	637b      	str	r3, [r7, #52]	@ 0x34
 8012678:	e003      	b.n	8012682 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 801267a:	2300      	movs	r3, #0
 801267c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801267e:	f001 baf4 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012682:	f001 baf2 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8012686:	4b73      	ldr	r3, [pc, #460]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8012688:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801268c:	f003 0307 	and.w	r3, r3, #7
 8012690:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8012692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012694:	2b00      	cmp	r3, #0
 8012696:	d104      	bne.n	80126a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012698:	f7fc fb5a 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 801269c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 801269e:	f001 bae4 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80126a2:	4b6c      	ldr	r3, [pc, #432]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80126aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80126ae:	d10a      	bne.n	80126c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80126b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d107      	bne.n	80126c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80126b6:	f107 0314 	add.w	r3, r7, #20
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fe fcb6 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80126c0:	69bb      	ldr	r3, [r7, #24]
 80126c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80126c4:	e043      	b.n	801274e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80126c6:	4b63      	ldr	r3, [pc, #396]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80126ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126d2:	d10a      	bne.n	80126ea <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80126d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126d6:	2b02      	cmp	r3, #2
 80126d8:	d107      	bne.n	80126ea <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80126da:	f107 0308 	add.w	r3, r7, #8
 80126de:	4618      	mov	r0, r3
 80126e0:	f7fe fe0e 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80126e8:	e031      	b.n	801274e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80126ea:	4b5a      	ldr	r3, [pc, #360]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f003 0302 	and.w	r3, r3, #2
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d10c      	bne.n	8012710 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80126f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f8:	2b03      	cmp	r3, #3
 80126fa:	d109      	bne.n	8012710 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80126fc:	4b55      	ldr	r3, [pc, #340]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	08db      	lsrs	r3, r3, #3
 8012702:	f003 0303 	and.w	r3, r3, #3
 8012706:	4a54      	ldr	r2, [pc, #336]	@ (8012858 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8012708:	fa22 f303 	lsr.w	r3, r2, r3
 801270c:	637b      	str	r3, [r7, #52]	@ 0x34
 801270e:	e01e      	b.n	801274e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8012710:	4b50      	ldr	r3, [pc, #320]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801271c:	d105      	bne.n	801272a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 801271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012720:	2b04      	cmp	r3, #4
 8012722:	d102      	bne.n	801272a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8012724:	4b4d      	ldr	r3, [pc, #308]	@ (801285c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8012726:	637b      	str	r3, [r7, #52]	@ 0x34
 8012728:	e011      	b.n	801274e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 801272a:	4b4a      	ldr	r3, [pc, #296]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801272c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012730:	f003 0302 	and.w	r3, r3, #2
 8012734:	2b02      	cmp	r3, #2
 8012736:	d106      	bne.n	8012746 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8012738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801273a:	2b05      	cmp	r3, #5
 801273c:	d103      	bne.n	8012746 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 801273e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012742:	637b      	str	r3, [r7, #52]	@ 0x34
 8012744:	e003      	b.n	801274e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8012746:	2300      	movs	r3, #0
 8012748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801274a:	f001 ba8e 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801274e:	f001 ba8c 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8012752:	4b40      	ldr	r3, [pc, #256]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8012754:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801275c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 801275e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012760:	2b00      	cmp	r3, #0
 8012762:	d104      	bne.n	801276e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012764:	f7fc faf4 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8012768:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 801276a:	f001 ba7e 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 801276e:	4b39      	ldr	r3, [pc, #228]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801277a:	d10a      	bne.n	8012792 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 801277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277e:	2b10      	cmp	r3, #16
 8012780:	d107      	bne.n	8012792 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012782:	f107 0314 	add.w	r3, r7, #20
 8012786:	4618      	mov	r0, r3
 8012788:	f7fe fc50 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012790:	e043      	b.n	801281a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8012792:	4b30      	ldr	r3, [pc, #192]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801279a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801279e:	d10a      	bne.n	80127b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80127a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a2:	2b20      	cmp	r3, #32
 80127a4:	d107      	bne.n	80127b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80127a6:	f107 0308 	add.w	r3, r7, #8
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe fda8 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80127b4:	e031      	b.n	801281a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80127b6:	4b27      	ldr	r3, [pc, #156]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f003 0302 	and.w	r3, r3, #2
 80127be:	2b02      	cmp	r3, #2
 80127c0:	d10c      	bne.n	80127dc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80127c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c4:	2b30      	cmp	r3, #48	@ 0x30
 80127c6:	d109      	bne.n	80127dc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80127c8:	4b22      	ldr	r3, [pc, #136]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	08db      	lsrs	r3, r3, #3
 80127ce:	f003 0303 	and.w	r3, r3, #3
 80127d2:	4a21      	ldr	r2, [pc, #132]	@ (8012858 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80127d4:	fa22 f303 	lsr.w	r3, r2, r3
 80127d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80127da:	e01e      	b.n	801281a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80127dc:	4b1d      	ldr	r3, [pc, #116]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80127e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127e8:	d105      	bne.n	80127f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80127ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ec:	2b40      	cmp	r3, #64	@ 0x40
 80127ee:	d102      	bne.n	80127f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80127f0:	4b1a      	ldr	r3, [pc, #104]	@ (801285c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80127f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80127f4:	e011      	b.n	801281a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80127f6:	4b17      	ldr	r3, [pc, #92]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80127f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80127fc:	f003 0302 	and.w	r3, r3, #2
 8012800:	2b02      	cmp	r3, #2
 8012802:	d106      	bne.n	8012812 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8012804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012806:	2b50      	cmp	r3, #80	@ 0x50
 8012808:	d103      	bne.n	8012812 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 801280a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801280e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012810:	e003      	b.n	801281a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8012812:	2300      	movs	r3, #0
 8012814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012816:	f001 ba28 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801281a:	f001 ba26 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801281e:	4b0d      	ldr	r3, [pc, #52]	@ (8012854 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8012820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012824:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8012828:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 801282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801282c:	2b00      	cmp	r3, #0
 801282e:	d104      	bne.n	801283a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8012830:	f7fc faba 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 8012834:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8012836:	f001 ba18 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 801283a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801283c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012840:	d10e      	bne.n	8012860 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012842:	f107 0314 	add.w	r3, r7, #20
 8012846:	4618      	mov	r0, r3
 8012848:	f7fe fbf0 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012850:	f001 ba0b 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012854:	44020c00 	.word	0x44020c00
 8012858:	03d09000 	.word	0x03d09000
 801285c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8012860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012866:	d108      	bne.n	801287a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012868:	f107 0308 	add.w	r3, r7, #8
 801286c:	4618      	mov	r0, r3
 801286e:	f7fe fd47 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012876:	f001 b9f8 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 801287a:	4ba4      	ldr	r3, [pc, #656]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	f003 0302 	and.w	r3, r3, #2
 8012882:	2b02      	cmp	r3, #2
 8012884:	d10d      	bne.n	80128a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8012886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012888:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801288c:	d109      	bne.n	80128a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801288e:	4b9f      	ldr	r3, [pc, #636]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	08db      	lsrs	r3, r3, #3
 8012894:	f003 0303 	and.w	r3, r3, #3
 8012898:	4a9d      	ldr	r2, [pc, #628]	@ (8012b10 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 801289a:	fa22 f303 	lsr.w	r3, r2, r3
 801289e:	637b      	str	r3, [r7, #52]	@ 0x34
 80128a0:	e020      	b.n	80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80128a2:	4b9a      	ldr	r3, [pc, #616]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80128aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80128ae:	d106      	bne.n	80128be <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80128b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80128b6:	d102      	bne.n	80128be <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80128b8:	4b96      	ldr	r3, [pc, #600]	@ (8012b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80128ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80128bc:	e012      	b.n	80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80128be:	4b93      	ldr	r3, [pc, #588]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80128c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80128c4:	f003 0302 	and.w	r3, r3, #2
 80128c8:	2b02      	cmp	r3, #2
 80128ca:	d107      	bne.n	80128dc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80128cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80128d2:	d103      	bne.n	80128dc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80128d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80128d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80128da:	e003      	b.n	80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80128dc:	2300      	movs	r3, #0
 80128de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80128e0:	f001 b9c3 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80128e4:	f001 b9c1 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80128e8:	4b88      	ldr	r3, [pc, #544]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80128ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80128ee:	f003 0307 	and.w	r3, r3, #7
 80128f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80128f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d104      	bne.n	8012904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80128fa:	f7fc fa0d 	bl	800ed18 <HAL_RCC_GetHCLKFreq>
 80128fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8012900:	f001 b9b3 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8012904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012906:	2b01      	cmp	r3, #1
 8012908:	d104      	bne.n	8012914 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 801290a:	f7fc f8d9 	bl	800eac0 <HAL_RCC_GetSysClockFreq>
 801290e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8012910:	f001 b9ab 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8012914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012916:	2b02      	cmp	r3, #2
 8012918:	d108      	bne.n	801292c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801291a:	f107 0314 	add.w	r3, r7, #20
 801291e:	4618      	mov	r0, r3
 8012920:	f7fe fb84 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012928:	f001 b99f 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 801292c:	4b77      	ldr	r3, [pc, #476]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012938:	d105      	bne.n	8012946 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 801293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801293c:	2b03      	cmp	r3, #3
 801293e:	d102      	bne.n	8012946 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8012940:	4b75      	ldr	r3, [pc, #468]	@ (8012b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8012942:	637b      	str	r3, [r7, #52]	@ 0x34
 8012944:	e023      	b.n	801298e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8012946:	4b71      	ldr	r3, [pc, #452]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f003 0302 	and.w	r3, r3, #2
 801294e:	2b02      	cmp	r3, #2
 8012950:	d10c      	bne.n	801296c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8012952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012954:	2b04      	cmp	r3, #4
 8012956:	d109      	bne.n	801296c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012958:	4b6c      	ldr	r3, [pc, #432]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	08db      	lsrs	r3, r3, #3
 801295e:	f003 0303 	and.w	r3, r3, #3
 8012962:	4a6b      	ldr	r2, [pc, #428]	@ (8012b10 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8012964:	fa22 f303 	lsr.w	r3, r2, r3
 8012968:	637b      	str	r3, [r7, #52]	@ 0x34
 801296a:	e010      	b.n	801298e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 801296c:	4b67      	ldr	r3, [pc, #412]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012978:	d105      	bne.n	8012986 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 801297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801297c:	2b05      	cmp	r3, #5
 801297e:	d102      	bne.n	8012986 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8012980:	4b64      	ldr	r3, [pc, #400]	@ (8012b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8012982:	637b      	str	r3, [r7, #52]	@ 0x34
 8012984:	e003      	b.n	801298e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8012986:	2300      	movs	r3, #0
 8012988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801298a:	f001 b96e 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801298e:	f001 b96c 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8012992:	4b5e      	ldr	r3, [pc, #376]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012998:	f003 0308 	and.w	r3, r3, #8
 801299c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 801299e:	4b5b      	ldr	r3, [pc, #364]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80129a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80129a4:	f003 0302 	and.w	r3, r3, #2
 80129a8:	2b02      	cmp	r3, #2
 80129aa:	d106      	bne.n	80129ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80129ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d103      	bne.n	80129ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80129b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80129b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80129b8:	e012      	b.n	80129e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80129ba:	4b54      	ldr	r3, [pc, #336]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80129bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80129c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80129c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80129c8:	d106      	bne.n	80129d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80129ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129cc:	2b08      	cmp	r3, #8
 80129ce:	d103      	bne.n	80129d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80129d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80129d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80129d6:	e003      	b.n	80129e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80129d8:	2300      	movs	r3, #0
 80129da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80129dc:	f001 b945 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80129e0:	f001 b943 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80129e4:	4b49      	ldr	r3, [pc, #292]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80129e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80129ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80129ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80129f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d104      	bne.n	8012a00 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80129f6:	f7fc f9ab 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 80129fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80129fc:	f001 b935 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8012a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a06:	d108      	bne.n	8012a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012a08:	f107 0308 	add.w	r3, r7, #8
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7fe fc77 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012a16:	f001 b928 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8012a1a:	4b3c      	ldr	r3, [pc, #240]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f003 0302 	and.w	r3, r3, #2
 8012a22:	2b02      	cmp	r3, #2
 8012a24:	d10d      	bne.n	8012a42 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8012a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012a2c:	d109      	bne.n	8012a42 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012a2e:	4b37      	ldr	r3, [pc, #220]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	08db      	lsrs	r3, r3, #3
 8012a34:	f003 0303 	and.w	r3, r3, #3
 8012a38:	4a35      	ldr	r2, [pc, #212]	@ (8012b10 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8012a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8012a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a40:	e011      	b.n	8012a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8012a42:	4b32      	ldr	r3, [pc, #200]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a4e:	d106      	bne.n	8012a5e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8012a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012a56:	d102      	bne.n	8012a5e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8012a58:	4b2e      	ldr	r3, [pc, #184]	@ (8012b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8012a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a5c:	e003      	b.n	8012a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012a62:	f001 b902 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012a66:	f001 b900 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8012a6a:	4b28      	ldr	r3, [pc, #160]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012a70:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8012a74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8012a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d104      	bne.n	8012a86 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012a7c:	f7fc f968 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8012a80:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8012a82:	f001 b8f2 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8012a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012a8c:	d108      	bne.n	8012aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012a8e:	f107 0308 	add.w	r3, r7, #8
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fe fc34 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012a9c:	f001 b8e5 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8012aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f003 0302 	and.w	r3, r3, #2
 8012aa8:	2b02      	cmp	r3, #2
 8012aaa:	d10d      	bne.n	8012ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8012aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8012ab2:	d109      	bne.n	8012ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012ab4:	4b15      	ldr	r3, [pc, #84]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	08db      	lsrs	r3, r3, #3
 8012aba:	f003 0303 	and.w	r3, r3, #3
 8012abe:	4a14      	ldr	r2, [pc, #80]	@ (8012b10 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8012ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ac6:	e011      	b.n	8012aec <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8012ac8:	4b10      	ldr	r3, [pc, #64]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ad4:	d106      	bne.n	8012ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8012ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ad8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8012adc:	d102      	bne.n	8012ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8012ade:	4b0d      	ldr	r3, [pc, #52]	@ (8012b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8012ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ae2:	e003      	b.n	8012aec <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012ae8:	f001 b8bf 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012aec:	f001 b8bd 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8012af0:	4b06      	ldr	r3, [pc, #24]	@ (8012b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8012af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012af6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8012afa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8012afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d10c      	bne.n	8012b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8012b02:	f7fc f951 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 8012b06:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8012b08:	f001 b8af 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012b0c:	44020c00 	.word	0x44020c00
 8012b10:	03d09000 	.word	0x03d09000
 8012b14:	003d0900 	.word	0x003d0900
 8012b18:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8012b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012b22:	d108      	bne.n	8012b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b24:	f107 0308 	add.w	r3, r7, #8
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fe fbe9 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012b32:	f001 b89a 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8012b36:	4b9f      	ldr	r3, [pc, #636]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f003 0302 	and.w	r3, r3, #2
 8012b3e:	2b02      	cmp	r3, #2
 8012b40:	d10d      	bne.n	8012b5e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8012b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012b48:	d109      	bne.n	8012b5e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012b4a:	4b9a      	ldr	r3, [pc, #616]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	08db      	lsrs	r3, r3, #3
 8012b50:	f003 0303 	and.w	r3, r3, #3
 8012b54:	4a98      	ldr	r2, [pc, #608]	@ (8012db8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8012b56:	fa22 f303 	lsr.w	r3, r2, r3
 8012b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8012b5c:	e011      	b.n	8012b82 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8012b5e:	4b95      	ldr	r3, [pc, #596]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b6a:	d106      	bne.n	8012b7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8012b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012b72:	d102      	bne.n	8012b7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8012b74:	4b91      	ldr	r3, [pc, #580]	@ (8012dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8012b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8012b78:	e003      	b.n	8012b82 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012b7e:	f001 b874 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012b82:	f001 b872 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8012b86:	4b8b      	ldr	r3, [pc, #556]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012b88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012b8c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8012b90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8012b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d104      	bne.n	8012ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8012b98:	f7fc f906 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 8012b9c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8012b9e:	f001 b864 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012ba8:	d108      	bne.n	8012bbc <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012baa:	f107 0308 	add.w	r3, r7, #8
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7fe fba6 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012bb8:	f001 b857 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8012bbc:	4b7d      	ldr	r3, [pc, #500]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f003 0302 	and.w	r3, r3, #2
 8012bc4:	2b02      	cmp	r3, #2
 8012bc6:	d10d      	bne.n	8012be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8012bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012bce:	d109      	bne.n	8012be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012bd0:	4b78      	ldr	r3, [pc, #480]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	08db      	lsrs	r3, r3, #3
 8012bd6:	f003 0303 	and.w	r3, r3, #3
 8012bda:	4a77      	ldr	r2, [pc, #476]	@ (8012db8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8012bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8012be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8012be2:	e011      	b.n	8012c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8012be4:	4b73      	ldr	r3, [pc, #460]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012bf0:	d106      	bne.n	8012c00 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8012bf8:	d102      	bne.n	8012c00 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8012bfa:	4b70      	ldr	r3, [pc, #448]	@ (8012dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8012bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8012bfe:	e003      	b.n	8012c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8012c00:	2300      	movs	r3, #0
 8012c02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012c04:	f001 b831 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012c08:	f001 b82f 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8012c0c:	4b69      	ldr	r3, [pc, #420]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012c0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012c12:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8012c16:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8012c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d104      	bne.n	8012c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8012c1e:	f7fc f897 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8012c22:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8012c24:	f001 b821 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8012c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012c2e:	d108      	bne.n	8012c42 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c30:	f107 0308 	add.w	r3, r7, #8
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7fe fb63 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012c3e:	f001 b814 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8012c42:	4b5c      	ldr	r3, [pc, #368]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f003 0302 	and.w	r3, r3, #2
 8012c4a:	2b02      	cmp	r3, #2
 8012c4c:	d10e      	bne.n	8012c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012c54:	d10a      	bne.n	8012c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012c56:	4b57      	ldr	r3, [pc, #348]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	08db      	lsrs	r3, r3, #3
 8012c5c:	f003 0303 	and.w	r3, r3, #3
 8012c60:	4a55      	ldr	r2, [pc, #340]	@ (8012db8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8012c62:	fa22 f303 	lsr.w	r3, r2, r3
 8012c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012c68:	f000 bfff 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012c70:	f000 bffb 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8012c74:	4b4f      	ldr	r3, [pc, #316]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012c76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012c7a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c82:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8012c86:	d056      	beq.n	8012d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8012c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c8a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8012c8e:	f200 808b 	bhi.w	8012da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8012c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012c98:	d03e      	beq.n	8012d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8012c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012ca0:	f200 8082 	bhi.w	8012da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8012ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012caa:	d027      	beq.n	8012cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8012cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012cb2:	d879      	bhi.n	8012da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8012cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012cba:	d017      	beq.n	8012cec <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8012cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012cc2:	d871      	bhi.n	8012da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d004      	beq.n	8012cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8012cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012cd0:	d004      	beq.n	8012cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8012cd2:	e069      	b.n	8012da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8012cd4:	f7fc f868 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 8012cd8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012cda:	e068      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012cdc:	f107 0314 	add.w	r3, r7, #20
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe f9a3 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012cea:	e060      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012cec:	f107 0308 	add.w	r3, r7, #8
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7fe fb05 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012cfa:	e058      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012d02:	f003 0302 	and.w	r3, r3, #2
 8012d06:	2b02      	cmp	r3, #2
 8012d08:	d103      	bne.n	8012d12 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8012d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012d0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012d10:	e04d      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8012d12:	2300      	movs	r3, #0
 8012d14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012d16:	e04a      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8012d18:	4b26      	ldr	r3, [pc, #152]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012d22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012d26:	d103      	bne.n	8012d30 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8012d28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8012d2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012d2e:	e03e      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8012d30:	2300      	movs	r3, #0
 8012d32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012d34:	e03b      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012d36:	4b1f      	ldr	r3, [pc, #124]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012d3c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012d40:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012d42:	4b1c      	ldr	r3, [pc, #112]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f003 0302 	and.w	r3, r3, #2
 8012d4a:	2b02      	cmp	r3, #2
 8012d4c:	d10c      	bne.n	8012d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8012d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d109      	bne.n	8012d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012d54:	4b17      	ldr	r3, [pc, #92]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	08db      	lsrs	r3, r3, #3
 8012d5a:	f003 0303 	and.w	r3, r3, #3
 8012d5e:	4a16      	ldr	r2, [pc, #88]	@ (8012db8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8012d60:	fa22 f303 	lsr.w	r3, r2, r3
 8012d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d66:	e01e      	b.n	8012da6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012d68:	4b12      	ldr	r3, [pc, #72]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d74:	d106      	bne.n	8012d84 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8012d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d7c:	d102      	bne.n	8012d84 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8012dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8012d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d82:	e010      	b.n	8012da6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012d84:	4b0b      	ldr	r3, [pc, #44]	@ (8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012d90:	d106      	bne.n	8012da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8012d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012d98:	d102      	bne.n	8012da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8012d9a:	4b09      	ldr	r3, [pc, #36]	@ (8012dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8012d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d9e:	e002      	b.n	8012da6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8012da0:	2300      	movs	r3, #0
 8012da2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8012da4:	e003      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8012da6:	e002      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8012da8:	2300      	movs	r3, #0
 8012daa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012dac:	bf00      	nop
          }
        }
        break;
 8012dae:	f000 bf5c 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012db2:	bf00      	nop
 8012db4:	44020c00 	.word	0x44020c00
 8012db8:	03d09000 	.word	0x03d09000
 8012dbc:	003d0900 	.word	0x003d0900
 8012dc0:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8012dc4:	4b9e      	ldr	r3, [pc, #632]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012dc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012dca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8012dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8012dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dd2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8012dd6:	d056      	beq.n	8012e86 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8012dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8012dde:	f200 808b 	bhi.w	8012ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8012de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012de8:	d03e      	beq.n	8012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8012dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012df0:	f200 8082 	bhi.w	8012ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8012df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012df6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012dfa:	d027      	beq.n	8012e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8012dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012e02:	d879      	bhi.n	8012ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8012e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012e0a:	d017      	beq.n	8012e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012e12:	d871      	bhi.n	8012ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8012e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d004      	beq.n	8012e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8012e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e20:	d004      	beq.n	8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8012e22:	e069      	b.n	8012ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8012e24:	f7fb ff94 	bl	800ed50 <HAL_RCC_GetPCLK1Freq>
 8012e28:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012e2a:	e068      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e2c:	f107 0314 	add.w	r3, r7, #20
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fe f8fb 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012e3a:	e060      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e3c:	f107 0308 	add.w	r3, r7, #8
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7fe fa5d 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012e4a:	e058      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012e52:	f003 0302 	and.w	r3, r3, #2
 8012e56:	2b02      	cmp	r3, #2
 8012e58:	d103      	bne.n	8012e62 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8012e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012e5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012e60:	e04d      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012e66:	e04a      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8012e68:	4b75      	ldr	r3, [pc, #468]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012e76:	d103      	bne.n	8012e80 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8012e78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8012e7c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012e7e:	e03e      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8012e80:	2300      	movs	r3, #0
 8012e82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012e84:	e03b      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012e86:	4b6e      	ldr	r3, [pc, #440]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012e8c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012e92:	4b6b      	ldr	r3, [pc, #428]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	f003 0302 	and.w	r3, r3, #2
 8012e9a:	2b02      	cmp	r3, #2
 8012e9c:	d10c      	bne.n	8012eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8012e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d109      	bne.n	8012eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012ea4:	4b66      	ldr	r3, [pc, #408]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	08db      	lsrs	r3, r3, #3
 8012eaa:	f003 0303 	and.w	r3, r3, #3
 8012eae:	4a65      	ldr	r2, [pc, #404]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8012eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8012eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8012eb6:	e01e      	b.n	8012ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012eb8:	4b61      	ldr	r3, [pc, #388]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ec4:	d106      	bne.n	8012ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8012ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ecc:	d102      	bne.n	8012ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012ece:	4b5e      	ldr	r3, [pc, #376]	@ (8013048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8012ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ed2:	e010      	b.n	8012ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012ee0:	d106      	bne.n	8012ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8012ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012ee8:	d102      	bne.n	8012ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8012eea:	4b58      	ldr	r3, [pc, #352]	@ (801304c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8012eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8012eee:	e002      	b.n	8012ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8012ef4:	e003      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8012ef6:	e002      	b.n	8012efe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012efc:	bf00      	nop
          }
        }
        break;
 8012efe:	f000 beb4 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8012f02:	4b4f      	ldr	r3, [pc, #316]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012f04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012f08:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8012f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012f14:	d056      	beq.n	8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8012f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012f1c:	f200 808b 	bhi.w	8013036 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8012f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012f26:	d03e      	beq.n	8012fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8012f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012f2e:	f200 8082 	bhi.w	8013036 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8012f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012f38:	d027      	beq.n	8012f8a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8012f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012f40:	d879      	bhi.n	8013036 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8012f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f48:	d017      	beq.n	8012f7a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f50:	d871      	bhi.n	8013036 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8012f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d004      	beq.n	8012f62 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8012f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f5e:	d004      	beq.n	8012f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8012f60:	e069      	b.n	8013036 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8012f62:	f7fb ff21 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 8012f66:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012f68:	e068      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f6a:	f107 0314 	add.w	r3, r7, #20
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fe f85c 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012f78:	e060      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012f7a:	f107 0308 	add.w	r3, r7, #8
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fe f9be 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012f88:	e058      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012f90:	f003 0302 	and.w	r3, r3, #2
 8012f94:	2b02      	cmp	r3, #2
 8012f96:	d103      	bne.n	8012fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8012f98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012f9c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012f9e:	e04d      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012fa4:	e04a      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8012fa6:	4b26      	ldr	r3, [pc, #152]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012fb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012fb4:	d103      	bne.n	8012fbe <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8012fb6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8012fba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012fbc:	e03e      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012fc2:	e03b      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012fca:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012fce:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f003 0302 	and.w	r3, r3, #2
 8012fd8:	2b02      	cmp	r3, #2
 8012fda:	d10c      	bne.n	8012ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8012fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d109      	bne.n	8012ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012fe2:	4b17      	ldr	r3, [pc, #92]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	08db      	lsrs	r3, r3, #3
 8012fe8:	f003 0303 	and.w	r3, r3, #3
 8012fec:	4a15      	ldr	r2, [pc, #84]	@ (8013044 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8012fee:	fa22 f303 	lsr.w	r3, r2, r3
 8012ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ff4:	e01e      	b.n	8013034 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012ff6:	4b12      	ldr	r3, [pc, #72]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013002:	d106      	bne.n	8013012 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8013004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801300a:	d102      	bne.n	8013012 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801300c:	4b0e      	ldr	r3, [pc, #56]	@ (8013048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 801300e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013010:	e010      	b.n	8013034 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013012:	4b0b      	ldr	r3, [pc, #44]	@ (8013040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801301a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801301e:	d106      	bne.n	801302e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8013020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013026:	d102      	bne.n	801302e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8013028:	4b08      	ldr	r3, [pc, #32]	@ (801304c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 801302a:	637b      	str	r3, [r7, #52]	@ 0x34
 801302c:	e002      	b.n	8013034 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8013032:	e003      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8013034:	e002      	b.n	801303c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8013036:	2300      	movs	r3, #0
 8013038:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801303a:	bf00      	nop
          }
        }
        break;
 801303c:	f000 be15 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8013040:	44020c00 	.word	0x44020c00
 8013044:	03d09000 	.word	0x03d09000
 8013048:	003d0900 	.word	0x003d0900
 801304c:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8013050:	4b9e      	ldr	r3, [pc, #632]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013052:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013056:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 801305a:	633b      	str	r3, [r7, #48]	@ 0x30
 801305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801305e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8013062:	d056      	beq.n	8013112 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8013064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013066:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 801306a:	f200 808b 	bhi.w	8013184 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 801306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013074:	d03e      	beq.n	80130f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8013076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801307c:	f200 8082 	bhi.w	8013184 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8013080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013082:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013086:	d027      	beq.n	80130d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8013088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801308a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801308e:	d879      	bhi.n	8013184 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8013090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013096:	d017      	beq.n	80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8013098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801309a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801309e:	d871      	bhi.n	8013184 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80130a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d004      	beq.n	80130b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80130a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80130ac:	d004      	beq.n	80130b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80130ae:	e069      	b.n	8013184 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80130b0:	f7fb fe7a 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 80130b4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80130b6:	e068      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80130b8:	f107 0314 	add.w	r3, r7, #20
 80130bc:	4618      	mov	r0, r3
 80130be:	f7fd ffb5 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80130c6:	e060      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80130c8:	f107 0308 	add.w	r3, r7, #8
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fe f917 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80130d6:	e058      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80130d8:	4b7c      	ldr	r3, [pc, #496]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80130da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130de:	f003 0302 	and.w	r3, r3, #2
 80130e2:	2b02      	cmp	r3, #2
 80130e4:	d103      	bne.n	80130ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80130e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80130ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80130ec:	e04d      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80130f2:	e04a      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80130f4:	4b75      	ldr	r3, [pc, #468]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80130f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80130fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013102:	d103      	bne.n	801310c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8013104:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8013108:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801310a:	e03e      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 801310c:	2300      	movs	r3, #0
 801310e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013110:	e03b      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013112:	4b6e      	ldr	r3, [pc, #440]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013118:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801311c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801311e:	4b6b      	ldr	r3, [pc, #428]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	f003 0302 	and.w	r3, r3, #2
 8013126:	2b02      	cmp	r3, #2
 8013128:	d10c      	bne.n	8013144 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 801312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801312c:	2b00      	cmp	r3, #0
 801312e:	d109      	bne.n	8013144 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8013130:	4b66      	ldr	r3, [pc, #408]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	08db      	lsrs	r3, r3, #3
 8013136:	f003 0303 	and.w	r3, r3, #3
 801313a:	4a65      	ldr	r2, [pc, #404]	@ (80132d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 801313c:	fa22 f303 	lsr.w	r3, r2, r3
 8013140:	637b      	str	r3, [r7, #52]	@ 0x34
 8013142:	e01e      	b.n	8013182 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013144:	4b61      	ldr	r3, [pc, #388]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801314c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013150:	d106      	bne.n	8013160 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8013152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013158:	d102      	bne.n	8013160 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801315a:	4b5e      	ldr	r3, [pc, #376]	@ (80132d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 801315c:	637b      	str	r3, [r7, #52]	@ 0x34
 801315e:	e010      	b.n	8013182 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013160:	4b5a      	ldr	r3, [pc, #360]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801316c:	d106      	bne.n	801317c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 801316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013174:	d102      	bne.n	801317c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8013176:	4b58      	ldr	r3, [pc, #352]	@ (80132d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8013178:	637b      	str	r3, [r7, #52]	@ 0x34
 801317a:	e002      	b.n	8013182 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 801317c:	2300      	movs	r3, #0
 801317e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8013180:	e003      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8013182:	e002      	b.n	801318a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8013184:	2300      	movs	r3, #0
 8013186:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013188:	bf00      	nop
          }
        }
        break;
 801318a:	f000 bd6e 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 801318e:	4b4f      	ldr	r3, [pc, #316]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013190:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013194:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8013198:	633b      	str	r3, [r7, #48]	@ 0x30
 801319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801319c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80131a0:	d056      	beq.n	8013250 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80131a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80131a8:	f200 808b 	bhi.w	80132c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80131ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80131b2:	d03e      	beq.n	8013232 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80131b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80131ba:	f200 8082 	bhi.w	80132c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80131be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80131c4:	d027      	beq.n	8013216 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80131c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80131cc:	d879      	bhi.n	80132c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80131ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80131d4:	d017      	beq.n	8013206 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80131d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80131dc:	d871      	bhi.n	80132c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80131de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d004      	beq.n	80131ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80131e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80131ea:	d004      	beq.n	80131f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80131ec:	e069      	b.n	80132c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80131ee:	f7fb fddb 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 80131f2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80131f4:	e068      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80131f6:	f107 0314 	add.w	r3, r7, #20
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fd ff16 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013204:	e060      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013206:	f107 0308 	add.w	r3, r7, #8
 801320a:	4618      	mov	r0, r3
 801320c:	f7fe f878 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013214:	e058      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8013216:	4b2d      	ldr	r3, [pc, #180]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801321c:	f003 0302 	and.w	r3, r3, #2
 8013220:	2b02      	cmp	r3, #2
 8013222:	d103      	bne.n	801322c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8013224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013228:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801322a:	e04d      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 801322c:	2300      	movs	r3, #0
 801322e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013230:	e04a      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8013232:	4b26      	ldr	r3, [pc, #152]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801323c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013240:	d103      	bne.n	801324a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8013242:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8013246:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8013248:	e03e      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801324e:	e03b      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013250:	4b1e      	ldr	r3, [pc, #120]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013256:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801325a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801325c:	4b1b      	ldr	r3, [pc, #108]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f003 0302 	and.w	r3, r3, #2
 8013264:	2b02      	cmp	r3, #2
 8013266:	d10c      	bne.n	8013282 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8013268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801326a:	2b00      	cmp	r3, #0
 801326c:	d109      	bne.n	8013282 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801326e:	4b17      	ldr	r3, [pc, #92]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	08db      	lsrs	r3, r3, #3
 8013274:	f003 0303 	and.w	r3, r3, #3
 8013278:	4a15      	ldr	r2, [pc, #84]	@ (80132d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 801327a:	fa22 f303 	lsr.w	r3, r2, r3
 801327e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013280:	e01e      	b.n	80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013282:	4b12      	ldr	r3, [pc, #72]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801328a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801328e:	d106      	bne.n	801329e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8013290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013296:	d102      	bne.n	801329e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8013298:	4b0e      	ldr	r3, [pc, #56]	@ (80132d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 801329a:	637b      	str	r3, [r7, #52]	@ 0x34
 801329c:	e010      	b.n	80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801329e:	4b0b      	ldr	r3, [pc, #44]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80132a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80132aa:	d106      	bne.n	80132ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80132ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80132b2:	d102      	bne.n	80132ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80132b4:	4b08      	ldr	r3, [pc, #32]	@ (80132d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80132b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80132b8:	e002      	b.n	80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80132ba:	2300      	movs	r3, #0
 80132bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80132be:	e003      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80132c0:	e002      	b.n	80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80132c2:	2300      	movs	r3, #0
 80132c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80132c6:	bf00      	nop
          }
        }
        break;
 80132c8:	f000 bccf 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80132cc:	44020c00 	.word	0x44020c00
 80132d0:	03d09000 	.word	0x03d09000
 80132d4:	003d0900 	.word	0x003d0900
 80132d8:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80132dc:	4b9e      	ldr	r3, [pc, #632]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80132de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80132e2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80132e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80132e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80132ee:	d056      	beq.n	801339e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80132f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80132f6:	f200 808b 	bhi.w	8013410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80132fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013300:	d03e      	beq.n	8013380 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8013302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013308:	f200 8082 	bhi.w	8013410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 801330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801330e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013312:	d027      	beq.n	8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8013314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801331a:	d879      	bhi.n	8013410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 801331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801331e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013322:	d017      	beq.n	8013354 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8013324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801332a:	d871      	bhi.n	8013410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 801332c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801332e:	2b00      	cmp	r3, #0
 8013330:	d004      	beq.n	801333c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8013332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013338:	d004      	beq.n	8013344 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 801333a:	e069      	b.n	8013410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 801333c:	f7fb fd34 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 8013340:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8013342:	e068      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013344:	f107 0314 	add.w	r3, r7, #20
 8013348:	4618      	mov	r0, r3
 801334a:	f7fd fe6f 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013352:	e060      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013354:	f107 0308 	add.w	r3, r7, #8
 8013358:	4618      	mov	r0, r3
 801335a:	f7fd ffd1 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013362:	e058      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8013364:	4b7c      	ldr	r3, [pc, #496]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8013366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801336a:	f003 0302 	and.w	r3, r3, #2
 801336e:	2b02      	cmp	r3, #2
 8013370:	d103      	bne.n	801337a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8013372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013376:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8013378:	e04d      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 801337a:	2300      	movs	r3, #0
 801337c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801337e:	e04a      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8013380:	4b75      	ldr	r3, [pc, #468]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8013382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801338a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801338e:	d103      	bne.n	8013398 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8013390:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8013394:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8013396:	e03e      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8013398:	2300      	movs	r3, #0
 801339a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801339c:	e03b      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801339e:	4b6e      	ldr	r3, [pc, #440]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80133a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80133a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80133a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80133aa:	4b6b      	ldr	r3, [pc, #428]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f003 0302 	and.w	r3, r3, #2
 80133b2:	2b02      	cmp	r3, #2
 80133b4:	d10c      	bne.n	80133d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80133b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d109      	bne.n	80133d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80133bc:	4b66      	ldr	r3, [pc, #408]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	08db      	lsrs	r3, r3, #3
 80133c2:	f003 0303 	and.w	r3, r3, #3
 80133c6:	4a65      	ldr	r2, [pc, #404]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80133c8:	fa22 f303 	lsr.w	r3, r2, r3
 80133cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80133ce:	e01e      	b.n	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80133d0:	4b61      	ldr	r3, [pc, #388]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80133d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80133dc:	d106      	bne.n	80133ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80133de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133e4:	d102      	bne.n	80133ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80133e6:	4b5e      	ldr	r3, [pc, #376]	@ (8013560 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80133e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80133ea:	e010      	b.n	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80133ec:	4b5a      	ldr	r3, [pc, #360]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80133f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80133f8:	d106      	bne.n	8013408 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80133fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013400:	d102      	bne.n	8013408 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8013402:	4b58      	ldr	r3, [pc, #352]	@ (8013564 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8013404:	637b      	str	r3, [r7, #52]	@ 0x34
 8013406:	e002      	b.n	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8013408:	2300      	movs	r3, #0
 801340a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 801340c:	e003      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 801340e:	e002      	b.n	8013416 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8013410:	2300      	movs	r3, #0
 8013412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013414:	bf00      	nop
          }
        }
        break;
 8013416:	f000 bc28 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801341a:	4b4f      	ldr	r3, [pc, #316]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801341c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013424:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8013426:	4b4c      	ldr	r3, [pc, #304]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801342e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013432:	d106      	bne.n	8013442 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8013434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013436:	2b00      	cmp	r3, #0
 8013438:	d103      	bne.n	8013442 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 801343a:	4b4a      	ldr	r3, [pc, #296]	@ (8013564 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 801343c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 801343e:	f000 bc14 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8013442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013448:	d108      	bne.n	801345c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801344a:	f107 0320 	add.w	r3, r7, #32
 801344e:	4618      	mov	r0, r3
 8013450:	f7fd fc82 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013456:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013458:	f000 bc07 	b.w	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 801345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801345e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013462:	d107      	bne.n	8013474 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013464:	f107 0314 	add.w	r3, r7, #20
 8013468:	4618      	mov	r0, r3
 801346a:	f7fd fddf 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013472:	e3fa      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8013474:	2300      	movs	r3, #0
 8013476:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013478:	e3f7      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 801347a:	4b37      	ldr	r3, [pc, #220]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801347c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013480:	f003 0307 	and.w	r3, r3, #7
 8013484:	633b      	str	r3, [r7, #48]	@ 0x30
 8013486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013488:	2b04      	cmp	r3, #4
 801348a:	d861      	bhi.n	8013550 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 801348c:	a201      	add	r2, pc, #4	@ (adr r2, 8013494 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 801348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013492:	bf00      	nop
 8013494:	080134a9 	.word	0x080134a9
 8013498:	080134b9 	.word	0x080134b9
 801349c:	080134c9 	.word	0x080134c9
 80134a0:	080134d9 	.word	0x080134d9
 80134a4:	080134df 	.word	0x080134df
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80134a8:	f107 0320 	add.w	r3, r7, #32
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fd fc53 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80134b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80134b6:	e04e      	b.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134b8:	f107 0314 	add.w	r3, r7, #20
 80134bc:	4618      	mov	r0, r3
 80134be:	f7fd fdb5 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80134c6:	e046      	b.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134c8:	f107 0308 	add.w	r3, r7, #8
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fd ff17 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80134d6:	e03e      	b.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80134d8:	4b23      	ldr	r3, [pc, #140]	@ (8013568 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80134da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80134dc:	e03b      	b.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80134de:	4b1e      	ldr	r3, [pc, #120]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80134e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80134e4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80134e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80134ea:	4b1b      	ldr	r3, [pc, #108]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f003 0302 	and.w	r3, r3, #2
 80134f2:	2b02      	cmp	r3, #2
 80134f4:	d10c      	bne.n	8013510 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80134f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d109      	bne.n	8013510 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80134fc:	4b16      	ldr	r3, [pc, #88]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	08db      	lsrs	r3, r3, #3
 8013502:	f003 0303 	and.w	r3, r3, #3
 8013506:	4a15      	ldr	r2, [pc, #84]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8013508:	fa22 f303 	lsr.w	r3, r2, r3
 801350c:	637b      	str	r3, [r7, #52]	@ 0x34
 801350e:	e01e      	b.n	801354e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013510:	4b11      	ldr	r3, [pc, #68]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801351c:	d106      	bne.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 801351e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013524:	d102      	bne.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8013526:	4b0e      	ldr	r3, [pc, #56]	@ (8013560 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8013528:	637b      	str	r3, [r7, #52]	@ 0x34
 801352a:	e010      	b.n	801354e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801352c:	4b0a      	ldr	r3, [pc, #40]	@ (8013558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013538:	d106      	bne.n	8013548 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 801353a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801353c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013540:	d102      	bne.n	8013548 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8013542:	4b08      	ldr	r3, [pc, #32]	@ (8013564 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8013544:	637b      	str	r3, [r7, #52]	@ 0x34
 8013546:	e002      	b.n	801354e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8013548:	2300      	movs	r3, #0
 801354a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 801354c:	e003      	b.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 801354e:	e002      	b.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8013550:	2300      	movs	r3, #0
 8013552:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013554:	bf00      	nop
          }
        }
        break;
 8013556:	e388      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8013558:	44020c00 	.word	0x44020c00
 801355c:	03d09000 	.word	0x03d09000
 8013560:	003d0900 	.word	0x003d0900
 8013564:	017d7840 	.word	0x017d7840
 8013568:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 801356c:	4ba9      	ldr	r3, [pc, #676]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801356e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013572:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013576:	633b      	str	r3, [r7, #48]	@ 0x30
 8013578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801357a:	2b20      	cmp	r3, #32
 801357c:	f200 809a 	bhi.w	80136b4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8013580:	a201      	add	r2, pc, #4	@ (adr r2, 8013588 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8013582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013586:	bf00      	nop
 8013588:	0801360d 	.word	0x0801360d
 801358c:	080136b5 	.word	0x080136b5
 8013590:	080136b5 	.word	0x080136b5
 8013594:	080136b5 	.word	0x080136b5
 8013598:	080136b5 	.word	0x080136b5
 801359c:	080136b5 	.word	0x080136b5
 80135a0:	080136b5 	.word	0x080136b5
 80135a4:	080136b5 	.word	0x080136b5
 80135a8:	0801361d 	.word	0x0801361d
 80135ac:	080136b5 	.word	0x080136b5
 80135b0:	080136b5 	.word	0x080136b5
 80135b4:	080136b5 	.word	0x080136b5
 80135b8:	080136b5 	.word	0x080136b5
 80135bc:	080136b5 	.word	0x080136b5
 80135c0:	080136b5 	.word	0x080136b5
 80135c4:	080136b5 	.word	0x080136b5
 80135c8:	0801362d 	.word	0x0801362d
 80135cc:	080136b5 	.word	0x080136b5
 80135d0:	080136b5 	.word	0x080136b5
 80135d4:	080136b5 	.word	0x080136b5
 80135d8:	080136b5 	.word	0x080136b5
 80135dc:	080136b5 	.word	0x080136b5
 80135e0:	080136b5 	.word	0x080136b5
 80135e4:	080136b5 	.word	0x080136b5
 80135e8:	0801363d 	.word	0x0801363d
 80135ec:	080136b5 	.word	0x080136b5
 80135f0:	080136b5 	.word	0x080136b5
 80135f4:	080136b5 	.word	0x080136b5
 80135f8:	080136b5 	.word	0x080136b5
 80135fc:	080136b5 	.word	0x080136b5
 8013600:	080136b5 	.word	0x080136b5
 8013604:	080136b5 	.word	0x080136b5
 8013608:	08013643 	.word	0x08013643
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801360c:	f107 0320 	add.w	r3, r7, #32
 8013610:	4618      	mov	r0, r3
 8013612:	f7fd fba1 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8013616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013618:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801361a:	e04e      	b.n	80136ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801361c:	f107 0314 	add.w	r3, r7, #20
 8013620:	4618      	mov	r0, r3
 8013622:	f7fd fd03 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801362a:	e046      	b.n	80136ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801362c:	f107 0308 	add.w	r3, r7, #8
 8013630:	4618      	mov	r0, r3
 8013632:	f7fd fe65 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801363a:	e03e      	b.n	80136ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 801363c:	4b76      	ldr	r3, [pc, #472]	@ (8013818 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 801363e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013640:	e03b      	b.n	80136ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013642:	4b74      	ldr	r3, [pc, #464]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013648:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801364c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801364e:	4b71      	ldr	r3, [pc, #452]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	f003 0302 	and.w	r3, r3, #2
 8013656:	2b02      	cmp	r3, #2
 8013658:	d10c      	bne.n	8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 801365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365c:	2b00      	cmp	r3, #0
 801365e:	d109      	bne.n	8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8013660:	4b6c      	ldr	r3, [pc, #432]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	08db      	lsrs	r3, r3, #3
 8013666:	f003 0303 	and.w	r3, r3, #3
 801366a:	4a6c      	ldr	r2, [pc, #432]	@ (801381c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 801366c:	fa22 f303 	lsr.w	r3, r2, r3
 8013670:	637b      	str	r3, [r7, #52]	@ 0x34
 8013672:	e01e      	b.n	80136b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013674:	4b67      	ldr	r3, [pc, #412]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801367c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013680:	d106      	bne.n	8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8013682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013688:	d102      	bne.n	8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801368a:	4b65      	ldr	r3, [pc, #404]	@ (8013820 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 801368c:	637b      	str	r3, [r7, #52]	@ 0x34
 801368e:	e010      	b.n	80136b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013690:	4b60      	ldr	r3, [pc, #384]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801369c:	d106      	bne.n	80136ac <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 801369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80136a4:	d102      	bne.n	80136ac <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80136a6:	4b5f      	ldr	r3, [pc, #380]	@ (8013824 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80136a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80136aa:	e002      	b.n	80136b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80136b0:	e003      	b.n	80136ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80136b2:	e002      	b.n	80136ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80136b4:	2300      	movs	r3, #0
 80136b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80136b8:	bf00      	nop
          }
        }
        break;
 80136ba:	e2d6      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80136bc:	4b55      	ldr	r3, [pc, #340]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80136be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80136c2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80136c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80136c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136ce:	d031      	beq.n	8013734 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80136d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136d6:	d866      	bhi.n	80137a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80136d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136da:	2bc0      	cmp	r3, #192	@ 0xc0
 80136dc:	d027      	beq.n	801372e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80136de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80136e2:	d860      	bhi.n	80137a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80136e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e6:	2b80      	cmp	r3, #128	@ 0x80
 80136e8:	d019      	beq.n	801371e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80136ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ec:	2b80      	cmp	r3, #128	@ 0x80
 80136ee:	d85a      	bhi.n	80137a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80136f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d003      	beq.n	80136fe <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80136f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136f8:	2b40      	cmp	r3, #64	@ 0x40
 80136fa:	d008      	beq.n	801370e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80136fc:	e053      	b.n	80137a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80136fe:	f107 0320 	add.w	r3, r7, #32
 8013702:	4618      	mov	r0, r3
 8013704:	f7fd fb28 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8013708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801370a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801370c:	e04e      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801370e:	f107 0314 	add.w	r3, r7, #20
 8013712:	4618      	mov	r0, r3
 8013714:	f7fd fc8a 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801371c:	e046      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801371e:	f107 0308 	add.w	r3, r7, #8
 8013722:	4618      	mov	r0, r3
 8013724:	f7fd fdec 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801372c:	e03e      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 801372e:	4b3a      	ldr	r3, [pc, #232]	@ (8013818 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8013730:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013732:	e03b      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013734:	4b37      	ldr	r3, [pc, #220]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801373a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801373e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013740:	4b34      	ldr	r3, [pc, #208]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f003 0302 	and.w	r3, r3, #2
 8013748:	2b02      	cmp	r3, #2
 801374a:	d10c      	bne.n	8013766 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 801374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801374e:	2b00      	cmp	r3, #0
 8013750:	d109      	bne.n	8013766 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8013752:	4b30      	ldr	r3, [pc, #192]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	08db      	lsrs	r3, r3, #3
 8013758:	f003 0303 	and.w	r3, r3, #3
 801375c:	4a2f      	ldr	r2, [pc, #188]	@ (801381c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 801375e:	fa22 f303 	lsr.w	r3, r2, r3
 8013762:	637b      	str	r3, [r7, #52]	@ 0x34
 8013764:	e01e      	b.n	80137a4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013766:	4b2b      	ldr	r3, [pc, #172]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801376e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013772:	d106      	bne.n	8013782 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8013774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801377a:	d102      	bne.n	8013782 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801377c:	4b28      	ldr	r3, [pc, #160]	@ (8013820 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 801377e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013780:	e010      	b.n	80137a4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013782:	4b24      	ldr	r3, [pc, #144]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801378a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801378e:	d106      	bne.n	801379e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8013790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013792:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013796:	d102      	bne.n	801379e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8013798:	4b22      	ldr	r3, [pc, #136]	@ (8013824 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 801379a:	637b      	str	r3, [r7, #52]	@ 0x34
 801379c:	e002      	b.n	80137a4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 801379e:	2300      	movs	r3, #0
 80137a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80137a2:	e003      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80137a4:	e002      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80137a6:	2300      	movs	r3, #0
 80137a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80137aa:	bf00      	nop
          }
        }
        break;
 80137ac:	e25d      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80137ae:	4b19      	ldr	r3, [pc, #100]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80137b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80137b4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80137b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80137ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d103      	bne.n	80137c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80137c0:	f7fb fadc 	bl	800ed7c <HAL_RCC_GetPCLK2Freq>
 80137c4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80137c6:	e250      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80137c8:	4b12      	ldr	r3, [pc, #72]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80137d4:	d10b      	bne.n	80137ee <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80137d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80137dc:	d107      	bne.n	80137ee <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80137de:	f107 0314 	add.w	r3, r7, #20
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fd fc22 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80137ec:	e04f      	b.n	801388e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80137ee:	4b09      	ldr	r3, [pc, #36]	@ (8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137fa:	d115      	bne.n	8013828 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80137fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013802:	d111      	bne.n	8013828 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013804:	f107 0308 	add.w	r3, r7, #8
 8013808:	4618      	mov	r0, r3
 801380a:	f7fd fd79 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	637b      	str	r3, [r7, #52]	@ 0x34
 8013812:	e03c      	b.n	801388e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8013814:	44020c00 	.word	0x44020c00
 8013818:	00bb8000 	.word	0x00bb8000
 801381c:	03d09000 	.word	0x03d09000
 8013820:	003d0900 	.word	0x003d0900
 8013824:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8013828:	4b94      	ldr	r3, [pc, #592]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f003 0302 	and.w	r3, r3, #2
 8013830:	2b02      	cmp	r3, #2
 8013832:	d10d      	bne.n	8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8013834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013836:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801383a:	d109      	bne.n	8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801383c:	4b8f      	ldr	r3, [pc, #572]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	08db      	lsrs	r3, r3, #3
 8013842:	f003 0303 	and.w	r3, r3, #3
 8013846:	4a8e      	ldr	r2, [pc, #568]	@ (8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8013848:	fa22 f303 	lsr.w	r3, r2, r3
 801384c:	637b      	str	r3, [r7, #52]	@ 0x34
 801384e:	e01e      	b.n	801388e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8013850:	4b8a      	ldr	r3, [pc, #552]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801385c:	d106      	bne.n	801386c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 801385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013864:	d102      	bne.n	801386c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8013866:	4b87      	ldr	r3, [pc, #540]	@ (8013a84 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8013868:	637b      	str	r3, [r7, #52]	@ 0x34
 801386a:	e010      	b.n	801388e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 801386c:	4b83      	ldr	r3, [pc, #524]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013878:	d106      	bne.n	8013888 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 801387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801387c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8013880:	d102      	bne.n	8013888 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8013882:	4b81      	ldr	r3, [pc, #516]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8013884:	637b      	str	r3, [r7, #52]	@ 0x34
 8013886:	e002      	b.n	801388e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8013888:	2300      	movs	r3, #0
 801388a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801388c:	e1ed      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801388e:	e1ec      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8013890:	4b7a      	ldr	r3, [pc, #488]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8013892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013896:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801389a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 801389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d103      	bne.n	80138aa <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80138a2:	f7fb fa81 	bl	800eda8 <HAL_RCC_GetPCLK3Freq>
 80138a6:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80138a8:	e1df      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80138aa:	4b74      	ldr	r3, [pc, #464]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80138b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80138b6:	d10b      	bne.n	80138d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80138b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80138be:	d107      	bne.n	80138d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138c0:	f107 0314 	add.w	r3, r7, #20
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7fd fbb1 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80138ca:	69bb      	ldr	r3, [r7, #24]
 80138cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80138ce:	e045      	b.n	801395c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80138d0:	4b6a      	ldr	r3, [pc, #424]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80138d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138dc:	d10b      	bne.n	80138f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80138de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80138e4:	d107      	bne.n	80138f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138e6:	f107 0308 	add.w	r3, r7, #8
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fd fd08 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80138f4:	e032      	b.n	801395c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80138f6:	4b61      	ldr	r3, [pc, #388]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f003 0302 	and.w	r3, r3, #2
 80138fe:	2b02      	cmp	r3, #2
 8013900:	d10d      	bne.n	801391e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8013902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013904:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013908:	d109      	bne.n	801391e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801390a:	4b5c      	ldr	r3, [pc, #368]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	08db      	lsrs	r3, r3, #3
 8013910:	f003 0303 	and.w	r3, r3, #3
 8013914:	4a5a      	ldr	r2, [pc, #360]	@ (8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8013916:	fa22 f303 	lsr.w	r3, r2, r3
 801391a:	637b      	str	r3, [r7, #52]	@ 0x34
 801391c:	e01e      	b.n	801395c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 801391e:	4b57      	ldr	r3, [pc, #348]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801392a:	d106      	bne.n	801393a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 801392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801392e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013932:	d102      	bne.n	801393a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8013934:	4b53      	ldr	r3, [pc, #332]	@ (8013a84 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8013936:	637b      	str	r3, [r7, #52]	@ 0x34
 8013938:	e010      	b.n	801395c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 801393a:	4b50      	ldr	r3, [pc, #320]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013946:	d106      	bne.n	8013956 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8013948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801394e:	d102      	bne.n	8013956 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8013950:	4b4d      	ldr	r3, [pc, #308]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8013952:	637b      	str	r3, [r7, #52]	@ 0x34
 8013954:	e002      	b.n	801395c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8013956:	2300      	movs	r3, #0
 8013958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801395a:	e186      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801395c:	e185      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801395e:	4b47      	ldr	r3, [pc, #284]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8013960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013964:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8013968:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 801396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801396c:	2b00      	cmp	r3, #0
 801396e:	d103      	bne.n	8013978 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8013970:	f7fb fa04 	bl	800ed7c <HAL_RCC_GetPCLK2Freq>
 8013974:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8013976:	e178      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8013978:	4b40      	ldr	r3, [pc, #256]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013980:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013984:	d10b      	bne.n	801399e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8013986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801398c:	d107      	bne.n	801399e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801398e:	f107 0314 	add.w	r3, r7, #20
 8013992:	4618      	mov	r0, r3
 8013994:	f7fd fb4a 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	637b      	str	r3, [r7, #52]	@ 0x34
 801399c:	e045      	b.n	8013a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 801399e:	4b37      	ldr	r3, [pc, #220]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80139a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139aa:	d10b      	bne.n	80139c4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80139ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139b2:	d107      	bne.n	80139c4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139b4:	f107 0308 	add.w	r3, r7, #8
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7fd fca1 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80139c2:	e032      	b.n	8013a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80139c4:	4b2d      	ldr	r3, [pc, #180]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f003 0302 	and.w	r3, r3, #2
 80139cc:	2b02      	cmp	r3, #2
 80139ce:	d10d      	bne.n	80139ec <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80139d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139d2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80139d6:	d109      	bne.n	80139ec <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80139d8:	4b28      	ldr	r3, [pc, #160]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	08db      	lsrs	r3, r3, #3
 80139de:	f003 0303 	and.w	r3, r3, #3
 80139e2:	4a27      	ldr	r2, [pc, #156]	@ (8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80139e4:	fa22 f303 	lsr.w	r3, r2, r3
 80139e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80139ea:	e01e      	b.n	8013a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80139ec:	4b23      	ldr	r3, [pc, #140]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80139f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139f8:	d106      	bne.n	8013a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80139fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a00:	d102      	bne.n	8013a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8013a02:	4b20      	ldr	r3, [pc, #128]	@ (8013a84 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8013a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a06:	e010      	b.n	8013a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8013a08:	4b1c      	ldr	r3, [pc, #112]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a14:	d106      	bne.n	8013a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8013a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a18:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8013a1c:	d102      	bne.n	8013a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8013a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8013a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a22:	e002      	b.n	8013a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8013a24:	2300      	movs	r3, #0
 8013a26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013a28:	e11f      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8013a2a:	e11e      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8013a2c:	4b13      	ldr	r3, [pc, #76]	@ (8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8013a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013a32:	f003 0303 	and.w	r3, r3, #3
 8013a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8013a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a3a:	2b03      	cmp	r3, #3
 8013a3c:	d85f      	bhi.n	8013afe <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8013a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8013a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8013a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a44:	08013a55 	.word	0x08013a55
 8013a48:	08013a5d 	.word	0x08013a5d
 8013a4c:	08013a6d 	.word	0x08013a6d
 8013a50:	08013a8d 	.word	0x08013a8d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8013a54:	f7fb f960 	bl	800ed18 <HAL_RCC_GetHCLKFreq>
 8013a58:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8013a5a:	e053      	b.n	8013b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013a5c:	f107 0320 	add.w	r3, r7, #32
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fd f979 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8013a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013a6a:	e04b      	b.n	8013b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a6c:	f107 0314 	add.w	r3, r7, #20
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7fd fadb 	bl	801102c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013a7a:	e043      	b.n	8013b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8013a7c:	44020c00 	.word	0x44020c00
 8013a80:	03d09000 	.word	0x03d09000
 8013a84:	003d0900 	.word	0x003d0900
 8013a88:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013a8c:	4b79      	ldr	r3, [pc, #484]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013a92:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8013a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013a98:	4b76      	ldr	r3, [pc, #472]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f003 0302 	and.w	r3, r3, #2
 8013aa0:	2b02      	cmp	r3, #2
 8013aa2:	d10c      	bne.n	8013abe <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8013aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d109      	bne.n	8013abe <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8013aaa:	4b72      	ldr	r3, [pc, #456]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	08db      	lsrs	r3, r3, #3
 8013ab0:	f003 0303 	and.w	r3, r3, #3
 8013ab4:	4a70      	ldr	r2, [pc, #448]	@ (8013c78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8013ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8013aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8013abc:	e01e      	b.n	8013afc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013abe:	4b6d      	ldr	r3, [pc, #436]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013aca:	d106      	bne.n	8013ada <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8013acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ad2:	d102      	bne.n	8013ada <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8013ad4:	4b69      	ldr	r3, [pc, #420]	@ (8013c7c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8013ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ad8:	e010      	b.n	8013afc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013ada:	4b66      	ldr	r3, [pc, #408]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013ae6:	d106      	bne.n	8013af6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8013ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013aee:	d102      	bne.n	8013af6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8013af0:	4b63      	ldr	r3, [pc, #396]	@ (8013c80 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8013af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013af4:	e002      	b.n	8013afc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8013af6:	2300      	movs	r3, #0
 8013af8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8013afa:	e003      	b.n	8013b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8013afc:	e002      	b.n	8013b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8013afe:	2300      	movs	r3, #0
 8013b00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8013b02:	bf00      	nop
          }
        }
        break;
 8013b04:	e0b1      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8013b06:	4b5b      	ldr	r3, [pc, #364]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013b0c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8013b10:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8013b12:	4b58      	ldr	r3, [pc, #352]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013b18:	f003 0302 	and.w	r3, r3, #2
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	d106      	bne.n	8013b2e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8013b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d103      	bne.n	8013b2e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8013b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b2c:	e01f      	b.n	8013b6e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8013b2e:	4b51      	ldr	r3, [pc, #324]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013b3c:	d106      	bne.n	8013b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8013b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b40:	2b40      	cmp	r3, #64	@ 0x40
 8013b42:	d103      	bne.n	8013b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8013b44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8013b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b4a:	e010      	b.n	8013b6e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8013b4c:	4b49      	ldr	r3, [pc, #292]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b58:	d106      	bne.n	8013b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8013b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b5c:	2b80      	cmp	r3, #128	@ 0x80
 8013b5e:	d103      	bne.n	8013b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8013b60:	f248 0312 	movw	r3, #32786	@ 0x8012
 8013b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b66:	e002      	b.n	8013b6e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8013b6c:	e07d      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8013b6e:	e07c      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8013b70:	4b40      	ldr	r3, [pc, #256]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013b76:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8013b7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8013b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013b84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013b88:	d105      	bne.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8013b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d102      	bne.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8013b90:	4b3c      	ldr	r3, [pc, #240]	@ (8013c84 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8013b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b94:	e031      	b.n	8013bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8013b96:	4b37      	ldr	r3, [pc, #220]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013b9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013ba2:	d10a      	bne.n	8013bba <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8013ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ba6:	2b10      	cmp	r3, #16
 8013ba8:	d107      	bne.n	8013bba <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013baa:	f107 0320 	add.w	r3, r7, #32
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fd f8d2 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bb8:	e01f      	b.n	8013bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8013bba:	4b2e      	ldr	r3, [pc, #184]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013bc0:	f003 0302 	and.w	r3, r3, #2
 8013bc4:	2b02      	cmp	r3, #2
 8013bc6:	d106      	bne.n	8013bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8013bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bca:	2b20      	cmp	r3, #32
 8013bcc:	d103      	bne.n	8013bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8013bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bd4:	e011      	b.n	8013bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8013bd6:	4b27      	ldr	r3, [pc, #156]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013be4:	d106      	bne.n	8013bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8013be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013be8:	2b30      	cmp	r3, #48	@ 0x30
 8013bea:	d103      	bne.n	8013bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8013bec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8013bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bf2:	e002      	b.n	8013bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8013bf8:	e037      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8013bfa:	e036      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8013bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013c02:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8013c06:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8013c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c0a:	2b10      	cmp	r3, #16
 8013c0c:	d107      	bne.n	8013c1e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013c0e:	f107 0320 	add.w	r3, r7, #32
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fd f8a0 	bl	8010d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8013c1c:	e025      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8013c1e:	4b15      	ldr	r3, [pc, #84]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c2a:	d10a      	bne.n	8013c42 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8013c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2e:	2b20      	cmp	r3, #32
 8013c30:	d107      	bne.n	8013c42 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013c32:	f107 0308 	add.w	r3, r7, #8
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fd fb62 	bl	8011300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c40:	e00f      	b.n	8013c62 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8013c42:	4b0c      	ldr	r3, [pc, #48]	@ (8013c74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013c4e:	d105      	bne.n	8013c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8013c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c52:	2b30      	cmp	r3, #48	@ 0x30
 8013c54:	d102      	bne.n	8013c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8013c56:	4b0b      	ldr	r3, [pc, #44]	@ (8013c84 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8013c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c5a:	e002      	b.n	8013c62 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8013c60:	e003      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8013c62:	e002      	b.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8013c64:	2300      	movs	r3, #0
 8013c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013c68:	bf00      	nop
    }
  }

  return (frequency);
 8013c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	373c      	adds	r7, #60	@ 0x3c
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd90      	pop	{r4, r7, pc}
 8013c74:	44020c00 	.word	0x44020c00
 8013c78:	03d09000 	.word	0x03d09000
 8013c7c:	003d0900 	.word	0x003d0900
 8013c80:	017d7840 	.word	0x017d7840
 8013c84:	02dc6c00 	.word	0x02dc6c00

08013c88 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8013c90:	4b48      	ldr	r3, [pc, #288]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	4a47      	ldr	r2, [pc, #284]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013c96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013c9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8013c9c:	f7f7 ff8a 	bl	800bbb4 <HAL_GetTick>
 8013ca0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013ca2:	e008      	b.n	8013cb6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013ca4:	f7f7 ff86 	bl	800bbb4 <HAL_GetTick>
 8013ca8:	4602      	mov	r2, r0
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	1ad3      	subs	r3, r2, r3
 8013cae:	2b02      	cmp	r3, #2
 8013cb0:	d901      	bls.n	8013cb6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8013cb2:	2303      	movs	r3, #3
 8013cb4:	e07a      	b.n	8013dac <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d1f0      	bne.n	8013ca4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8013cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cc6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013cca:	f023 0303 	bic.w	r3, r3, #3
 8013cce:	687a      	ldr	r2, [r7, #4]
 8013cd0:	6811      	ldr	r1, [r2, #0]
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	6852      	ldr	r2, [r2, #4]
 8013cd6:	0212      	lsls	r2, r2, #8
 8013cd8:	430a      	orrs	r2, r1
 8013cda:	4936      	ldr	r1, [pc, #216]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	689b      	ldr	r3, [r3, #8]
 8013ce4:	3b01      	subs	r3, #1
 8013ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	68db      	ldr	r3, [r3, #12]
 8013cee:	3b01      	subs	r3, #1
 8013cf0:	025b      	lsls	r3, r3, #9
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	431a      	orrs	r2, r3
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	691b      	ldr	r3, [r3, #16]
 8013cfa:	3b01      	subs	r3, #1
 8013cfc:	041b      	lsls	r3, r3, #16
 8013cfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013d02:	431a      	orrs	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	3b01      	subs	r3, #1
 8013d0a:	061b      	lsls	r3, r3, #24
 8013d0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013d10:	4928      	ldr	r1, [pc, #160]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d12:	4313      	orrs	r3, r2
 8013d14:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8013d16:	4b27      	ldr	r3, [pc, #156]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d1a:	f023 020c 	bic.w	r2, r3, #12
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	699b      	ldr	r3, [r3, #24]
 8013d22:	4924      	ldr	r1, [pc, #144]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d24:	4313      	orrs	r3, r2
 8013d26:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8013d28:	4b22      	ldr	r3, [pc, #136]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d2c:	f023 0220 	bic.w	r2, r3, #32
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	69db      	ldr	r3, [r3, #28]
 8013d34:	491f      	ldr	r1, [pc, #124]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d36:	4313      	orrs	r3, r2
 8013d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8013d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d42:	491c      	ldr	r1, [pc, #112]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d44:	4313      	orrs	r3, r2
 8013d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8013d48:	4b1a      	ldr	r3, [pc, #104]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d4c:	4a19      	ldr	r2, [pc, #100]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d4e:	f023 0310 	bic.w	r3, r3, #16
 8013d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8013d54:	4b17      	ldr	r3, [pc, #92]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013d5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	6a12      	ldr	r2, [r2, #32]
 8013d64:	00d2      	lsls	r2, r2, #3
 8013d66:	4913      	ldr	r1, [pc, #76]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d68:	4313      	orrs	r3, r2
 8013d6a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8013d6c:	4b11      	ldr	r3, [pc, #68]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d70:	4a10      	ldr	r2, [pc, #64]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d72:	f043 0310 	orr.w	r3, r3, #16
 8013d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8013d78:	4b0e      	ldr	r3, [pc, #56]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013d7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013d82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8013d84:	f7f7 ff16 	bl	800bbb4 <HAL_GetTick>
 8013d88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013d8a:	e008      	b.n	8013d9e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013d8c:	f7f7 ff12 	bl	800bbb4 <HAL_GetTick>
 8013d90:	4602      	mov	r2, r0
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	1ad3      	subs	r3, r2, r3
 8013d96:	2b02      	cmp	r3, #2
 8013d98:	d901      	bls.n	8013d9e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8013d9a:	2303      	movs	r3, #3
 8013d9c:	e006      	b.n	8013dac <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013d9e:	4b05      	ldr	r3, [pc, #20]	@ (8013db4 <RCCEx_PLL2_Config+0x12c>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d0f0      	beq.n	8013d8c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8013daa:	2300      	movs	r3, #0

}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3710      	adds	r7, #16
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	44020c00 	.word	0x44020c00

08013db8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b084      	sub	sp, #16
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8013dc0:	4b48      	ldr	r3, [pc, #288]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	4a47      	ldr	r2, [pc, #284]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013dca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8013dcc:	f7f7 fef2 	bl	800bbb4 <HAL_GetTick>
 8013dd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013dd2:	e008      	b.n	8013de6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013dd4:	f7f7 feee 	bl	800bbb4 <HAL_GetTick>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	1ad3      	subs	r3, r2, r3
 8013dde:	2b02      	cmp	r3, #2
 8013de0:	d901      	bls.n	8013de6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8013de2:	2303      	movs	r3, #3
 8013de4:	e07a      	b.n	8013edc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013de6:	4b3f      	ldr	r3, [pc, #252]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d1f0      	bne.n	8013dd4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8013df2:	4b3c      	ldr	r3, [pc, #240]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013df6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013dfa:	f023 0303 	bic.w	r3, r3, #3
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	6811      	ldr	r1, [r2, #0]
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	6852      	ldr	r2, [r2, #4]
 8013e06:	0212      	lsls	r2, r2, #8
 8013e08:	430a      	orrs	r2, r1
 8013e0a:	4936      	ldr	r1, [pc, #216]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	630b      	str	r3, [r1, #48]	@ 0x30
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	689b      	ldr	r3, [r3, #8]
 8013e14:	3b01      	subs	r3, #1
 8013e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	68db      	ldr	r3, [r3, #12]
 8013e1e:	3b01      	subs	r3, #1
 8013e20:	025b      	lsls	r3, r3, #9
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	431a      	orrs	r2, r3
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	691b      	ldr	r3, [r3, #16]
 8013e2a:	3b01      	subs	r3, #1
 8013e2c:	041b      	lsls	r3, r3, #16
 8013e2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013e32:	431a      	orrs	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	695b      	ldr	r3, [r3, #20]
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	061b      	lsls	r3, r3, #24
 8013e3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013e40:	4928      	ldr	r1, [pc, #160]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e42:	4313      	orrs	r3, r2
 8013e44:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013e46:	4b27      	ldr	r3, [pc, #156]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e4a:	f023 020c 	bic.w	r2, r3, #12
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	699b      	ldr	r3, [r3, #24]
 8013e52:	4924      	ldr	r1, [pc, #144]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e54:	4313      	orrs	r3, r2
 8013e56:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8013e58:	4b22      	ldr	r3, [pc, #136]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e5c:	f023 0220 	bic.w	r2, r3, #32
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	69db      	ldr	r3, [r3, #28]
 8013e64:	491f      	ldr	r1, [pc, #124]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e66:	4313      	orrs	r3, r2
 8013e68:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8013e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e72:	491c      	ldr	r1, [pc, #112]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e74:	4313      	orrs	r3, r2
 8013e76:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8013e78:	4b1a      	ldr	r3, [pc, #104]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e7c:	4a19      	ldr	r2, [pc, #100]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e7e:	f023 0310 	bic.w	r3, r3, #16
 8013e82:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8013e84:	4b17      	ldr	r3, [pc, #92]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013e88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013e8c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	6a12      	ldr	r2, [r2, #32]
 8013e94:	00d2      	lsls	r2, r2, #3
 8013e96:	4913      	ldr	r1, [pc, #76]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e98:	4313      	orrs	r3, r2
 8013e9a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8013e9c:	4b11      	ldr	r3, [pc, #68]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ea0:	4a10      	ldr	r2, [pc, #64]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013ea2:	f043 0310 	orr.w	r3, r3, #16
 8013ea6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8013ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	4a0d      	ldr	r2, [pc, #52]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013eb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8013eb4:	f7f7 fe7e 	bl	800bbb4 <HAL_GetTick>
 8013eb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013eba:	e008      	b.n	8013ece <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013ebc:	f7f7 fe7a 	bl	800bbb4 <HAL_GetTick>
 8013ec0:	4602      	mov	r2, r0
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	1ad3      	subs	r3, r2, r3
 8013ec6:	2b02      	cmp	r3, #2
 8013ec8:	d901      	bls.n	8013ece <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8013eca:	2303      	movs	r3, #3
 8013ecc:	e006      	b.n	8013edc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013ece:	4b05      	ldr	r3, [pc, #20]	@ (8013ee4 <RCCEx_PLL3_Config+0x12c>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d0f0      	beq.n	8013ebc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8013eda:	2300      	movs	r3, #0
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	44020c00 	.word	0x44020c00

08013ee8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d071      	beq.n	8013fde <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d106      	bne.n	8013f14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7f7 fa20 	bl	800b354 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2202      	movs	r2, #2
 8013f18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013f1c:	4b32      	ldr	r3, [pc, #200]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	f003 0310 	and.w	r3, r3, #16
 8013f24:	2b10      	cmp	r3, #16
 8013f26:	d051      	beq.n	8013fcc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013f28:	4b2f      	ldr	r3, [pc, #188]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f2a:	22ca      	movs	r2, #202	@ 0xca
 8013f2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8013f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f30:	2253      	movs	r2, #83	@ 0x53
 8013f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f000 fa53 	bl	80143e0 <RTC_EnterInitMode>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8013f3e:	7bfb      	ldrb	r3, [r7, #15]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d13f      	bne.n	8013fc4 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8013f44:	4b28      	ldr	r3, [pc, #160]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f46:	699b      	ldr	r3, [r3, #24]
 8013f48:	4a27      	ldr	r2, [pc, #156]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f4a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8013f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f52:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8013f54:	4b24      	ldr	r3, [pc, #144]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f56:	699a      	ldr	r2, [r3, #24]
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6859      	ldr	r1, [r3, #4]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	691b      	ldr	r3, [r3, #16]
 8013f60:	4319      	orrs	r1, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	430b      	orrs	r3, r1
 8013f68:	491f      	ldr	r1, [pc, #124]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	68da      	ldr	r2, [r3, #12]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	689b      	ldr	r3, [r3, #8]
 8013f76:	041b      	lsls	r3, r3, #16
 8013f78:	491b      	ldr	r1, [pc, #108]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f7a:	4313      	orrs	r3, r2
 8013f7c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8013f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f80:	68db      	ldr	r3, [r3, #12]
 8013f82:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f8e:	430b      	orrs	r3, r1
 8013f90:	4915      	ldr	r1, [pc, #84]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013f92:	4313      	orrs	r3, r2
 8013f94:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f000 fa5e 	bl	8014458 <RTC_ExitInitMode>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d10e      	bne.n	8013fc4 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 8013fa6:	4b10      	ldr	r3, [pc, #64]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013fa8:	699b      	ldr	r3, [r3, #24]
 8013faa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6a19      	ldr	r1, [r3, #32]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	69db      	ldr	r3, [r3, #28]
 8013fb6:	4319      	orrs	r1, r3
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	695b      	ldr	r3, [r3, #20]
 8013fbc:	430b      	orrs	r3, r1
 8013fbe:	490a      	ldr	r1, [pc, #40]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013fc0:	4313      	orrs	r3, r2
 8013fc2:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013fc4:	4b08      	ldr	r3, [pc, #32]	@ (8013fe8 <HAL_RTC_Init+0x100>)
 8013fc6:	22ff      	movs	r2, #255	@ 0xff
 8013fc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8013fca:	e001      	b.n	8013fd0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8013fd0:	7bfb      	ldrb	r3, [r7, #15]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d103      	bne.n	8013fde <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2201      	movs	r2, #1
 8013fda:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8013fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	44007800 	.word	0x44007800

08013fec <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013fec:	b590      	push	{r4, r7, lr}
 8013fee:	b087      	sub	sp, #28
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	60f8      	str	r0, [r7, #12]
 8013ff4:	60b9      	str	r1, [r7, #8]
 8013ff6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d101      	bne.n	8014006 <HAL_RTC_SetTime+0x1a>
 8014002:	2302      	movs	r3, #2
 8014004:	e07e      	b.n	8014104 <HAL_RTC_SetTime+0x118>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	2201      	movs	r2, #1
 801400a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	2202      	movs	r2, #2
 8014012:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014016:	4b3d      	ldr	r3, [pc, #244]	@ (801410c <HAL_RTC_SetTime+0x120>)
 8014018:	22ca      	movs	r2, #202	@ 0xca
 801401a:	625a      	str	r2, [r3, #36]	@ 0x24
 801401c:	4b3b      	ldr	r3, [pc, #236]	@ (801410c <HAL_RTC_SetTime+0x120>)
 801401e:	2253      	movs	r2, #83	@ 0x53
 8014020:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f000 f9dc 	bl	80143e0 <RTC_EnterInitMode>
 8014028:	4603      	mov	r3, r0
 801402a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801402c:	7cfb      	ldrb	r3, [r7, #19]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d159      	bne.n	80140e6 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8014032:	4b36      	ldr	r3, [pc, #216]	@ (801410c <HAL_RTC_SetTime+0x120>)
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801403a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801403e:	d04d      	beq.n	80140dc <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d125      	bne.n	8014092 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8014046:	4b31      	ldr	r3, [pc, #196]	@ (801410c <HAL_RTC_SetTime+0x120>)
 8014048:	699b      	ldr	r3, [r3, #24]
 801404a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801404e:	2b00      	cmp	r3, #0
 8014050:	d102      	bne.n	8014058 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	2200      	movs	r2, #0
 8014056:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	4618      	mov	r0, r3
 801405e:	f000 fa39 	bl	80144d4 <RTC_ByteToBcd2>
 8014062:	4603      	mov	r3, r0
 8014064:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	785b      	ldrb	r3, [r3, #1]
 801406a:	4618      	mov	r0, r3
 801406c:	f000 fa32 	bl	80144d4 <RTC_ByteToBcd2>
 8014070:	4603      	mov	r3, r0
 8014072:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014074:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	789b      	ldrb	r3, [r3, #2]
 801407a:	4618      	mov	r0, r3
 801407c:	f000 fa2a 	bl	80144d4 <RTC_ByteToBcd2>
 8014080:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014082:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	78db      	ldrb	r3, [r3, #3]
 801408a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801408c:	4313      	orrs	r3, r2
 801408e:	617b      	str	r3, [r7, #20]
 8014090:	e017      	b.n	80140c2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8014092:	4b1e      	ldr	r3, [pc, #120]	@ (801410c <HAL_RTC_SetTime+0x120>)
 8014094:	699b      	ldr	r3, [r3, #24]
 8014096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801409a:	2b00      	cmp	r3, #0
 801409c:	d102      	bne.n	80140a4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	2200      	movs	r2, #0
 80140a2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	785b      	ldrb	r3, [r3, #1]
 80140ae:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80140b0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80140b2:	68ba      	ldr	r2, [r7, #8]
 80140b4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80140b6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	78db      	ldrb	r3, [r3, #3]
 80140bc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80140be:	4313      	orrs	r3, r2
 80140c0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80140c2:	4a12      	ldr	r2, [pc, #72]	@ (801410c <HAL_RTC_SetTime+0x120>)
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80140ca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80140ce:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80140d0:	4b0e      	ldr	r3, [pc, #56]	@ (801410c <HAL_RTC_SetTime+0x120>)
 80140d2:	699b      	ldr	r3, [r3, #24]
 80140d4:	4a0d      	ldr	r2, [pc, #52]	@ (801410c <HAL_RTC_SetTime+0x120>)
 80140d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80140da:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80140dc:	68f8      	ldr	r0, [r7, #12]
 80140de:	f000 f9bb 	bl	8014458 <RTC_ExitInitMode>
 80140e2:	4603      	mov	r3, r0
 80140e4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80140e6:	4b09      	ldr	r3, [pc, #36]	@ (801410c <HAL_RTC_SetTime+0x120>)
 80140e8:	22ff      	movs	r2, #255	@ 0xff
 80140ea:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80140ec:	7cfb      	ldrb	r3, [r7, #19]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d103      	bne.n	80140fa <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2201      	movs	r2, #1
 80140f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	2200      	movs	r2, #0
 80140fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8014102:	7cfb      	ldrb	r3, [r7, #19]
}
 8014104:	4618      	mov	r0, r3
 8014106:	371c      	adds	r7, #28
 8014108:	46bd      	mov	sp, r7
 801410a:	bd90      	pop	{r4, r7, pc}
 801410c:	44007800 	.word	0x44007800

08014110 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b086      	sub	sp, #24
 8014114:	af00      	add	r7, sp, #0
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 801411c:	4b2c      	ldr	r3, [pc, #176]	@ (80141d0 <HAL_RTC_GetTime+0xc0>)
 801411e:	689a      	ldr	r2, [r3, #8]
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8014124:	4b2a      	ldr	r3, [pc, #168]	@ (80141d0 <HAL_RTC_GetTime+0xc0>)
 8014126:	68db      	ldr	r3, [r3, #12]
 8014128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801412c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014130:	d049      	beq.n	80141c6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8014132:	4b27      	ldr	r3, [pc, #156]	@ (80141d0 <HAL_RTC_GetTime+0xc0>)
 8014134:	691b      	ldr	r3, [r3, #16]
 8014136:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 801413e:	4b24      	ldr	r3, [pc, #144]	@ (80141d0 <HAL_RTC_GetTime+0xc0>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8014146:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801414a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	0c1b      	lsrs	r3, r3, #16
 8014150:	b2db      	uxtb	r3, r3
 8014152:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014156:	b2da      	uxtb	r2, r3
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	0a1b      	lsrs	r3, r3, #8
 8014160:	b2db      	uxtb	r3, r3
 8014162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014166:	b2da      	uxtb	r2, r3
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	b2db      	uxtb	r3, r3
 8014170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014174:	b2da      	uxtb	r2, r3
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	0d9b      	lsrs	r3, r3, #22
 801417e:	b2db      	uxtb	r3, r3
 8014180:	f003 0301 	and.w	r3, r3, #1
 8014184:	b2da      	uxtb	r2, r3
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d11a      	bne.n	80141c6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	4618      	mov	r0, r3
 8014196:	f000 f9bd 	bl	8014514 <RTC_Bcd2ToByte>
 801419a:	4603      	mov	r3, r0
 801419c:	461a      	mov	r2, r3
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	785b      	ldrb	r3, [r3, #1]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f000 f9b4 	bl	8014514 <RTC_Bcd2ToByte>
 80141ac:	4603      	mov	r3, r0
 80141ae:	461a      	mov	r2, r3
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	789b      	ldrb	r3, [r3, #2]
 80141b8:	4618      	mov	r0, r3
 80141ba:	f000 f9ab 	bl	8014514 <RTC_Bcd2ToByte>
 80141be:	4603      	mov	r3, r0
 80141c0:	461a      	mov	r2, r3
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80141c6:	2300      	movs	r3, #0
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	44007800 	.word	0x44007800

080141d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80141d4:	b590      	push	{r4, r7, lr}
 80141d6:	b087      	sub	sp, #28
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80141e6:	2b01      	cmp	r3, #1
 80141e8:	d101      	bne.n	80141ee <HAL_RTC_SetDate+0x1a>
 80141ea:	2302      	movs	r3, #2
 80141ec:	e071      	b.n	80142d2 <HAL_RTC_SetDate+0xfe>
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2201      	movs	r2, #1
 80141f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2202      	movs	r2, #2
 80141fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10e      	bne.n	8014222 <HAL_RTC_SetDate+0x4e>
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	785b      	ldrb	r3, [r3, #1]
 8014208:	f003 0310 	and.w	r3, r3, #16
 801420c:	2b00      	cmp	r3, #0
 801420e:	d008      	beq.n	8014222 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	785b      	ldrb	r3, [r3, #1]
 8014214:	f023 0310 	bic.w	r3, r3, #16
 8014218:	b2db      	uxtb	r3, r3
 801421a:	330a      	adds	r3, #10
 801421c:	b2da      	uxtb	r2, r3
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d11c      	bne.n	8014262 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	78db      	ldrb	r3, [r3, #3]
 801422c:	4618      	mov	r0, r3
 801422e:	f000 f951 	bl	80144d4 <RTC_ByteToBcd2>
 8014232:	4603      	mov	r3, r0
 8014234:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	785b      	ldrb	r3, [r3, #1]
 801423a:	4618      	mov	r0, r3
 801423c:	f000 f94a 	bl	80144d4 <RTC_ByteToBcd2>
 8014240:	4603      	mov	r3, r0
 8014242:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014244:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	789b      	ldrb	r3, [r3, #2]
 801424a:	4618      	mov	r0, r3
 801424c:	f000 f942 	bl	80144d4 <RTC_ByteToBcd2>
 8014250:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014252:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801425c:	4313      	orrs	r3, r2
 801425e:	617b      	str	r3, [r7, #20]
 8014260:	e00e      	b.n	8014280 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	78db      	ldrb	r3, [r3, #3]
 8014266:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	785b      	ldrb	r3, [r3, #1]
 801426c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801426e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8014270:	68ba      	ldr	r2, [r7, #8]
 8014272:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8014274:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801427c:	4313      	orrs	r3, r2
 801427e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014280:	4b16      	ldr	r3, [pc, #88]	@ (80142dc <HAL_RTC_SetDate+0x108>)
 8014282:	22ca      	movs	r2, #202	@ 0xca
 8014284:	625a      	str	r2, [r3, #36]	@ 0x24
 8014286:	4b15      	ldr	r3, [pc, #84]	@ (80142dc <HAL_RTC_SetDate+0x108>)
 8014288:	2253      	movs	r2, #83	@ 0x53
 801428a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801428c:	68f8      	ldr	r0, [r7, #12]
 801428e:	f000 f8a7 	bl	80143e0 <RTC_EnterInitMode>
 8014292:	4603      	mov	r3, r0
 8014294:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8014296:	7cfb      	ldrb	r3, [r7, #19]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d10b      	bne.n	80142b4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 801429c:	4a0f      	ldr	r2, [pc, #60]	@ (80142dc <HAL_RTC_SetDate+0x108>)
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80142a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80142a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80142aa:	68f8      	ldr	r0, [r7, #12]
 80142ac:	f000 f8d4 	bl	8014458 <RTC_ExitInitMode>
 80142b0:	4603      	mov	r3, r0
 80142b2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80142b4:	4b09      	ldr	r3, [pc, #36]	@ (80142dc <HAL_RTC_SetDate+0x108>)
 80142b6:	22ff      	movs	r2, #255	@ 0xff
 80142b8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80142ba:	7cfb      	ldrb	r3, [r7, #19]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d103      	bne.n	80142c8 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2201      	movs	r2, #1
 80142c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2200      	movs	r2, #0
 80142cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 80142d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	371c      	adds	r7, #28
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd90      	pop	{r4, r7, pc}
 80142da:	bf00      	nop
 80142dc:	44007800 	.word	0x44007800

080142e0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80142ec:	4b22      	ldr	r3, [pc, #136]	@ (8014378 <HAL_RTC_GetDate+0x98>)
 80142ee:	685b      	ldr	r3, [r3, #4]
 80142f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80142f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80142f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	0c1b      	lsrs	r3, r3, #16
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	0a1b      	lsrs	r3, r3, #8
 8014308:	b2db      	uxtb	r3, r3
 801430a:	f003 031f 	and.w	r3, r3, #31
 801430e:	b2da      	uxtb	r2, r3
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	b2db      	uxtb	r3, r3
 8014318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801431c:	b2da      	uxtb	r2, r3
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	0b5b      	lsrs	r3, r3, #13
 8014326:	b2db      	uxtb	r3, r3
 8014328:	f003 0307 	and.w	r3, r3, #7
 801432c:	b2da      	uxtb	r2, r3
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d11a      	bne.n	801436e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	78db      	ldrb	r3, [r3, #3]
 801433c:	4618      	mov	r0, r3
 801433e:	f000 f8e9 	bl	8014514 <RTC_Bcd2ToByte>
 8014342:	4603      	mov	r3, r0
 8014344:	461a      	mov	r2, r3
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	785b      	ldrb	r3, [r3, #1]
 801434e:	4618      	mov	r0, r3
 8014350:	f000 f8e0 	bl	8014514 <RTC_Bcd2ToByte>
 8014354:	4603      	mov	r3, r0
 8014356:	461a      	mov	r2, r3
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	789b      	ldrb	r3, [r3, #2]
 8014360:	4618      	mov	r0, r3
 8014362:	f000 f8d7 	bl	8014514 <RTC_Bcd2ToByte>
 8014366:	4603      	mov	r3, r0
 8014368:	461a      	mov	r2, r3
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801436e:	2300      	movs	r3, #0
}
 8014370:	4618      	mov	r0, r3
 8014372:	3718      	adds	r7, #24
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}
 8014378:	44007800 	.word	0x44007800

0801437c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8014384:	4b15      	ldr	r3, [pc, #84]	@ (80143dc <HAL_RTC_WaitForSynchro+0x60>)
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	4a14      	ldr	r2, [pc, #80]	@ (80143dc <HAL_RTC_WaitForSynchro+0x60>)
 801438a:	f023 0320 	bic.w	r3, r3, #32
 801438e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8014390:	f7f7 fc10 	bl	800bbb4 <HAL_GetTick>
 8014394:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8014396:	e013      	b.n	80143c0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014398:	f7f7 fc0c 	bl	800bbb4 <HAL_GetTick>
 801439c:	4602      	mov	r2, r0
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	1ad3      	subs	r3, r2, r3
 80143a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80143a6:	d90b      	bls.n	80143c0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80143a8:	4b0c      	ldr	r3, [pc, #48]	@ (80143dc <HAL_RTC_WaitForSynchro+0x60>)
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	f003 0320 	and.w	r3, r3, #32
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d10c      	bne.n	80143ce <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2203      	movs	r2, #3
 80143b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 80143bc:	2303      	movs	r3, #3
 80143be:	e008      	b.n	80143d2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80143c0:	4b06      	ldr	r3, [pc, #24]	@ (80143dc <HAL_RTC_WaitForSynchro+0x60>)
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	f003 0320 	and.w	r3, r3, #32
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d0e5      	beq.n	8014398 <HAL_RTC_WaitForSynchro+0x1c>
 80143cc:	e000      	b.n	80143d0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80143ce:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3710      	adds	r7, #16
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	44007800 	.word	0x44007800

080143e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80143e8:	2300      	movs	r3, #0
 80143ea:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80143ec:	4b19      	ldr	r3, [pc, #100]	@ (8014454 <RTC_EnterInitMode+0x74>)
 80143ee:	68db      	ldr	r3, [r3, #12]
 80143f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d128      	bne.n	801444a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80143f8:	4b16      	ldr	r3, [pc, #88]	@ (8014454 <RTC_EnterInitMode+0x74>)
 80143fa:	68db      	ldr	r3, [r3, #12]
 80143fc:	4a15      	ldr	r2, [pc, #84]	@ (8014454 <RTC_EnterInitMode+0x74>)
 80143fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014402:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8014404:	f7f7 fbd6 	bl	800bbb4 <HAL_GetTick>
 8014408:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801440a:	e013      	b.n	8014434 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801440c:	f7f7 fbd2 	bl	800bbb4 <HAL_GetTick>
 8014410:	4602      	mov	r2, r0
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	1ad3      	subs	r3, r2, r3
 8014416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801441a:	d90b      	bls.n	8014434 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 801441c:	4b0d      	ldr	r3, [pc, #52]	@ (8014454 <RTC_EnterInitMode+0x74>)
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014424:	2b00      	cmp	r3, #0
 8014426:	d10f      	bne.n	8014448 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8014428:	2303      	movs	r3, #3
 801442a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2203      	movs	r2, #3
 8014430:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8014434:	4b07      	ldr	r3, [pc, #28]	@ (8014454 <RTC_EnterInitMode+0x74>)
 8014436:	68db      	ldr	r3, [r3, #12]
 8014438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801443c:	2b00      	cmp	r3, #0
 801443e:	d104      	bne.n	801444a <RTC_EnterInitMode+0x6a>
 8014440:	7bfb      	ldrb	r3, [r7, #15]
 8014442:	2b03      	cmp	r3, #3
 8014444:	d1e2      	bne.n	801440c <RTC_EnterInitMode+0x2c>
 8014446:	e000      	b.n	801444a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8014448:	bf00      	nop
        }
      }
    }
  }

  return status;
 801444a:	7bfb      	ldrb	r3, [r7, #15]
}
 801444c:	4618      	mov	r0, r3
 801444e:	3710      	adds	r7, #16
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}
 8014454:	44007800 	.word	0x44007800

08014458 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014460:	2300      	movs	r3, #0
 8014462:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8014464:	4b1a      	ldr	r3, [pc, #104]	@ (80144d0 <RTC_ExitInitMode+0x78>)
 8014466:	68db      	ldr	r3, [r3, #12]
 8014468:	4a19      	ldr	r2, [pc, #100]	@ (80144d0 <RTC_ExitInitMode+0x78>)
 801446a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801446e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8014470:	4b17      	ldr	r3, [pc, #92]	@ (80144d0 <RTC_ExitInitMode+0x78>)
 8014472:	699b      	ldr	r3, [r3, #24]
 8014474:	f003 0320 	and.w	r3, r3, #32
 8014478:	2b00      	cmp	r3, #0
 801447a:	d10c      	bne.n	8014496 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f7ff ff7d 	bl	801437c <HAL_RTC_WaitForSynchro>
 8014482:	4603      	mov	r3, r0
 8014484:	2b00      	cmp	r3, #0
 8014486:	d01e      	beq.n	80144c6 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2203      	movs	r2, #3
 801448c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8014490:	2303      	movs	r3, #3
 8014492:	73fb      	strb	r3, [r7, #15]
 8014494:	e017      	b.n	80144c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8014496:	4b0e      	ldr	r3, [pc, #56]	@ (80144d0 <RTC_ExitInitMode+0x78>)
 8014498:	699b      	ldr	r3, [r3, #24]
 801449a:	4a0d      	ldr	r2, [pc, #52]	@ (80144d0 <RTC_ExitInitMode+0x78>)
 801449c:	f023 0320 	bic.w	r3, r3, #32
 80144a0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7ff ff6a 	bl	801437c <HAL_RTC_WaitForSynchro>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d005      	beq.n	80144ba <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2203      	movs	r2, #3
 80144b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80144b6:	2303      	movs	r3, #3
 80144b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80144ba:	4b05      	ldr	r3, [pc, #20]	@ (80144d0 <RTC_ExitInitMode+0x78>)
 80144bc:	699b      	ldr	r3, [r3, #24]
 80144be:	4a04      	ldr	r2, [pc, #16]	@ (80144d0 <RTC_ExitInitMode+0x78>)
 80144c0:	f043 0320 	orr.w	r3, r3, #32
 80144c4:	6193      	str	r3, [r2, #24]
  }
  return status;
 80144c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	44007800 	.word	0x44007800

080144d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80144d4:	b480      	push	{r7}
 80144d6:	b085      	sub	sp, #20
 80144d8:	af00      	add	r7, sp, #0
 80144da:	4603      	mov	r3, r0
 80144dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 80144de:	2300      	movs	r3, #0
 80144e0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 80144e2:	79fb      	ldrb	r3, [r7, #7]
 80144e4:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 80144e6:	e005      	b.n	80144f4 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	3301      	adds	r3, #1
 80144ec:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 80144ee:	7afb      	ldrb	r3, [r7, #11]
 80144f0:	3b0a      	subs	r3, #10
 80144f2:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 80144f4:	7afb      	ldrb	r3, [r7, #11]
 80144f6:	2b09      	cmp	r3, #9
 80144f8:	d8f6      	bhi.n	80144e8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	011b      	lsls	r3, r3, #4
 8014500:	b2da      	uxtb	r2, r3
 8014502:	7afb      	ldrb	r3, [r7, #11]
 8014504:	4313      	orrs	r3, r2
 8014506:	b2db      	uxtb	r3, r3
}
 8014508:	4618      	mov	r0, r3
 801450a:	3714      	adds	r7, #20
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr

08014514 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8014514:	b480      	push	{r7}
 8014516:	b085      	sub	sp, #20
 8014518:	af00      	add	r7, sp, #0
 801451a:	4603      	mov	r3, r0
 801451c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;

  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 801451e:	79fb      	ldrb	r3, [r7, #7]
 8014520:	091b      	lsrs	r3, r3, #4
 8014522:	b2db      	uxtb	r3, r3
 8014524:	461a      	mov	r2, r3
 8014526:	4613      	mov	r3, r2
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	4413      	add	r3, r2
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	60fb      	str	r3, [r7, #12]

  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	b2da      	uxtb	r2, r3
 8014534:	79fb      	ldrb	r3, [r7, #7]
 8014536:	f003 030f 	and.w	r3, r3, #15
 801453a:	b2db      	uxtb	r3, r3
 801453c:	4413      	add	r3, r2
 801453e:	b2db      	uxtb	r3, r3
}
 8014540:	4618      	mov	r0, r3
 8014542:	3714      	adds	r7, #20
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801454c:	b480      	push	{r7}
 801454e:	b087      	sub	sp, #28
 8014550:	af00      	add	r7, sp, #0
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8014558:	4b07      	ldr	r3, [pc, #28]	@ (8014578 <HAL_RTCEx_BKUPWrite+0x2c>)
 801455a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	697a      	ldr	r2, [r7, #20]
 8014562:	4413      	add	r3, r2
 8014564:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	601a      	str	r2, [r3, #0]
}
 801456c:	bf00      	nop
 801456e:	371c      	adds	r7, #28
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr
 8014578:	44007d00 	.word	0x44007d00

0801457c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801457c:	b480      	push	{r7}
 801457e:	b085      	sub	sp, #20
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8014586:	4b07      	ldr	r3, [pc, #28]	@ (80145a4 <HAL_RTCEx_BKUPRead+0x28>)
 8014588:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	009b      	lsls	r3, r3, #2
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	4413      	add	r3, r2
 8014592:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	681b      	ldr	r3, [r3, #0]
}
 8014598:	4618      	mov	r0, r3
 801459a:	3714      	adds	r7, #20
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr
 80145a4:	44007d00 	.word	0x44007d00

080145a8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 80145a8:	b480      	push	{r7}
 80145aa:	b083      	sub	sp, #12
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	4910      	ldr	r1, [pc, #64]	@ (80145fc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80145bc:	4313      	orrs	r3, r2
 80145be:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	689a      	ldr	r2, [r3, #8]
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	431a      	orrs	r2, r3
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	699b      	ldr	r3, [r3, #24]
 80145ce:	490c      	ldr	r1, [pc, #48]	@ (8014600 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80145d0:	4313      	orrs	r3, r2
 80145d2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 80145d4:	4b0a      	ldr	r3, [pc, #40]	@ (8014600 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80145d6:	6a1b      	ldr	r3, [r3, #32]
 80145d8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	6919      	ldr	r1, [r3, #16]
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	695b      	ldr	r3, [r3, #20]
 80145e4:	041b      	lsls	r3, r3, #16
 80145e6:	430b      	orrs	r3, r1
 80145e8:	4905      	ldr	r1, [pc, #20]	@ (8014600 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80145ea:	4313      	orrs	r3, r2
 80145ec:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 80145ee:	2300      	movs	r3, #0
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	370c      	adds	r7, #12
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr
 80145fc:	44007800 	.word	0x44007800
 8014600:	44007c00 	.word	0x44007c00

08014604 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d101      	bne.n	8014616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014612:	2301      	movs	r3, #1
 8014614:	e162      	b.n	80148dc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4a70      	ldr	r2, [pc, #448]	@ (80147dc <HAL_SPI_Init+0x1d8>)
 801461c:	4293      	cmp	r3, r2
 801461e:	d018      	beq.n	8014652 <HAL_SPI_Init+0x4e>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	4a6e      	ldr	r2, [pc, #440]	@ (80147e0 <HAL_SPI_Init+0x1dc>)
 8014626:	4293      	cmp	r3, r2
 8014628:	d013      	beq.n	8014652 <HAL_SPI_Init+0x4e>
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4a6d      	ldr	r2, [pc, #436]	@ (80147e4 <HAL_SPI_Init+0x1e0>)
 8014630:	4293      	cmp	r3, r2
 8014632:	d00e      	beq.n	8014652 <HAL_SPI_Init+0x4e>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4a6b      	ldr	r2, [pc, #428]	@ (80147e8 <HAL_SPI_Init+0x1e4>)
 801463a:	4293      	cmp	r3, r2
 801463c:	d009      	beq.n	8014652 <HAL_SPI_Init+0x4e>
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	4a6a      	ldr	r2, [pc, #424]	@ (80147ec <HAL_SPI_Init+0x1e8>)
 8014644:	4293      	cmp	r3, r2
 8014646:	d004      	beq.n	8014652 <HAL_SPI_Init+0x4e>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	4a68      	ldr	r2, [pc, #416]	@ (80147f0 <HAL_SPI_Init+0x1ec>)
 801464e:	4293      	cmp	r3, r2
 8014650:	e000      	b.n	8014654 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8014652:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2200      	movs	r2, #0
 8014658:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4a5f      	ldr	r2, [pc, #380]	@ (80147dc <HAL_SPI_Init+0x1d8>)
 8014660:	4293      	cmp	r3, r2
 8014662:	d018      	beq.n	8014696 <HAL_SPI_Init+0x92>
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4a5d      	ldr	r2, [pc, #372]	@ (80147e0 <HAL_SPI_Init+0x1dc>)
 801466a:	4293      	cmp	r3, r2
 801466c:	d013      	beq.n	8014696 <HAL_SPI_Init+0x92>
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	4a5c      	ldr	r2, [pc, #368]	@ (80147e4 <HAL_SPI_Init+0x1e0>)
 8014674:	4293      	cmp	r3, r2
 8014676:	d00e      	beq.n	8014696 <HAL_SPI_Init+0x92>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4a5a      	ldr	r2, [pc, #360]	@ (80147e8 <HAL_SPI_Init+0x1e4>)
 801467e:	4293      	cmp	r3, r2
 8014680:	d009      	beq.n	8014696 <HAL_SPI_Init+0x92>
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4a59      	ldr	r2, [pc, #356]	@ (80147ec <HAL_SPI_Init+0x1e8>)
 8014688:	4293      	cmp	r3, r2
 801468a:	d004      	beq.n	8014696 <HAL_SPI_Init+0x92>
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	4a57      	ldr	r2, [pc, #348]	@ (80147f0 <HAL_SPI_Init+0x1ec>)
 8014692:	4293      	cmp	r3, r2
 8014694:	d105      	bne.n	80146a2 <HAL_SPI_Init+0x9e>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	68db      	ldr	r3, [r3, #12]
 801469a:	2b0f      	cmp	r3, #15
 801469c:	d901      	bls.n	80146a2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 801469e:	2301      	movs	r3, #1
 80146a0:	e11c      	b.n	80148dc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f000 fe6c 	bl	8015380 <SPI_GetPacketSize>
 80146a8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	4a4b      	ldr	r2, [pc, #300]	@ (80147dc <HAL_SPI_Init+0x1d8>)
 80146b0:	4293      	cmp	r3, r2
 80146b2:	d018      	beq.n	80146e6 <HAL_SPI_Init+0xe2>
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	4a49      	ldr	r2, [pc, #292]	@ (80147e0 <HAL_SPI_Init+0x1dc>)
 80146ba:	4293      	cmp	r3, r2
 80146bc:	d013      	beq.n	80146e6 <HAL_SPI_Init+0xe2>
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	4a48      	ldr	r2, [pc, #288]	@ (80147e4 <HAL_SPI_Init+0x1e0>)
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d00e      	beq.n	80146e6 <HAL_SPI_Init+0xe2>
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	4a46      	ldr	r2, [pc, #280]	@ (80147e8 <HAL_SPI_Init+0x1e4>)
 80146ce:	4293      	cmp	r3, r2
 80146d0:	d009      	beq.n	80146e6 <HAL_SPI_Init+0xe2>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	4a45      	ldr	r2, [pc, #276]	@ (80147ec <HAL_SPI_Init+0x1e8>)
 80146d8:	4293      	cmp	r3, r2
 80146da:	d004      	beq.n	80146e6 <HAL_SPI_Init+0xe2>
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	4a43      	ldr	r2, [pc, #268]	@ (80147f0 <HAL_SPI_Init+0x1ec>)
 80146e2:	4293      	cmp	r3, r2
 80146e4:	d102      	bne.n	80146ec <HAL_SPI_Init+0xe8>
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2b08      	cmp	r3, #8
 80146ea:	d820      	bhi.n	801472e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80146f0:	4a40      	ldr	r2, [pc, #256]	@ (80147f4 <HAL_SPI_Init+0x1f0>)
 80146f2:	4293      	cmp	r3, r2
 80146f4:	d018      	beq.n	8014728 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4a3f      	ldr	r2, [pc, #252]	@ (80147f8 <HAL_SPI_Init+0x1f4>)
 80146fc:	4293      	cmp	r3, r2
 80146fe:	d013      	beq.n	8014728 <HAL_SPI_Init+0x124>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4a3d      	ldr	r2, [pc, #244]	@ (80147fc <HAL_SPI_Init+0x1f8>)
 8014706:	4293      	cmp	r3, r2
 8014708:	d00e      	beq.n	8014728 <HAL_SPI_Init+0x124>
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	4a3c      	ldr	r2, [pc, #240]	@ (8014800 <HAL_SPI_Init+0x1fc>)
 8014710:	4293      	cmp	r3, r2
 8014712:	d009      	beq.n	8014728 <HAL_SPI_Init+0x124>
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	4a3a      	ldr	r2, [pc, #232]	@ (8014804 <HAL_SPI_Init+0x200>)
 801471a:	4293      	cmp	r3, r2
 801471c:	d004      	beq.n	8014728 <HAL_SPI_Init+0x124>
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	4a39      	ldr	r2, [pc, #228]	@ (8014808 <HAL_SPI_Init+0x204>)
 8014724:	4293      	cmp	r3, r2
 8014726:	d104      	bne.n	8014732 <HAL_SPI_Init+0x12e>
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	2b10      	cmp	r3, #16
 801472c:	d901      	bls.n	8014732 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 801472e:	2301      	movs	r3, #1
 8014730:	e0d4      	b.n	80148dc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8014738:	b2db      	uxtb	r3, r3
 801473a:	2b00      	cmp	r3, #0
 801473c:	d106      	bne.n	801474c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2200      	movs	r2, #0
 8014742:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f7f6 fe64 	bl	800b414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2202      	movs	r2, #2
 8014750:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	f022 0201 	bic.w	r2, r2, #1
 8014762:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801476e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	699b      	ldr	r3, [r3, #24]
 8014774:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014778:	d119      	bne.n	80147ae <HAL_SPI_Init+0x1aa>
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014782:	d103      	bne.n	801478c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014788:	2b00      	cmp	r3, #0
 801478a:	d008      	beq.n	801479e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014790:	2b00      	cmp	r3, #0
 8014792:	d10c      	bne.n	80147ae <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801479c:	d107      	bne.n	80147ae <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	681a      	ldr	r2, [r3, #0]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80147ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d028      	beq.n	801480c <HAL_SPI_Init+0x208>
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	2b06      	cmp	r3, #6
 80147c0:	d924      	bls.n	801480c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	430a      	orrs	r2, r1
 80147d6:	601a      	str	r2, [r3, #0]
 80147d8:	e020      	b.n	801481c <HAL_SPI_Init+0x218>
 80147da:	bf00      	nop
 80147dc:	40014c00 	.word	0x40014c00
 80147e0:	50014c00 	.word	0x50014c00
 80147e4:	44002000 	.word	0x44002000
 80147e8:	54002000 	.word	0x54002000
 80147ec:	40015000 	.word	0x40015000
 80147f0:	50015000 	.word	0x50015000
 80147f4:	40013000 	.word	0x40013000
 80147f8:	50013000 	.word	0x50013000
 80147fc:	40003800 	.word	0x40003800
 8014800:	50003800 	.word	0x50003800
 8014804:	40003c00 	.word	0x40003c00
 8014808:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	681a      	ldr	r2, [r3, #0]
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801481a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	69da      	ldr	r2, [r3, #28]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014824:	431a      	orrs	r2, r3
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	431a      	orrs	r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801482e:	ea42 0103 	orr.w	r1, r2, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	68da      	ldr	r2, [r3, #12]
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	430a      	orrs	r2, r1
 801483c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014846:	431a      	orrs	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801484c:	431a      	orrs	r2, r3
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	699b      	ldr	r3, [r3, #24]
 8014852:	431a      	orrs	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	691b      	ldr	r3, [r3, #16]
 8014858:	431a      	orrs	r2, r3
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	695b      	ldr	r3, [r3, #20]
 801485e:	431a      	orrs	r2, r3
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6a1b      	ldr	r3, [r3, #32]
 8014864:	431a      	orrs	r2, r3
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	431a      	orrs	r2, r3
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014870:	431a      	orrs	r2, r3
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	689b      	ldr	r3, [r3, #8]
 8014876:	431a      	orrs	r2, r3
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801487c:	431a      	orrs	r2, r3
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014882:	431a      	orrs	r2, r3
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014888:	ea42 0103 	orr.w	r1, r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	430a      	orrs	r2, r1
 8014896:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f022 0201 	bic.w	r2, r2, #1
 80148a6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	685b      	ldr	r3, [r3, #4]
 80148ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d00a      	beq.n	80148ca <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	68db      	ldr	r3, [r3, #12]
 80148ba:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	430a      	orrs	r2, r1
 80148c8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2200      	movs	r2, #0
 80148ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2201      	movs	r2, #1
 80148d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80148da:	2300      	movs	r3, #0
}
 80148dc:	4618      	mov	r0, r3
 80148de:	3710      	adds	r7, #16
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b088      	sub	sp, #32
 80148e8:	af02      	add	r7, sp, #8
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	603b      	str	r3, [r7, #0]
 80148f0:	4613      	mov	r3, r2
 80148f2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	3320      	adds	r3, #32
 80148fa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80148fc:	f7f7 f95a 	bl	800bbb4 <HAL_GetTick>
 8014900:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8014908:	b2db      	uxtb	r3, r3
 801490a:	2b01      	cmp	r3, #1
 801490c:	d001      	beq.n	8014912 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 801490e:	2302      	movs	r3, #2
 8014910:	e1f9      	b.n	8014d06 <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d002      	beq.n	801491e <HAL_SPI_Transmit+0x3a>
 8014918:	88fb      	ldrh	r3, [r7, #6]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d101      	bne.n	8014922 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 801491e:	2301      	movs	r3, #1
 8014920:	e1f1      	b.n	8014d06 <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8014928:	2b01      	cmp	r3, #1
 801492a:	d101      	bne.n	8014930 <HAL_SPI_Transmit+0x4c>
 801492c:	2302      	movs	r3, #2
 801492e:	e1ea      	b.n	8014d06 <HAL_SPI_Transmit+0x422>
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	2201      	movs	r2, #1
 8014934:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2203      	movs	r2, #3
 801493c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2200      	movs	r2, #0
 8014944:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	68ba      	ldr	r2, [r7, #8]
 801494c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	88fa      	ldrh	r2, [r7, #6]
 8014952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	88fa      	ldrh	r2, [r7, #6]
 801495a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2200      	movs	r2, #0
 8014968:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2200      	movs	r2, #0
 8014970:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	2200      	movs	r2, #0
 8014978:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2200      	movs	r2, #0
 801497e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	689b      	ldr	r3, [r3, #8]
 8014984:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014988:	d108      	bne.n	801499c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	681a      	ldr	r2, [r3, #0]
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	e009      	b.n	80149b0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80149ae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	0c1b      	lsrs	r3, r3, #16
 80149b8:	041b      	lsls	r3, r3, #16
 80149ba:	88f9      	ldrh	r1, [r7, #6]
 80149bc:	68fa      	ldr	r2, [r7, #12]
 80149be:	6812      	ldr	r2, [r2, #0]
 80149c0:	430b      	orrs	r3, r1
 80149c2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	f042 0201 	orr.w	r2, r2, #1
 80149d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80149dc:	d107      	bne.n	80149ee <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80149ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	2b0f      	cmp	r3, #15
 80149f4:	d965      	bls.n	8014ac2 <HAL_SPI_Transmit+0x1de>
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	4a94      	ldr	r2, [pc, #592]	@ (8014c4c <HAL_SPI_Transmit+0x368>)
 80149fc:	4293      	cmp	r3, r2
 80149fe:	d059      	beq.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	4a92      	ldr	r2, [pc, #584]	@ (8014c50 <HAL_SPI_Transmit+0x36c>)
 8014a06:	4293      	cmp	r3, r2
 8014a08:	d054      	beq.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	4a91      	ldr	r2, [pc, #580]	@ (8014c54 <HAL_SPI_Transmit+0x370>)
 8014a10:	4293      	cmp	r3, r2
 8014a12:	d04f      	beq.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4a8f      	ldr	r2, [pc, #572]	@ (8014c58 <HAL_SPI_Transmit+0x374>)
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d04a      	beq.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4a8e      	ldr	r2, [pc, #568]	@ (8014c5c <HAL_SPI_Transmit+0x378>)
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d045      	beq.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4a8c      	ldr	r2, [pc, #560]	@ (8014c60 <HAL_SPI_Transmit+0x37c>)
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	d147      	bne.n	8014ac2 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014a32:	e03f      	b.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	695b      	ldr	r3, [r3, #20]
 8014a3a:	f003 0302 	and.w	r3, r3, #2
 8014a3e:	2b02      	cmp	r3, #2
 8014a40:	d114      	bne.n	8014a6c <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	6812      	ldr	r2, [r2, #0]
 8014a4c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a52:	1d1a      	adds	r2, r3, #4
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	3b01      	subs	r3, #1
 8014a62:	b29a      	uxth	r2, r3
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014a6a:	e023      	b.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014a6c:	f7f7 f8a2 	bl	800bbb4 <HAL_GetTick>
 8014a70:	4602      	mov	r2, r0
 8014a72:	693b      	ldr	r3, [r7, #16]
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	683a      	ldr	r2, [r7, #0]
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d803      	bhi.n	8014a84 <HAL_SPI_Transmit+0x1a0>
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a82:	d102      	bne.n	8014a8a <HAL_SPI_Transmit+0x1a6>
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d114      	bne.n	8014ab4 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	f000 fbaa 	bl	80151e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014a96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8014ab0:	2303      	movs	r3, #3
 8014ab2:	e128      	b.n	8014d06 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d1b9      	bne.n	8014a34 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8014ac0:	e0fb      	b.n	8014cba <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	68db      	ldr	r3, [r3, #12]
 8014ac6:	2b07      	cmp	r3, #7
 8014ac8:	f240 80f0 	bls.w	8014cac <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014acc:	e05d      	b.n	8014b8a <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	695b      	ldr	r3, [r3, #20]
 8014ad4:	f003 0302 	and.w	r3, r3, #2
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	d132      	bne.n	8014b42 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d918      	bls.n	8014b1a <HAL_SPI_Transmit+0x236>
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d014      	beq.n	8014b1a <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	6812      	ldr	r2, [r2, #0]
 8014afa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b00:	1d1a      	adds	r2, r3, #4
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	3b02      	subs	r3, #2
 8014b10:	b29a      	uxth	r2, r3
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014b18:	e037      	b.n	8014b8a <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b1e:	881a      	ldrh	r2, [r3, #0]
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b28:	1c9a      	adds	r2, r3, #2
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	3b01      	subs	r3, #1
 8014b38:	b29a      	uxth	r2, r3
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014b40:	e023      	b.n	8014b8a <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b42:	f7f7 f837 	bl	800bbb4 <HAL_GetTick>
 8014b46:	4602      	mov	r2, r0
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	1ad3      	subs	r3, r2, r3
 8014b4c:	683a      	ldr	r2, [r7, #0]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d803      	bhi.n	8014b5a <HAL_SPI_Transmit+0x276>
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b58:	d102      	bne.n	8014b60 <HAL_SPI_Transmit+0x27c>
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d114      	bne.n	8014b8a <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014b60:	68f8      	ldr	r0, [r7, #12]
 8014b62:	f000 fb3f 	bl	80151e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014b6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2201      	movs	r2, #1
 8014b7a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2200      	movs	r2, #0
 8014b82:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8014b86:	2303      	movs	r3, #3
 8014b88:	e0bd      	b.n	8014d06 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d19b      	bne.n	8014ace <HAL_SPI_Transmit+0x1ea>
 8014b96:	e090      	b.n	8014cba <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	695b      	ldr	r3, [r3, #20]
 8014b9e:	f003 0302 	and.w	r3, r3, #2
 8014ba2:	2b02      	cmp	r3, #2
 8014ba4:	d15e      	bne.n	8014c64 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	2b03      	cmp	r3, #3
 8014bb0:	d918      	bls.n	8014be4 <HAL_SPI_Transmit+0x300>
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bb6:	2b40      	cmp	r3, #64	@ 0x40
 8014bb8:	d914      	bls.n	8014be4 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	6812      	ldr	r2, [r2, #0]
 8014bc4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bca:	1d1a      	adds	r2, r3, #4
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	3b04      	subs	r3, #4
 8014bda:	b29a      	uxth	r2, r3
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014be2:	e063      	b.n	8014cac <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d917      	bls.n	8014c20 <HAL_SPI_Transmit+0x33c>
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d013      	beq.n	8014c20 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bfc:	881a      	ldrh	r2, [r3, #0]
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c06:	1c9a      	adds	r2, r3, #2
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	3b02      	subs	r3, #2
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c1e:	e045      	b.n	8014cac <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	3320      	adds	r3, #32
 8014c2a:	7812      	ldrb	r2, [r2, #0]
 8014c2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c32:	1c5a      	adds	r2, r3, #1
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	3b01      	subs	r3, #1
 8014c42:	b29a      	uxth	r2, r3
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c4a:	e02f      	b.n	8014cac <HAL_SPI_Transmit+0x3c8>
 8014c4c:	40013000 	.word	0x40013000
 8014c50:	50013000 	.word	0x50013000
 8014c54:	40003800 	.word	0x40003800
 8014c58:	50003800 	.word	0x50003800
 8014c5c:	40003c00 	.word	0x40003c00
 8014c60:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c64:	f7f6 ffa6 	bl	800bbb4 <HAL_GetTick>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	1ad3      	subs	r3, r2, r3
 8014c6e:	683a      	ldr	r2, [r7, #0]
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d803      	bhi.n	8014c7c <HAL_SPI_Transmit+0x398>
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c7a:	d102      	bne.n	8014c82 <HAL_SPI_Transmit+0x39e>
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d114      	bne.n	8014cac <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c82:	68f8      	ldr	r0, [r7, #12]
 8014c84:	f000 faae 	bl	80151e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014c8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	e02c      	b.n	8014d06 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	f47f af6f 	bne.w	8014b98 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	9300      	str	r3, [sp, #0]
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	2108      	movs	r1, #8
 8014cc4:	68f8      	ldr	r0, [r7, #12]
 8014cc6:	f000 fb2d 	bl	8015324 <SPI_WaitOnFlagUntilTimeout>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d007      	beq.n	8014ce0 <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014cd6:	f043 0220 	orr.w	r2, r3, #32
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014ce0:	68f8      	ldr	r0, [r7, #12]
 8014ce2:	f000 fa7f 	bl	80151e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2201      	movs	r2, #1
 8014cea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d001      	beq.n	8014d04 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 8014d00:	2301      	movs	r3, #1
 8014d02:	e000      	b.n	8014d06 <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 8014d04:	2300      	movs	r3, #0
  }
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3718      	adds	r7, #24
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
 8014d0e:	bf00      	nop

08014d10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b08c      	sub	sp, #48	@ 0x30
 8014d14:	af02      	add	r7, sp, #8
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
 8014d1c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	3320      	adds	r3, #32
 8014d24:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	3330      	adds	r3, #48	@ 0x30
 8014d2c:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014d2e:	f7f6 ff41 	bl	800bbb4 <HAL_GetTick>
 8014d32:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8014d34:	887b      	ldrh	r3, [r7, #2]
 8014d36:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8014d38:	887b      	ldrh	r3, [r7, #2]
 8014d3a:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	d001      	beq.n	8014d4c <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 8014d48:	2302      	movs	r3, #2
 8014d4a:	e247      	b.n	80151dc <HAL_SPI_TransmitReceive+0x4cc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d005      	beq.n	8014d5e <HAL_SPI_TransmitReceive+0x4e>
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d002      	beq.n	8014d5e <HAL_SPI_TransmitReceive+0x4e>
 8014d58:	887b      	ldrh	r3, [r7, #2]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d101      	bne.n	8014d62 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 8014d5e:	2301      	movs	r3, #1
 8014d60:	e23c      	b.n	80151dc <HAL_SPI_TransmitReceive+0x4cc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	d101      	bne.n	8014d70 <HAL_SPI_TransmitReceive+0x60>
 8014d6c:	2302      	movs	r3, #2
 8014d6e:	e235      	b.n	80151dc <HAL_SPI_TransmitReceive+0x4cc>
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	2201      	movs	r2, #1
 8014d74:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2205      	movs	r2, #5
 8014d7c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2200      	movs	r2, #0
 8014d84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	887a      	ldrh	r2, [r7, #2]
 8014d92:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	887a      	ldrh	r2, [r7, #2]
 8014d9a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	68ba      	ldr	r2, [r7, #8]
 8014da2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	887a      	ldrh	r2, [r7, #2]
 8014da8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	887a      	ldrh	r2, [r7, #2]
 8014db0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2200      	movs	r2, #0
 8014db8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	68da      	ldr	r2, [r3, #12]
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8014dce:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	4a72      	ldr	r2, [pc, #456]	@ (8014fa0 <HAL_SPI_TransmitReceive+0x290>)
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	d018      	beq.n	8014e0c <HAL_SPI_TransmitReceive+0xfc>
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	4a71      	ldr	r2, [pc, #452]	@ (8014fa4 <HAL_SPI_TransmitReceive+0x294>)
 8014de0:	4293      	cmp	r3, r2
 8014de2:	d013      	beq.n	8014e0c <HAL_SPI_TransmitReceive+0xfc>
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	4a6f      	ldr	r2, [pc, #444]	@ (8014fa8 <HAL_SPI_TransmitReceive+0x298>)
 8014dea:	4293      	cmp	r3, r2
 8014dec:	d00e      	beq.n	8014e0c <HAL_SPI_TransmitReceive+0xfc>
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	4a6e      	ldr	r2, [pc, #440]	@ (8014fac <HAL_SPI_TransmitReceive+0x29c>)
 8014df4:	4293      	cmp	r3, r2
 8014df6:	d009      	beq.n	8014e0c <HAL_SPI_TransmitReceive+0xfc>
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	4a6c      	ldr	r2, [pc, #432]	@ (8014fb0 <HAL_SPI_TransmitReceive+0x2a0>)
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	d004      	beq.n	8014e0c <HAL_SPI_TransmitReceive+0xfc>
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	4a6b      	ldr	r2, [pc, #428]	@ (8014fb4 <HAL_SPI_TransmitReceive+0x2a4>)
 8014e08:	4293      	cmp	r3, r2
 8014e0a:	d102      	bne.n	8014e12 <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8014e0c:	2310      	movs	r3, #16
 8014e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014e10:	e001      	b.n	8014e16 <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8014e12:	2308      	movs	r3, #8
 8014e14:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	685b      	ldr	r3, [r3, #4]
 8014e1c:	0c1b      	lsrs	r3, r3, #16
 8014e1e:	041b      	lsls	r3, r3, #16
 8014e20:	8879      	ldrh	r1, [r7, #2]
 8014e22:	68fa      	ldr	r2, [r7, #12]
 8014e24:	6812      	ldr	r2, [r2, #0]
 8014e26:	430b      	orrs	r3, r1
 8014e28:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	f042 0201 	orr.w	r2, r2, #1
 8014e38:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014e42:	d107      	bne.n	8014e54 <HAL_SPI_TransmitReceive+0x144>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	2b0f      	cmp	r3, #15
 8014e5a:	f240 8098 	bls.w	8014f8e <HAL_SPI_TransmitReceive+0x27e>
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	4a4f      	ldr	r2, [pc, #316]	@ (8014fa0 <HAL_SPI_TransmitReceive+0x290>)
 8014e64:	4293      	cmp	r3, r2
 8014e66:	d018      	beq.n	8014e9a <HAL_SPI_TransmitReceive+0x18a>
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8014fa4 <HAL_SPI_TransmitReceive+0x294>)
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d013      	beq.n	8014e9a <HAL_SPI_TransmitReceive+0x18a>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	4a4c      	ldr	r2, [pc, #304]	@ (8014fa8 <HAL_SPI_TransmitReceive+0x298>)
 8014e78:	4293      	cmp	r3, r2
 8014e7a:	d00e      	beq.n	8014e9a <HAL_SPI_TransmitReceive+0x18a>
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4a4a      	ldr	r2, [pc, #296]	@ (8014fac <HAL_SPI_TransmitReceive+0x29c>)
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d009      	beq.n	8014e9a <HAL_SPI_TransmitReceive+0x18a>
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	4a49      	ldr	r2, [pc, #292]	@ (8014fb0 <HAL_SPI_TransmitReceive+0x2a0>)
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	d004      	beq.n	8014e9a <HAL_SPI_TransmitReceive+0x18a>
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	4a47      	ldr	r2, [pc, #284]	@ (8014fb4 <HAL_SPI_TransmitReceive+0x2a4>)
 8014e96:	4293      	cmp	r3, r2
 8014e98:	d179      	bne.n	8014f8e <HAL_SPI_TransmitReceive+0x27e>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8014e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e9c:	089b      	lsrs	r3, r3, #2
 8014e9e:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014ea0:	e06e      	b.n	8014f80 <HAL_SPI_TransmitReceive+0x270>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	695b      	ldr	r3, [r3, #20]
 8014ea8:	f003 0302 	and.w	r3, r3, #2
 8014eac:	2b02      	cmp	r3, #2
 8014eae:	d120      	bne.n	8014ef2 <HAL_SPI_TransmitReceive+0x1e2>
 8014eb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d01d      	beq.n	8014ef2 <HAL_SPI_TransmitReceive+0x1e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014eb6:	8c3a      	ldrh	r2, [r7, #32]
 8014eb8:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8014eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ebc:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d217      	bcs.n	8014ef2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	6812      	ldr	r2, [r2, #0]
 8014ecc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ed2:	1d1a      	adds	r2, r3, #4
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	3b01      	subs	r3, #1
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ef0:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	695a      	ldr	r2, [r3, #20]
 8014ef8:	f248 0308 	movw	r3, #32776	@ 0x8008
 8014efc:	4013      	ands	r3, r2
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d01a      	beq.n	8014f38 <HAL_SPI_TransmitReceive+0x228>
 8014f02:	8c3b      	ldrh	r3, [r7, #32]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d017      	beq.n	8014f38 <HAL_SPI_TransmitReceive+0x228>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681a      	ldr	r2, [r3, #0]
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f12:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f18:	1d1a      	adds	r2, r3, #4
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	3b01      	subs	r3, #1
 8014f28:	b29a      	uxth	r2, r3
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014f36:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014f38:	f7f6 fe3c 	bl	800bbb4 <HAL_GetTick>
 8014f3c:	4602      	mov	r2, r0
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d803      	bhi.n	8014f50 <HAL_SPI_TransmitReceive+0x240>
 8014f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f4e:	d102      	bne.n	8014f56 <HAL_SPI_TransmitReceive+0x246>
 8014f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d114      	bne.n	8014f80 <HAL_SPI_TransmitReceive+0x270>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f000 f944 	bl	80151e4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014f62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2201      	movs	r2, #1
 8014f70:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2200      	movs	r2, #0
 8014f78:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8014f7c:	2303      	movs	r3, #3
 8014f7e:	e12d      	b.n	80151dc <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014f80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d18d      	bne.n	8014ea2 <HAL_SPI_TransmitReceive+0x192>
 8014f86:	8c3b      	ldrh	r3, [r7, #32]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d18a      	bne.n	8014ea2 <HAL_SPI_TransmitReceive+0x192>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8014f8c:	e100      	b.n	8015190 <HAL_SPI_TransmitReceive+0x480>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	68db      	ldr	r3, [r3, #12]
 8014f92:	2b07      	cmp	r3, #7
 8014f94:	f240 80f6 	bls.w	8015184 <HAL_SPI_TransmitReceive+0x474>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8014f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9a:	085b      	lsrs	r3, r3, #1
 8014f9c:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014f9e:	e078      	b.n	8015092 <HAL_SPI_TransmitReceive+0x382>
 8014fa0:	40013000 	.word	0x40013000
 8014fa4:	50013000 	.word	0x50013000
 8014fa8:	40003800 	.word	0x40003800
 8014fac:	50003800 	.word	0x50003800
 8014fb0:	40003c00 	.word	0x40003c00
 8014fb4:	50003c00 	.word	0x50003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	695b      	ldr	r3, [r3, #20]
 8014fbe:	f003 0302 	and.w	r3, r3, #2
 8014fc2:	2b02      	cmp	r3, #2
 8014fc4:	d11f      	bne.n	8015006 <HAL_SPI_TransmitReceive+0x2f6>
 8014fc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d01c      	beq.n	8015006 <HAL_SPI_TransmitReceive+0x2f6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014fcc:	8c3a      	ldrh	r2, [r7, #32]
 8014fce:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d216      	bcs.n	8015006 <HAL_SPI_TransmitReceive+0x2f6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fdc:	881a      	ldrh	r2, [r3, #0]
 8014fde:	69fb      	ldr	r3, [r7, #28]
 8014fe0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fe6:	1c9a      	adds	r2, r3, #2
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	3b01      	subs	r3, #1
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015004:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	695b      	ldr	r3, [r3, #20]
 801500c:	f003 0301 	and.w	r3, r3, #1
 8015010:	2b01      	cmp	r3, #1
 8015012:	d11a      	bne.n	801504a <HAL_SPI_TransmitReceive+0x33a>
 8015014:	8c3b      	ldrh	r3, [r7, #32]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d017      	beq.n	801504a <HAL_SPI_TransmitReceive+0x33a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801501e:	69ba      	ldr	r2, [r7, #24]
 8015020:	8812      	ldrh	r2, [r2, #0]
 8015022:	b292      	uxth	r2, r2
 8015024:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801502a:	1c9a      	adds	r2, r3, #2
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8015036:	b29b      	uxth	r3, r3
 8015038:	3b01      	subs	r3, #1
 801503a:	b29a      	uxth	r2, r3
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8015048:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801504a:	f7f6 fdb3 	bl	800bbb4 <HAL_GetTick>
 801504e:	4602      	mov	r2, r0
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015056:	429a      	cmp	r2, r3
 8015058:	d803      	bhi.n	8015062 <HAL_SPI_TransmitReceive+0x352>
 801505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015060:	d102      	bne.n	8015068 <HAL_SPI_TransmitReceive+0x358>
 8015062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015064:	2b00      	cmp	r3, #0
 8015066:	d114      	bne.n	8015092 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8015068:	68f8      	ldr	r0, [r7, #12]
 801506a:	f000 f8bb 	bl	80151e4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015074:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2201      	movs	r2, #1
 8015082:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	2200      	movs	r2, #0
 801508a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801508e:	2303      	movs	r3, #3
 8015090:	e0a4      	b.n	80151dc <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015092:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015094:	2b00      	cmp	r3, #0
 8015096:	d18f      	bne.n	8014fb8 <HAL_SPI_TransmitReceive+0x2a8>
 8015098:	8c3b      	ldrh	r3, [r7, #32]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d18c      	bne.n	8014fb8 <HAL_SPI_TransmitReceive+0x2a8>
 801509e:	e077      	b.n	8015190 <HAL_SPI_TransmitReceive+0x480>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	695b      	ldr	r3, [r3, #20]
 80150a6:	f003 0302 	and.w	r3, r3, #2
 80150aa:	2b02      	cmp	r3, #2
 80150ac:	d121      	bne.n	80150f2 <HAL_SPI_TransmitReceive+0x3e2>
 80150ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d01e      	beq.n	80150f2 <HAL_SPI_TransmitReceive+0x3e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80150b4:	8c3a      	ldrh	r2, [r7, #32]
 80150b6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80150b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80150bc:	429a      	cmp	r2, r3
 80150be:	d218      	bcs.n	80150f2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	3320      	adds	r3, #32
 80150ca:	7812      	ldrb	r2, [r2, #0]
 80150cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150d2:	1c5a      	adds	r2, r3, #1
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150de:	b29b      	uxth	r3, r3
 80150e0:	3b01      	subs	r3, #1
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150f0:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	695b      	ldr	r3, [r3, #20]
 80150f8:	f003 0301 	and.w	r3, r3, #1
 80150fc:	2b01      	cmp	r3, #1
 80150fe:	d11d      	bne.n	801513c <HAL_SPI_TransmitReceive+0x42c>
 8015100:	8c3b      	ldrh	r3, [r7, #32]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d01a      	beq.n	801513c <HAL_SPI_TransmitReceive+0x42c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015112:	7812      	ldrb	r2, [r2, #0]
 8015114:	b2d2      	uxtb	r2, r2
 8015116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801511c:	1c5a      	adds	r2, r3, #1
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8015128:	b29b      	uxth	r3, r3
 801512a:	3b01      	subs	r3, #1
 801512c:	b29a      	uxth	r2, r3
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801513a:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801513c:	f7f6 fd3a 	bl	800bbb4 <HAL_GetTick>
 8015140:	4602      	mov	r2, r0
 8015142:	697b      	ldr	r3, [r7, #20]
 8015144:	1ad3      	subs	r3, r2, r3
 8015146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015148:	429a      	cmp	r2, r3
 801514a:	d803      	bhi.n	8015154 <HAL_SPI_TransmitReceive+0x444>
 801514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015152:	d102      	bne.n	801515a <HAL_SPI_TransmitReceive+0x44a>
 8015154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015156:	2b00      	cmp	r3, #0
 8015158:	d114      	bne.n	8015184 <HAL_SPI_TransmitReceive+0x474>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f000 f842 	bl	80151e4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015166:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2201      	movs	r2, #1
 8015174:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2200      	movs	r2, #0
 801517c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8015180:	2303      	movs	r3, #3
 8015182:	e02b      	b.n	80151dc <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015184:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015186:	2b00      	cmp	r3, #0
 8015188:	d18a      	bne.n	80150a0 <HAL_SPI_TransmitReceive+0x390>
 801518a:	8c3b      	ldrh	r3, [r7, #32]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d187      	bne.n	80150a0 <HAL_SPI_TransmitReceive+0x390>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	9300      	str	r3, [sp, #0]
 8015194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015196:	2200      	movs	r2, #0
 8015198:	2108      	movs	r1, #8
 801519a:	68f8      	ldr	r0, [r7, #12]
 801519c:	f000 f8c2 	bl	8015324 <SPI_WaitOnFlagUntilTimeout>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d007      	beq.n	80151b6 <HAL_SPI_TransmitReceive+0x4a6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80151ac:	f043 0220 	orr.w	r2, r3, #32
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	f000 f814 	bl	80151e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2201      	movs	r2, #1
 80151c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	2200      	movs	r2, #0
 80151c8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d001      	beq.n	80151da <HAL_SPI_TransmitReceive+0x4ca>
  {
    return HAL_ERROR;
 80151d6:	2301      	movs	r3, #1
 80151d8:	e000      	b.n	80151dc <HAL_SPI_TransmitReceive+0x4cc>
  }
  else
  {
    return HAL_OK;
 80151da:	2300      	movs	r3, #0
  }
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3728      	adds	r7, #40	@ 0x28
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b085      	sub	sp, #20
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	695b      	ldr	r3, [r3, #20]
 80151f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	699a      	ldr	r2, [r3, #24]
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	f042 0208 	orr.w	r2, r2, #8
 8015202:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	699a      	ldr	r2, [r3, #24]
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	f042 0210 	orr.w	r2, r2, #16
 8015212:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	f022 0201 	bic.w	r2, r2, #1
 8015222:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	691b      	ldr	r3, [r3, #16]
 801522a:	687a      	ldr	r2, [r7, #4]
 801522c:	6812      	ldr	r2, [r2, #0]
 801522e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8015232:	f023 0303 	bic.w	r3, r3, #3
 8015236:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	689a      	ldr	r2, [r3, #8]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015246:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 801524e:	b2db      	uxtb	r3, r3
 8015250:	2b04      	cmp	r3, #4
 8015252:	d014      	beq.n	801527e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f003 0320 	and.w	r3, r3, #32
 801525a:	2b00      	cmp	r3, #0
 801525c:	d00f      	beq.n	801527e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015264:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	699a      	ldr	r2, [r3, #24]
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	f042 0220 	orr.w	r2, r2, #32
 801527c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8015284:	b2db      	uxtb	r3, r3
 8015286:	2b03      	cmp	r3, #3
 8015288:	d014      	beq.n	80152b4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015290:	2b00      	cmp	r3, #0
 8015292:	d00f      	beq.n	80152b4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801529a:	f043 0204 	orr.w	r2, r3, #4
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	699a      	ldr	r2, [r3, #24]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80152b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d00f      	beq.n	80152de <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80152c4:	f043 0201 	orr.w	r2, r3, #1
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	699a      	ldr	r2, [r3, #24]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80152dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d00f      	beq.n	8015308 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80152ee:	f043 0208 	orr.w	r2, r3, #8
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	699a      	ldr	r2, [r3, #24]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015306:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2200      	movs	r2, #0
 801530c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2200      	movs	r2, #0
 8015314:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8015318:	bf00      	nop
 801531a:	3714      	adds	r7, #20
 801531c:	46bd      	mov	sp, r7
 801531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015322:	4770      	bx	lr

08015324 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	603b      	str	r3, [r7, #0]
 8015330:	4613      	mov	r3, r2
 8015332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015334:	e010      	b.n	8015358 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015336:	f7f6 fc3d 	bl	800bbb4 <HAL_GetTick>
 801533a:	4602      	mov	r2, r0
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	1ad3      	subs	r3, r2, r3
 8015340:	683a      	ldr	r2, [r7, #0]
 8015342:	429a      	cmp	r2, r3
 8015344:	d803      	bhi.n	801534e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801534c:	d102      	bne.n	8015354 <SPI_WaitOnFlagUntilTimeout+0x30>
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d101      	bne.n	8015358 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8015354:	2303      	movs	r3, #3
 8015356:	e00f      	b.n	8015378 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	695a      	ldr	r2, [r3, #20]
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	4013      	ands	r3, r2
 8015362:	68ba      	ldr	r2, [r7, #8]
 8015364:	429a      	cmp	r2, r3
 8015366:	bf0c      	ite	eq
 8015368:	2301      	moveq	r3, #1
 801536a:	2300      	movne	r3, #0
 801536c:	b2db      	uxtb	r3, r3
 801536e:	461a      	mov	r2, r3
 8015370:	79fb      	ldrb	r3, [r7, #7]
 8015372:	429a      	cmp	r2, r3
 8015374:	d0df      	beq.n	8015336 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8015376:	2300      	movs	r3, #0
}
 8015378:	4618      	mov	r0, r3
 801537a:	3710      	adds	r7, #16
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8015380:	b480      	push	{r7}
 8015382:	b085      	sub	sp, #20
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801538c:	095b      	lsrs	r3, r3, #5
 801538e:	3301      	adds	r3, #1
 8015390:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	68db      	ldr	r3, [r3, #12]
 8015396:	3301      	adds	r3, #1
 8015398:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	3307      	adds	r3, #7
 801539e:	08db      	lsrs	r3, r3, #3
 80153a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	68fa      	ldr	r2, [r7, #12]
 80153a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3714      	adds	r7, #20
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr

080153b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b082      	sub	sp, #8
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d101      	bne.n	80153c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80153c4:	2301      	movs	r3, #1
 80153c6:	e049      	b.n	801545c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80153ce:	b2db      	uxtb	r3, r3
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d106      	bne.n	80153e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2200      	movs	r2, #0
 80153d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f000 f841 	bl	8015464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2202      	movs	r2, #2
 80153e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	3304      	adds	r3, #4
 80153f2:	4619      	mov	r1, r3
 80153f4:	4610      	mov	r0, r2
 80153f6:	f000 ffb7 	bl	8016368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2201      	movs	r2, #1
 80153fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2201      	movs	r2, #1
 8015406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2201      	movs	r2, #1
 801540e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2201      	movs	r2, #1
 8015416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2201      	movs	r2, #1
 801541e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2201      	movs	r2, #1
 8015426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2201      	movs	r2, #1
 801542e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2201      	movs	r2, #1
 8015436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2201      	movs	r2, #1
 801543e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	2201      	movs	r2, #1
 8015446:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2201      	movs	r2, #1
 801544e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2201      	movs	r2, #1
 8015456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3708      	adds	r7, #8
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}

08015464 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8015464:	b480      	push	{r7}
 8015466:	b083      	sub	sp, #12
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801546c:	bf00      	nop
 801546e:	370c      	adds	r7, #12
 8015470:	46bd      	mov	sp, r7
 8015472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015476:	4770      	bx	lr

08015478 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015478:	b480      	push	{r7}
 801547a:	b085      	sub	sp, #20
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015486:	b2db      	uxtb	r3, r3
 8015488:	2b01      	cmp	r3, #1
 801548a:	d001      	beq.n	8015490 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801548c:	2301      	movs	r3, #1
 801548e:	e074      	b.n	801557a <HAL_TIM_Base_Start+0x102>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2202      	movs	r2, #2
 8015494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	4a3a      	ldr	r2, [pc, #232]	@ (8015588 <HAL_TIM_Base_Start+0x110>)
 801549e:	4293      	cmp	r3, r2
 80154a0:	d04a      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	4a39      	ldr	r2, [pc, #228]	@ (801558c <HAL_TIM_Base_Start+0x114>)
 80154a8:	4293      	cmp	r3, r2
 80154aa:	d045      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80154b4:	d040      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80154be:	d03b      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4a32      	ldr	r2, [pc, #200]	@ (8015590 <HAL_TIM_Base_Start+0x118>)
 80154c6:	4293      	cmp	r3, r2
 80154c8:	d036      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	4a31      	ldr	r2, [pc, #196]	@ (8015594 <HAL_TIM_Base_Start+0x11c>)
 80154d0:	4293      	cmp	r3, r2
 80154d2:	d031      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	4a2f      	ldr	r2, [pc, #188]	@ (8015598 <HAL_TIM_Base_Start+0x120>)
 80154da:	4293      	cmp	r3, r2
 80154dc:	d02c      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	4a2e      	ldr	r2, [pc, #184]	@ (801559c <HAL_TIM_Base_Start+0x124>)
 80154e4:	4293      	cmp	r3, r2
 80154e6:	d027      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	4a2c      	ldr	r2, [pc, #176]	@ (80155a0 <HAL_TIM_Base_Start+0x128>)
 80154ee:	4293      	cmp	r3, r2
 80154f0:	d022      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	4a2b      	ldr	r2, [pc, #172]	@ (80155a4 <HAL_TIM_Base_Start+0x12c>)
 80154f8:	4293      	cmp	r3, r2
 80154fa:	d01d      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4a29      	ldr	r2, [pc, #164]	@ (80155a8 <HAL_TIM_Base_Start+0x130>)
 8015502:	4293      	cmp	r3, r2
 8015504:	d018      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	4a28      	ldr	r2, [pc, #160]	@ (80155ac <HAL_TIM_Base_Start+0x134>)
 801550c:	4293      	cmp	r3, r2
 801550e:	d013      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4a26      	ldr	r2, [pc, #152]	@ (80155b0 <HAL_TIM_Base_Start+0x138>)
 8015516:	4293      	cmp	r3, r2
 8015518:	d00e      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	4a25      	ldr	r2, [pc, #148]	@ (80155b4 <HAL_TIM_Base_Start+0x13c>)
 8015520:	4293      	cmp	r3, r2
 8015522:	d009      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	4a23      	ldr	r2, [pc, #140]	@ (80155b8 <HAL_TIM_Base_Start+0x140>)
 801552a:	4293      	cmp	r3, r2
 801552c:	d004      	beq.n	8015538 <HAL_TIM_Base_Start+0xc0>
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	4a22      	ldr	r2, [pc, #136]	@ (80155bc <HAL_TIM_Base_Start+0x144>)
 8015534:	4293      	cmp	r3, r2
 8015536:	d115      	bne.n	8015564 <HAL_TIM_Base_Start+0xec>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	689a      	ldr	r2, [r3, #8]
 801553e:	4b20      	ldr	r3, [pc, #128]	@ (80155c0 <HAL_TIM_Base_Start+0x148>)
 8015540:	4013      	ands	r3, r2
 8015542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	2b06      	cmp	r3, #6
 8015548:	d015      	beq.n	8015576 <HAL_TIM_Base_Start+0xfe>
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015550:	d011      	beq.n	8015576 <HAL_TIM_Base_Start+0xfe>
    {
      __HAL_TIM_ENABLE(htim);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f042 0201 	orr.w	r2, r2, #1
 8015560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015562:	e008      	b.n	8015576 <HAL_TIM_Base_Start+0xfe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	f042 0201 	orr.w	r2, r2, #1
 8015572:	601a      	str	r2, [r3, #0]
 8015574:	e000      	b.n	8015578 <HAL_TIM_Base_Start+0x100>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015578:	2300      	movs	r3, #0
}
 801557a:	4618      	mov	r0, r3
 801557c:	3714      	adds	r7, #20
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop
 8015588:	40012c00 	.word	0x40012c00
 801558c:	50012c00 	.word	0x50012c00
 8015590:	40000400 	.word	0x40000400
 8015594:	50000400 	.word	0x50000400
 8015598:	40000800 	.word	0x40000800
 801559c:	50000800 	.word	0x50000800
 80155a0:	40000c00 	.word	0x40000c00
 80155a4:	50000c00 	.word	0x50000c00
 80155a8:	40013400 	.word	0x40013400
 80155ac:	50013400 	.word	0x50013400
 80155b0:	40001800 	.word	0x40001800
 80155b4:	50001800 	.word	0x50001800
 80155b8:	40014000 	.word	0x40014000
 80155bc:	50014000 	.word	0x50014000
 80155c0:	00010007 	.word	0x00010007

080155c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80155c4:	b480      	push	{r7}
 80155c6:	b085      	sub	sp, #20
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d001      	beq.n	80155dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80155d8:	2301      	movs	r3, #1
 80155da:	e07c      	b.n	80156d6 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2202      	movs	r2, #2
 80155e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	68da      	ldr	r2, [r3, #12]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	f042 0201 	orr.w	r2, r2, #1
 80155f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	4a3a      	ldr	r2, [pc, #232]	@ (80156e4 <HAL_TIM_Base_Start_IT+0x120>)
 80155fa:	4293      	cmp	r3, r2
 80155fc:	d04a      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	4a39      	ldr	r2, [pc, #228]	@ (80156e8 <HAL_TIM_Base_Start_IT+0x124>)
 8015604:	4293      	cmp	r3, r2
 8015606:	d045      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015610:	d040      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801561a:	d03b      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	4a32      	ldr	r2, [pc, #200]	@ (80156ec <HAL_TIM_Base_Start_IT+0x128>)
 8015622:	4293      	cmp	r3, r2
 8015624:	d036      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	4a31      	ldr	r2, [pc, #196]	@ (80156f0 <HAL_TIM_Base_Start_IT+0x12c>)
 801562c:	4293      	cmp	r3, r2
 801562e:	d031      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	4a2f      	ldr	r2, [pc, #188]	@ (80156f4 <HAL_TIM_Base_Start_IT+0x130>)
 8015636:	4293      	cmp	r3, r2
 8015638:	d02c      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	4a2e      	ldr	r2, [pc, #184]	@ (80156f8 <HAL_TIM_Base_Start_IT+0x134>)
 8015640:	4293      	cmp	r3, r2
 8015642:	d027      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	4a2c      	ldr	r2, [pc, #176]	@ (80156fc <HAL_TIM_Base_Start_IT+0x138>)
 801564a:	4293      	cmp	r3, r2
 801564c:	d022      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	4a2b      	ldr	r2, [pc, #172]	@ (8015700 <HAL_TIM_Base_Start_IT+0x13c>)
 8015654:	4293      	cmp	r3, r2
 8015656:	d01d      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	4a29      	ldr	r2, [pc, #164]	@ (8015704 <HAL_TIM_Base_Start_IT+0x140>)
 801565e:	4293      	cmp	r3, r2
 8015660:	d018      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	4a28      	ldr	r2, [pc, #160]	@ (8015708 <HAL_TIM_Base_Start_IT+0x144>)
 8015668:	4293      	cmp	r3, r2
 801566a:	d013      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	4a26      	ldr	r2, [pc, #152]	@ (801570c <HAL_TIM_Base_Start_IT+0x148>)
 8015672:	4293      	cmp	r3, r2
 8015674:	d00e      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4a25      	ldr	r2, [pc, #148]	@ (8015710 <HAL_TIM_Base_Start_IT+0x14c>)
 801567c:	4293      	cmp	r3, r2
 801567e:	d009      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	4a23      	ldr	r2, [pc, #140]	@ (8015714 <HAL_TIM_Base_Start_IT+0x150>)
 8015686:	4293      	cmp	r3, r2
 8015688:	d004      	beq.n	8015694 <HAL_TIM_Base_Start_IT+0xd0>
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	4a22      	ldr	r2, [pc, #136]	@ (8015718 <HAL_TIM_Base_Start_IT+0x154>)
 8015690:	4293      	cmp	r3, r2
 8015692:	d115      	bne.n	80156c0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	689a      	ldr	r2, [r3, #8]
 801569a:	4b20      	ldr	r3, [pc, #128]	@ (801571c <HAL_TIM_Base_Start_IT+0x158>)
 801569c:	4013      	ands	r3, r2
 801569e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2b06      	cmp	r3, #6
 80156a4:	d015      	beq.n	80156d2 <HAL_TIM_Base_Start_IT+0x10e>
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156ac:	d011      	beq.n	80156d2 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	f042 0201 	orr.w	r2, r2, #1
 80156bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156be:	e008      	b.n	80156d2 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	681a      	ldr	r2, [r3, #0]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	f042 0201 	orr.w	r2, r2, #1
 80156ce:	601a      	str	r2, [r3, #0]
 80156d0:	e000      	b.n	80156d4 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80156d4:	2300      	movs	r3, #0
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3714      	adds	r7, #20
 80156da:	46bd      	mov	sp, r7
 80156dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e0:	4770      	bx	lr
 80156e2:	bf00      	nop
 80156e4:	40012c00 	.word	0x40012c00
 80156e8:	50012c00 	.word	0x50012c00
 80156ec:	40000400 	.word	0x40000400
 80156f0:	50000400 	.word	0x50000400
 80156f4:	40000800 	.word	0x40000800
 80156f8:	50000800 	.word	0x50000800
 80156fc:	40000c00 	.word	0x40000c00
 8015700:	50000c00 	.word	0x50000c00
 8015704:	40013400 	.word	0x40013400
 8015708:	50013400 	.word	0x50013400
 801570c:	40001800 	.word	0x40001800
 8015710:	50001800 	.word	0x50001800
 8015714:	40014000 	.word	0x40014000
 8015718:	50014000 	.word	0x50014000
 801571c:	00010007 	.word	0x00010007

08015720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d101      	bne.n	8015732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801572e:	2301      	movs	r3, #1
 8015730:	e049      	b.n	80157c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015738:	b2db      	uxtb	r3, r3
 801573a:	2b00      	cmp	r3, #0
 801573c:	d106      	bne.n	801574c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2200      	movs	r2, #0
 8015742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	f000 f841 	bl	80157ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2202      	movs	r2, #2
 8015750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681a      	ldr	r2, [r3, #0]
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	3304      	adds	r3, #4
 801575c:	4619      	mov	r1, r3
 801575e:	4610      	mov	r0, r2
 8015760:	f000 fe02 	bl	8016368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2201      	movs	r2, #1
 8015768:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2201      	movs	r2, #1
 8015770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2201      	movs	r2, #1
 8015778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2201      	movs	r2, #1
 8015780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2201      	movs	r2, #1
 8015788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2201      	movs	r2, #1
 8015790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2201      	movs	r2, #1
 8015798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2201      	movs	r2, #1
 80157a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2201      	movs	r2, #1
 80157a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2201      	movs	r2, #1
 80157b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	2201      	movs	r2, #1
 80157b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2201      	movs	r2, #1
 80157c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80157c4:	2300      	movs	r3, #0
}
 80157c6:	4618      	mov	r0, r3
 80157c8:	3708      	adds	r7, #8
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}

080157ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80157ce:	b480      	push	{r7}
 80157d0:	b083      	sub	sp, #12
 80157d2:	af00      	add	r7, sp, #0
 80157d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80157d6:	bf00      	nop
 80157d8:	370c      	adds	r7, #12
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr
	...

080157e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b084      	sub	sp, #16
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d109      	bne.n	8015808 <HAL_TIM_PWM_Start+0x24>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	2b01      	cmp	r3, #1
 80157fe:	bf14      	ite	ne
 8015800:	2301      	movne	r3, #1
 8015802:	2300      	moveq	r3, #0
 8015804:	b2db      	uxtb	r3, r3
 8015806:	e03c      	b.n	8015882 <HAL_TIM_PWM_Start+0x9e>
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	2b04      	cmp	r3, #4
 801580c:	d109      	bne.n	8015822 <HAL_TIM_PWM_Start+0x3e>
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8015814:	b2db      	uxtb	r3, r3
 8015816:	2b01      	cmp	r3, #1
 8015818:	bf14      	ite	ne
 801581a:	2301      	movne	r3, #1
 801581c:	2300      	moveq	r3, #0
 801581e:	b2db      	uxtb	r3, r3
 8015820:	e02f      	b.n	8015882 <HAL_TIM_PWM_Start+0x9e>
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	2b08      	cmp	r3, #8
 8015826:	d109      	bne.n	801583c <HAL_TIM_PWM_Start+0x58>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801582e:	b2db      	uxtb	r3, r3
 8015830:	2b01      	cmp	r3, #1
 8015832:	bf14      	ite	ne
 8015834:	2301      	movne	r3, #1
 8015836:	2300      	moveq	r3, #0
 8015838:	b2db      	uxtb	r3, r3
 801583a:	e022      	b.n	8015882 <HAL_TIM_PWM_Start+0x9e>
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	2b0c      	cmp	r3, #12
 8015840:	d109      	bne.n	8015856 <HAL_TIM_PWM_Start+0x72>
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015848:	b2db      	uxtb	r3, r3
 801584a:	2b01      	cmp	r3, #1
 801584c:	bf14      	ite	ne
 801584e:	2301      	movne	r3, #1
 8015850:	2300      	moveq	r3, #0
 8015852:	b2db      	uxtb	r3, r3
 8015854:	e015      	b.n	8015882 <HAL_TIM_PWM_Start+0x9e>
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	2b10      	cmp	r3, #16
 801585a:	d109      	bne.n	8015870 <HAL_TIM_PWM_Start+0x8c>
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015862:	b2db      	uxtb	r3, r3
 8015864:	2b01      	cmp	r3, #1
 8015866:	bf14      	ite	ne
 8015868:	2301      	movne	r3, #1
 801586a:	2300      	moveq	r3, #0
 801586c:	b2db      	uxtb	r3, r3
 801586e:	e008      	b.n	8015882 <HAL_TIM_PWM_Start+0x9e>
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015876:	b2db      	uxtb	r3, r3
 8015878:	2b01      	cmp	r3, #1
 801587a:	bf14      	ite	ne
 801587c:	2301      	movne	r3, #1
 801587e:	2300      	moveq	r3, #0
 8015880:	b2db      	uxtb	r3, r3
 8015882:	2b00      	cmp	r3, #0
 8015884:	d001      	beq.n	801588a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8015886:	2301      	movs	r3, #1
 8015888:	e0e2      	b.n	8015a50 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d104      	bne.n	801589a <HAL_TIM_PWM_Start+0xb6>
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2202      	movs	r2, #2
 8015894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015898:	e023      	b.n	80158e2 <HAL_TIM_PWM_Start+0xfe>
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	2b04      	cmp	r3, #4
 801589e:	d104      	bne.n	80158aa <HAL_TIM_PWM_Start+0xc6>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2202      	movs	r2, #2
 80158a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80158a8:	e01b      	b.n	80158e2 <HAL_TIM_PWM_Start+0xfe>
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	2b08      	cmp	r3, #8
 80158ae:	d104      	bne.n	80158ba <HAL_TIM_PWM_Start+0xd6>
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2202      	movs	r2, #2
 80158b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80158b8:	e013      	b.n	80158e2 <HAL_TIM_PWM_Start+0xfe>
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	2b0c      	cmp	r3, #12
 80158be:	d104      	bne.n	80158ca <HAL_TIM_PWM_Start+0xe6>
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2202      	movs	r2, #2
 80158c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80158c8:	e00b      	b.n	80158e2 <HAL_TIM_PWM_Start+0xfe>
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	2b10      	cmp	r3, #16
 80158ce:	d104      	bne.n	80158da <HAL_TIM_PWM_Start+0xf6>
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2202      	movs	r2, #2
 80158d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80158d8:	e003      	b.n	80158e2 <HAL_TIM_PWM_Start+0xfe>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2202      	movs	r2, #2
 80158de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	2201      	movs	r2, #1
 80158e8:	6839      	ldr	r1, [r7, #0]
 80158ea:	4618      	mov	r0, r3
 80158ec:	f001 fad8 	bl	8016ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	4a58      	ldr	r2, [pc, #352]	@ (8015a58 <HAL_TIM_PWM_Start+0x274>)
 80158f6:	4293      	cmp	r3, r2
 80158f8:	d02c      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	4a57      	ldr	r2, [pc, #348]	@ (8015a5c <HAL_TIM_PWM_Start+0x278>)
 8015900:	4293      	cmp	r3, r2
 8015902:	d027      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	4a55      	ldr	r2, [pc, #340]	@ (8015a60 <HAL_TIM_PWM_Start+0x27c>)
 801590a:	4293      	cmp	r3, r2
 801590c:	d022      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	4a54      	ldr	r2, [pc, #336]	@ (8015a64 <HAL_TIM_PWM_Start+0x280>)
 8015914:	4293      	cmp	r3, r2
 8015916:	d01d      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	4a52      	ldr	r2, [pc, #328]	@ (8015a68 <HAL_TIM_PWM_Start+0x284>)
 801591e:	4293      	cmp	r3, r2
 8015920:	d018      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	4a51      	ldr	r2, [pc, #324]	@ (8015a6c <HAL_TIM_PWM_Start+0x288>)
 8015928:	4293      	cmp	r3, r2
 801592a:	d013      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	4a4f      	ldr	r2, [pc, #316]	@ (8015a70 <HAL_TIM_PWM_Start+0x28c>)
 8015932:	4293      	cmp	r3, r2
 8015934:	d00e      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	4a4e      	ldr	r2, [pc, #312]	@ (8015a74 <HAL_TIM_PWM_Start+0x290>)
 801593c:	4293      	cmp	r3, r2
 801593e:	d009      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4a4c      	ldr	r2, [pc, #304]	@ (8015a78 <HAL_TIM_PWM_Start+0x294>)
 8015946:	4293      	cmp	r3, r2
 8015948:	d004      	beq.n	8015954 <HAL_TIM_PWM_Start+0x170>
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	4a4b      	ldr	r2, [pc, #300]	@ (8015a7c <HAL_TIM_PWM_Start+0x298>)
 8015950:	4293      	cmp	r3, r2
 8015952:	d101      	bne.n	8015958 <HAL_TIM_PWM_Start+0x174>
 8015954:	2301      	movs	r3, #1
 8015956:	e000      	b.n	801595a <HAL_TIM_PWM_Start+0x176>
 8015958:	2300      	movs	r3, #0
 801595a:	2b00      	cmp	r3, #0
 801595c:	d007      	beq.n	801596e <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801596c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	4a39      	ldr	r2, [pc, #228]	@ (8015a58 <HAL_TIM_PWM_Start+0x274>)
 8015974:	4293      	cmp	r3, r2
 8015976:	d04a      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	4a37      	ldr	r2, [pc, #220]	@ (8015a5c <HAL_TIM_PWM_Start+0x278>)
 801597e:	4293      	cmp	r3, r2
 8015980:	d045      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801598a:	d040      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015994:	d03b      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	4a39      	ldr	r2, [pc, #228]	@ (8015a80 <HAL_TIM_PWM_Start+0x29c>)
 801599c:	4293      	cmp	r3, r2
 801599e:	d036      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	4a37      	ldr	r2, [pc, #220]	@ (8015a84 <HAL_TIM_PWM_Start+0x2a0>)
 80159a6:	4293      	cmp	r3, r2
 80159a8:	d031      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	4a36      	ldr	r2, [pc, #216]	@ (8015a88 <HAL_TIM_PWM_Start+0x2a4>)
 80159b0:	4293      	cmp	r3, r2
 80159b2:	d02c      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	4a34      	ldr	r2, [pc, #208]	@ (8015a8c <HAL_TIM_PWM_Start+0x2a8>)
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d027      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	4a33      	ldr	r2, [pc, #204]	@ (8015a90 <HAL_TIM_PWM_Start+0x2ac>)
 80159c4:	4293      	cmp	r3, r2
 80159c6:	d022      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	4a31      	ldr	r2, [pc, #196]	@ (8015a94 <HAL_TIM_PWM_Start+0x2b0>)
 80159ce:	4293      	cmp	r3, r2
 80159d0:	d01d      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	4a22      	ldr	r2, [pc, #136]	@ (8015a60 <HAL_TIM_PWM_Start+0x27c>)
 80159d8:	4293      	cmp	r3, r2
 80159da:	d018      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4a20      	ldr	r2, [pc, #128]	@ (8015a64 <HAL_TIM_PWM_Start+0x280>)
 80159e2:	4293      	cmp	r3, r2
 80159e4:	d013      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4a2b      	ldr	r2, [pc, #172]	@ (8015a98 <HAL_TIM_PWM_Start+0x2b4>)
 80159ec:	4293      	cmp	r3, r2
 80159ee:	d00e      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	4a29      	ldr	r2, [pc, #164]	@ (8015a9c <HAL_TIM_PWM_Start+0x2b8>)
 80159f6:	4293      	cmp	r3, r2
 80159f8:	d009      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	4a1a      	ldr	r2, [pc, #104]	@ (8015a68 <HAL_TIM_PWM_Start+0x284>)
 8015a00:	4293      	cmp	r3, r2
 8015a02:	d004      	beq.n	8015a0e <HAL_TIM_PWM_Start+0x22a>
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	4a18      	ldr	r2, [pc, #96]	@ (8015a6c <HAL_TIM_PWM_Start+0x288>)
 8015a0a:	4293      	cmp	r3, r2
 8015a0c:	d115      	bne.n	8015a3a <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	689a      	ldr	r2, [r3, #8]
 8015a14:	4b22      	ldr	r3, [pc, #136]	@ (8015aa0 <HAL_TIM_PWM_Start+0x2bc>)
 8015a16:	4013      	ands	r3, r2
 8015a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2b06      	cmp	r3, #6
 8015a1e:	d015      	beq.n	8015a4c <HAL_TIM_PWM_Start+0x268>
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015a26:	d011      	beq.n	8015a4c <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	681a      	ldr	r2, [r3, #0]
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	f042 0201 	orr.w	r2, r2, #1
 8015a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a38:	e008      	b.n	8015a4c <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	f042 0201 	orr.w	r2, r2, #1
 8015a48:	601a      	str	r2, [r3, #0]
 8015a4a:	e000      	b.n	8015a4e <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015a4e:	2300      	movs	r3, #0
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	40012c00 	.word	0x40012c00
 8015a5c:	50012c00 	.word	0x50012c00
 8015a60:	40013400 	.word	0x40013400
 8015a64:	50013400 	.word	0x50013400
 8015a68:	40014000 	.word	0x40014000
 8015a6c:	50014000 	.word	0x50014000
 8015a70:	40014400 	.word	0x40014400
 8015a74:	50014400 	.word	0x50014400
 8015a78:	40014800 	.word	0x40014800
 8015a7c:	50014800 	.word	0x50014800
 8015a80:	40000400 	.word	0x40000400
 8015a84:	50000400 	.word	0x50000400
 8015a88:	40000800 	.word	0x40000800
 8015a8c:	50000800 	.word	0x50000800
 8015a90:	40000c00 	.word	0x40000c00
 8015a94:	50000c00 	.word	0x50000c00
 8015a98:	40001800 	.word	0x40001800
 8015a9c:	50001800 	.word	0x50001800
 8015aa0:	00010007 	.word	0x00010007

08015aa4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	6839      	ldr	r1, [r7, #0]
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f001 f9f2 	bl	8016ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8015bec <HAL_TIM_PWM_Stop+0x148>)
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	d02c      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4a49      	ldr	r2, [pc, #292]	@ (8015bf0 <HAL_TIM_PWM_Stop+0x14c>)
 8015acc:	4293      	cmp	r3, r2
 8015ace:	d027      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	4a47      	ldr	r2, [pc, #284]	@ (8015bf4 <HAL_TIM_PWM_Stop+0x150>)
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	d022      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	4a46      	ldr	r2, [pc, #280]	@ (8015bf8 <HAL_TIM_PWM_Stop+0x154>)
 8015ae0:	4293      	cmp	r3, r2
 8015ae2:	d01d      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	4a44      	ldr	r2, [pc, #272]	@ (8015bfc <HAL_TIM_PWM_Stop+0x158>)
 8015aea:	4293      	cmp	r3, r2
 8015aec:	d018      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	4a43      	ldr	r2, [pc, #268]	@ (8015c00 <HAL_TIM_PWM_Stop+0x15c>)
 8015af4:	4293      	cmp	r3, r2
 8015af6:	d013      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	4a41      	ldr	r2, [pc, #260]	@ (8015c04 <HAL_TIM_PWM_Stop+0x160>)
 8015afe:	4293      	cmp	r3, r2
 8015b00:	d00e      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	4a40      	ldr	r2, [pc, #256]	@ (8015c08 <HAL_TIM_PWM_Stop+0x164>)
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	d009      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	4a3e      	ldr	r2, [pc, #248]	@ (8015c0c <HAL_TIM_PWM_Stop+0x168>)
 8015b12:	4293      	cmp	r3, r2
 8015b14:	d004      	beq.n	8015b20 <HAL_TIM_PWM_Stop+0x7c>
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8015c10 <HAL_TIM_PWM_Stop+0x16c>)
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	d101      	bne.n	8015b24 <HAL_TIM_PWM_Stop+0x80>
 8015b20:	2301      	movs	r3, #1
 8015b22:	e000      	b.n	8015b26 <HAL_TIM_PWM_Stop+0x82>
 8015b24:	2300      	movs	r3, #0
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d017      	beq.n	8015b5a <HAL_TIM_PWM_Stop+0xb6>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	6a1a      	ldr	r2, [r3, #32]
 8015b30:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015b34:	4013      	ands	r3, r2
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d10f      	bne.n	8015b5a <HAL_TIM_PWM_Stop+0xb6>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	6a1a      	ldr	r2, [r3, #32]
 8015b40:	f244 4344 	movw	r3, #17476	@ 0x4444
 8015b44:	4013      	ands	r3, r2
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d107      	bne.n	8015b5a <HAL_TIM_PWM_Stop+0xb6>
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015b58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	6a1a      	ldr	r2, [r3, #32]
 8015b60:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015b64:	4013      	ands	r3, r2
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d10f      	bne.n	8015b8a <HAL_TIM_PWM_Stop+0xe6>
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	6a1a      	ldr	r2, [r3, #32]
 8015b70:	f244 4344 	movw	r3, #17476	@ 0x4444
 8015b74:	4013      	ands	r3, r2
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d107      	bne.n	8015b8a <HAL_TIM_PWM_Stop+0xe6>
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	681a      	ldr	r2, [r3, #0]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	f022 0201 	bic.w	r2, r2, #1
 8015b88:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d104      	bne.n	8015b9a <HAL_TIM_PWM_Stop+0xf6>
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2201      	movs	r2, #1
 8015b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015b98:	e023      	b.n	8015be2 <HAL_TIM_PWM_Stop+0x13e>
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	2b04      	cmp	r3, #4
 8015b9e:	d104      	bne.n	8015baa <HAL_TIM_PWM_Stop+0x106>
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015ba8:	e01b      	b.n	8015be2 <HAL_TIM_PWM_Stop+0x13e>
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	2b08      	cmp	r3, #8
 8015bae:	d104      	bne.n	8015bba <HAL_TIM_PWM_Stop+0x116>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015bb8:	e013      	b.n	8015be2 <HAL_TIM_PWM_Stop+0x13e>
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	2b0c      	cmp	r3, #12
 8015bbe:	d104      	bne.n	8015bca <HAL_TIM_PWM_Stop+0x126>
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2201      	movs	r2, #1
 8015bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015bc8:	e00b      	b.n	8015be2 <HAL_TIM_PWM_Stop+0x13e>
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	2b10      	cmp	r3, #16
 8015bce:	d104      	bne.n	8015bda <HAL_TIM_PWM_Stop+0x136>
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015bd8:	e003      	b.n	8015be2 <HAL_TIM_PWM_Stop+0x13e>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2201      	movs	r2, #1
 8015bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8015be2:	2300      	movs	r3, #0
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3708      	adds	r7, #8
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}
 8015bec:	40012c00 	.word	0x40012c00
 8015bf0:	50012c00 	.word	0x50012c00
 8015bf4:	40013400 	.word	0x40013400
 8015bf8:	50013400 	.word	0x50013400
 8015bfc:	40014000 	.word	0x40014000
 8015c00:	50014000 	.word	0x50014000
 8015c04:	40014400 	.word	0x40014400
 8015c08:	50014400 	.word	0x50014400
 8015c0c:	40014800 	.word	0x40014800
 8015c10:	50014800 	.word	0x50014800

08015c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b084      	sub	sp, #16
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	68db      	ldr	r3, [r3, #12]
 8015c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	691b      	ldr	r3, [r3, #16]
 8015c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	f003 0302 	and.w	r3, r3, #2
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d020      	beq.n	8015c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	f003 0302 	and.w	r3, r3, #2
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d01b      	beq.n	8015c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	f06f 0202 	mvn.w	r2, #2
 8015c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2201      	movs	r2, #1
 8015c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	699b      	ldr	r3, [r3, #24]
 8015c56:	f003 0303 	and.w	r3, r3, #3
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d003      	beq.n	8015c66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f000 fb64 	bl	801632c <HAL_TIM_IC_CaptureCallback>
 8015c64:	e005      	b.n	8015c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f000 fb56 	bl	8016318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f000 fb67 	bl	8016340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2200      	movs	r2, #0
 8015c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	f003 0304 	and.w	r3, r3, #4
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d020      	beq.n	8015cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f003 0304 	and.w	r3, r3, #4
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d01b      	beq.n	8015cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	f06f 0204 	mvn.w	r2, #4
 8015c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2202      	movs	r2, #2
 8015c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	699b      	ldr	r3, [r3, #24]
 8015ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d003      	beq.n	8015cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f000 fb3e 	bl	801632c <HAL_TIM_IC_CaptureCallback>
 8015cb0:	e005      	b.n	8015cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f000 fb30 	bl	8016318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 fb41 	bl	8016340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	f003 0308 	and.w	r3, r3, #8
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d020      	beq.n	8015d10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	f003 0308 	and.w	r3, r3, #8
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d01b      	beq.n	8015d10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	f06f 0208 	mvn.w	r2, #8
 8015ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2204      	movs	r2, #4
 8015ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	69db      	ldr	r3, [r3, #28]
 8015cee:	f003 0303 	and.w	r3, r3, #3
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d003      	beq.n	8015cfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f000 fb18 	bl	801632c <HAL_TIM_IC_CaptureCallback>
 8015cfc:	e005      	b.n	8015d0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 fb0a 	bl	8016318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f000 fb1b 	bl	8016340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	f003 0310 	and.w	r3, r3, #16
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d020      	beq.n	8015d5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	f003 0310 	and.w	r3, r3, #16
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d01b      	beq.n	8015d5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	f06f 0210 	mvn.w	r2, #16
 8015d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2208      	movs	r2, #8
 8015d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	69db      	ldr	r3, [r3, #28]
 8015d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d003      	beq.n	8015d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 faf2 	bl	801632c <HAL_TIM_IC_CaptureCallback>
 8015d48:	e005      	b.n	8015d56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 fae4 	bl	8016318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f000 faf5 	bl	8016340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	f003 0301 	and.w	r3, r3, #1
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d00c      	beq.n	8015d80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	f003 0301 	and.w	r3, r3, #1
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d007      	beq.n	8015d80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	f06f 0201 	mvn.w	r2, #1
 8015d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f7f5 f908 	bl	800af90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d104      	bne.n	8015d94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d00c      	beq.n	8015dae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d007      	beq.n	8015dae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8015da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f001 fa13 	bl	80171d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d00c      	beq.n	8015dd2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d007      	beq.n	8015dd2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8015dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f001 fa0b 	bl	80171e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00c      	beq.n	8015df6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d007      	beq.n	8015df6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8015dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f000 faaf 	bl	8016354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	f003 0320 	and.w	r3, r3, #32
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d00c      	beq.n	8015e1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	f003 0320 	and.w	r3, r3, #32
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d007      	beq.n	8015e1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	f06f 0220 	mvn.w	r2, #32
 8015e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f001 f9d3 	bl	80171c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d00c      	beq.n	8015e3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d007      	beq.n	8015e3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8015e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f001 f9df 	bl	80171fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d00c      	beq.n	8015e62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d007      	beq.n	8015e62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8015e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f001 f9d7 	bl	8017210 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d00c      	beq.n	8015e86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d007      	beq.n	8015e86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8015e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f001 f9cf 	bl	8017224 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d00c      	beq.n	8015eaa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d007      	beq.n	8015eaa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8015ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f001 f9c7 	bl	8017238 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015eaa:	bf00      	nop
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
	...

08015eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b086      	sub	sp, #24
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	60f8      	str	r0, [r7, #12]
 8015ebc:	60b9      	str	r1, [r7, #8]
 8015ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	d101      	bne.n	8015ed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8015ece:	2302      	movs	r3, #2
 8015ed0:	e0ff      	b.n	80160d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2201      	movs	r2, #1
 8015ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b14      	cmp	r3, #20
 8015ede:	f200 80f0 	bhi.w	80160c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8015ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8015ee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8015ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ee8:	08015f3d 	.word	0x08015f3d
 8015eec:	080160c3 	.word	0x080160c3
 8015ef0:	080160c3 	.word	0x080160c3
 8015ef4:	080160c3 	.word	0x080160c3
 8015ef8:	08015f7d 	.word	0x08015f7d
 8015efc:	080160c3 	.word	0x080160c3
 8015f00:	080160c3 	.word	0x080160c3
 8015f04:	080160c3 	.word	0x080160c3
 8015f08:	08015fbf 	.word	0x08015fbf
 8015f0c:	080160c3 	.word	0x080160c3
 8015f10:	080160c3 	.word	0x080160c3
 8015f14:	080160c3 	.word	0x080160c3
 8015f18:	08015fff 	.word	0x08015fff
 8015f1c:	080160c3 	.word	0x080160c3
 8015f20:	080160c3 	.word	0x080160c3
 8015f24:	080160c3 	.word	0x080160c3
 8015f28:	08016041 	.word	0x08016041
 8015f2c:	080160c3 	.word	0x080160c3
 8015f30:	080160c3 	.word	0x080160c3
 8015f34:	080160c3 	.word	0x080160c3
 8015f38:	08016081 	.word	0x08016081
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	68b9      	ldr	r1, [r7, #8]
 8015f42:	4618      	mov	r0, r3
 8015f44:	f000 fb3a 	bl	80165bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	699a      	ldr	r2, [r3, #24]
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	f042 0208 	orr.w	r2, r2, #8
 8015f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	699a      	ldr	r2, [r3, #24]
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	f022 0204 	bic.w	r2, r2, #4
 8015f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	6999      	ldr	r1, [r3, #24]
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	691a      	ldr	r2, [r3, #16]
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	430a      	orrs	r2, r1
 8015f78:	619a      	str	r2, [r3, #24]
      break;
 8015f7a:	e0a5      	b.n	80160c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	68b9      	ldr	r1, [r7, #8]
 8015f82:	4618      	mov	r0, r3
 8015f84:	f000 fbdc 	bl	8016740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	699a      	ldr	r2, [r3, #24]
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	699a      	ldr	r2, [r3, #24]
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8015fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	6999      	ldr	r1, [r3, #24]
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	691b      	ldr	r3, [r3, #16]
 8015fb2:	021a      	lsls	r2, r3, #8
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	430a      	orrs	r2, r1
 8015fba:	619a      	str	r2, [r3, #24]
      break;
 8015fbc:	e084      	b.n	80160c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	68b9      	ldr	r1, [r7, #8]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f000 fc6b 	bl	80168a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	69da      	ldr	r2, [r3, #28]
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	f042 0208 	orr.w	r2, r2, #8
 8015fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	69da      	ldr	r2, [r3, #28]
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f022 0204 	bic.w	r2, r2, #4
 8015fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	69d9      	ldr	r1, [r3, #28]
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	691a      	ldr	r2, [r3, #16]
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	430a      	orrs	r2, r1
 8015ffa:	61da      	str	r2, [r3, #28]
      break;
 8015ffc:	e064      	b.n	80160c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	68b9      	ldr	r1, [r7, #8]
 8016004:	4618      	mov	r0, r3
 8016006:	f000 fcf9 	bl	80169fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	69da      	ldr	r2, [r3, #28]
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	69da      	ldr	r2, [r3, #28]
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	69d9      	ldr	r1, [r3, #28]
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	691b      	ldr	r3, [r3, #16]
 8016034:	021a      	lsls	r2, r3, #8
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	430a      	orrs	r2, r1
 801603c:	61da      	str	r2, [r3, #28]
      break;
 801603e:	e043      	b.n	80160c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	68b9      	ldr	r1, [r7, #8]
 8016046:	4618      	mov	r0, r3
 8016048:	f000 fd88 	bl	8016b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	f042 0208 	orr.w	r2, r2, #8
 801605a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	f022 0204 	bic.w	r2, r2, #4
 801606a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	691a      	ldr	r2, [r3, #16]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	430a      	orrs	r2, r1
 801607c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 801607e:	e023      	b.n	80160c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	68b9      	ldr	r1, [r7, #8]
 8016086:	4618      	mov	r0, r3
 8016088:	f000 fdea 	bl	8016c60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801609a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80160aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	691b      	ldr	r3, [r3, #16]
 80160b6:	021a      	lsls	r2, r3, #8
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	430a      	orrs	r2, r1
 80160be:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80160c0:	e002      	b.n	80160c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80160c2:	2301      	movs	r3, #1
 80160c4:	75fb      	strb	r3, [r7, #23]
      break;
 80160c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2200      	movs	r2, #0
 80160cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80160d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	3718      	adds	r7, #24
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}
 80160da:	bf00      	nop

080160dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b084      	sub	sp, #16
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
 80160e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80160e6:	2300      	movs	r3, #0
 80160e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80160f0:	2b01      	cmp	r3, #1
 80160f2:	d101      	bne.n	80160f8 <HAL_TIM_ConfigClockSource+0x1c>
 80160f4:	2302      	movs	r3, #2
 80160f6:	e0fe      	b.n	80162f6 <HAL_TIM_ConfigClockSource+0x21a>
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2201      	movs	r2, #1
 80160fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2202      	movs	r2, #2
 8016104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	689b      	ldr	r3, [r3, #8]
 801610e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8016116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801611a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	68ba      	ldr	r2, [r7, #8]
 801612a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016134:	f000 80c9 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016138:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801613c:	f200 80ce 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 8016140:	4a6f      	ldr	r2, [pc, #444]	@ (8016300 <HAL_TIM_ConfigClockSource+0x224>)
 8016142:	4293      	cmp	r3, r2
 8016144:	f000 80c1 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016148:	4a6d      	ldr	r2, [pc, #436]	@ (8016300 <HAL_TIM_ConfigClockSource+0x224>)
 801614a:	4293      	cmp	r3, r2
 801614c:	f200 80c6 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 8016150:	4a6c      	ldr	r2, [pc, #432]	@ (8016304 <HAL_TIM_ConfigClockSource+0x228>)
 8016152:	4293      	cmp	r3, r2
 8016154:	f000 80b9 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016158:	4a6a      	ldr	r2, [pc, #424]	@ (8016304 <HAL_TIM_ConfigClockSource+0x228>)
 801615a:	4293      	cmp	r3, r2
 801615c:	f200 80be 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 8016160:	4a69      	ldr	r2, [pc, #420]	@ (8016308 <HAL_TIM_ConfigClockSource+0x22c>)
 8016162:	4293      	cmp	r3, r2
 8016164:	f000 80b1 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016168:	4a67      	ldr	r2, [pc, #412]	@ (8016308 <HAL_TIM_ConfigClockSource+0x22c>)
 801616a:	4293      	cmp	r3, r2
 801616c:	f200 80b6 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 8016170:	4a66      	ldr	r2, [pc, #408]	@ (801630c <HAL_TIM_ConfigClockSource+0x230>)
 8016172:	4293      	cmp	r3, r2
 8016174:	f000 80a9 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016178:	4a64      	ldr	r2, [pc, #400]	@ (801630c <HAL_TIM_ConfigClockSource+0x230>)
 801617a:	4293      	cmp	r3, r2
 801617c:	f200 80ae 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 8016180:	4a63      	ldr	r2, [pc, #396]	@ (8016310 <HAL_TIM_ConfigClockSource+0x234>)
 8016182:	4293      	cmp	r3, r2
 8016184:	f000 80a1 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016188:	4a61      	ldr	r2, [pc, #388]	@ (8016310 <HAL_TIM_ConfigClockSource+0x234>)
 801618a:	4293      	cmp	r3, r2
 801618c:	f200 80a6 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 8016190:	4a60      	ldr	r2, [pc, #384]	@ (8016314 <HAL_TIM_ConfigClockSource+0x238>)
 8016192:	4293      	cmp	r3, r2
 8016194:	f000 8099 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016198:	4a5e      	ldr	r2, [pc, #376]	@ (8016314 <HAL_TIM_ConfigClockSource+0x238>)
 801619a:	4293      	cmp	r3, r2
 801619c:	f200 809e 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80161a4:	f000 8091 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 80161a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80161ac:	f200 8096 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80161b4:	f000 8089 	beq.w	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 80161b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80161bc:	f200 808e 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80161c4:	d03e      	beq.n	8016244 <HAL_TIM_ConfigClockSource+0x168>
 80161c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80161ca:	f200 8087 	bhi.w	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80161d2:	f000 8086 	beq.w	80162e2 <HAL_TIM_ConfigClockSource+0x206>
 80161d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80161da:	d87f      	bhi.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161dc:	2b70      	cmp	r3, #112	@ 0x70
 80161de:	d01a      	beq.n	8016216 <HAL_TIM_ConfigClockSource+0x13a>
 80161e0:	2b70      	cmp	r3, #112	@ 0x70
 80161e2:	d87b      	bhi.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161e4:	2b60      	cmp	r3, #96	@ 0x60
 80161e6:	d050      	beq.n	801628a <HAL_TIM_ConfigClockSource+0x1ae>
 80161e8:	2b60      	cmp	r3, #96	@ 0x60
 80161ea:	d877      	bhi.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161ec:	2b50      	cmp	r3, #80	@ 0x50
 80161ee:	d03c      	beq.n	801626a <HAL_TIM_ConfigClockSource+0x18e>
 80161f0:	2b50      	cmp	r3, #80	@ 0x50
 80161f2:	d873      	bhi.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161f4:	2b40      	cmp	r3, #64	@ 0x40
 80161f6:	d058      	beq.n	80162aa <HAL_TIM_ConfigClockSource+0x1ce>
 80161f8:	2b40      	cmp	r3, #64	@ 0x40
 80161fa:	d86f      	bhi.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
 80161fc:	2b30      	cmp	r3, #48	@ 0x30
 80161fe:	d064      	beq.n	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016200:	2b30      	cmp	r3, #48	@ 0x30
 8016202:	d86b      	bhi.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
 8016204:	2b20      	cmp	r3, #32
 8016206:	d060      	beq.n	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016208:	2b20      	cmp	r3, #32
 801620a:	d867      	bhi.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
 801620c:	2b00      	cmp	r3, #0
 801620e:	d05c      	beq.n	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016210:	2b10      	cmp	r3, #16
 8016212:	d05a      	beq.n	80162ca <HAL_TIM_ConfigClockSource+0x1ee>
 8016214:	e062      	b.n	80162dc <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016226:	f000 fe1b 	bl	8016e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	689b      	ldr	r3, [r3, #8]
 8016230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	68ba      	ldr	r2, [r7, #8]
 8016240:	609a      	str	r2, [r3, #8]
      break;
 8016242:	e04f      	b.n	80162e4 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016254:	f000 fe04 	bl	8016e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	689a      	ldr	r2, [r3, #8]
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016266:	609a      	str	r2, [r3, #8]
      break;
 8016268:	e03c      	b.n	80162e4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016276:	461a      	mov	r2, r3
 8016278:	f000 fd76 	bl	8016d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2150      	movs	r1, #80	@ 0x50
 8016282:	4618      	mov	r0, r3
 8016284:	f000 fdcf 	bl	8016e26 <TIM_ITRx_SetConfig>
      break;
 8016288:	e02c      	b.n	80162e4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016296:	461a      	mov	r2, r3
 8016298:	f000 fd95 	bl	8016dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2160      	movs	r1, #96	@ 0x60
 80162a2:	4618      	mov	r0, r3
 80162a4:	f000 fdbf 	bl	8016e26 <TIM_ITRx_SetConfig>
      break;
 80162a8:	e01c      	b.n	80162e4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80162b6:	461a      	mov	r2, r3
 80162b8:	f000 fd56 	bl	8016d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2140      	movs	r1, #64	@ 0x40
 80162c2:	4618      	mov	r0, r3
 80162c4:	f000 fdaf 	bl	8016e26 <TIM_ITRx_SetConfig>
      break;
 80162c8:	e00c      	b.n	80162e4 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	4619      	mov	r1, r3
 80162d4:	4610      	mov	r0, r2
 80162d6:	f000 fda6 	bl	8016e26 <TIM_ITRx_SetConfig>
      break;
 80162da:	e003      	b.n	80162e4 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80162dc:	2301      	movs	r3, #1
 80162de:	73fb      	strb	r3, [r7, #15]
      break;
 80162e0:	e000      	b.n	80162e4 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80162e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2201      	movs	r2, #1
 80162e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2200      	movs	r2, #0
 80162f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop
 8016300:	00100070 	.word	0x00100070
 8016304:	00100060 	.word	0x00100060
 8016308:	00100050 	.word	0x00100050
 801630c:	00100040 	.word	0x00100040
 8016310:	00100030 	.word	0x00100030
 8016314:	00100020 	.word	0x00100020

08016318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016318:	b480      	push	{r7}
 801631a:	b083      	sub	sp, #12
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016320:	bf00      	nop
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr

0801632c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801632c:	b480      	push	{r7}
 801632e:	b083      	sub	sp, #12
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016334:	bf00      	nop
 8016336:	370c      	adds	r7, #12
 8016338:	46bd      	mov	sp, r7
 801633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633e:	4770      	bx	lr

08016340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016340:	b480      	push	{r7}
 8016342:	b083      	sub	sp, #12
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016348:	bf00      	nop
 801634a:	370c      	adds	r7, #12
 801634c:	46bd      	mov	sp, r7
 801634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016352:	4770      	bx	lr

08016354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016354:	b480      	push	{r7}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801635c:	bf00      	nop
 801635e:	370c      	adds	r7, #12
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr

08016368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016368:	b480      	push	{r7}
 801636a:	b085      	sub	sp, #20
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	4a7a      	ldr	r2, [pc, #488]	@ (8016564 <TIM_Base_SetConfig+0x1fc>)
 801637c:	4293      	cmp	r3, r2
 801637e:	d02b      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	4a79      	ldr	r2, [pc, #484]	@ (8016568 <TIM_Base_SetConfig+0x200>)
 8016384:	4293      	cmp	r3, r2
 8016386:	d027      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801638e:	d023      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016396:	d01f      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	4a74      	ldr	r2, [pc, #464]	@ (801656c <TIM_Base_SetConfig+0x204>)
 801639c:	4293      	cmp	r3, r2
 801639e:	d01b      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	4a73      	ldr	r2, [pc, #460]	@ (8016570 <TIM_Base_SetConfig+0x208>)
 80163a4:	4293      	cmp	r3, r2
 80163a6:	d017      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	4a72      	ldr	r2, [pc, #456]	@ (8016574 <TIM_Base_SetConfig+0x20c>)
 80163ac:	4293      	cmp	r3, r2
 80163ae:	d013      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	4a71      	ldr	r2, [pc, #452]	@ (8016578 <TIM_Base_SetConfig+0x210>)
 80163b4:	4293      	cmp	r3, r2
 80163b6:	d00f      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	4a70      	ldr	r2, [pc, #448]	@ (801657c <TIM_Base_SetConfig+0x214>)
 80163bc:	4293      	cmp	r3, r2
 80163be:	d00b      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	4a6f      	ldr	r2, [pc, #444]	@ (8016580 <TIM_Base_SetConfig+0x218>)
 80163c4:	4293      	cmp	r3, r2
 80163c6:	d007      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	4a6e      	ldr	r2, [pc, #440]	@ (8016584 <TIM_Base_SetConfig+0x21c>)
 80163cc:	4293      	cmp	r3, r2
 80163ce:	d003      	beq.n	80163d8 <TIM_Base_SetConfig+0x70>
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	4a6d      	ldr	r2, [pc, #436]	@ (8016588 <TIM_Base_SetConfig+0x220>)
 80163d4:	4293      	cmp	r3, r2
 80163d6:	d108      	bne.n	80163ea <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80163de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	68fa      	ldr	r2, [r7, #12]
 80163e6:	4313      	orrs	r3, r2
 80163e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	4a5d      	ldr	r2, [pc, #372]	@ (8016564 <TIM_Base_SetConfig+0x1fc>)
 80163ee:	4293      	cmp	r3, r2
 80163f0:	d05b      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4a5c      	ldr	r2, [pc, #368]	@ (8016568 <TIM_Base_SetConfig+0x200>)
 80163f6:	4293      	cmp	r3, r2
 80163f8:	d057      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016400:	d053      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016408:	d04f      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	4a57      	ldr	r2, [pc, #348]	@ (801656c <TIM_Base_SetConfig+0x204>)
 801640e:	4293      	cmp	r3, r2
 8016410:	d04b      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	4a56      	ldr	r2, [pc, #344]	@ (8016570 <TIM_Base_SetConfig+0x208>)
 8016416:	4293      	cmp	r3, r2
 8016418:	d047      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	4a55      	ldr	r2, [pc, #340]	@ (8016574 <TIM_Base_SetConfig+0x20c>)
 801641e:	4293      	cmp	r3, r2
 8016420:	d043      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	4a54      	ldr	r2, [pc, #336]	@ (8016578 <TIM_Base_SetConfig+0x210>)
 8016426:	4293      	cmp	r3, r2
 8016428:	d03f      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	4a53      	ldr	r2, [pc, #332]	@ (801657c <TIM_Base_SetConfig+0x214>)
 801642e:	4293      	cmp	r3, r2
 8016430:	d03b      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	4a52      	ldr	r2, [pc, #328]	@ (8016580 <TIM_Base_SetConfig+0x218>)
 8016436:	4293      	cmp	r3, r2
 8016438:	d037      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	4a51      	ldr	r2, [pc, #324]	@ (8016584 <TIM_Base_SetConfig+0x21c>)
 801643e:	4293      	cmp	r3, r2
 8016440:	d033      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	4a50      	ldr	r2, [pc, #320]	@ (8016588 <TIM_Base_SetConfig+0x220>)
 8016446:	4293      	cmp	r3, r2
 8016448:	d02f      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	4a4f      	ldr	r2, [pc, #316]	@ (801658c <TIM_Base_SetConfig+0x224>)
 801644e:	4293      	cmp	r3, r2
 8016450:	d02b      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	4a4e      	ldr	r2, [pc, #312]	@ (8016590 <TIM_Base_SetConfig+0x228>)
 8016456:	4293      	cmp	r3, r2
 8016458:	d027      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	4a4d      	ldr	r2, [pc, #308]	@ (8016594 <TIM_Base_SetConfig+0x22c>)
 801645e:	4293      	cmp	r3, r2
 8016460:	d023      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	4a4c      	ldr	r2, [pc, #304]	@ (8016598 <TIM_Base_SetConfig+0x230>)
 8016466:	4293      	cmp	r3, r2
 8016468:	d01f      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	4a4b      	ldr	r2, [pc, #300]	@ (801659c <TIM_Base_SetConfig+0x234>)
 801646e:	4293      	cmp	r3, r2
 8016470:	d01b      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	4a4a      	ldr	r2, [pc, #296]	@ (80165a0 <TIM_Base_SetConfig+0x238>)
 8016476:	4293      	cmp	r3, r2
 8016478:	d017      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	4a49      	ldr	r2, [pc, #292]	@ (80165a4 <TIM_Base_SetConfig+0x23c>)
 801647e:	4293      	cmp	r3, r2
 8016480:	d013      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	4a48      	ldr	r2, [pc, #288]	@ (80165a8 <TIM_Base_SetConfig+0x240>)
 8016486:	4293      	cmp	r3, r2
 8016488:	d00f      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	4a47      	ldr	r2, [pc, #284]	@ (80165ac <TIM_Base_SetConfig+0x244>)
 801648e:	4293      	cmp	r3, r2
 8016490:	d00b      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	4a46      	ldr	r2, [pc, #280]	@ (80165b0 <TIM_Base_SetConfig+0x248>)
 8016496:	4293      	cmp	r3, r2
 8016498:	d007      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	4a45      	ldr	r2, [pc, #276]	@ (80165b4 <TIM_Base_SetConfig+0x24c>)
 801649e:	4293      	cmp	r3, r2
 80164a0:	d003      	beq.n	80164aa <TIM_Base_SetConfig+0x142>
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	4a44      	ldr	r2, [pc, #272]	@ (80165b8 <TIM_Base_SetConfig+0x250>)
 80164a6:	4293      	cmp	r3, r2
 80164a8:	d108      	bne.n	80164bc <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80164b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	68fa      	ldr	r2, [r7, #12]
 80164b8:	4313      	orrs	r3, r2
 80164ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80164c2:	683b      	ldr	r3, [r7, #0]
 80164c4:	695b      	ldr	r3, [r3, #20]
 80164c6:	4313      	orrs	r3, r2
 80164c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	68fa      	ldr	r2, [r7, #12]
 80164ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	689a      	ldr	r2, [r3, #8]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	4a20      	ldr	r2, [pc, #128]	@ (8016564 <TIM_Base_SetConfig+0x1fc>)
 80164e4:	4293      	cmp	r3, r2
 80164e6:	d023      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	4a1f      	ldr	r2, [pc, #124]	@ (8016568 <TIM_Base_SetConfig+0x200>)
 80164ec:	4293      	cmp	r3, r2
 80164ee:	d01f      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	4a24      	ldr	r2, [pc, #144]	@ (8016584 <TIM_Base_SetConfig+0x21c>)
 80164f4:	4293      	cmp	r3, r2
 80164f6:	d01b      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	4a23      	ldr	r2, [pc, #140]	@ (8016588 <TIM_Base_SetConfig+0x220>)
 80164fc:	4293      	cmp	r3, r2
 80164fe:	d017      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	4a28      	ldr	r2, [pc, #160]	@ (80165a4 <TIM_Base_SetConfig+0x23c>)
 8016504:	4293      	cmp	r3, r2
 8016506:	d013      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	4a27      	ldr	r2, [pc, #156]	@ (80165a8 <TIM_Base_SetConfig+0x240>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d00f      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	4a26      	ldr	r2, [pc, #152]	@ (80165ac <TIM_Base_SetConfig+0x244>)
 8016514:	4293      	cmp	r3, r2
 8016516:	d00b      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	4a25      	ldr	r2, [pc, #148]	@ (80165b0 <TIM_Base_SetConfig+0x248>)
 801651c:	4293      	cmp	r3, r2
 801651e:	d007      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	4a24      	ldr	r2, [pc, #144]	@ (80165b4 <TIM_Base_SetConfig+0x24c>)
 8016524:	4293      	cmp	r3, r2
 8016526:	d003      	beq.n	8016530 <TIM_Base_SetConfig+0x1c8>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	4a23      	ldr	r2, [pc, #140]	@ (80165b8 <TIM_Base_SetConfig+0x250>)
 801652c:	4293      	cmp	r3, r2
 801652e:	d103      	bne.n	8016538 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	691a      	ldr	r2, [r3, #16]
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2201      	movs	r2, #1
 801653c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	691b      	ldr	r3, [r3, #16]
 8016542:	f003 0301 	and.w	r3, r3, #1
 8016546:	2b01      	cmp	r3, #1
 8016548:	d105      	bne.n	8016556 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	691b      	ldr	r3, [r3, #16]
 801654e:	f023 0201 	bic.w	r2, r3, #1
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	611a      	str	r2, [r3, #16]
  }
}
 8016556:	bf00      	nop
 8016558:	3714      	adds	r7, #20
 801655a:	46bd      	mov	sp, r7
 801655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016560:	4770      	bx	lr
 8016562:	bf00      	nop
 8016564:	40012c00 	.word	0x40012c00
 8016568:	50012c00 	.word	0x50012c00
 801656c:	40000400 	.word	0x40000400
 8016570:	50000400 	.word	0x50000400
 8016574:	40000800 	.word	0x40000800
 8016578:	50000800 	.word	0x50000800
 801657c:	40000c00 	.word	0x40000c00
 8016580:	50000c00 	.word	0x50000c00
 8016584:	40013400 	.word	0x40013400
 8016588:	50013400 	.word	0x50013400
 801658c:	40001800 	.word	0x40001800
 8016590:	50001800 	.word	0x50001800
 8016594:	40001c00 	.word	0x40001c00
 8016598:	50001c00 	.word	0x50001c00
 801659c:	40002000 	.word	0x40002000
 80165a0:	50002000 	.word	0x50002000
 80165a4:	40014000 	.word	0x40014000
 80165a8:	50014000 	.word	0x50014000
 80165ac:	40014400 	.word	0x40014400
 80165b0:	50014400 	.word	0x50014400
 80165b4:	40014800 	.word	0x40014800
 80165b8:	50014800 	.word	0x50014800

080165bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80165bc:	b480      	push	{r7}
 80165be:	b087      	sub	sp, #28
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
 80165c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6a1b      	ldr	r3, [r3, #32]
 80165ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6a1b      	ldr	r3, [r3, #32]
 80165d0:	f023 0201 	bic.w	r2, r3, #1
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	699b      	ldr	r3, [r3, #24]
 80165e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80165ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80165ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	f023 0303 	bic.w	r3, r3, #3
 80165f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	68fa      	ldr	r2, [r7, #12]
 80165fe:	4313      	orrs	r3, r2
 8016600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	f023 0302 	bic.w	r3, r3, #2
 8016608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801660a:	683b      	ldr	r3, [r7, #0]
 801660c:	689b      	ldr	r3, [r3, #8]
 801660e:	697a      	ldr	r2, [r7, #20]
 8016610:	4313      	orrs	r3, r2
 8016612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	4a40      	ldr	r2, [pc, #256]	@ (8016718 <TIM_OC1_SetConfig+0x15c>)
 8016618:	4293      	cmp	r3, r2
 801661a:	d023      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	4a3f      	ldr	r2, [pc, #252]	@ (801671c <TIM_OC1_SetConfig+0x160>)
 8016620:	4293      	cmp	r3, r2
 8016622:	d01f      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	4a3e      	ldr	r2, [pc, #248]	@ (8016720 <TIM_OC1_SetConfig+0x164>)
 8016628:	4293      	cmp	r3, r2
 801662a:	d01b      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	4a3d      	ldr	r2, [pc, #244]	@ (8016724 <TIM_OC1_SetConfig+0x168>)
 8016630:	4293      	cmp	r3, r2
 8016632:	d017      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	4a3c      	ldr	r2, [pc, #240]	@ (8016728 <TIM_OC1_SetConfig+0x16c>)
 8016638:	4293      	cmp	r3, r2
 801663a:	d013      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	4a3b      	ldr	r2, [pc, #236]	@ (801672c <TIM_OC1_SetConfig+0x170>)
 8016640:	4293      	cmp	r3, r2
 8016642:	d00f      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	4a3a      	ldr	r2, [pc, #232]	@ (8016730 <TIM_OC1_SetConfig+0x174>)
 8016648:	4293      	cmp	r3, r2
 801664a:	d00b      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	4a39      	ldr	r2, [pc, #228]	@ (8016734 <TIM_OC1_SetConfig+0x178>)
 8016650:	4293      	cmp	r3, r2
 8016652:	d007      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	4a38      	ldr	r2, [pc, #224]	@ (8016738 <TIM_OC1_SetConfig+0x17c>)
 8016658:	4293      	cmp	r3, r2
 801665a:	d003      	beq.n	8016664 <TIM_OC1_SetConfig+0xa8>
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	4a37      	ldr	r2, [pc, #220]	@ (801673c <TIM_OC1_SetConfig+0x180>)
 8016660:	4293      	cmp	r3, r2
 8016662:	d10c      	bne.n	801667e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	f023 0308 	bic.w	r3, r3, #8
 801666a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	68db      	ldr	r3, [r3, #12]
 8016670:	697a      	ldr	r2, [r7, #20]
 8016672:	4313      	orrs	r3, r2
 8016674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	f023 0304 	bic.w	r3, r3, #4
 801667c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	4a25      	ldr	r2, [pc, #148]	@ (8016718 <TIM_OC1_SetConfig+0x15c>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d023      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	4a24      	ldr	r2, [pc, #144]	@ (801671c <TIM_OC1_SetConfig+0x160>)
 801668a:	4293      	cmp	r3, r2
 801668c:	d01f      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	4a23      	ldr	r2, [pc, #140]	@ (8016720 <TIM_OC1_SetConfig+0x164>)
 8016692:	4293      	cmp	r3, r2
 8016694:	d01b      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	4a22      	ldr	r2, [pc, #136]	@ (8016724 <TIM_OC1_SetConfig+0x168>)
 801669a:	4293      	cmp	r3, r2
 801669c:	d017      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	4a21      	ldr	r2, [pc, #132]	@ (8016728 <TIM_OC1_SetConfig+0x16c>)
 80166a2:	4293      	cmp	r3, r2
 80166a4:	d013      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	4a20      	ldr	r2, [pc, #128]	@ (801672c <TIM_OC1_SetConfig+0x170>)
 80166aa:	4293      	cmp	r3, r2
 80166ac:	d00f      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	4a1f      	ldr	r2, [pc, #124]	@ (8016730 <TIM_OC1_SetConfig+0x174>)
 80166b2:	4293      	cmp	r3, r2
 80166b4:	d00b      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	4a1e      	ldr	r2, [pc, #120]	@ (8016734 <TIM_OC1_SetConfig+0x178>)
 80166ba:	4293      	cmp	r3, r2
 80166bc:	d007      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	4a1d      	ldr	r2, [pc, #116]	@ (8016738 <TIM_OC1_SetConfig+0x17c>)
 80166c2:	4293      	cmp	r3, r2
 80166c4:	d003      	beq.n	80166ce <TIM_OC1_SetConfig+0x112>
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	4a1c      	ldr	r2, [pc, #112]	@ (801673c <TIM_OC1_SetConfig+0x180>)
 80166ca:	4293      	cmp	r3, r2
 80166cc:	d111      	bne.n	80166f2 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80166ce:	693b      	ldr	r3, [r7, #16]
 80166d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80166d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80166d6:	693b      	ldr	r3, [r7, #16]
 80166d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80166dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	695b      	ldr	r3, [r3, #20]
 80166e2:	693a      	ldr	r2, [r7, #16]
 80166e4:	4313      	orrs	r3, r2
 80166e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	699b      	ldr	r3, [r3, #24]
 80166ec:	693a      	ldr	r2, [r7, #16]
 80166ee:	4313      	orrs	r3, r2
 80166f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	693a      	ldr	r2, [r7, #16]
 80166f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	68fa      	ldr	r2, [r7, #12]
 80166fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	685a      	ldr	r2, [r3, #4]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	697a      	ldr	r2, [r7, #20]
 801670a:	621a      	str	r2, [r3, #32]
}
 801670c:	bf00      	nop
 801670e:	371c      	adds	r7, #28
 8016710:	46bd      	mov	sp, r7
 8016712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016716:	4770      	bx	lr
 8016718:	40012c00 	.word	0x40012c00
 801671c:	50012c00 	.word	0x50012c00
 8016720:	40013400 	.word	0x40013400
 8016724:	50013400 	.word	0x50013400
 8016728:	40014000 	.word	0x40014000
 801672c:	50014000 	.word	0x50014000
 8016730:	40014400 	.word	0x40014400
 8016734:	50014400 	.word	0x50014400
 8016738:	40014800 	.word	0x40014800
 801673c:	50014800 	.word	0x50014800

08016740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016740:	b480      	push	{r7}
 8016742:	b087      	sub	sp, #28
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6a1b      	ldr	r3, [r3, #32]
 801674e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	6a1b      	ldr	r3, [r3, #32]
 8016754:	f023 0210 	bic.w	r2, r3, #16
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	685b      	ldr	r3, [r3, #4]
 8016760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	699b      	ldr	r3, [r3, #24]
 8016766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801676e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8016772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801677a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	021b      	lsls	r3, r3, #8
 8016782:	68fa      	ldr	r2, [r7, #12]
 8016784:	4313      	orrs	r3, r2
 8016786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	f023 0320 	bic.w	r3, r3, #32
 801678e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	011b      	lsls	r3, r3, #4
 8016796:	697a      	ldr	r2, [r7, #20]
 8016798:	4313      	orrs	r3, r2
 801679a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	4a36      	ldr	r2, [pc, #216]	@ (8016878 <TIM_OC2_SetConfig+0x138>)
 80167a0:	4293      	cmp	r3, r2
 80167a2:	d00b      	beq.n	80167bc <TIM_OC2_SetConfig+0x7c>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	4a35      	ldr	r2, [pc, #212]	@ (801687c <TIM_OC2_SetConfig+0x13c>)
 80167a8:	4293      	cmp	r3, r2
 80167aa:	d007      	beq.n	80167bc <TIM_OC2_SetConfig+0x7c>
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	4a34      	ldr	r2, [pc, #208]	@ (8016880 <TIM_OC2_SetConfig+0x140>)
 80167b0:	4293      	cmp	r3, r2
 80167b2:	d003      	beq.n	80167bc <TIM_OC2_SetConfig+0x7c>
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	4a33      	ldr	r2, [pc, #204]	@ (8016884 <TIM_OC2_SetConfig+0x144>)
 80167b8:	4293      	cmp	r3, r2
 80167ba:	d10d      	bne.n	80167d8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80167c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	68db      	ldr	r3, [r3, #12]
 80167c8:	011b      	lsls	r3, r3, #4
 80167ca:	697a      	ldr	r2, [r7, #20]
 80167cc:	4313      	orrs	r3, r2
 80167ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80167d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	4a27      	ldr	r2, [pc, #156]	@ (8016878 <TIM_OC2_SetConfig+0x138>)
 80167dc:	4293      	cmp	r3, r2
 80167de:	d023      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	4a26      	ldr	r2, [pc, #152]	@ (801687c <TIM_OC2_SetConfig+0x13c>)
 80167e4:	4293      	cmp	r3, r2
 80167e6:	d01f      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	4a25      	ldr	r2, [pc, #148]	@ (8016880 <TIM_OC2_SetConfig+0x140>)
 80167ec:	4293      	cmp	r3, r2
 80167ee:	d01b      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	4a24      	ldr	r2, [pc, #144]	@ (8016884 <TIM_OC2_SetConfig+0x144>)
 80167f4:	4293      	cmp	r3, r2
 80167f6:	d017      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	4a23      	ldr	r2, [pc, #140]	@ (8016888 <TIM_OC2_SetConfig+0x148>)
 80167fc:	4293      	cmp	r3, r2
 80167fe:	d013      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	4a22      	ldr	r2, [pc, #136]	@ (801688c <TIM_OC2_SetConfig+0x14c>)
 8016804:	4293      	cmp	r3, r2
 8016806:	d00f      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	4a21      	ldr	r2, [pc, #132]	@ (8016890 <TIM_OC2_SetConfig+0x150>)
 801680c:	4293      	cmp	r3, r2
 801680e:	d00b      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	4a20      	ldr	r2, [pc, #128]	@ (8016894 <TIM_OC2_SetConfig+0x154>)
 8016814:	4293      	cmp	r3, r2
 8016816:	d007      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	4a1f      	ldr	r2, [pc, #124]	@ (8016898 <TIM_OC2_SetConfig+0x158>)
 801681c:	4293      	cmp	r3, r2
 801681e:	d003      	beq.n	8016828 <TIM_OC2_SetConfig+0xe8>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	4a1e      	ldr	r2, [pc, #120]	@ (801689c <TIM_OC2_SetConfig+0x15c>)
 8016824:	4293      	cmp	r3, r2
 8016826:	d113      	bne.n	8016850 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801682e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	695b      	ldr	r3, [r3, #20]
 801683c:	009b      	lsls	r3, r3, #2
 801683e:	693a      	ldr	r2, [r7, #16]
 8016840:	4313      	orrs	r3, r2
 8016842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	699b      	ldr	r3, [r3, #24]
 8016848:	009b      	lsls	r3, r3, #2
 801684a:	693a      	ldr	r2, [r7, #16]
 801684c:	4313      	orrs	r3, r2
 801684e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	693a      	ldr	r2, [r7, #16]
 8016854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	68fa      	ldr	r2, [r7, #12]
 801685a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	685a      	ldr	r2, [r3, #4]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	697a      	ldr	r2, [r7, #20]
 8016868:	621a      	str	r2, [r3, #32]
}
 801686a:	bf00      	nop
 801686c:	371c      	adds	r7, #28
 801686e:	46bd      	mov	sp, r7
 8016870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016874:	4770      	bx	lr
 8016876:	bf00      	nop
 8016878:	40012c00 	.word	0x40012c00
 801687c:	50012c00 	.word	0x50012c00
 8016880:	40013400 	.word	0x40013400
 8016884:	50013400 	.word	0x50013400
 8016888:	40014000 	.word	0x40014000
 801688c:	50014000 	.word	0x50014000
 8016890:	40014400 	.word	0x40014400
 8016894:	50014400 	.word	0x50014400
 8016898:	40014800 	.word	0x40014800
 801689c:	50014800 	.word	0x50014800

080168a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80168a0:	b480      	push	{r7}
 80168a2:	b087      	sub	sp, #28
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6a1b      	ldr	r3, [r3, #32]
 80168ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6a1b      	ldr	r3, [r3, #32]
 80168b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	69db      	ldr	r3, [r3, #28]
 80168c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80168ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80168d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f023 0303 	bic.w	r3, r3, #3
 80168da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	4313      	orrs	r3, r2
 80168e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80168ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	689b      	ldr	r3, [r3, #8]
 80168f2:	021b      	lsls	r3, r3, #8
 80168f4:	697a      	ldr	r2, [r7, #20]
 80168f6:	4313      	orrs	r3, r2
 80168f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	4a35      	ldr	r2, [pc, #212]	@ (80169d4 <TIM_OC3_SetConfig+0x134>)
 80168fe:	4293      	cmp	r3, r2
 8016900:	d00b      	beq.n	801691a <TIM_OC3_SetConfig+0x7a>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	4a34      	ldr	r2, [pc, #208]	@ (80169d8 <TIM_OC3_SetConfig+0x138>)
 8016906:	4293      	cmp	r3, r2
 8016908:	d007      	beq.n	801691a <TIM_OC3_SetConfig+0x7a>
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	4a33      	ldr	r2, [pc, #204]	@ (80169dc <TIM_OC3_SetConfig+0x13c>)
 801690e:	4293      	cmp	r3, r2
 8016910:	d003      	beq.n	801691a <TIM_OC3_SetConfig+0x7a>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	4a32      	ldr	r2, [pc, #200]	@ (80169e0 <TIM_OC3_SetConfig+0x140>)
 8016916:	4293      	cmp	r3, r2
 8016918:	d10d      	bne.n	8016936 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801691a:	697b      	ldr	r3, [r7, #20]
 801691c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	68db      	ldr	r3, [r3, #12]
 8016926:	021b      	lsls	r3, r3, #8
 8016928:	697a      	ldr	r2, [r7, #20]
 801692a:	4313      	orrs	r3, r2
 801692c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	4a26      	ldr	r2, [pc, #152]	@ (80169d4 <TIM_OC3_SetConfig+0x134>)
 801693a:	4293      	cmp	r3, r2
 801693c:	d023      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	4a25      	ldr	r2, [pc, #148]	@ (80169d8 <TIM_OC3_SetConfig+0x138>)
 8016942:	4293      	cmp	r3, r2
 8016944:	d01f      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	4a24      	ldr	r2, [pc, #144]	@ (80169dc <TIM_OC3_SetConfig+0x13c>)
 801694a:	4293      	cmp	r3, r2
 801694c:	d01b      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	4a23      	ldr	r2, [pc, #140]	@ (80169e0 <TIM_OC3_SetConfig+0x140>)
 8016952:	4293      	cmp	r3, r2
 8016954:	d017      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	4a22      	ldr	r2, [pc, #136]	@ (80169e4 <TIM_OC3_SetConfig+0x144>)
 801695a:	4293      	cmp	r3, r2
 801695c:	d013      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4a21      	ldr	r2, [pc, #132]	@ (80169e8 <TIM_OC3_SetConfig+0x148>)
 8016962:	4293      	cmp	r3, r2
 8016964:	d00f      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	4a20      	ldr	r2, [pc, #128]	@ (80169ec <TIM_OC3_SetConfig+0x14c>)
 801696a:	4293      	cmp	r3, r2
 801696c:	d00b      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	4a1f      	ldr	r2, [pc, #124]	@ (80169f0 <TIM_OC3_SetConfig+0x150>)
 8016972:	4293      	cmp	r3, r2
 8016974:	d007      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	4a1e      	ldr	r2, [pc, #120]	@ (80169f4 <TIM_OC3_SetConfig+0x154>)
 801697a:	4293      	cmp	r3, r2
 801697c:	d003      	beq.n	8016986 <TIM_OC3_SetConfig+0xe6>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	4a1d      	ldr	r2, [pc, #116]	@ (80169f8 <TIM_OC3_SetConfig+0x158>)
 8016982:	4293      	cmp	r3, r2
 8016984:	d113      	bne.n	80169ae <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801698c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	695b      	ldr	r3, [r3, #20]
 801699a:	011b      	lsls	r3, r3, #4
 801699c:	693a      	ldr	r2, [r7, #16]
 801699e:	4313      	orrs	r3, r2
 80169a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	699b      	ldr	r3, [r3, #24]
 80169a6:	011b      	lsls	r3, r3, #4
 80169a8:	693a      	ldr	r2, [r7, #16]
 80169aa:	4313      	orrs	r3, r2
 80169ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	693a      	ldr	r2, [r7, #16]
 80169b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	68fa      	ldr	r2, [r7, #12]
 80169b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80169ba:	683b      	ldr	r3, [r7, #0]
 80169bc:	685a      	ldr	r2, [r3, #4]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	697a      	ldr	r2, [r7, #20]
 80169c6:	621a      	str	r2, [r3, #32]
}
 80169c8:	bf00      	nop
 80169ca:	371c      	adds	r7, #28
 80169cc:	46bd      	mov	sp, r7
 80169ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d2:	4770      	bx	lr
 80169d4:	40012c00 	.word	0x40012c00
 80169d8:	50012c00 	.word	0x50012c00
 80169dc:	40013400 	.word	0x40013400
 80169e0:	50013400 	.word	0x50013400
 80169e4:	40014000 	.word	0x40014000
 80169e8:	50014000 	.word	0x50014000
 80169ec:	40014400 	.word	0x40014400
 80169f0:	50014400 	.word	0x50014400
 80169f4:	40014800 	.word	0x40014800
 80169f8:	50014800 	.word	0x50014800

080169fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80169fc:	b480      	push	{r7}
 80169fe:	b087      	sub	sp, #28
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	6a1b      	ldr	r3, [r3, #32]
 8016a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	6a1b      	ldr	r3, [r3, #32]
 8016a10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	685b      	ldr	r3, [r3, #4]
 8016a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	69db      	ldr	r3, [r3, #28]
 8016a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8016a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8016a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	021b      	lsls	r3, r3, #8
 8016a3e:	68fa      	ldr	r2, [r7, #12]
 8016a40:	4313      	orrs	r3, r2
 8016a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016a44:	697b      	ldr	r3, [r7, #20]
 8016a46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	689b      	ldr	r3, [r3, #8]
 8016a50:	031b      	lsls	r3, r3, #12
 8016a52:	697a      	ldr	r2, [r7, #20]
 8016a54:	4313      	orrs	r3, r2
 8016a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	4a36      	ldr	r2, [pc, #216]	@ (8016b34 <TIM_OC4_SetConfig+0x138>)
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	d00b      	beq.n	8016a78 <TIM_OC4_SetConfig+0x7c>
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	4a35      	ldr	r2, [pc, #212]	@ (8016b38 <TIM_OC4_SetConfig+0x13c>)
 8016a64:	4293      	cmp	r3, r2
 8016a66:	d007      	beq.n	8016a78 <TIM_OC4_SetConfig+0x7c>
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	4a34      	ldr	r2, [pc, #208]	@ (8016b3c <TIM_OC4_SetConfig+0x140>)
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	d003      	beq.n	8016a78 <TIM_OC4_SetConfig+0x7c>
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	4a33      	ldr	r2, [pc, #204]	@ (8016b40 <TIM_OC4_SetConfig+0x144>)
 8016a74:	4293      	cmp	r3, r2
 8016a76:	d10d      	bne.n	8016a94 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	68db      	ldr	r3, [r3, #12]
 8016a84:	031b      	lsls	r3, r3, #12
 8016a86:	697a      	ldr	r2, [r7, #20]
 8016a88:	4313      	orrs	r3, r2
 8016a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016a92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	4a27      	ldr	r2, [pc, #156]	@ (8016b34 <TIM_OC4_SetConfig+0x138>)
 8016a98:	4293      	cmp	r3, r2
 8016a9a:	d023      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	4a26      	ldr	r2, [pc, #152]	@ (8016b38 <TIM_OC4_SetConfig+0x13c>)
 8016aa0:	4293      	cmp	r3, r2
 8016aa2:	d01f      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	4a25      	ldr	r2, [pc, #148]	@ (8016b3c <TIM_OC4_SetConfig+0x140>)
 8016aa8:	4293      	cmp	r3, r2
 8016aaa:	d01b      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	4a24      	ldr	r2, [pc, #144]	@ (8016b40 <TIM_OC4_SetConfig+0x144>)
 8016ab0:	4293      	cmp	r3, r2
 8016ab2:	d017      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	4a23      	ldr	r2, [pc, #140]	@ (8016b44 <TIM_OC4_SetConfig+0x148>)
 8016ab8:	4293      	cmp	r3, r2
 8016aba:	d013      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	4a22      	ldr	r2, [pc, #136]	@ (8016b48 <TIM_OC4_SetConfig+0x14c>)
 8016ac0:	4293      	cmp	r3, r2
 8016ac2:	d00f      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	4a21      	ldr	r2, [pc, #132]	@ (8016b4c <TIM_OC4_SetConfig+0x150>)
 8016ac8:	4293      	cmp	r3, r2
 8016aca:	d00b      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	4a20      	ldr	r2, [pc, #128]	@ (8016b50 <TIM_OC4_SetConfig+0x154>)
 8016ad0:	4293      	cmp	r3, r2
 8016ad2:	d007      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8016b54 <TIM_OC4_SetConfig+0x158>)
 8016ad8:	4293      	cmp	r3, r2
 8016ada:	d003      	beq.n	8016ae4 <TIM_OC4_SetConfig+0xe8>
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	4a1e      	ldr	r2, [pc, #120]	@ (8016b58 <TIM_OC4_SetConfig+0x15c>)
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	d113      	bne.n	8016b0c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016aea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8016aec:	693b      	ldr	r3, [r7, #16]
 8016aee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016af2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	695b      	ldr	r3, [r3, #20]
 8016af8:	019b      	lsls	r3, r3, #6
 8016afa:	693a      	ldr	r2, [r7, #16]
 8016afc:	4313      	orrs	r3, r2
 8016afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	699b      	ldr	r3, [r3, #24]
 8016b04:	019b      	lsls	r3, r3, #6
 8016b06:	693a      	ldr	r2, [r7, #16]
 8016b08:	4313      	orrs	r3, r2
 8016b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	693a      	ldr	r2, [r7, #16]
 8016b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	68fa      	ldr	r2, [r7, #12]
 8016b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	685a      	ldr	r2, [r3, #4]
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	697a      	ldr	r2, [r7, #20]
 8016b24:	621a      	str	r2, [r3, #32]
}
 8016b26:	bf00      	nop
 8016b28:	371c      	adds	r7, #28
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	40012c00 	.word	0x40012c00
 8016b38:	50012c00 	.word	0x50012c00
 8016b3c:	40013400 	.word	0x40013400
 8016b40:	50013400 	.word	0x50013400
 8016b44:	40014000 	.word	0x40014000
 8016b48:	50014000 	.word	0x50014000
 8016b4c:	40014400 	.word	0x40014400
 8016b50:	50014400 	.word	0x50014400
 8016b54:	40014800 	.word	0x40014800
 8016b58:	50014800 	.word	0x50014800

08016b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	b087      	sub	sp, #28
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6a1b      	ldr	r3, [r3, #32]
 8016b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6a1b      	ldr	r3, [r3, #32]
 8016b70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	68fa      	ldr	r2, [r7, #12]
 8016b96:	4313      	orrs	r3, r2
 8016b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8016ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	689b      	ldr	r3, [r3, #8]
 8016ba6:	041b      	lsls	r3, r3, #16
 8016ba8:	693a      	ldr	r2, [r7, #16]
 8016baa:	4313      	orrs	r3, r2
 8016bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	4a21      	ldr	r2, [pc, #132]	@ (8016c38 <TIM_OC5_SetConfig+0xdc>)
 8016bb2:	4293      	cmp	r3, r2
 8016bb4:	d023      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	4a20      	ldr	r2, [pc, #128]	@ (8016c3c <TIM_OC5_SetConfig+0xe0>)
 8016bba:	4293      	cmp	r3, r2
 8016bbc:	d01f      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8016c40 <TIM_OC5_SetConfig+0xe4>)
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d01b      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8016c44 <TIM_OC5_SetConfig+0xe8>)
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	d017      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8016c48 <TIM_OC5_SetConfig+0xec>)
 8016bd2:	4293      	cmp	r3, r2
 8016bd4:	d013      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8016c4c <TIM_OC5_SetConfig+0xf0>)
 8016bda:	4293      	cmp	r3, r2
 8016bdc:	d00f      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	4a1b      	ldr	r2, [pc, #108]	@ (8016c50 <TIM_OC5_SetConfig+0xf4>)
 8016be2:	4293      	cmp	r3, r2
 8016be4:	d00b      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	4a1a      	ldr	r2, [pc, #104]	@ (8016c54 <TIM_OC5_SetConfig+0xf8>)
 8016bea:	4293      	cmp	r3, r2
 8016bec:	d007      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	4a19      	ldr	r2, [pc, #100]	@ (8016c58 <TIM_OC5_SetConfig+0xfc>)
 8016bf2:	4293      	cmp	r3, r2
 8016bf4:	d003      	beq.n	8016bfe <TIM_OC5_SetConfig+0xa2>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	4a18      	ldr	r2, [pc, #96]	@ (8016c5c <TIM_OC5_SetConfig+0x100>)
 8016bfa:	4293      	cmp	r3, r2
 8016bfc:	d109      	bne.n	8016c12 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016c04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	695b      	ldr	r3, [r3, #20]
 8016c0a:	021b      	lsls	r3, r3, #8
 8016c0c:	697a      	ldr	r2, [r7, #20]
 8016c0e:	4313      	orrs	r3, r2
 8016c10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	697a      	ldr	r2, [r7, #20]
 8016c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	68fa      	ldr	r2, [r7, #12]
 8016c1c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	685a      	ldr	r2, [r3, #4]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	693a      	ldr	r2, [r7, #16]
 8016c2a:	621a      	str	r2, [r3, #32]
}
 8016c2c:	bf00      	nop
 8016c2e:	371c      	adds	r7, #28
 8016c30:	46bd      	mov	sp, r7
 8016c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c36:	4770      	bx	lr
 8016c38:	40012c00 	.word	0x40012c00
 8016c3c:	50012c00 	.word	0x50012c00
 8016c40:	40013400 	.word	0x40013400
 8016c44:	50013400 	.word	0x50013400
 8016c48:	40014000 	.word	0x40014000
 8016c4c:	50014000 	.word	0x50014000
 8016c50:	40014400 	.word	0x40014400
 8016c54:	50014400 	.word	0x50014400
 8016c58:	40014800 	.word	0x40014800
 8016c5c:	50014800 	.word	0x50014800

08016c60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016c60:	b480      	push	{r7}
 8016c62:	b087      	sub	sp, #28
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	6a1b      	ldr	r3, [r3, #32]
 8016c6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6a1b      	ldr	r3, [r3, #32]
 8016c74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8016c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8016c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	021b      	lsls	r3, r3, #8
 8016c9a:	68fa      	ldr	r2, [r7, #12]
 8016c9c:	4313      	orrs	r3, r2
 8016c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	689b      	ldr	r3, [r3, #8]
 8016cac:	051b      	lsls	r3, r3, #20
 8016cae:	693a      	ldr	r2, [r7, #16]
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	4a22      	ldr	r2, [pc, #136]	@ (8016d40 <TIM_OC6_SetConfig+0xe0>)
 8016cb8:	4293      	cmp	r3, r2
 8016cba:	d023      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	4a21      	ldr	r2, [pc, #132]	@ (8016d44 <TIM_OC6_SetConfig+0xe4>)
 8016cc0:	4293      	cmp	r3, r2
 8016cc2:	d01f      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	4a20      	ldr	r2, [pc, #128]	@ (8016d48 <TIM_OC6_SetConfig+0xe8>)
 8016cc8:	4293      	cmp	r3, r2
 8016cca:	d01b      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	4a1f      	ldr	r2, [pc, #124]	@ (8016d4c <TIM_OC6_SetConfig+0xec>)
 8016cd0:	4293      	cmp	r3, r2
 8016cd2:	d017      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8016d50 <TIM_OC6_SetConfig+0xf0>)
 8016cd8:	4293      	cmp	r3, r2
 8016cda:	d013      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	4a1d      	ldr	r2, [pc, #116]	@ (8016d54 <TIM_OC6_SetConfig+0xf4>)
 8016ce0:	4293      	cmp	r3, r2
 8016ce2:	d00f      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8016d58 <TIM_OC6_SetConfig+0xf8>)
 8016ce8:	4293      	cmp	r3, r2
 8016cea:	d00b      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	4a1b      	ldr	r2, [pc, #108]	@ (8016d5c <TIM_OC6_SetConfig+0xfc>)
 8016cf0:	4293      	cmp	r3, r2
 8016cf2:	d007      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8016d60 <TIM_OC6_SetConfig+0x100>)
 8016cf8:	4293      	cmp	r3, r2
 8016cfa:	d003      	beq.n	8016d04 <TIM_OC6_SetConfig+0xa4>
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	4a19      	ldr	r2, [pc, #100]	@ (8016d64 <TIM_OC6_SetConfig+0x104>)
 8016d00:	4293      	cmp	r3, r2
 8016d02:	d109      	bne.n	8016d18 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	695b      	ldr	r3, [r3, #20]
 8016d10:	029b      	lsls	r3, r3, #10
 8016d12:	697a      	ldr	r2, [r7, #20]
 8016d14:	4313      	orrs	r3, r2
 8016d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	697a      	ldr	r2, [r7, #20]
 8016d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	68fa      	ldr	r2, [r7, #12]
 8016d22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	685a      	ldr	r2, [r3, #4]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	693a      	ldr	r2, [r7, #16]
 8016d30:	621a      	str	r2, [r3, #32]
}
 8016d32:	bf00      	nop
 8016d34:	371c      	adds	r7, #28
 8016d36:	46bd      	mov	sp, r7
 8016d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3c:	4770      	bx	lr
 8016d3e:	bf00      	nop
 8016d40:	40012c00 	.word	0x40012c00
 8016d44:	50012c00 	.word	0x50012c00
 8016d48:	40013400 	.word	0x40013400
 8016d4c:	50013400 	.word	0x50013400
 8016d50:	40014000 	.word	0x40014000
 8016d54:	50014000 	.word	0x50014000
 8016d58:	40014400 	.word	0x40014400
 8016d5c:	50014400 	.word	0x50014400
 8016d60:	40014800 	.word	0x40014800
 8016d64:	50014800 	.word	0x50014800

08016d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b087      	sub	sp, #28
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	60f8      	str	r0, [r7, #12]
 8016d70:	60b9      	str	r1, [r7, #8]
 8016d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	6a1b      	ldr	r3, [r3, #32]
 8016d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	6a1b      	ldr	r3, [r3, #32]
 8016d7e:	f023 0201 	bic.w	r2, r3, #1
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	699b      	ldr	r3, [r3, #24]
 8016d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016d8c:	693b      	ldr	r3, [r7, #16]
 8016d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	011b      	lsls	r3, r3, #4
 8016d98:	693a      	ldr	r2, [r7, #16]
 8016d9a:	4313      	orrs	r3, r2
 8016d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	f023 030a 	bic.w	r3, r3, #10
 8016da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016da6:	697a      	ldr	r2, [r7, #20]
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	4313      	orrs	r3, r2
 8016dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	693a      	ldr	r2, [r7, #16]
 8016db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	697a      	ldr	r2, [r7, #20]
 8016db8:	621a      	str	r2, [r3, #32]
}
 8016dba:	bf00      	nop
 8016dbc:	371c      	adds	r7, #28
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc4:	4770      	bx	lr

08016dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016dc6:	b480      	push	{r7}
 8016dc8:	b087      	sub	sp, #28
 8016dca:	af00      	add	r7, sp, #0
 8016dcc:	60f8      	str	r0, [r7, #12]
 8016dce:	60b9      	str	r1, [r7, #8]
 8016dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	6a1b      	ldr	r3, [r3, #32]
 8016dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	6a1b      	ldr	r3, [r3, #32]
 8016ddc:	f023 0210 	bic.w	r2, r3, #16
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	699b      	ldr	r3, [r3, #24]
 8016de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8016df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	031b      	lsls	r3, r3, #12
 8016df6:	693a      	ldr	r2, [r7, #16]
 8016df8:	4313      	orrs	r3, r2
 8016dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8016e02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	011b      	lsls	r3, r3, #4
 8016e08:	697a      	ldr	r2, [r7, #20]
 8016e0a:	4313      	orrs	r3, r2
 8016e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	693a      	ldr	r2, [r7, #16]
 8016e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	697a      	ldr	r2, [r7, #20]
 8016e18:	621a      	str	r2, [r3, #32]
}
 8016e1a:	bf00      	nop
 8016e1c:	371c      	adds	r7, #28
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e24:	4770      	bx	lr

08016e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8016e26:	b480      	push	{r7}
 8016e28:	b085      	sub	sp, #20
 8016e2a:	af00      	add	r7, sp, #0
 8016e2c:	6078      	str	r0, [r7, #4]
 8016e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	689b      	ldr	r3, [r3, #8]
 8016e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8016e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016e42:	683a      	ldr	r2, [r7, #0]
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	4313      	orrs	r3, r2
 8016e48:	f043 0307 	orr.w	r3, r3, #7
 8016e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	68fa      	ldr	r2, [r7, #12]
 8016e52:	609a      	str	r2, [r3, #8]
}
 8016e54:	bf00      	nop
 8016e56:	3714      	adds	r7, #20
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr

08016e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016e60:	b480      	push	{r7}
 8016e62:	b087      	sub	sp, #28
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	60f8      	str	r0, [r7, #12]
 8016e68:	60b9      	str	r1, [r7, #8]
 8016e6a:	607a      	str	r2, [r7, #4]
 8016e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	689b      	ldr	r3, [r3, #8]
 8016e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016e74:	697b      	ldr	r3, [r7, #20]
 8016e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	021a      	lsls	r2, r3, #8
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	431a      	orrs	r2, r3
 8016e84:	68bb      	ldr	r3, [r7, #8]
 8016e86:	4313      	orrs	r3, r2
 8016e88:	697a      	ldr	r2, [r7, #20]
 8016e8a:	4313      	orrs	r3, r2
 8016e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	697a      	ldr	r2, [r7, #20]
 8016e92:	609a      	str	r2, [r3, #8]
}
 8016e94:	bf00      	nop
 8016e96:	371c      	adds	r7, #28
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr

08016ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b087      	sub	sp, #28
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	60f8      	str	r0, [r7, #12]
 8016ea8:	60b9      	str	r1, [r7, #8]
 8016eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	f003 031f 	and.w	r3, r3, #31
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8016eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	6a1a      	ldr	r2, [r3, #32]
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	43db      	mvns	r3, r3
 8016ec2:	401a      	ands	r2, r3
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	6a1a      	ldr	r2, [r3, #32]
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	f003 031f 	and.w	r3, r3, #31
 8016ed2:	6879      	ldr	r1, [r7, #4]
 8016ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8016ed8:	431a      	orrs	r2, r3
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	621a      	str	r2, [r3, #32]
}
 8016ede:	bf00      	nop
 8016ee0:	371c      	adds	r7, #28
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee8:	4770      	bx	lr
	...

08016eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016eec:	b480      	push	{r7}
 8016eee:	b085      	sub	sp, #20
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
 8016ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	d101      	bne.n	8016f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016f00:	2302      	movs	r3, #2
 8016f02:	e0a1      	b.n	8017048 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2201      	movs	r2, #1
 8016f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2202      	movs	r2, #2
 8016f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	689b      	ldr	r3, [r3, #8]
 8016f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	4a4a      	ldr	r2, [pc, #296]	@ (8017054 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	d00e      	beq.n	8016f4c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	4a49      	ldr	r2, [pc, #292]	@ (8017058 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8016f34:	4293      	cmp	r3, r2
 8016f36:	d009      	beq.n	8016f4c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	4a47      	ldr	r2, [pc, #284]	@ (801705c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8016f3e:	4293      	cmp	r3, r2
 8016f40:	d004      	beq.n	8016f4c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	4a46      	ldr	r2, [pc, #280]	@ (8017060 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8016f48:	4293      	cmp	r3, r2
 8016f4a:	d108      	bne.n	8016f5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8016f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	68fa      	ldr	r2, [r7, #12]
 8016f5a:	4313      	orrs	r3, r2
 8016f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8016f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016f68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	68fa      	ldr	r2, [r7, #12]
 8016f70:	4313      	orrs	r3, r2
 8016f72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	68fa      	ldr	r2, [r7, #12]
 8016f7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	4a34      	ldr	r2, [pc, #208]	@ (8017054 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8016f82:	4293      	cmp	r3, r2
 8016f84:	d04a      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	4a33      	ldr	r2, [pc, #204]	@ (8017058 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8016f8c:	4293      	cmp	r3, r2
 8016f8e:	d045      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016f98:	d040      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016fa2:	d03b      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8017064 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8016faa:	4293      	cmp	r3, r2
 8016fac:	d036      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8017068 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8016fb4:	4293      	cmp	r3, r2
 8016fb6:	d031      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	4a2b      	ldr	r2, [pc, #172]	@ (801706c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8016fbe:	4293      	cmp	r3, r2
 8016fc0:	d02c      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8017070 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8016fc8:	4293      	cmp	r3, r2
 8016fca:	d027      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	4a28      	ldr	r2, [pc, #160]	@ (8017074 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8016fd2:	4293      	cmp	r3, r2
 8016fd4:	d022      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	4a27      	ldr	r2, [pc, #156]	@ (8017078 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	d01d      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	4a1d      	ldr	r2, [pc, #116]	@ (801705c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8016fe6:	4293      	cmp	r3, r2
 8016fe8:	d018      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	4a1c      	ldr	r2, [pc, #112]	@ (8017060 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8016ff0:	4293      	cmp	r3, r2
 8016ff2:	d013      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	4a20      	ldr	r2, [pc, #128]	@ (801707c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8016ffa:	4293      	cmp	r3, r2
 8016ffc:	d00e      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	4a1f      	ldr	r2, [pc, #124]	@ (8017080 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8017004:	4293      	cmp	r3, r2
 8017006:	d009      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	4a1d      	ldr	r2, [pc, #116]	@ (8017084 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 801700e:	4293      	cmp	r3, r2
 8017010:	d004      	beq.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	4a1c      	ldr	r2, [pc, #112]	@ (8017088 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8017018:	4293      	cmp	r3, r2
 801701a:	d10c      	bne.n	8017036 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801701c:	68bb      	ldr	r3, [r7, #8]
 801701e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	689b      	ldr	r3, [r3, #8]
 8017028:	68ba      	ldr	r2, [r7, #8]
 801702a:	4313      	orrs	r3, r2
 801702c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	68ba      	ldr	r2, [r7, #8]
 8017034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2201      	movs	r2, #1
 801703a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2200      	movs	r2, #0
 8017042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017046:	2300      	movs	r3, #0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3714      	adds	r7, #20
 801704c:	46bd      	mov	sp, r7
 801704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017052:	4770      	bx	lr
 8017054:	40012c00 	.word	0x40012c00
 8017058:	50012c00 	.word	0x50012c00
 801705c:	40013400 	.word	0x40013400
 8017060:	50013400 	.word	0x50013400
 8017064:	40000400 	.word	0x40000400
 8017068:	50000400 	.word	0x50000400
 801706c:	40000800 	.word	0x40000800
 8017070:	50000800 	.word	0x50000800
 8017074:	40000c00 	.word	0x40000c00
 8017078:	50000c00 	.word	0x50000c00
 801707c:	40001800 	.word	0x40001800
 8017080:	50001800 	.word	0x50001800
 8017084:	40014000 	.word	0x40014000
 8017088:	50014000 	.word	0x50014000

0801708c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801708c:	b480      	push	{r7}
 801708e:	b085      	sub	sp, #20
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
 8017094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017096:	2300      	movs	r3, #0
 8017098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80170a0:	2b01      	cmp	r3, #1
 80170a2:	d101      	bne.n	80170a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80170a4:	2302      	movs	r3, #2
 80170a6:	e07d      	b.n	80171a4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2201      	movs	r2, #1
 80170ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	4313      	orrs	r3, r2
 80170bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	689b      	ldr	r3, [r3, #8]
 80170c8:	4313      	orrs	r3, r2
 80170ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	4313      	orrs	r3, r2
 80170d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	4313      	orrs	r3, r2
 80170e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	691b      	ldr	r3, [r3, #16]
 80170f2:	4313      	orrs	r3, r2
 80170f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	695b      	ldr	r3, [r3, #20]
 8017100:	4313      	orrs	r3, r2
 8017102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801710e:	4313      	orrs	r3, r2
 8017110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	699b      	ldr	r3, [r3, #24]
 801711c:	041b      	lsls	r3, r3, #16
 801711e:	4313      	orrs	r3, r2
 8017120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017128:	683b      	ldr	r3, [r7, #0]
 801712a:	69db      	ldr	r3, [r3, #28]
 801712c:	4313      	orrs	r3, r2
 801712e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	4a1e      	ldr	r2, [pc, #120]	@ (80171b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8017136:	4293      	cmp	r3, r2
 8017138:	d00e      	beq.n	8017158 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	4a1d      	ldr	r2, [pc, #116]	@ (80171b4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8017140:	4293      	cmp	r3, r2
 8017142:	d009      	beq.n	8017158 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	4a1b      	ldr	r2, [pc, #108]	@ (80171b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 801714a:	4293      	cmp	r3, r2
 801714c:	d004      	beq.n	8017158 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	4a1a      	ldr	r2, [pc, #104]	@ (80171bc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d11c      	bne.n	8017192 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017162:	051b      	lsls	r3, r3, #20
 8017164:	4313      	orrs	r3, r2
 8017166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	6a1b      	ldr	r3, [r3, #32]
 8017172:	4313      	orrs	r3, r2
 8017174:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017180:	4313      	orrs	r3, r2
 8017182:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801718e:	4313      	orrs	r3, r2
 8017190:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	68fa      	ldr	r2, [r7, #12]
 8017198:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2200      	movs	r2, #0
 801719e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80171a2:	2300      	movs	r3, #0
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3714      	adds	r7, #20
 80171a8:	46bd      	mov	sp, r7
 80171aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ae:	4770      	bx	lr
 80171b0:	40012c00 	.word	0x40012c00
 80171b4:	50012c00 	.word	0x50012c00
 80171b8:	40013400 	.word	0x40013400
 80171bc:	50013400 	.word	0x50013400

080171c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80171c0:	b480      	push	{r7}
 80171c2:	b083      	sub	sp, #12
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80171c8:	bf00      	nop
 80171ca:	370c      	adds	r7, #12
 80171cc:	46bd      	mov	sp, r7
 80171ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d2:	4770      	bx	lr

080171d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80171d4:	b480      	push	{r7}
 80171d6:	b083      	sub	sp, #12
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80171dc:	bf00      	nop
 80171de:	370c      	adds	r7, #12
 80171e0:	46bd      	mov	sp, r7
 80171e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e6:	4770      	bx	lr

080171e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80171e8:	b480      	push	{r7}
 80171ea:	b083      	sub	sp, #12
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80171f0:	bf00      	nop
 80171f2:	370c      	adds	r7, #12
 80171f4:	46bd      	mov	sp, r7
 80171f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fa:	4770      	bx	lr

080171fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80171fc:	b480      	push	{r7}
 80171fe:	b083      	sub	sp, #12
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8017204:	bf00      	nop
 8017206:	370c      	adds	r7, #12
 8017208:	46bd      	mov	sp, r7
 801720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720e:	4770      	bx	lr

08017210 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8017210:	b480      	push	{r7}
 8017212:	b083      	sub	sp, #12
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8017218:	bf00      	nop
 801721a:	370c      	adds	r7, #12
 801721c:	46bd      	mov	sp, r7
 801721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017222:	4770      	bx	lr

08017224 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8017224:	b480      	push	{r7}
 8017226:	b083      	sub	sp, #12
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801722c:	bf00      	nop
 801722e:	370c      	adds	r7, #12
 8017230:	46bd      	mov	sp, r7
 8017232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017236:	4770      	bx	lr

08017238 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8017238:	b480      	push	{r7}
 801723a:	b083      	sub	sp, #12
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8017240:	bf00      	nop
 8017242:	370c      	adds	r7, #12
 8017244:	46bd      	mov	sp, r7
 8017246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724a:	4770      	bx	lr

0801724c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d101      	bne.n	801725e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801725a:	2301      	movs	r3, #1
 801725c:	e042      	b.n	80172e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017264:	2b00      	cmp	r3, #0
 8017266:	d106      	bne.n	8017276 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2200      	movs	r2, #0
 801726c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f7f4 f95d 	bl	800b530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	2224      	movs	r2, #36	@ 0x24
 801727a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	681a      	ldr	r2, [r3, #0]
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	f022 0201 	bic.w	r2, r2, #1
 801728c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017292:	2b00      	cmp	r3, #0
 8017294:	d002      	beq.n	801729c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f000 fb8c 	bl	80179b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f000 f99b 	bl	80175d8 <UART_SetConfig>
 80172a2:	4603      	mov	r3, r0
 80172a4:	2b01      	cmp	r3, #1
 80172a6:	d101      	bne.n	80172ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80172a8:	2301      	movs	r3, #1
 80172aa:	e01b      	b.n	80172e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	685a      	ldr	r2, [r3, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80172ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	689a      	ldr	r2, [r3, #8]
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80172ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	681a      	ldr	r2, [r3, #0]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	f042 0201 	orr.w	r2, r2, #1
 80172da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f000 fc0b 	bl	8017af8 <UART_CheckIdleState>
 80172e2:	4603      	mov	r3, r0
}
 80172e4:	4618      	mov	r0, r3
 80172e6:	3708      	adds	r7, #8
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}

080172ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b08a      	sub	sp, #40	@ 0x28
 80172f0:	af02      	add	r7, sp, #8
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	60b9      	str	r1, [r7, #8]
 80172f6:	603b      	str	r3, [r7, #0]
 80172f8:	4613      	mov	r3, r2
 80172fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017302:	2b20      	cmp	r3, #32
 8017304:	f040 808b 	bne.w	801741e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d002      	beq.n	8017314 <HAL_UART_Transmit+0x28>
 801730e:	88fb      	ldrh	r3, [r7, #6]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d101      	bne.n	8017318 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017314:	2301      	movs	r3, #1
 8017316:	e083      	b.n	8017420 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	689b      	ldr	r3, [r3, #8]
 801731e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017322:	2b80      	cmp	r3, #128	@ 0x80
 8017324:	d107      	bne.n	8017336 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	689a      	ldr	r2, [r3, #8]
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017334:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	2200      	movs	r2, #0
 801733a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	2221      	movs	r2, #33	@ 0x21
 8017342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017346:	f7f4 fc35 	bl	800bbb4 <HAL_GetTick>
 801734a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	88fa      	ldrh	r2, [r7, #6]
 8017350:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	88fa      	ldrh	r2, [r7, #6]
 8017358:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	689b      	ldr	r3, [r3, #8]
 8017360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017364:	d108      	bne.n	8017378 <HAL_UART_Transmit+0x8c>
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	691b      	ldr	r3, [r3, #16]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d104      	bne.n	8017378 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 801736e:	2300      	movs	r3, #0
 8017370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	61bb      	str	r3, [r7, #24]
 8017376:	e003      	b.n	8017380 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801737c:	2300      	movs	r3, #0
 801737e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017380:	e030      	b.n	80173e4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	9300      	str	r3, [sp, #0]
 8017386:	697b      	ldr	r3, [r7, #20]
 8017388:	2200      	movs	r2, #0
 801738a:	2180      	movs	r1, #128	@ 0x80
 801738c:	68f8      	ldr	r0, [r7, #12]
 801738e:	f000 fc5d 	bl	8017c4c <UART_WaitOnFlagUntilTimeout>
 8017392:	4603      	mov	r3, r0
 8017394:	2b00      	cmp	r3, #0
 8017396:	d005      	beq.n	80173a4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	2220      	movs	r2, #32
 801739c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80173a0:	2303      	movs	r3, #3
 80173a2:	e03d      	b.n	8017420 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80173a4:	69fb      	ldr	r3, [r7, #28]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d10b      	bne.n	80173c2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80173aa:	69bb      	ldr	r3, [r7, #24]
 80173ac:	881b      	ldrh	r3, [r3, #0]
 80173ae:	461a      	mov	r2, r3
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80173b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80173ba:	69bb      	ldr	r3, [r7, #24]
 80173bc:	3302      	adds	r3, #2
 80173be:	61bb      	str	r3, [r7, #24]
 80173c0:	e007      	b.n	80173d2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80173c2:	69fb      	ldr	r3, [r7, #28]
 80173c4:	781a      	ldrb	r2, [r3, #0]
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80173cc:	69fb      	ldr	r3, [r7, #28]
 80173ce:	3301      	adds	r3, #1
 80173d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80173d8:	b29b      	uxth	r3, r3
 80173da:	3b01      	subs	r3, #1
 80173dc:	b29a      	uxth	r2, r3
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d1c8      	bne.n	8017382 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	9300      	str	r3, [sp, #0]
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	2200      	movs	r2, #0
 80173f8:	2140      	movs	r1, #64	@ 0x40
 80173fa:	68f8      	ldr	r0, [r7, #12]
 80173fc:	f000 fc26 	bl	8017c4c <UART_WaitOnFlagUntilTimeout>
 8017400:	4603      	mov	r3, r0
 8017402:	2b00      	cmp	r3, #0
 8017404:	d005      	beq.n	8017412 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	2220      	movs	r2, #32
 801740a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801740e:	2303      	movs	r3, #3
 8017410:	e006      	b.n	8017420 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	2220      	movs	r2, #32
 8017416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801741a:	2300      	movs	r3, #0
 801741c:	e000      	b.n	8017420 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 801741e:	2302      	movs	r3, #2
  }
}
 8017420:	4618      	mov	r0, r3
 8017422:	3720      	adds	r7, #32
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}

08017428 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b08a      	sub	sp, #40	@ 0x28
 801742c:	af02      	add	r7, sp, #8
 801742e:	60f8      	str	r0, [r7, #12]
 8017430:	60b9      	str	r1, [r7, #8]
 8017432:	603b      	str	r3, [r7, #0]
 8017434:	4613      	mov	r3, r2
 8017436:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801743e:	2b20      	cmp	r3, #32
 8017440:	f040 80c4 	bne.w	80175cc <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8017444:	68bb      	ldr	r3, [r7, #8]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d002      	beq.n	8017450 <HAL_UART_Receive+0x28>
 801744a:	88fb      	ldrh	r3, [r7, #6]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d101      	bne.n	8017454 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8017450:	2301      	movs	r3, #1
 8017452:	e0bc      	b.n	80175ce <HAL_UART_Receive+0x1a6>
    }

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	689b      	ldr	r3, [r3, #8]
 801745a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801745e:	2b40      	cmp	r3, #64	@ 0x40
 8017460:	d107      	bne.n	8017472 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	689a      	ldr	r2, [r3, #8]
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8017470:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	2200      	movs	r2, #0
 8017476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	2222      	movs	r2, #34	@ 0x22
 801747e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2200      	movs	r2, #0
 8017486:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017488:	f7f4 fb94 	bl	800bbb4 <HAL_GetTick>
 801748c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	88fa      	ldrh	r2, [r7, #6]
 8017492:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	88fa      	ldrh	r2, [r7, #6]
 801749a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	689b      	ldr	r3, [r3, #8]
 80174a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80174a6:	d10e      	bne.n	80174c6 <HAL_UART_Receive+0x9e>
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	691b      	ldr	r3, [r3, #16]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d105      	bne.n	80174bc <HAL_UART_Receive+0x94>
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80174b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80174ba:	e02d      	b.n	8017518 <HAL_UART_Receive+0xf0>
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	22ff      	movs	r2, #255	@ 0xff
 80174c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80174c4:	e028      	b.n	8017518 <HAL_UART_Receive+0xf0>
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	689b      	ldr	r3, [r3, #8]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d10d      	bne.n	80174ea <HAL_UART_Receive+0xc2>
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	691b      	ldr	r3, [r3, #16]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d104      	bne.n	80174e0 <HAL_UART_Receive+0xb8>
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	22ff      	movs	r2, #255	@ 0xff
 80174da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80174de:	e01b      	b.n	8017518 <HAL_UART_Receive+0xf0>
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	227f      	movs	r2, #127	@ 0x7f
 80174e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80174e8:	e016      	b.n	8017518 <HAL_UART_Receive+0xf0>
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	689b      	ldr	r3, [r3, #8]
 80174ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80174f2:	d10d      	bne.n	8017510 <HAL_UART_Receive+0xe8>
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	691b      	ldr	r3, [r3, #16]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d104      	bne.n	8017506 <HAL_UART_Receive+0xde>
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	227f      	movs	r2, #127	@ 0x7f
 8017500:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8017504:	e008      	b.n	8017518 <HAL_UART_Receive+0xf0>
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	223f      	movs	r2, #63	@ 0x3f
 801750a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801750e:	e003      	b.n	8017518 <HAL_UART_Receive+0xf0>
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	2200      	movs	r2, #0
 8017514:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801751e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	689b      	ldr	r3, [r3, #8]
 8017524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017528:	d108      	bne.n	801753c <HAL_UART_Receive+0x114>
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	691b      	ldr	r3, [r3, #16]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d104      	bne.n	801753c <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8017532:	2300      	movs	r3, #0
 8017534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	61bb      	str	r3, [r7, #24]
 801753a:	e003      	b.n	8017544 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017540:	2300      	movs	r3, #0
 8017542:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8017544:	e036      	b.n	80175b4 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	9300      	str	r3, [sp, #0]
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	2200      	movs	r2, #0
 801754e:	2120      	movs	r1, #32
 8017550:	68f8      	ldr	r0, [r7, #12]
 8017552:	f000 fb7b 	bl	8017c4c <UART_WaitOnFlagUntilTimeout>
 8017556:	4603      	mov	r3, r0
 8017558:	2b00      	cmp	r3, #0
 801755a:	d005      	beq.n	8017568 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	2220      	movs	r2, #32
 8017560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8017564:	2303      	movs	r3, #3
 8017566:	e032      	b.n	80175ce <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8017568:	69fb      	ldr	r3, [r7, #28]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d10c      	bne.n	8017588 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017574:	b29a      	uxth	r2, r3
 8017576:	8a7b      	ldrh	r3, [r7, #18]
 8017578:	4013      	ands	r3, r2
 801757a:	b29a      	uxth	r2, r3
 801757c:	69bb      	ldr	r3, [r7, #24]
 801757e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	3302      	adds	r3, #2
 8017584:	61bb      	str	r3, [r7, #24]
 8017586:	e00c      	b.n	80175a2 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801758e:	b2da      	uxtb	r2, r3
 8017590:	8a7b      	ldrh	r3, [r7, #18]
 8017592:	b2db      	uxtb	r3, r3
 8017594:	4013      	ands	r3, r2
 8017596:	b2da      	uxtb	r2, r3
 8017598:	69fb      	ldr	r3, [r7, #28]
 801759a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	3301      	adds	r3, #1
 80175a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	3b01      	subs	r3, #1
 80175ac:	b29a      	uxth	r2, r3
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d1c2      	bne.n	8017546 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2220      	movs	r2, #32
 80175c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80175c8:	2300      	movs	r3, #0
 80175ca:	e000      	b.n	80175ce <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 80175cc:	2302      	movs	r3, #2
  }
}
 80175ce:	4618      	mov	r0, r3
 80175d0:	3720      	adds	r7, #32
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}
	...

080175d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80175d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80175dc:	b094      	sub	sp, #80	@ 0x50
 80175de:	af00      	add	r7, sp, #0
 80175e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80175e2:	2300      	movs	r3, #0
 80175e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80175e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175ea:	681a      	ldr	r2, [r3, #0]
 80175ec:	4b78      	ldr	r3, [pc, #480]	@ (80177d0 <UART_SetConfig+0x1f8>)
 80175ee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80175f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175f2:	689a      	ldr	r2, [r3, #8]
 80175f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175f6:	691b      	ldr	r3, [r3, #16]
 80175f8:	431a      	orrs	r2, r3
 80175fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175fc:	695b      	ldr	r3, [r3, #20]
 80175fe:	431a      	orrs	r2, r3
 8017600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017602:	69db      	ldr	r3, [r3, #28]
 8017604:	4313      	orrs	r3, r2
 8017606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	4971      	ldr	r1, [pc, #452]	@ (80177d4 <UART_SetConfig+0x1fc>)
 8017610:	4019      	ands	r1, r3
 8017612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017618:	430b      	orrs	r3, r1
 801761a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801761c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	685b      	ldr	r3, [r3, #4]
 8017622:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8017626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017628:	68d9      	ldr	r1, [r3, #12]
 801762a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801762c:	681a      	ldr	r2, [r3, #0]
 801762e:	ea40 0301 	orr.w	r3, r0, r1
 8017632:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017636:	699b      	ldr	r3, [r3, #24]
 8017638:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801763c:	681a      	ldr	r2, [r3, #0]
 801763e:	4b64      	ldr	r3, [pc, #400]	@ (80177d0 <UART_SetConfig+0x1f8>)
 8017640:	429a      	cmp	r2, r3
 8017642:	d009      	beq.n	8017658 <UART_SetConfig+0x80>
 8017644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017646:	681a      	ldr	r2, [r3, #0]
 8017648:	4b63      	ldr	r3, [pc, #396]	@ (80177d8 <UART_SetConfig+0x200>)
 801764a:	429a      	cmp	r2, r3
 801764c:	d004      	beq.n	8017658 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017650:	6a1a      	ldr	r2, [r3, #32]
 8017652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017654:	4313      	orrs	r3, r2
 8017656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	689b      	ldr	r3, [r3, #8]
 801765e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8017662:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8017666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801766c:	430b      	orrs	r3, r1
 801766e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8017670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017676:	f023 000f 	bic.w	r0, r3, #15
 801767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801767c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	ea40 0301 	orr.w	r3, r0, r1
 8017686:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801768a:	681a      	ldr	r2, [r3, #0]
 801768c:	4b53      	ldr	r3, [pc, #332]	@ (80177dc <UART_SetConfig+0x204>)
 801768e:	429a      	cmp	r2, r3
 8017690:	d102      	bne.n	8017698 <UART_SetConfig+0xc0>
 8017692:	2301      	movs	r3, #1
 8017694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017696:	e066      	b.n	8017766 <UART_SetConfig+0x18e>
 8017698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	4b50      	ldr	r3, [pc, #320]	@ (80177e0 <UART_SetConfig+0x208>)
 801769e:	429a      	cmp	r2, r3
 80176a0:	d102      	bne.n	80176a8 <UART_SetConfig+0xd0>
 80176a2:	2302      	movs	r3, #2
 80176a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176a6:	e05e      	b.n	8017766 <UART_SetConfig+0x18e>
 80176a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176aa:	681a      	ldr	r2, [r3, #0]
 80176ac:	4b4d      	ldr	r3, [pc, #308]	@ (80177e4 <UART_SetConfig+0x20c>)
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d102      	bne.n	80176b8 <UART_SetConfig+0xe0>
 80176b2:	2304      	movs	r3, #4
 80176b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176b6:	e056      	b.n	8017766 <UART_SetConfig+0x18e>
 80176b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	4b4a      	ldr	r3, [pc, #296]	@ (80177e8 <UART_SetConfig+0x210>)
 80176be:	429a      	cmp	r2, r3
 80176c0:	d102      	bne.n	80176c8 <UART_SetConfig+0xf0>
 80176c2:	2308      	movs	r3, #8
 80176c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176c6:	e04e      	b.n	8017766 <UART_SetConfig+0x18e>
 80176c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ca:	681a      	ldr	r2, [r3, #0]
 80176cc:	4b47      	ldr	r3, [pc, #284]	@ (80177ec <UART_SetConfig+0x214>)
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d102      	bne.n	80176d8 <UART_SetConfig+0x100>
 80176d2:	2310      	movs	r3, #16
 80176d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176d6:	e046      	b.n	8017766 <UART_SetConfig+0x18e>
 80176d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176da:	681a      	ldr	r2, [r3, #0]
 80176dc:	4b44      	ldr	r3, [pc, #272]	@ (80177f0 <UART_SetConfig+0x218>)
 80176de:	429a      	cmp	r2, r3
 80176e0:	d102      	bne.n	80176e8 <UART_SetConfig+0x110>
 80176e2:	2320      	movs	r3, #32
 80176e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176e6:	e03e      	b.n	8017766 <UART_SetConfig+0x18e>
 80176e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ea:	681a      	ldr	r2, [r3, #0]
 80176ec:	4b41      	ldr	r3, [pc, #260]	@ (80177f4 <UART_SetConfig+0x21c>)
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d102      	bne.n	80176f8 <UART_SetConfig+0x120>
 80176f2:	2340      	movs	r3, #64	@ 0x40
 80176f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176f6:	e036      	b.n	8017766 <UART_SetConfig+0x18e>
 80176f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176fa:	681a      	ldr	r2, [r3, #0]
 80176fc:	4b3e      	ldr	r3, [pc, #248]	@ (80177f8 <UART_SetConfig+0x220>)
 80176fe:	429a      	cmp	r2, r3
 8017700:	d102      	bne.n	8017708 <UART_SetConfig+0x130>
 8017702:	2380      	movs	r3, #128	@ 0x80
 8017704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017706:	e02e      	b.n	8017766 <UART_SetConfig+0x18e>
 8017708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	4b3b      	ldr	r3, [pc, #236]	@ (80177fc <UART_SetConfig+0x224>)
 801770e:	429a      	cmp	r2, r3
 8017710:	d103      	bne.n	801771a <UART_SetConfig+0x142>
 8017712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017718:	e025      	b.n	8017766 <UART_SetConfig+0x18e>
 801771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801771c:	681a      	ldr	r2, [r3, #0]
 801771e:	4b38      	ldr	r3, [pc, #224]	@ (8017800 <UART_SetConfig+0x228>)
 8017720:	429a      	cmp	r2, r3
 8017722:	d103      	bne.n	801772c <UART_SetConfig+0x154>
 8017724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017728:	64bb      	str	r3, [r7, #72]	@ 0x48
 801772a:	e01c      	b.n	8017766 <UART_SetConfig+0x18e>
 801772c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	4b34      	ldr	r3, [pc, #208]	@ (8017804 <UART_SetConfig+0x22c>)
 8017732:	429a      	cmp	r2, r3
 8017734:	d103      	bne.n	801773e <UART_SetConfig+0x166>
 8017736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801773a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801773c:	e013      	b.n	8017766 <UART_SetConfig+0x18e>
 801773e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	4b31      	ldr	r3, [pc, #196]	@ (8017808 <UART_SetConfig+0x230>)
 8017744:	429a      	cmp	r2, r3
 8017746:	d103      	bne.n	8017750 <UART_SetConfig+0x178>
 8017748:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801774c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801774e:	e00a      	b.n	8017766 <UART_SetConfig+0x18e>
 8017750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017752:	681a      	ldr	r2, [r3, #0]
 8017754:	4b1e      	ldr	r3, [pc, #120]	@ (80177d0 <UART_SetConfig+0x1f8>)
 8017756:	429a      	cmp	r2, r3
 8017758:	d103      	bne.n	8017762 <UART_SetConfig+0x18a>
 801775a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801775e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017760:	e001      	b.n	8017766 <UART_SetConfig+0x18e>
 8017762:	2300      	movs	r3, #0
 8017764:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017768:	681a      	ldr	r2, [r3, #0]
 801776a:	4b19      	ldr	r3, [pc, #100]	@ (80177d0 <UART_SetConfig+0x1f8>)
 801776c:	429a      	cmp	r2, r3
 801776e:	d005      	beq.n	801777c <UART_SetConfig+0x1a4>
 8017770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017772:	681a      	ldr	r2, [r3, #0]
 8017774:	4b18      	ldr	r3, [pc, #96]	@ (80177d8 <UART_SetConfig+0x200>)
 8017776:	429a      	cmp	r2, r3
 8017778:	f040 8094 	bne.w	80178a4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801777c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801777e:	2200      	movs	r2, #0
 8017780:	623b      	str	r3, [r7, #32]
 8017782:	627a      	str	r2, [r7, #36]	@ 0x24
 8017784:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8017788:	f7f9 ff24 	bl	80115d4 <HAL_RCCEx_GetPeriphCLKFreq>
 801778c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801778e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017790:	2b00      	cmp	r3, #0
 8017792:	f000 80f7 	beq.w	8017984 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8017796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801779a:	4a1c      	ldr	r2, [pc, #112]	@ (801780c <UART_SetConfig+0x234>)
 801779c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80177a0:	461a      	mov	r2, r3
 80177a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80177a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80177a8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80177aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177ac:	685a      	ldr	r2, [r3, #4]
 80177ae:	4613      	mov	r3, r2
 80177b0:	005b      	lsls	r3, r3, #1
 80177b2:	4413      	add	r3, r2
 80177b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d305      	bcc.n	80177c6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80177ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80177c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d924      	bls.n	8017810 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80177c6:	2301      	movs	r3, #1
 80177c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80177cc:	e069      	b.n	80178a2 <UART_SetConfig+0x2ca>
 80177ce:	bf00      	nop
 80177d0:	44002400 	.word	0x44002400
 80177d4:	cfff69f3 	.word	0xcfff69f3
 80177d8:	54002400 	.word	0x54002400
 80177dc:	40013800 	.word	0x40013800
 80177e0:	40004400 	.word	0x40004400
 80177e4:	40004800 	.word	0x40004800
 80177e8:	40004c00 	.word	0x40004c00
 80177ec:	40005000 	.word	0x40005000
 80177f0:	40006400 	.word	0x40006400
 80177f4:	40007800 	.word	0x40007800
 80177f8:	40007c00 	.word	0x40007c00
 80177fc:	40008000 	.word	0x40008000
 8017800:	40006800 	.word	0x40006800
 8017804:	40006c00 	.word	0x40006c00
 8017808:	40008400 	.word	0x40008400
 801780c:	0802bd58 	.word	0x0802bd58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017812:	2200      	movs	r2, #0
 8017814:	61bb      	str	r3, [r7, #24]
 8017816:	61fa      	str	r2, [r7, #28]
 8017818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801781a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801781c:	4a64      	ldr	r2, [pc, #400]	@ (80179b0 <UART_SetConfig+0x3d8>)
 801781e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017822:	b29b      	uxth	r3, r3
 8017824:	2200      	movs	r2, #0
 8017826:	613b      	str	r3, [r7, #16]
 8017828:	617a      	str	r2, [r7, #20]
 801782a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801782e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017832:	f7e9 fa0d 	bl	8000c50 <__aeabi_uldivmod>
 8017836:	4602      	mov	r2, r0
 8017838:	460b      	mov	r3, r1
 801783a:	4610      	mov	r0, r2
 801783c:	4619      	mov	r1, r3
 801783e:	f04f 0200 	mov.w	r2, #0
 8017842:	f04f 0300 	mov.w	r3, #0
 8017846:	020b      	lsls	r3, r1, #8
 8017848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801784c:	0202      	lsls	r2, r0, #8
 801784e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017850:	6849      	ldr	r1, [r1, #4]
 8017852:	0849      	lsrs	r1, r1, #1
 8017854:	2000      	movs	r0, #0
 8017856:	460c      	mov	r4, r1
 8017858:	4605      	mov	r5, r0
 801785a:	eb12 0804 	adds.w	r8, r2, r4
 801785e:	eb43 0905 	adc.w	r9, r3, r5
 8017862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	2200      	movs	r2, #0
 8017868:	60bb      	str	r3, [r7, #8]
 801786a:	60fa      	str	r2, [r7, #12]
 801786c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017870:	4640      	mov	r0, r8
 8017872:	4649      	mov	r1, r9
 8017874:	f7e9 f9ec 	bl	8000c50 <__aeabi_uldivmod>
 8017878:	4602      	mov	r2, r0
 801787a:	460b      	mov	r3, r1
 801787c:	4613      	mov	r3, r2
 801787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017886:	d308      	bcc.n	801789a <UART_SetConfig+0x2c2>
 8017888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801788a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801788e:	d204      	bcs.n	801789a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8017890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017896:	60da      	str	r2, [r3, #12]
 8017898:	e003      	b.n	80178a2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 801789a:	2301      	movs	r3, #1
 801789c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80178a0:	e070      	b.n	8017984 <UART_SetConfig+0x3ac>
 80178a2:	e06f      	b.n	8017984 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80178a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178a6:	69db      	ldr	r3, [r3, #28]
 80178a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80178ac:	d13c      	bne.n	8017928 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80178ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80178b0:	2200      	movs	r2, #0
 80178b2:	603b      	str	r3, [r7, #0]
 80178b4:	607a      	str	r2, [r7, #4]
 80178b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80178ba:	f7f9 fe8b 	bl	80115d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80178be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80178c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d05e      	beq.n	8017984 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80178c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178ca:	4a39      	ldr	r2, [pc, #228]	@ (80179b0 <UART_SetConfig+0x3d8>)
 80178cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80178d0:	461a      	mov	r2, r3
 80178d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80178d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80178d8:	005a      	lsls	r2, r3, #1
 80178da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178dc:	685b      	ldr	r3, [r3, #4]
 80178de:	085b      	lsrs	r3, r3, #1
 80178e0:	441a      	add	r2, r3
 80178e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178e4:	685b      	ldr	r3, [r3, #4]
 80178e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80178ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80178ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80178ee:	2b0f      	cmp	r3, #15
 80178f0:	d916      	bls.n	8017920 <UART_SetConfig+0x348>
 80178f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80178f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80178f8:	d212      	bcs.n	8017920 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80178fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80178fc:	b29b      	uxth	r3, r3
 80178fe:	f023 030f 	bic.w	r3, r3, #15
 8017902:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017906:	085b      	lsrs	r3, r3, #1
 8017908:	b29b      	uxth	r3, r3
 801790a:	f003 0307 	and.w	r3, r3, #7
 801790e:	b29a      	uxth	r2, r3
 8017910:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017912:	4313      	orrs	r3, r2
 8017914:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8017916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801791c:	60da      	str	r2, [r3, #12]
 801791e:	e031      	b.n	8017984 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8017920:	2301      	movs	r3, #1
 8017922:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017926:	e02d      	b.n	8017984 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8017928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801792a:	2200      	movs	r2, #0
 801792c:	469a      	mov	sl, r3
 801792e:	4693      	mov	fp, r2
 8017930:	4650      	mov	r0, sl
 8017932:	4659      	mov	r1, fp
 8017934:	f7f9 fe4e 	bl	80115d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8017938:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801793a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801793c:	2b00      	cmp	r3, #0
 801793e:	d021      	beq.n	8017984 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017944:	4a1a      	ldr	r2, [pc, #104]	@ (80179b0 <UART_SetConfig+0x3d8>)
 8017946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801794a:	461a      	mov	r2, r3
 801794c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801794e:	fbb3 f2f2 	udiv	r2, r3, r2
 8017952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	085b      	lsrs	r3, r3, #1
 8017958:	441a      	add	r2, r3
 801795a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017962:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017966:	2b0f      	cmp	r3, #15
 8017968:	d909      	bls.n	801797e <UART_SetConfig+0x3a6>
 801796a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801796c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017970:	d205      	bcs.n	801797e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8017972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017974:	b29a      	uxth	r2, r3
 8017976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	60da      	str	r2, [r3, #12]
 801797c:	e002      	b.n	8017984 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801797e:	2301      	movs	r3, #1
 8017980:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8017984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017986:	2201      	movs	r2, #1
 8017988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801798e:	2201      	movs	r2, #1
 8017990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017996:	2200      	movs	r2, #0
 8017998:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801799a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801799c:	2200      	movs	r2, #0
 801799e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80179a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3750      	adds	r7, #80	@ 0x50
 80179a8:	46bd      	mov	sp, r7
 80179aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80179ae:	bf00      	nop
 80179b0:	0802bd58 	.word	0x0802bd58

080179b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80179b4:	b480      	push	{r7}
 80179b6:	b083      	sub	sp, #12
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179c0:	f003 0308 	and.w	r3, r3, #8
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d00a      	beq.n	80179de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	685b      	ldr	r3, [r3, #4]
 80179ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	430a      	orrs	r2, r1
 80179dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179e2:	f003 0301 	and.w	r3, r3, #1
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d00a      	beq.n	8017a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	430a      	orrs	r2, r1
 80179fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a04:	f003 0302 	and.w	r3, r3, #2
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d00a      	beq.n	8017a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	685b      	ldr	r3, [r3, #4]
 8017a12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	430a      	orrs	r2, r1
 8017a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a26:	f003 0304 	and.w	r3, r3, #4
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d00a      	beq.n	8017a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	685b      	ldr	r3, [r3, #4]
 8017a34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	430a      	orrs	r2, r1
 8017a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a48:	f003 0310 	and.w	r3, r3, #16
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d00a      	beq.n	8017a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	689b      	ldr	r3, [r3, #8]
 8017a56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	430a      	orrs	r2, r1
 8017a64:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a6a:	f003 0320 	and.w	r3, r3, #32
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d00a      	beq.n	8017a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	689b      	ldr	r3, [r3, #8]
 8017a78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	430a      	orrs	r2, r1
 8017a86:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d01a      	beq.n	8017aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	685b      	ldr	r3, [r3, #4]
 8017a9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	430a      	orrs	r2, r1
 8017aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017ab2:	d10a      	bne.n	8017aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	685b      	ldr	r3, [r3, #4]
 8017aba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	430a      	orrs	r2, r1
 8017ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d00a      	beq.n	8017aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	430a      	orrs	r2, r1
 8017aea:	605a      	str	r2, [r3, #4]
  }
}
 8017aec:	bf00      	nop
 8017aee:	370c      	adds	r7, #12
 8017af0:	46bd      	mov	sp, r7
 8017af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af6:	4770      	bx	lr

08017af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b098      	sub	sp, #96	@ 0x60
 8017afc:	af02      	add	r7, sp, #8
 8017afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	2200      	movs	r2, #0
 8017b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017b08:	f7f4 f854 	bl	800bbb4 <HAL_GetTick>
 8017b0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	f003 0308 	and.w	r3, r3, #8
 8017b18:	2b08      	cmp	r3, #8
 8017b1a:	d12f      	bne.n	8017b7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017b1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8017b20:	9300      	str	r3, [sp, #0]
 8017b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b24:	2200      	movs	r2, #0
 8017b26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8017b2a:	6878      	ldr	r0, [r7, #4]
 8017b2c:	f000 f88e 	bl	8017c4c <UART_WaitOnFlagUntilTimeout>
 8017b30:	4603      	mov	r3, r0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d022      	beq.n	8017b7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b3e:	e853 3f00 	ldrex	r3, [r3]
 8017b42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	461a      	mov	r2, r3
 8017b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8017b56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017b5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017b5c:	e841 2300 	strex	r3, r2, [r1]
 8017b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d1e6      	bne.n	8017b36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2220      	movs	r2, #32
 8017b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2200      	movs	r2, #0
 8017b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017b78:	2303      	movs	r3, #3
 8017b7a:	e063      	b.n	8017c44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	f003 0304 	and.w	r3, r3, #4
 8017b86:	2b04      	cmp	r3, #4
 8017b88:	d149      	bne.n	8017c1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017b8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8017b8e:	9300      	str	r3, [sp, #0]
 8017b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b92:	2200      	movs	r2, #0
 8017b94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f000 f857 	bl	8017c4c <UART_WaitOnFlagUntilTimeout>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d03c      	beq.n	8017c1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bac:	e853 3f00 	ldrex	r3, [r3]
 8017bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8017bb2:	6a3b      	ldr	r3, [r7, #32]
 8017bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	461a      	mov	r2, r3
 8017bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8017bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017bca:	e841 2300 	strex	r3, r2, [r1]
 8017bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d1e6      	bne.n	8017ba4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	3308      	adds	r3, #8
 8017bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	e853 3f00 	ldrex	r3, [r3]
 8017be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	f023 0301 	bic.w	r3, r3, #1
 8017bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	3308      	adds	r3, #8
 8017bf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017bf6:	61fa      	str	r2, [r7, #28]
 8017bf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bfa:	69b9      	ldr	r1, [r7, #24]
 8017bfc:	69fa      	ldr	r2, [r7, #28]
 8017bfe:	e841 2300 	strex	r3, r2, [r1]
 8017c02:	617b      	str	r3, [r7, #20]
   return(result);
 8017c04:	697b      	ldr	r3, [r7, #20]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d1e5      	bne.n	8017bd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2220      	movs	r2, #32
 8017c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2200      	movs	r2, #0
 8017c16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017c1a:	2303      	movs	r3, #3
 8017c1c:	e012      	b.n	8017c44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2220      	movs	r2, #32
 8017c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	2220      	movs	r2, #32
 8017c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2200      	movs	r2, #0
 8017c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2200      	movs	r2, #0
 8017c38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017c42:	2300      	movs	r3, #0
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3758      	adds	r7, #88	@ 0x58
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}

08017c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	60f8      	str	r0, [r7, #12]
 8017c54:	60b9      	str	r1, [r7, #8]
 8017c56:	603b      	str	r3, [r7, #0]
 8017c58:	4613      	mov	r3, r2
 8017c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017c5c:	e04f      	b.n	8017cfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017c5e:	69bb      	ldr	r3, [r7, #24]
 8017c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c64:	d04b      	beq.n	8017cfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017c66:	f7f3 ffa5 	bl	800bbb4 <HAL_GetTick>
 8017c6a:	4602      	mov	r2, r0
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	1ad3      	subs	r3, r2, r3
 8017c70:	69ba      	ldr	r2, [r7, #24]
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d302      	bcc.n	8017c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8017c76:	69bb      	ldr	r3, [r7, #24]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d101      	bne.n	8017c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8017c7c:	2303      	movs	r3, #3
 8017c7e:	e04e      	b.n	8017d1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	f003 0304 	and.w	r3, r3, #4
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d037      	beq.n	8017cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	2b80      	cmp	r3, #128	@ 0x80
 8017c92:	d034      	beq.n	8017cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	2b40      	cmp	r3, #64	@ 0x40
 8017c98:	d031      	beq.n	8017cfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	69db      	ldr	r3, [r3, #28]
 8017ca0:	f003 0308 	and.w	r3, r3, #8
 8017ca4:	2b08      	cmp	r3, #8
 8017ca6:	d110      	bne.n	8017cca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	2208      	movs	r2, #8
 8017cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017cb0:	68f8      	ldr	r0, [r7, #12]
 8017cb2:	f000 f838 	bl	8017d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	2208      	movs	r2, #8
 8017cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	e029      	b.n	8017d1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	69db      	ldr	r3, [r3, #28]
 8017cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017cd8:	d111      	bne.n	8017cfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017ce4:	68f8      	ldr	r0, [r7, #12]
 8017ce6:	f000 f81e 	bl	8017d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	2220      	movs	r2, #32
 8017cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8017cfa:	2303      	movs	r3, #3
 8017cfc:	e00f      	b.n	8017d1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	69da      	ldr	r2, [r3, #28]
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	4013      	ands	r3, r2
 8017d08:	68ba      	ldr	r2, [r7, #8]
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	bf0c      	ite	eq
 8017d0e:	2301      	moveq	r3, #1
 8017d10:	2300      	movne	r3, #0
 8017d12:	b2db      	uxtb	r3, r3
 8017d14:	461a      	mov	r2, r3
 8017d16:	79fb      	ldrb	r3, [r7, #7]
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	d0a0      	beq.n	8017c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017d1c:	2300      	movs	r3, #0
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3710      	adds	r7, #16
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}

08017d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017d26:	b480      	push	{r7}
 8017d28:	b095      	sub	sp, #84	@ 0x54
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d36:	e853 3f00 	ldrex	r3, [r3]
 8017d3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8017d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	461a      	mov	r2, r3
 8017d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8017d4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017d52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017d54:	e841 2300 	strex	r3, r2, [r1]
 8017d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1e6      	bne.n	8017d2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	3308      	adds	r3, #8
 8017d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d68:	6a3b      	ldr	r3, [r7, #32]
 8017d6a:	e853 3f00 	ldrex	r3, [r3]
 8017d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017d70:	69fb      	ldr	r3, [r7, #28]
 8017d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017d76:	f023 0301 	bic.w	r3, r3, #1
 8017d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	3308      	adds	r3, #8
 8017d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d8c:	e841 2300 	strex	r3, r2, [r1]
 8017d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d1e3      	bne.n	8017d60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d9c:	2b01      	cmp	r3, #1
 8017d9e:	d118      	bne.n	8017dd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	e853 3f00 	ldrex	r3, [r3]
 8017dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	f023 0310 	bic.w	r3, r3, #16
 8017db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	461a      	mov	r2, r3
 8017dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dbe:	61bb      	str	r3, [r7, #24]
 8017dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dc2:	6979      	ldr	r1, [r7, #20]
 8017dc4:	69ba      	ldr	r2, [r7, #24]
 8017dc6:	e841 2300 	strex	r3, r2, [r1]
 8017dca:	613b      	str	r3, [r7, #16]
   return(result);
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d1e6      	bne.n	8017da0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2220      	movs	r2, #32
 8017dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2200      	movs	r2, #0
 8017dde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	2200      	movs	r2, #0
 8017de4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8017de6:	bf00      	nop
 8017de8:	3754      	adds	r7, #84	@ 0x54
 8017dea:	46bd      	mov	sp, r7
 8017dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df0:	4770      	bx	lr

08017df2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017df2:	b480      	push	{r7}
 8017df4:	b085      	sub	sp, #20
 8017df6:	af00      	add	r7, sp, #0
 8017df8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d101      	bne.n	8017e08 <HAL_UARTEx_DisableFifoMode+0x16>
 8017e04:	2302      	movs	r3, #2
 8017e06:	e027      	b.n	8017e58 <HAL_UARTEx_DisableFifoMode+0x66>
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	2201      	movs	r2, #1
 8017e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	2224      	movs	r2, #36	@ 0x24
 8017e14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	f022 0201 	bic.w	r2, r2, #1
 8017e2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8017e36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	68fa      	ldr	r2, [r7, #12]
 8017e44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	2220      	movs	r2, #32
 8017e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	2200      	movs	r2, #0
 8017e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017e56:	2300      	movs	r3, #0
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3714      	adds	r7, #20
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e62:	4770      	bx	lr

08017e64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8017e74:	2b01      	cmp	r3, #1
 8017e76:	d101      	bne.n	8017e7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017e78:	2302      	movs	r3, #2
 8017e7a:	e02d      	b.n	8017ed8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2201      	movs	r2, #1
 8017e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2224      	movs	r2, #36	@ 0x24
 8017e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	681a      	ldr	r2, [r3, #0]
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	f022 0201 	bic.w	r2, r2, #1
 8017ea2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	689b      	ldr	r3, [r3, #8]
 8017eaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	683a      	ldr	r2, [r7, #0]
 8017eb4:	430a      	orrs	r2, r1
 8017eb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f000 f84f 	bl	8017f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	68fa      	ldr	r2, [r7, #12]
 8017ec4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2220      	movs	r2, #32
 8017eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017ed6:	2300      	movs	r3, #0
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	3710      	adds	r7, #16
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}

08017ee0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b084      	sub	sp, #16
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
 8017ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8017ef0:	2b01      	cmp	r3, #1
 8017ef2:	d101      	bne.n	8017ef8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017ef4:	2302      	movs	r3, #2
 8017ef6:	e02d      	b.n	8017f54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	2201      	movs	r2, #1
 8017efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2224      	movs	r2, #36	@ 0x24
 8017f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	681a      	ldr	r2, [r3, #0]
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f022 0201 	bic.w	r2, r2, #1
 8017f1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	689b      	ldr	r3, [r3, #8]
 8017f26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	683a      	ldr	r2, [r7, #0]
 8017f30:	430a      	orrs	r2, r1
 8017f32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f000 f811 	bl	8017f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	68fa      	ldr	r2, [r7, #12]
 8017f40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	2220      	movs	r2, #32
 8017f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017f52:	2300      	movs	r3, #0
}
 8017f54:	4618      	mov	r0, r3
 8017f56:	3710      	adds	r7, #16
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}

08017f5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b085      	sub	sp, #20
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d108      	bne.n	8017f7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	2201      	movs	r2, #1
 8017f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2201      	movs	r2, #1
 8017f78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017f7c:	e031      	b.n	8017fe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8017f7e:	2308      	movs	r3, #8
 8017f80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8017f82:	2308      	movs	r3, #8
 8017f84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	689b      	ldr	r3, [r3, #8]
 8017f8c:	0e5b      	lsrs	r3, r3, #25
 8017f8e:	b2db      	uxtb	r3, r3
 8017f90:	f003 0307 	and.w	r3, r3, #7
 8017f94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	689b      	ldr	r3, [r3, #8]
 8017f9c:	0f5b      	lsrs	r3, r3, #29
 8017f9e:	b2db      	uxtb	r3, r3
 8017fa0:	f003 0307 	and.w	r3, r3, #7
 8017fa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017fa6:	7bbb      	ldrb	r3, [r7, #14]
 8017fa8:	7b3a      	ldrb	r2, [r7, #12]
 8017faa:	4911      	ldr	r1, [pc, #68]	@ (8017ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8017fac:	5c8a      	ldrb	r2, [r1, r2]
 8017fae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8017fb2:	7b3a      	ldrb	r2, [r7, #12]
 8017fb4:	490f      	ldr	r1, [pc, #60]	@ (8017ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8017fb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8017fbc:	b29a      	uxth	r2, r3
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017fc4:	7bfb      	ldrb	r3, [r7, #15]
 8017fc6:	7b7a      	ldrb	r2, [r7, #13]
 8017fc8:	4909      	ldr	r1, [pc, #36]	@ (8017ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8017fca:	5c8a      	ldrb	r2, [r1, r2]
 8017fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8017fd0:	7b7a      	ldrb	r2, [r7, #13]
 8017fd2:	4908      	ldr	r1, [pc, #32]	@ (8017ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8017fd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8017fda:	b29a      	uxth	r2, r3
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8017fe2:	bf00      	nop
 8017fe4:	3714      	adds	r7, #20
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fec:	4770      	bx	lr
 8017fee:	bf00      	nop
 8017ff0:	0802bd70 	.word	0x0802bd70
 8017ff4:	0802bd78 	.word	0x0802bd78

08017ff8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8017ff8:	b480      	push	{r7}
 8017ffa:	b085      	sub	sp, #20
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018000:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8018004:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	43db      	mvns	r3, r3
 801800e:	401a      	ands	r2, r3
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8018014:	2300      	movs	r3, #0
}
 8018016:	4618      	mov	r0, r3
 8018018:	3714      	adds	r7, #20
 801801a:	46bd      	mov	sp, r7
 801801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018020:	4770      	bx	lr

08018022 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8018022:	b480      	push	{r7}
 8018024:	b083      	sub	sp, #12
 8018026:	af00      	add	r7, sp, #0
 8018028:	6078      	str	r0, [r7, #4]
 801802a:	460b      	mov	r3, r1
 801802c:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 801802e:	78fb      	ldrb	r3, [r7, #3]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d106      	bne.n	8018042 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018038:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	641a      	str	r2, [r3, #64]	@ 0x40
 8018040:	e00b      	b.n	801805a <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8018042:	78fb      	ldrb	r3, [r7, #3]
 8018044:	2b01      	cmp	r3, #1
 8018046:	d106      	bne.n	8018056 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801804c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	641a      	str	r2, [r3, #64]	@ 0x40
 8018054:	e001      	b.n	801805a <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8018056:	2301      	movs	r3, #1
 8018058:	e000      	b.n	801805c <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 801805a:	2300      	movs	r3, #0
}
 801805c:	4618      	mov	r0, r3
 801805e:	370c      	adds	r7, #12
 8018060:	46bd      	mov	sp, r7
 8018062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018066:	4770      	bx	lr

08018068 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8018068:	b084      	sub	sp, #16
 801806a:	b580      	push	{r7, lr}
 801806c:	b084      	sub	sp, #16
 801806e:	af00      	add	r7, sp, #0
 8018070:	6078      	str	r0, [r7, #4]
 8018072:	f107 001c 	add.w	r0, r7, #28
 8018076:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2201      	movs	r2, #1
 801807e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018084:	f023 0201 	bic.w	r2, r3, #1
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 801808c:	2100      	movs	r1, #0
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f7ff ffc7 	bl	8018022 <USB_SetCurrentMode>
 8018094:	4603      	mov	r3, r0
 8018096:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	2200      	movs	r2, #0
 801809c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 801809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	3710      	adds	r7, #16
 80180a4:	46bd      	mov	sp, r7
 80180a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80180aa:	b004      	add	sp, #16
 80180ac:	4770      	bx	lr
	...

080180b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b084      	sub	sp, #16
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	4603      	mov	r3, r0
 80180b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80180ba:	79fb      	ldrb	r3, [r7, #7]
 80180bc:	4a08      	ldr	r2, [pc, #32]	@ (80180e0 <disk_status+0x30>)
 80180be:	009b      	lsls	r3, r3, #2
 80180c0:	4413      	add	r3, r2
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	685b      	ldr	r3, [r3, #4]
 80180c6:	79fa      	ldrb	r2, [r7, #7]
 80180c8:	4905      	ldr	r1, [pc, #20]	@ (80180e0 <disk_status+0x30>)
 80180ca:	440a      	add	r2, r1
 80180cc:	7a12      	ldrb	r2, [r2, #8]
 80180ce:	4610      	mov	r0, r2
 80180d0:	4798      	blx	r3
 80180d2:	4603      	mov	r3, r0
 80180d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80180d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3710      	adds	r7, #16
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	2001c8ac 	.word	0x2001c8ac

080180e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b084      	sub	sp, #16
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	4603      	mov	r3, r0
 80180ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80180ee:	2300      	movs	r3, #0
 80180f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80180f2:	79fb      	ldrb	r3, [r7, #7]
 80180f4:	4a0d      	ldr	r2, [pc, #52]	@ (801812c <disk_initialize+0x48>)
 80180f6:	5cd3      	ldrb	r3, [r2, r3]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d111      	bne.n	8018120 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80180fc:	79fb      	ldrb	r3, [r7, #7]
 80180fe:	4a0b      	ldr	r2, [pc, #44]	@ (801812c <disk_initialize+0x48>)
 8018100:	2101      	movs	r1, #1
 8018102:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8018104:	79fb      	ldrb	r3, [r7, #7]
 8018106:	4a09      	ldr	r2, [pc, #36]	@ (801812c <disk_initialize+0x48>)
 8018108:	009b      	lsls	r3, r3, #2
 801810a:	4413      	add	r3, r2
 801810c:	685b      	ldr	r3, [r3, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	79fa      	ldrb	r2, [r7, #7]
 8018112:	4906      	ldr	r1, [pc, #24]	@ (801812c <disk_initialize+0x48>)
 8018114:	440a      	add	r2, r1
 8018116:	7a12      	ldrb	r2, [r2, #8]
 8018118:	4610      	mov	r0, r2
 801811a:	4798      	blx	r3
 801811c:	4603      	mov	r3, r0
 801811e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8018120:	7bfb      	ldrb	r3, [r7, #15]
}
 8018122:	4618      	mov	r0, r3
 8018124:	3710      	adds	r7, #16
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	2001c8ac 	.word	0x2001c8ac

08018130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8018130:	b590      	push	{r4, r7, lr}
 8018132:	b087      	sub	sp, #28
 8018134:	af00      	add	r7, sp, #0
 8018136:	60b9      	str	r1, [r7, #8]
 8018138:	607a      	str	r2, [r7, #4]
 801813a:	603b      	str	r3, [r7, #0]
 801813c:	4603      	mov	r3, r0
 801813e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8018140:	7bfb      	ldrb	r3, [r7, #15]
 8018142:	4a0a      	ldr	r2, [pc, #40]	@ (801816c <disk_read+0x3c>)
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	4413      	add	r3, r2
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	689c      	ldr	r4, [r3, #8]
 801814c:	7bfb      	ldrb	r3, [r7, #15]
 801814e:	4a07      	ldr	r2, [pc, #28]	@ (801816c <disk_read+0x3c>)
 8018150:	4413      	add	r3, r2
 8018152:	7a18      	ldrb	r0, [r3, #8]
 8018154:	683b      	ldr	r3, [r7, #0]
 8018156:	687a      	ldr	r2, [r7, #4]
 8018158:	68b9      	ldr	r1, [r7, #8]
 801815a:	47a0      	blx	r4
 801815c:	4603      	mov	r3, r0
 801815e:	75fb      	strb	r3, [r7, #23]
  return res;
 8018160:	7dfb      	ldrb	r3, [r7, #23]
}
 8018162:	4618      	mov	r0, r3
 8018164:	371c      	adds	r7, #28
 8018166:	46bd      	mov	sp, r7
 8018168:	bd90      	pop	{r4, r7, pc}
 801816a:	bf00      	nop
 801816c:	2001c8ac 	.word	0x2001c8ac

08018170 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8018170:	b590      	push	{r4, r7, lr}
 8018172:	b087      	sub	sp, #28
 8018174:	af00      	add	r7, sp, #0
 8018176:	60b9      	str	r1, [r7, #8]
 8018178:	607a      	str	r2, [r7, #4]
 801817a:	603b      	str	r3, [r7, #0]
 801817c:	4603      	mov	r3, r0
 801817e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8018180:	7bfb      	ldrb	r3, [r7, #15]
 8018182:	4a0a      	ldr	r2, [pc, #40]	@ (80181ac <disk_write+0x3c>)
 8018184:	009b      	lsls	r3, r3, #2
 8018186:	4413      	add	r3, r2
 8018188:	685b      	ldr	r3, [r3, #4]
 801818a:	68dc      	ldr	r4, [r3, #12]
 801818c:	7bfb      	ldrb	r3, [r7, #15]
 801818e:	4a07      	ldr	r2, [pc, #28]	@ (80181ac <disk_write+0x3c>)
 8018190:	4413      	add	r3, r2
 8018192:	7a18      	ldrb	r0, [r3, #8]
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	687a      	ldr	r2, [r7, #4]
 8018198:	68b9      	ldr	r1, [r7, #8]
 801819a:	47a0      	blx	r4
 801819c:	4603      	mov	r3, r0
 801819e:	75fb      	strb	r3, [r7, #23]
  return res;
 80181a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80181a2:	4618      	mov	r0, r3
 80181a4:	371c      	adds	r7, #28
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd90      	pop	{r4, r7, pc}
 80181aa:	bf00      	nop
 80181ac:	2001c8ac 	.word	0x2001c8ac

080181b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	4603      	mov	r3, r0
 80181b8:	603a      	str	r2, [r7, #0]
 80181ba:	71fb      	strb	r3, [r7, #7]
 80181bc:	460b      	mov	r3, r1
 80181be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80181c0:	79fb      	ldrb	r3, [r7, #7]
 80181c2:	4a09      	ldr	r2, [pc, #36]	@ (80181e8 <disk_ioctl+0x38>)
 80181c4:	009b      	lsls	r3, r3, #2
 80181c6:	4413      	add	r3, r2
 80181c8:	685b      	ldr	r3, [r3, #4]
 80181ca:	691b      	ldr	r3, [r3, #16]
 80181cc:	79fa      	ldrb	r2, [r7, #7]
 80181ce:	4906      	ldr	r1, [pc, #24]	@ (80181e8 <disk_ioctl+0x38>)
 80181d0:	440a      	add	r2, r1
 80181d2:	7a10      	ldrb	r0, [r2, #8]
 80181d4:	79b9      	ldrb	r1, [r7, #6]
 80181d6:	683a      	ldr	r2, [r7, #0]
 80181d8:	4798      	blx	r3
 80181da:	4603      	mov	r3, r0
 80181dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80181de:	7bfb      	ldrb	r3, [r7, #15]
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3710      	adds	r7, #16
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}
 80181e8:	2001c8ac 	.word	0x2001c8ac

080181ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80181ec:	b480      	push	{r7}
 80181ee:	b085      	sub	sp, #20
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	3301      	adds	r3, #1
 80181f8:	781b      	ldrb	r3, [r3, #0]
 80181fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80181fc:	89fb      	ldrh	r3, [r7, #14]
 80181fe:	021b      	lsls	r3, r3, #8
 8018200:	b21a      	sxth	r2, r3
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	781b      	ldrb	r3, [r3, #0]
 8018206:	b21b      	sxth	r3, r3
 8018208:	4313      	orrs	r3, r2
 801820a:	b21b      	sxth	r3, r3
 801820c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801820e:	89fb      	ldrh	r3, [r7, #14]
}
 8018210:	4618      	mov	r0, r3
 8018212:	3714      	adds	r7, #20
 8018214:	46bd      	mov	sp, r7
 8018216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821a:	4770      	bx	lr

0801821c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801821c:	b480      	push	{r7}
 801821e:	b085      	sub	sp, #20
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	3303      	adds	r3, #3
 8018228:	781b      	ldrb	r3, [r3, #0]
 801822a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	021b      	lsls	r3, r3, #8
 8018230:	687a      	ldr	r2, [r7, #4]
 8018232:	3202      	adds	r2, #2
 8018234:	7812      	ldrb	r2, [r2, #0]
 8018236:	4313      	orrs	r3, r2
 8018238:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	021b      	lsls	r3, r3, #8
 801823e:	687a      	ldr	r2, [r7, #4]
 8018240:	3201      	adds	r2, #1
 8018242:	7812      	ldrb	r2, [r2, #0]
 8018244:	4313      	orrs	r3, r2
 8018246:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	021b      	lsls	r3, r3, #8
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	7812      	ldrb	r2, [r2, #0]
 8018250:	4313      	orrs	r3, r2
 8018252:	60fb      	str	r3, [r7, #12]
	return rv;
 8018254:	68fb      	ldr	r3, [r7, #12]
}
 8018256:	4618      	mov	r0, r3
 8018258:	3714      	adds	r7, #20
 801825a:	46bd      	mov	sp, r7
 801825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018260:	4770      	bx	lr

08018262 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8018262:	b480      	push	{r7}
 8018264:	b083      	sub	sp, #12
 8018266:	af00      	add	r7, sp, #0
 8018268:	6078      	str	r0, [r7, #4]
 801826a:	460b      	mov	r3, r1
 801826c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	1c5a      	adds	r2, r3, #1
 8018272:	607a      	str	r2, [r7, #4]
 8018274:	887a      	ldrh	r2, [r7, #2]
 8018276:	b2d2      	uxtb	r2, r2
 8018278:	701a      	strb	r2, [r3, #0]
 801827a:	887b      	ldrh	r3, [r7, #2]
 801827c:	0a1b      	lsrs	r3, r3, #8
 801827e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	1c5a      	adds	r2, r3, #1
 8018284:	607a      	str	r2, [r7, #4]
 8018286:	887a      	ldrh	r2, [r7, #2]
 8018288:	b2d2      	uxtb	r2, r2
 801828a:	701a      	strb	r2, [r3, #0]
}
 801828c:	bf00      	nop
 801828e:	370c      	adds	r7, #12
 8018290:	46bd      	mov	sp, r7
 8018292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018296:	4770      	bx	lr

08018298 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8018298:	b480      	push	{r7}
 801829a:	b083      	sub	sp, #12
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
 80182a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	1c5a      	adds	r2, r3, #1
 80182a6:	607a      	str	r2, [r7, #4]
 80182a8:	683a      	ldr	r2, [r7, #0]
 80182aa:	b2d2      	uxtb	r2, r2
 80182ac:	701a      	strb	r2, [r3, #0]
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	0a1b      	lsrs	r3, r3, #8
 80182b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	1c5a      	adds	r2, r3, #1
 80182b8:	607a      	str	r2, [r7, #4]
 80182ba:	683a      	ldr	r2, [r7, #0]
 80182bc:	b2d2      	uxtb	r2, r2
 80182be:	701a      	strb	r2, [r3, #0]
 80182c0:	683b      	ldr	r3, [r7, #0]
 80182c2:	0a1b      	lsrs	r3, r3, #8
 80182c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	1c5a      	adds	r2, r3, #1
 80182ca:	607a      	str	r2, [r7, #4]
 80182cc:	683a      	ldr	r2, [r7, #0]
 80182ce:	b2d2      	uxtb	r2, r2
 80182d0:	701a      	strb	r2, [r3, #0]
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	0a1b      	lsrs	r3, r3, #8
 80182d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	1c5a      	adds	r2, r3, #1
 80182dc:	607a      	str	r2, [r7, #4]
 80182de:	683a      	ldr	r2, [r7, #0]
 80182e0:	b2d2      	uxtb	r2, r2
 80182e2:	701a      	strb	r2, [r3, #0]
}
 80182e4:	bf00      	nop
 80182e6:	370c      	adds	r7, #12
 80182e8:	46bd      	mov	sp, r7
 80182ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ee:	4770      	bx	lr

080182f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80182f0:	b480      	push	{r7}
 80182f2:	b087      	sub	sp, #28
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	60f8      	str	r0, [r7, #12]
 80182f8:	60b9      	str	r1, [r7, #8]
 80182fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d00d      	beq.n	8018326 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801830a:	693a      	ldr	r2, [r7, #16]
 801830c:	1c53      	adds	r3, r2, #1
 801830e:	613b      	str	r3, [r7, #16]
 8018310:	697b      	ldr	r3, [r7, #20]
 8018312:	1c59      	adds	r1, r3, #1
 8018314:	6179      	str	r1, [r7, #20]
 8018316:	7812      	ldrb	r2, [r2, #0]
 8018318:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	3b01      	subs	r3, #1
 801831e:	607b      	str	r3, [r7, #4]
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d1f1      	bne.n	801830a <mem_cpy+0x1a>
	}
}
 8018326:	bf00      	nop
 8018328:	371c      	adds	r7, #28
 801832a:	46bd      	mov	sp, r7
 801832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018330:	4770      	bx	lr

08018332 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8018332:	b480      	push	{r7}
 8018334:	b087      	sub	sp, #28
 8018336:	af00      	add	r7, sp, #0
 8018338:	60f8      	str	r0, [r7, #12]
 801833a:	60b9      	str	r1, [r7, #8]
 801833c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	1c5a      	adds	r2, r3, #1
 8018346:	617a      	str	r2, [r7, #20]
 8018348:	68ba      	ldr	r2, [r7, #8]
 801834a:	b2d2      	uxtb	r2, r2
 801834c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	3b01      	subs	r3, #1
 8018352:	607b      	str	r3, [r7, #4]
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d1f3      	bne.n	8018342 <mem_set+0x10>
}
 801835a:	bf00      	nop
 801835c:	bf00      	nop
 801835e:	371c      	adds	r7, #28
 8018360:	46bd      	mov	sp, r7
 8018362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018366:	4770      	bx	lr

08018368 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8018368:	b480      	push	{r7}
 801836a:	b089      	sub	sp, #36	@ 0x24
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	60b9      	str	r1, [r7, #8]
 8018372:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	61fb      	str	r3, [r7, #28]
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801837c:	2300      	movs	r3, #0
 801837e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8018380:	69fb      	ldr	r3, [r7, #28]
 8018382:	1c5a      	adds	r2, r3, #1
 8018384:	61fa      	str	r2, [r7, #28]
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	4619      	mov	r1, r3
 801838a:	69bb      	ldr	r3, [r7, #24]
 801838c:	1c5a      	adds	r2, r3, #1
 801838e:	61ba      	str	r2, [r7, #24]
 8018390:	781b      	ldrb	r3, [r3, #0]
 8018392:	1acb      	subs	r3, r1, r3
 8018394:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	3b01      	subs	r3, #1
 801839a:	607b      	str	r3, [r7, #4]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d002      	beq.n	80183a8 <mem_cmp+0x40>
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d0eb      	beq.n	8018380 <mem_cmp+0x18>

	return r;
 80183a8:	697b      	ldr	r3, [r7, #20]
}
 80183aa:	4618      	mov	r0, r3
 80183ac:	3724      	adds	r7, #36	@ 0x24
 80183ae:	46bd      	mov	sp, r7
 80183b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b4:	4770      	bx	lr

080183b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80183b6:	b480      	push	{r7}
 80183b8:	b083      	sub	sp, #12
 80183ba:	af00      	add	r7, sp, #0
 80183bc:	6078      	str	r0, [r7, #4]
 80183be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80183c0:	e002      	b.n	80183c8 <chk_chr+0x12>
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	3301      	adds	r3, #1
 80183c6:	607b      	str	r3, [r7, #4]
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d005      	beq.n	80183dc <chk_chr+0x26>
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	461a      	mov	r2, r3
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	4293      	cmp	r3, r2
 80183da:	d1f2      	bne.n	80183c2 <chk_chr+0xc>
	return *str;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	781b      	ldrb	r3, [r3, #0]
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	370c      	adds	r7, #12
 80183e4:	46bd      	mov	sp, r7
 80183e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ea:	4770      	bx	lr

080183ec <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b082      	sub	sp, #8
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d009      	beq.n	801840e <lock_fs+0x22>
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	68db      	ldr	r3, [r3, #12]
 80183fe:	4618      	mov	r0, r3
 8018400:	f003 fc60 	bl	801bcc4 <ff_req_grant>
 8018404:	4603      	mov	r3, r0
 8018406:	2b00      	cmp	r3, #0
 8018408:	d001      	beq.n	801840e <lock_fs+0x22>
 801840a:	2301      	movs	r3, #1
 801840c:	e000      	b.n	8018410 <lock_fs+0x24>
 801840e:	2300      	movs	r3, #0
}
 8018410:	4618      	mov	r0, r3
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}

08018418 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
 8018420:	460b      	mov	r3, r1
 8018422:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d00d      	beq.n	8018446 <unlock_fs+0x2e>
 801842a:	78fb      	ldrb	r3, [r7, #3]
 801842c:	2b0c      	cmp	r3, #12
 801842e:	d00a      	beq.n	8018446 <unlock_fs+0x2e>
 8018430:	78fb      	ldrb	r3, [r7, #3]
 8018432:	2b0b      	cmp	r3, #11
 8018434:	d007      	beq.n	8018446 <unlock_fs+0x2e>
 8018436:	78fb      	ldrb	r3, [r7, #3]
 8018438:	2b0f      	cmp	r3, #15
 801843a:	d004      	beq.n	8018446 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	68db      	ldr	r3, [r3, #12]
 8018440:	4618      	mov	r0, r3
 8018442:	f003 fc54 	bl	801bcee <ff_rel_grant>
	}
}
 8018446:	bf00      	nop
 8018448:	3708      	adds	r7, #8
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}
	...

08018450 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8018450:	b480      	push	{r7}
 8018452:	b085      	sub	sp, #20
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
 8018458:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801845a:	2300      	movs	r3, #0
 801845c:	60bb      	str	r3, [r7, #8]
 801845e:	68bb      	ldr	r3, [r7, #8]
 8018460:	60fb      	str	r3, [r7, #12]
 8018462:	e029      	b.n	80184b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8018464:	4a27      	ldr	r2, [pc, #156]	@ (8018504 <chk_lock+0xb4>)
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	011b      	lsls	r3, r3, #4
 801846a:	4413      	add	r3, r2
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d01d      	beq.n	80184ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018472:	4a24      	ldr	r2, [pc, #144]	@ (8018504 <chk_lock+0xb4>)
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	011b      	lsls	r3, r3, #4
 8018478:	4413      	add	r3, r2
 801847a:	681a      	ldr	r2, [r3, #0]
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	429a      	cmp	r2, r3
 8018482:	d116      	bne.n	80184b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8018484:	4a1f      	ldr	r2, [pc, #124]	@ (8018504 <chk_lock+0xb4>)
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	011b      	lsls	r3, r3, #4
 801848a:	4413      	add	r3, r2
 801848c:	3304      	adds	r3, #4
 801848e:	681a      	ldr	r2, [r3, #0]
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018494:	429a      	cmp	r2, r3
 8018496:	d10c      	bne.n	80184b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8018498:	4a1a      	ldr	r2, [pc, #104]	@ (8018504 <chk_lock+0xb4>)
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	011b      	lsls	r3, r3, #4
 801849e:	4413      	add	r3, r2
 80184a0:	3308      	adds	r3, #8
 80184a2:	681a      	ldr	r2, [r3, #0]
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d102      	bne.n	80184b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80184ac:	e007      	b.n	80184be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80184ae:	2301      	movs	r3, #1
 80184b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	3301      	adds	r3, #1
 80184b6:	60fb      	str	r3, [r7, #12]
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	2b01      	cmp	r3, #1
 80184bc:	d9d2      	bls.n	8018464 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	2b02      	cmp	r3, #2
 80184c2:	d109      	bne.n	80184d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d102      	bne.n	80184d0 <chk_lock+0x80>
 80184ca:	683b      	ldr	r3, [r7, #0]
 80184cc:	2b02      	cmp	r3, #2
 80184ce:	d101      	bne.n	80184d4 <chk_lock+0x84>
 80184d0:	2300      	movs	r3, #0
 80184d2:	e010      	b.n	80184f6 <chk_lock+0xa6>
 80184d4:	2312      	movs	r3, #18
 80184d6:	e00e      	b.n	80184f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80184d8:	683b      	ldr	r3, [r7, #0]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d108      	bne.n	80184f0 <chk_lock+0xa0>
 80184de:	4a09      	ldr	r2, [pc, #36]	@ (8018504 <chk_lock+0xb4>)
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	011b      	lsls	r3, r3, #4
 80184e4:	4413      	add	r3, r2
 80184e6:	330c      	adds	r3, #12
 80184e8:	881b      	ldrh	r3, [r3, #0]
 80184ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80184ee:	d101      	bne.n	80184f4 <chk_lock+0xa4>
 80184f0:	2310      	movs	r3, #16
 80184f2:	e000      	b.n	80184f6 <chk_lock+0xa6>
 80184f4:	2300      	movs	r3, #0
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3714      	adds	r7, #20
 80184fa:	46bd      	mov	sp, r7
 80184fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018500:	4770      	bx	lr
 8018502:	bf00      	nop
 8018504:	2001c88c 	.word	0x2001c88c

08018508 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8018508:	b480      	push	{r7}
 801850a:	b083      	sub	sp, #12
 801850c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801850e:	2300      	movs	r3, #0
 8018510:	607b      	str	r3, [r7, #4]
 8018512:	e002      	b.n	801851a <enq_lock+0x12>
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	3301      	adds	r3, #1
 8018518:	607b      	str	r3, [r7, #4]
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	2b01      	cmp	r3, #1
 801851e:	d806      	bhi.n	801852e <enq_lock+0x26>
 8018520:	4a09      	ldr	r2, [pc, #36]	@ (8018548 <enq_lock+0x40>)
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	011b      	lsls	r3, r3, #4
 8018526:	4413      	add	r3, r2
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d1f2      	bne.n	8018514 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2b02      	cmp	r3, #2
 8018532:	bf14      	ite	ne
 8018534:	2301      	movne	r3, #1
 8018536:	2300      	moveq	r3, #0
 8018538:	b2db      	uxtb	r3, r3
}
 801853a:	4618      	mov	r0, r3
 801853c:	370c      	adds	r7, #12
 801853e:	46bd      	mov	sp, r7
 8018540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018544:	4770      	bx	lr
 8018546:	bf00      	nop
 8018548:	2001c88c 	.word	0x2001c88c

0801854c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801854c:	b480      	push	{r7}
 801854e:	b085      	sub	sp, #20
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8018556:	2300      	movs	r3, #0
 8018558:	60fb      	str	r3, [r7, #12]
 801855a:	e01f      	b.n	801859c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801855c:	4a41      	ldr	r2, [pc, #260]	@ (8018664 <inc_lock+0x118>)
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	011b      	lsls	r3, r3, #4
 8018562:	4413      	add	r3, r2
 8018564:	681a      	ldr	r2, [r3, #0]
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	429a      	cmp	r2, r3
 801856c:	d113      	bne.n	8018596 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801856e:	4a3d      	ldr	r2, [pc, #244]	@ (8018664 <inc_lock+0x118>)
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	011b      	lsls	r3, r3, #4
 8018574:	4413      	add	r3, r2
 8018576:	3304      	adds	r3, #4
 8018578:	681a      	ldr	r2, [r3, #0]
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801857e:	429a      	cmp	r2, r3
 8018580:	d109      	bne.n	8018596 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8018582:	4a38      	ldr	r2, [pc, #224]	@ (8018664 <inc_lock+0x118>)
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	011b      	lsls	r3, r3, #4
 8018588:	4413      	add	r3, r2
 801858a:	3308      	adds	r3, #8
 801858c:	681a      	ldr	r2, [r3, #0]
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8018592:	429a      	cmp	r2, r3
 8018594:	d006      	beq.n	80185a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	3301      	adds	r3, #1
 801859a:	60fb      	str	r3, [r7, #12]
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2b01      	cmp	r3, #1
 80185a0:	d9dc      	bls.n	801855c <inc_lock+0x10>
 80185a2:	e000      	b.n	80185a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80185a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	2b02      	cmp	r3, #2
 80185aa:	d132      	bne.n	8018612 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80185ac:	2300      	movs	r3, #0
 80185ae:	60fb      	str	r3, [r7, #12]
 80185b0:	e002      	b.n	80185b8 <inc_lock+0x6c>
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	3301      	adds	r3, #1
 80185b6:	60fb      	str	r3, [r7, #12]
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	2b01      	cmp	r3, #1
 80185bc:	d806      	bhi.n	80185cc <inc_lock+0x80>
 80185be:	4a29      	ldr	r2, [pc, #164]	@ (8018664 <inc_lock+0x118>)
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	011b      	lsls	r3, r3, #4
 80185c4:	4413      	add	r3, r2
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d1f2      	bne.n	80185b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	2b02      	cmp	r3, #2
 80185d0:	d101      	bne.n	80185d6 <inc_lock+0x8a>
 80185d2:	2300      	movs	r3, #0
 80185d4:	e040      	b.n	8018658 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681a      	ldr	r2, [r3, #0]
 80185da:	4922      	ldr	r1, [pc, #136]	@ (8018664 <inc_lock+0x118>)
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	011b      	lsls	r3, r3, #4
 80185e0:	440b      	add	r3, r1
 80185e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	689a      	ldr	r2, [r3, #8]
 80185e8:	491e      	ldr	r1, [pc, #120]	@ (8018664 <inc_lock+0x118>)
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	011b      	lsls	r3, r3, #4
 80185ee:	440b      	add	r3, r1
 80185f0:	3304      	adds	r3, #4
 80185f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	695a      	ldr	r2, [r3, #20]
 80185f8:	491a      	ldr	r1, [pc, #104]	@ (8018664 <inc_lock+0x118>)
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	011b      	lsls	r3, r3, #4
 80185fe:	440b      	add	r3, r1
 8018600:	3308      	adds	r3, #8
 8018602:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8018604:	4a17      	ldr	r2, [pc, #92]	@ (8018664 <inc_lock+0x118>)
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	011b      	lsls	r3, r3, #4
 801860a:	4413      	add	r3, r2
 801860c:	330c      	adds	r3, #12
 801860e:	2200      	movs	r2, #0
 8018610:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d009      	beq.n	801862c <inc_lock+0xe0>
 8018618:	4a12      	ldr	r2, [pc, #72]	@ (8018664 <inc_lock+0x118>)
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	011b      	lsls	r3, r3, #4
 801861e:	4413      	add	r3, r2
 8018620:	330c      	adds	r3, #12
 8018622:	881b      	ldrh	r3, [r3, #0]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d001      	beq.n	801862c <inc_lock+0xe0>
 8018628:	2300      	movs	r3, #0
 801862a:	e015      	b.n	8018658 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d108      	bne.n	8018644 <inc_lock+0xf8>
 8018632:	4a0c      	ldr	r2, [pc, #48]	@ (8018664 <inc_lock+0x118>)
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	011b      	lsls	r3, r3, #4
 8018638:	4413      	add	r3, r2
 801863a:	330c      	adds	r3, #12
 801863c:	881b      	ldrh	r3, [r3, #0]
 801863e:	3301      	adds	r3, #1
 8018640:	b29a      	uxth	r2, r3
 8018642:	e001      	b.n	8018648 <inc_lock+0xfc>
 8018644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018648:	4906      	ldr	r1, [pc, #24]	@ (8018664 <inc_lock+0x118>)
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	011b      	lsls	r3, r3, #4
 801864e:	440b      	add	r3, r1
 8018650:	330c      	adds	r3, #12
 8018652:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	3301      	adds	r3, #1
}
 8018658:	4618      	mov	r0, r3
 801865a:	3714      	adds	r7, #20
 801865c:	46bd      	mov	sp, r7
 801865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018662:	4770      	bx	lr
 8018664:	2001c88c 	.word	0x2001c88c

08018668 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8018668:	b480      	push	{r7}
 801866a:	b085      	sub	sp, #20
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	3b01      	subs	r3, #1
 8018674:	607b      	str	r3, [r7, #4]
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2b01      	cmp	r3, #1
 801867a:	d825      	bhi.n	80186c8 <dec_lock+0x60>
		n = Files[i].ctr;
 801867c:	4a17      	ldr	r2, [pc, #92]	@ (80186dc <dec_lock+0x74>)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	011b      	lsls	r3, r3, #4
 8018682:	4413      	add	r3, r2
 8018684:	330c      	adds	r3, #12
 8018686:	881b      	ldrh	r3, [r3, #0]
 8018688:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801868a:	89fb      	ldrh	r3, [r7, #14]
 801868c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018690:	d101      	bne.n	8018696 <dec_lock+0x2e>
 8018692:	2300      	movs	r3, #0
 8018694:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8018696:	89fb      	ldrh	r3, [r7, #14]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d002      	beq.n	80186a2 <dec_lock+0x3a>
 801869c:	89fb      	ldrh	r3, [r7, #14]
 801869e:	3b01      	subs	r3, #1
 80186a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80186a2:	4a0e      	ldr	r2, [pc, #56]	@ (80186dc <dec_lock+0x74>)
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	011b      	lsls	r3, r3, #4
 80186a8:	4413      	add	r3, r2
 80186aa:	330c      	adds	r3, #12
 80186ac:	89fa      	ldrh	r2, [r7, #14]
 80186ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80186b0:	89fb      	ldrh	r3, [r7, #14]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d105      	bne.n	80186c2 <dec_lock+0x5a>
 80186b6:	4a09      	ldr	r2, [pc, #36]	@ (80186dc <dec_lock+0x74>)
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	011b      	lsls	r3, r3, #4
 80186bc:	4413      	add	r3, r2
 80186be:	2200      	movs	r2, #0
 80186c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80186c2:	2300      	movs	r3, #0
 80186c4:	737b      	strb	r3, [r7, #13]
 80186c6:	e001      	b.n	80186cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80186c8:	2302      	movs	r3, #2
 80186ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80186cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80186ce:	4618      	mov	r0, r3
 80186d0:	3714      	adds	r7, #20
 80186d2:	46bd      	mov	sp, r7
 80186d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d8:	4770      	bx	lr
 80186da:	bf00      	nop
 80186dc:	2001c88c 	.word	0x2001c88c

080186e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80186e0:	b480      	push	{r7}
 80186e2:	b085      	sub	sp, #20
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80186e8:	2300      	movs	r3, #0
 80186ea:	60fb      	str	r3, [r7, #12]
 80186ec:	e010      	b.n	8018710 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80186ee:	4a0d      	ldr	r2, [pc, #52]	@ (8018724 <clear_lock+0x44>)
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	011b      	lsls	r3, r3, #4
 80186f4:	4413      	add	r3, r2
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	687a      	ldr	r2, [r7, #4]
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d105      	bne.n	801870a <clear_lock+0x2a>
 80186fe:	4a09      	ldr	r2, [pc, #36]	@ (8018724 <clear_lock+0x44>)
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	011b      	lsls	r3, r3, #4
 8018704:	4413      	add	r3, r2
 8018706:	2200      	movs	r2, #0
 8018708:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	3301      	adds	r3, #1
 801870e:	60fb      	str	r3, [r7, #12]
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	2b01      	cmp	r3, #1
 8018714:	d9eb      	bls.n	80186ee <clear_lock+0xe>
	}
}
 8018716:	bf00      	nop
 8018718:	bf00      	nop
 801871a:	3714      	adds	r7, #20
 801871c:	46bd      	mov	sp, r7
 801871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018722:	4770      	bx	lr
 8018724:	2001c88c 	.word	0x2001c88c

08018728 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b086      	sub	sp, #24
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8018730:	2300      	movs	r3, #0
 8018732:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	78db      	ldrb	r3, [r3, #3]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d034      	beq.n	80187a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018740:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	7858      	ldrb	r0, [r3, #1]
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801874c:	2301      	movs	r3, #1
 801874e:	697a      	ldr	r2, [r7, #20]
 8018750:	f7ff fd0e 	bl	8018170 <disk_write>
 8018754:	4603      	mov	r3, r0
 8018756:	2b00      	cmp	r3, #0
 8018758:	d002      	beq.n	8018760 <sync_window+0x38>
			res = FR_DISK_ERR;
 801875a:	2301      	movs	r3, #1
 801875c:	73fb      	strb	r3, [r7, #15]
 801875e:	e022      	b.n	80187a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	2200      	movs	r2, #0
 8018764:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801876a:	697a      	ldr	r2, [r7, #20]
 801876c:	1ad2      	subs	r2, r2, r3
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	6a1b      	ldr	r3, [r3, #32]
 8018772:	429a      	cmp	r2, r3
 8018774:	d217      	bcs.n	80187a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	789b      	ldrb	r3, [r3, #2]
 801877a:	613b      	str	r3, [r7, #16]
 801877c:	e010      	b.n	80187a0 <sync_window+0x78>
					wsect += fs->fsize;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6a1b      	ldr	r3, [r3, #32]
 8018782:	697a      	ldr	r2, [r7, #20]
 8018784:	4413      	add	r3, r2
 8018786:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	7858      	ldrb	r0, [r3, #1]
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8018792:	2301      	movs	r3, #1
 8018794:	697a      	ldr	r2, [r7, #20]
 8018796:	f7ff fceb 	bl	8018170 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801879a:	693b      	ldr	r3, [r7, #16]
 801879c:	3b01      	subs	r3, #1
 801879e:	613b      	str	r3, [r7, #16]
 80187a0:	693b      	ldr	r3, [r7, #16]
 80187a2:	2b01      	cmp	r3, #1
 80187a4:	d8eb      	bhi.n	801877e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80187a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80187a8:	4618      	mov	r0, r3
 80187aa:	3718      	adds	r7, #24
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}

080187b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b084      	sub	sp, #16
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
 80187b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80187ba:	2300      	movs	r3, #0
 80187bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80187c2:	683a      	ldr	r2, [r7, #0]
 80187c4:	429a      	cmp	r2, r3
 80187c6:	d01b      	beq.n	8018800 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f7ff ffad 	bl	8018728 <sync_window>
 80187ce:	4603      	mov	r3, r0
 80187d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80187d2:	7bfb      	ldrb	r3, [r7, #15]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d113      	bne.n	8018800 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	7858      	ldrb	r0, [r3, #1]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80187e2:	2301      	movs	r3, #1
 80187e4:	683a      	ldr	r2, [r7, #0]
 80187e6:	f7ff fca3 	bl	8018130 <disk_read>
 80187ea:	4603      	mov	r3, r0
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d004      	beq.n	80187fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80187f0:	f04f 33ff 	mov.w	r3, #4294967295
 80187f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80187f6:	2301      	movs	r3, #1
 80187f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	683a      	ldr	r2, [r7, #0]
 80187fe:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8018800:	7bfb      	ldrb	r3, [r7, #15]
}
 8018802:	4618      	mov	r0, r3
 8018804:	3710      	adds	r7, #16
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}
	...

0801880c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b084      	sub	sp, #16
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8018814:	6878      	ldr	r0, [r7, #4]
 8018816:	f7ff ff87 	bl	8018728 <sync_window>
 801881a:	4603      	mov	r3, r0
 801881c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801881e:	7bfb      	ldrb	r3, [r7, #15]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d158      	bne.n	80188d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	781b      	ldrb	r3, [r3, #0]
 8018828:	2b03      	cmp	r3, #3
 801882a:	d148      	bne.n	80188be <sync_fs+0xb2>
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	791b      	ldrb	r3, [r3, #4]
 8018830:	2b01      	cmp	r3, #1
 8018832:	d144      	bne.n	80188be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	3338      	adds	r3, #56	@ 0x38
 8018838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801883c:	2100      	movs	r1, #0
 801883e:	4618      	mov	r0, r3
 8018840:	f7ff fd77 	bl	8018332 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	3338      	adds	r3, #56	@ 0x38
 8018848:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801884c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8018850:	4618      	mov	r0, r3
 8018852:	f7ff fd06 	bl	8018262 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	3338      	adds	r3, #56	@ 0x38
 801885a:	4921      	ldr	r1, [pc, #132]	@ (80188e0 <sync_fs+0xd4>)
 801885c:	4618      	mov	r0, r3
 801885e:	f7ff fd1b 	bl	8018298 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	3338      	adds	r3, #56	@ 0x38
 8018866:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801886a:	491e      	ldr	r1, [pc, #120]	@ (80188e4 <sync_fs+0xd8>)
 801886c:	4618      	mov	r0, r3
 801886e:	f7ff fd13 	bl	8018298 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	3338      	adds	r3, #56	@ 0x38
 8018876:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	695b      	ldr	r3, [r3, #20]
 801887e:	4619      	mov	r1, r3
 8018880:	4610      	mov	r0, r2
 8018882:	f7ff fd09 	bl	8018298 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	3338      	adds	r3, #56	@ 0x38
 801888a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	691b      	ldr	r3, [r3, #16]
 8018892:	4619      	mov	r1, r3
 8018894:	4610      	mov	r0, r2
 8018896:	f7ff fcff 	bl	8018298 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801889e:	1c5a      	adds	r2, r3, #1
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	7858      	ldrb	r0, [r3, #1]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80188b2:	2301      	movs	r3, #1
 80188b4:	f7ff fc5c 	bl	8018170 <disk_write>
			fs->fsi_flag = 0;
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	2200      	movs	r2, #0
 80188bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	785b      	ldrb	r3, [r3, #1]
 80188c2:	2200      	movs	r2, #0
 80188c4:	2100      	movs	r1, #0
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7ff fc72 	bl	80181b0 <disk_ioctl>
 80188cc:	4603      	mov	r3, r0
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d001      	beq.n	80188d6 <sync_fs+0xca>
 80188d2:	2301      	movs	r3, #1
 80188d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80188d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3710      	adds	r7, #16
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}
 80188e0:	41615252 	.word	0x41615252
 80188e4:	61417272 	.word	0x61417272

080188e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80188e8:	b480      	push	{r7}
 80188ea:	b083      	sub	sp, #12
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	6078      	str	r0, [r7, #4]
 80188f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80188f2:	683b      	ldr	r3, [r7, #0]
 80188f4:	3b02      	subs	r3, #2
 80188f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	69db      	ldr	r3, [r3, #28]
 80188fc:	3b02      	subs	r3, #2
 80188fe:	683a      	ldr	r2, [r7, #0]
 8018900:	429a      	cmp	r2, r3
 8018902:	d301      	bcc.n	8018908 <clust2sect+0x20>
 8018904:	2300      	movs	r3, #0
 8018906:	e008      	b.n	801891a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	895b      	ldrh	r3, [r3, #10]
 801890c:	461a      	mov	r2, r3
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	fb03 f202 	mul.w	r2, r3, r2
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018918:	4413      	add	r3, r2
}
 801891a:	4618      	mov	r0, r3
 801891c:	370c      	adds	r7, #12
 801891e:	46bd      	mov	sp, r7
 8018920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018924:	4770      	bx	lr

08018926 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8018926:	b580      	push	{r7, lr}
 8018928:	b086      	sub	sp, #24
 801892a:	af00      	add	r7, sp, #0
 801892c:	6078      	str	r0, [r7, #4]
 801892e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018936:	683b      	ldr	r3, [r7, #0]
 8018938:	2b01      	cmp	r3, #1
 801893a:	d904      	bls.n	8018946 <get_fat+0x20>
 801893c:	693b      	ldr	r3, [r7, #16]
 801893e:	69db      	ldr	r3, [r3, #28]
 8018940:	683a      	ldr	r2, [r7, #0]
 8018942:	429a      	cmp	r2, r3
 8018944:	d302      	bcc.n	801894c <get_fat+0x26>
		val = 1;	/* Internal error */
 8018946:	2301      	movs	r3, #1
 8018948:	617b      	str	r3, [r7, #20]
 801894a:	e08e      	b.n	8018a6a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801894c:	f04f 33ff 	mov.w	r3, #4294967295
 8018950:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8018952:	693b      	ldr	r3, [r7, #16]
 8018954:	781b      	ldrb	r3, [r3, #0]
 8018956:	2b03      	cmp	r3, #3
 8018958:	d061      	beq.n	8018a1e <get_fat+0xf8>
 801895a:	2b03      	cmp	r3, #3
 801895c:	dc7b      	bgt.n	8018a56 <get_fat+0x130>
 801895e:	2b01      	cmp	r3, #1
 8018960:	d002      	beq.n	8018968 <get_fat+0x42>
 8018962:	2b02      	cmp	r3, #2
 8018964:	d041      	beq.n	80189ea <get_fat+0xc4>
 8018966:	e076      	b.n	8018a56 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	60fb      	str	r3, [r7, #12]
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	085b      	lsrs	r3, r3, #1
 8018970:	68fa      	ldr	r2, [r7, #12]
 8018972:	4413      	add	r3, r2
 8018974:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018976:	693b      	ldr	r3, [r7, #16]
 8018978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	0a5b      	lsrs	r3, r3, #9
 801897e:	4413      	add	r3, r2
 8018980:	4619      	mov	r1, r3
 8018982:	6938      	ldr	r0, [r7, #16]
 8018984:	f7ff ff14 	bl	80187b0 <move_window>
 8018988:	4603      	mov	r3, r0
 801898a:	2b00      	cmp	r3, #0
 801898c:	d166      	bne.n	8018a5c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	1c5a      	adds	r2, r3, #1
 8018992:	60fa      	str	r2, [r7, #12]
 8018994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018998:	693a      	ldr	r2, [r7, #16]
 801899a:	4413      	add	r3, r2
 801899c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80189a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80189a2:	693b      	ldr	r3, [r7, #16]
 80189a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	0a5b      	lsrs	r3, r3, #9
 80189aa:	4413      	add	r3, r2
 80189ac:	4619      	mov	r1, r3
 80189ae:	6938      	ldr	r0, [r7, #16]
 80189b0:	f7ff fefe 	bl	80187b0 <move_window>
 80189b4:	4603      	mov	r3, r0
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d152      	bne.n	8018a60 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80189c0:	693a      	ldr	r2, [r7, #16]
 80189c2:	4413      	add	r3, r2
 80189c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80189c8:	021b      	lsls	r3, r3, #8
 80189ca:	68ba      	ldr	r2, [r7, #8]
 80189cc:	4313      	orrs	r3, r2
 80189ce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80189d0:	683b      	ldr	r3, [r7, #0]
 80189d2:	f003 0301 	and.w	r3, r3, #1
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d002      	beq.n	80189e0 <get_fat+0xba>
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	091b      	lsrs	r3, r3, #4
 80189de:	e002      	b.n	80189e6 <get_fat+0xc0>
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80189e6:	617b      	str	r3, [r7, #20]
			break;
 80189e8:	e03f      	b.n	8018a6a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	0a1b      	lsrs	r3, r3, #8
 80189f2:	4413      	add	r3, r2
 80189f4:	4619      	mov	r1, r3
 80189f6:	6938      	ldr	r0, [r7, #16]
 80189f8:	f7ff feda 	bl	80187b0 <move_window>
 80189fc:	4603      	mov	r3, r0
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d130      	bne.n	8018a64 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018a02:	693b      	ldr	r3, [r7, #16]
 8018a04:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	005b      	lsls	r3, r3, #1
 8018a0c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018a10:	4413      	add	r3, r2
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7ff fbea 	bl	80181ec <ld_word>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	617b      	str	r3, [r7, #20]
			break;
 8018a1c:	e025      	b.n	8018a6a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018a1e:	693b      	ldr	r3, [r7, #16]
 8018a20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	09db      	lsrs	r3, r3, #7
 8018a26:	4413      	add	r3, r2
 8018a28:	4619      	mov	r1, r3
 8018a2a:	6938      	ldr	r0, [r7, #16]
 8018a2c:	f7ff fec0 	bl	80187b0 <move_window>
 8018a30:	4603      	mov	r3, r0
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d118      	bne.n	8018a68 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018a3c:	683b      	ldr	r3, [r7, #0]
 8018a3e:	009b      	lsls	r3, r3, #2
 8018a40:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018a44:	4413      	add	r3, r2
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7ff fbe8 	bl	801821c <ld_dword>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8018a52:	617b      	str	r3, [r7, #20]
			break;
 8018a54:	e009      	b.n	8018a6a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018a56:	2301      	movs	r3, #1
 8018a58:	617b      	str	r3, [r7, #20]
 8018a5a:	e006      	b.n	8018a6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018a5c:	bf00      	nop
 8018a5e:	e004      	b.n	8018a6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018a60:	bf00      	nop
 8018a62:	e002      	b.n	8018a6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018a64:	bf00      	nop
 8018a66:	e000      	b.n	8018a6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018a68:	bf00      	nop
		}
	}

	return val;
 8018a6a:	697b      	ldr	r3, [r7, #20]
}
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	3718      	adds	r7, #24
 8018a70:	46bd      	mov	sp, r7
 8018a72:	bd80      	pop	{r7, pc}

08018a74 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8018a74:	b590      	push	{r4, r7, lr}
 8018a76:	b089      	sub	sp, #36	@ 0x24
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	60f8      	str	r0, [r7, #12]
 8018a7c:	60b9      	str	r1, [r7, #8]
 8018a7e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8018a80:	2302      	movs	r3, #2
 8018a82:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	2b01      	cmp	r3, #1
 8018a88:	f240 80d9 	bls.w	8018c3e <put_fat+0x1ca>
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	69db      	ldr	r3, [r3, #28]
 8018a90:	68ba      	ldr	r2, [r7, #8]
 8018a92:	429a      	cmp	r2, r3
 8018a94:	f080 80d3 	bcs.w	8018c3e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	781b      	ldrb	r3, [r3, #0]
 8018a9c:	2b03      	cmp	r3, #3
 8018a9e:	f000 8096 	beq.w	8018bce <put_fat+0x15a>
 8018aa2:	2b03      	cmp	r3, #3
 8018aa4:	f300 80cb 	bgt.w	8018c3e <put_fat+0x1ca>
 8018aa8:	2b01      	cmp	r3, #1
 8018aaa:	d002      	beq.n	8018ab2 <put_fat+0x3e>
 8018aac:	2b02      	cmp	r3, #2
 8018aae:	d06e      	beq.n	8018b8e <put_fat+0x11a>
 8018ab0:	e0c5      	b.n	8018c3e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8018ab2:	68bb      	ldr	r3, [r7, #8]
 8018ab4:	61bb      	str	r3, [r7, #24]
 8018ab6:	69bb      	ldr	r3, [r7, #24]
 8018ab8:	085b      	lsrs	r3, r3, #1
 8018aba:	69ba      	ldr	r2, [r7, #24]
 8018abc:	4413      	add	r3, r2
 8018abe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018ac4:	69bb      	ldr	r3, [r7, #24]
 8018ac6:	0a5b      	lsrs	r3, r3, #9
 8018ac8:	4413      	add	r3, r2
 8018aca:	4619      	mov	r1, r3
 8018acc:	68f8      	ldr	r0, [r7, #12]
 8018ace:	f7ff fe6f 	bl	80187b0 <move_window>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018ad6:	7ffb      	ldrb	r3, [r7, #31]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	f040 80a9 	bne.w	8018c30 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018ae4:	69bb      	ldr	r3, [r7, #24]
 8018ae6:	1c59      	adds	r1, r3, #1
 8018ae8:	61b9      	str	r1, [r7, #24]
 8018aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018aee:	4413      	add	r3, r2
 8018af0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	f003 0301 	and.w	r3, r3, #1
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d00d      	beq.n	8018b18 <put_fat+0xa4>
 8018afc:	697b      	ldr	r3, [r7, #20]
 8018afe:	781b      	ldrb	r3, [r3, #0]
 8018b00:	b25b      	sxtb	r3, r3
 8018b02:	f003 030f 	and.w	r3, r3, #15
 8018b06:	b25a      	sxtb	r2, r3
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	011b      	lsls	r3, r3, #4
 8018b0e:	b25b      	sxtb	r3, r3
 8018b10:	4313      	orrs	r3, r2
 8018b12:	b25b      	sxtb	r3, r3
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	e001      	b.n	8018b1c <put_fat+0xa8>
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	b2db      	uxtb	r3, r3
 8018b1c:	697a      	ldr	r2, [r7, #20]
 8018b1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	2201      	movs	r2, #1
 8018b24:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018b2a:	69bb      	ldr	r3, [r7, #24]
 8018b2c:	0a5b      	lsrs	r3, r3, #9
 8018b2e:	4413      	add	r3, r2
 8018b30:	4619      	mov	r1, r3
 8018b32:	68f8      	ldr	r0, [r7, #12]
 8018b34:	f7ff fe3c 	bl	80187b0 <move_window>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018b3c:	7ffb      	ldrb	r3, [r7, #31]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d178      	bne.n	8018c34 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018b48:	69bb      	ldr	r3, [r7, #24]
 8018b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018b4e:	4413      	add	r3, r2
 8018b50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8018b52:	68bb      	ldr	r3, [r7, #8]
 8018b54:	f003 0301 	and.w	r3, r3, #1
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d003      	beq.n	8018b64 <put_fat+0xf0>
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	091b      	lsrs	r3, r3, #4
 8018b60:	b2db      	uxtb	r3, r3
 8018b62:	e00e      	b.n	8018b82 <put_fat+0x10e>
 8018b64:	697b      	ldr	r3, [r7, #20]
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	b25b      	sxtb	r3, r3
 8018b6a:	f023 030f 	bic.w	r3, r3, #15
 8018b6e:	b25a      	sxtb	r2, r3
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	0a1b      	lsrs	r3, r3, #8
 8018b74:	b25b      	sxtb	r3, r3
 8018b76:	f003 030f 	and.w	r3, r3, #15
 8018b7a:	b25b      	sxtb	r3, r3
 8018b7c:	4313      	orrs	r3, r2
 8018b7e:	b25b      	sxtb	r3, r3
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	697a      	ldr	r2, [r7, #20]
 8018b84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	2201      	movs	r2, #1
 8018b8a:	70da      	strb	r2, [r3, #3]
			break;
 8018b8c:	e057      	b.n	8018c3e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	0a1b      	lsrs	r3, r3, #8
 8018b96:	4413      	add	r3, r2
 8018b98:	4619      	mov	r1, r3
 8018b9a:	68f8      	ldr	r0, [r7, #12]
 8018b9c:	f7ff fe08 	bl	80187b0 <move_window>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018ba4:	7ffb      	ldrb	r3, [r7, #31]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d146      	bne.n	8018c38 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018bb0:	68bb      	ldr	r3, [r7, #8]
 8018bb2:	005b      	lsls	r3, r3, #1
 8018bb4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018bb8:	4413      	add	r3, r2
 8018bba:	687a      	ldr	r2, [r7, #4]
 8018bbc:	b292      	uxth	r2, r2
 8018bbe:	4611      	mov	r1, r2
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7ff fb4e 	bl	8018262 <st_word>
			fs->wflag = 1;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	2201      	movs	r2, #1
 8018bca:	70da      	strb	r2, [r3, #3]
			break;
 8018bcc:	e037      	b.n	8018c3e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018bd2:	68bb      	ldr	r3, [r7, #8]
 8018bd4:	09db      	lsrs	r3, r3, #7
 8018bd6:	4413      	add	r3, r2
 8018bd8:	4619      	mov	r1, r3
 8018bda:	68f8      	ldr	r0, [r7, #12]
 8018bdc:	f7ff fde8 	bl	80187b0 <move_window>
 8018be0:	4603      	mov	r3, r0
 8018be2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018be4:	7ffb      	ldrb	r3, [r7, #31]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d128      	bne.n	8018c3c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	009b      	lsls	r3, r3, #2
 8018bfa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018bfe:	4413      	add	r3, r2
 8018c00:	4618      	mov	r0, r3
 8018c02:	f7ff fb0b 	bl	801821c <ld_dword>
 8018c06:	4603      	mov	r3, r0
 8018c08:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8018c0c:	4323      	orrs	r3, r4
 8018c0e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	009b      	lsls	r3, r3, #2
 8018c1a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018c1e:	4413      	add	r3, r2
 8018c20:	6879      	ldr	r1, [r7, #4]
 8018c22:	4618      	mov	r0, r3
 8018c24:	f7ff fb38 	bl	8018298 <st_dword>
			fs->wflag = 1;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	2201      	movs	r2, #1
 8018c2c:	70da      	strb	r2, [r3, #3]
			break;
 8018c2e:	e006      	b.n	8018c3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018c30:	bf00      	nop
 8018c32:	e004      	b.n	8018c3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018c34:	bf00      	nop
 8018c36:	e002      	b.n	8018c3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018c38:	bf00      	nop
 8018c3a:	e000      	b.n	8018c3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018c3c:	bf00      	nop
		}
	}
	return res;
 8018c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8018c40:	4618      	mov	r0, r3
 8018c42:	3724      	adds	r7, #36	@ 0x24
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd90      	pop	{r4, r7, pc}

08018c48 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b088      	sub	sp, #32
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	60f8      	str	r0, [r7, #12]
 8018c50:	60b9      	str	r1, [r7, #8]
 8018c52:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8018c54:	2300      	movs	r3, #0
 8018c56:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018c5e:	68bb      	ldr	r3, [r7, #8]
 8018c60:	2b01      	cmp	r3, #1
 8018c62:	d904      	bls.n	8018c6e <remove_chain+0x26>
 8018c64:	69bb      	ldr	r3, [r7, #24]
 8018c66:	69db      	ldr	r3, [r3, #28]
 8018c68:	68ba      	ldr	r2, [r7, #8]
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	d301      	bcc.n	8018c72 <remove_chain+0x2a>
 8018c6e:	2302      	movs	r3, #2
 8018c70:	e04b      	b.n	8018d0a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d00c      	beq.n	8018c92 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8018c78:	f04f 32ff 	mov.w	r2, #4294967295
 8018c7c:	6879      	ldr	r1, [r7, #4]
 8018c7e:	69b8      	ldr	r0, [r7, #24]
 8018c80:	f7ff fef8 	bl	8018a74 <put_fat>
 8018c84:	4603      	mov	r3, r0
 8018c86:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8018c88:	7ffb      	ldrb	r3, [r7, #31]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d001      	beq.n	8018c92 <remove_chain+0x4a>
 8018c8e:	7ffb      	ldrb	r3, [r7, #31]
 8018c90:	e03b      	b.n	8018d0a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8018c92:	68b9      	ldr	r1, [r7, #8]
 8018c94:	68f8      	ldr	r0, [r7, #12]
 8018c96:	f7ff fe46 	bl	8018926 <get_fat>
 8018c9a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8018c9c:	697b      	ldr	r3, [r7, #20]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d031      	beq.n	8018d06 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8018ca2:	697b      	ldr	r3, [r7, #20]
 8018ca4:	2b01      	cmp	r3, #1
 8018ca6:	d101      	bne.n	8018cac <remove_chain+0x64>
 8018ca8:	2302      	movs	r3, #2
 8018caa:	e02e      	b.n	8018d0a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cb2:	d101      	bne.n	8018cb8 <remove_chain+0x70>
 8018cb4:	2301      	movs	r3, #1
 8018cb6:	e028      	b.n	8018d0a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018cb8:	2200      	movs	r2, #0
 8018cba:	68b9      	ldr	r1, [r7, #8]
 8018cbc:	69b8      	ldr	r0, [r7, #24]
 8018cbe:	f7ff fed9 	bl	8018a74 <put_fat>
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018cc6:	7ffb      	ldrb	r3, [r7, #31]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d001      	beq.n	8018cd0 <remove_chain+0x88>
 8018ccc:	7ffb      	ldrb	r3, [r7, #31]
 8018cce:	e01c      	b.n	8018d0a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8018cd0:	69bb      	ldr	r3, [r7, #24]
 8018cd2:	695a      	ldr	r2, [r3, #20]
 8018cd4:	69bb      	ldr	r3, [r7, #24]
 8018cd6:	69db      	ldr	r3, [r3, #28]
 8018cd8:	3b02      	subs	r3, #2
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d20b      	bcs.n	8018cf6 <remove_chain+0xae>
			fs->free_clst++;
 8018cde:	69bb      	ldr	r3, [r7, #24]
 8018ce0:	695b      	ldr	r3, [r3, #20]
 8018ce2:	1c5a      	adds	r2, r3, #1
 8018ce4:	69bb      	ldr	r3, [r7, #24]
 8018ce6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8018ce8:	69bb      	ldr	r3, [r7, #24]
 8018cea:	791b      	ldrb	r3, [r3, #4]
 8018cec:	f043 0301 	orr.w	r3, r3, #1
 8018cf0:	b2da      	uxtb	r2, r3
 8018cf2:	69bb      	ldr	r3, [r7, #24]
 8018cf4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018cf6:	697b      	ldr	r3, [r7, #20]
 8018cf8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018cfa:	69bb      	ldr	r3, [r7, #24]
 8018cfc:	69db      	ldr	r3, [r3, #28]
 8018cfe:	68ba      	ldr	r2, [r7, #8]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	d3c6      	bcc.n	8018c92 <remove_chain+0x4a>
 8018d04:	e000      	b.n	8018d08 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018d06:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018d08:	2300      	movs	r3, #0
}
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	3720      	adds	r7, #32
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	bd80      	pop	{r7, pc}

08018d12 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8018d12:	b580      	push	{r7, lr}
 8018d14:	b088      	sub	sp, #32
 8018d16:	af00      	add	r7, sp, #0
 8018d18:	6078      	str	r0, [r7, #4]
 8018d1a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d10d      	bne.n	8018d44 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018d28:	693b      	ldr	r3, [r7, #16]
 8018d2a:	691b      	ldr	r3, [r3, #16]
 8018d2c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018d2e:	69bb      	ldr	r3, [r7, #24]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d004      	beq.n	8018d3e <create_chain+0x2c>
 8018d34:	693b      	ldr	r3, [r7, #16]
 8018d36:	69db      	ldr	r3, [r3, #28]
 8018d38:	69ba      	ldr	r2, [r7, #24]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d31b      	bcc.n	8018d76 <create_chain+0x64>
 8018d3e:	2301      	movs	r3, #1
 8018d40:	61bb      	str	r3, [r7, #24]
 8018d42:	e018      	b.n	8018d76 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8018d44:	6839      	ldr	r1, [r7, #0]
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f7ff fded 	bl	8018926 <get_fat>
 8018d4c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	2b01      	cmp	r3, #1
 8018d52:	d801      	bhi.n	8018d58 <create_chain+0x46>
 8018d54:	2301      	movs	r3, #1
 8018d56:	e070      	b.n	8018e3a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d5e:	d101      	bne.n	8018d64 <create_chain+0x52>
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	e06a      	b.n	8018e3a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8018d64:	693b      	ldr	r3, [r7, #16]
 8018d66:	69db      	ldr	r3, [r3, #28]
 8018d68:	68fa      	ldr	r2, [r7, #12]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d201      	bcs.n	8018d72 <create_chain+0x60>
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	e063      	b.n	8018e3a <create_chain+0x128>
		scl = clst;
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8018d76:	69bb      	ldr	r3, [r7, #24]
 8018d78:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8018d7a:	69fb      	ldr	r3, [r7, #28]
 8018d7c:	3301      	adds	r3, #1
 8018d7e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8018d80:	693b      	ldr	r3, [r7, #16]
 8018d82:	69db      	ldr	r3, [r3, #28]
 8018d84:	69fa      	ldr	r2, [r7, #28]
 8018d86:	429a      	cmp	r2, r3
 8018d88:	d307      	bcc.n	8018d9a <create_chain+0x88>
				ncl = 2;
 8018d8a:	2302      	movs	r3, #2
 8018d8c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8018d8e:	69fa      	ldr	r2, [r7, #28]
 8018d90:	69bb      	ldr	r3, [r7, #24]
 8018d92:	429a      	cmp	r2, r3
 8018d94:	d901      	bls.n	8018d9a <create_chain+0x88>
 8018d96:	2300      	movs	r3, #0
 8018d98:	e04f      	b.n	8018e3a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018d9a:	69f9      	ldr	r1, [r7, #28]
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f7ff fdc2 	bl	8018926 <get_fat>
 8018da2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d00e      	beq.n	8018dc8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	2b01      	cmp	r3, #1
 8018dae:	d003      	beq.n	8018db8 <create_chain+0xa6>
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018db6:	d101      	bne.n	8018dbc <create_chain+0xaa>
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	e03e      	b.n	8018e3a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018dbc:	69fa      	ldr	r2, [r7, #28]
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	429a      	cmp	r2, r3
 8018dc2:	d1da      	bne.n	8018d7a <create_chain+0x68>
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	e038      	b.n	8018e3a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018dc8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018dca:	f04f 32ff 	mov.w	r2, #4294967295
 8018dce:	69f9      	ldr	r1, [r7, #28]
 8018dd0:	6938      	ldr	r0, [r7, #16]
 8018dd2:	f7ff fe4f 	bl	8018a74 <put_fat>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018dda:	7dfb      	ldrb	r3, [r7, #23]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d109      	bne.n	8018df4 <create_chain+0xe2>
 8018de0:	683b      	ldr	r3, [r7, #0]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d006      	beq.n	8018df4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018de6:	69fa      	ldr	r2, [r7, #28]
 8018de8:	6839      	ldr	r1, [r7, #0]
 8018dea:	6938      	ldr	r0, [r7, #16]
 8018dec:	f7ff fe42 	bl	8018a74 <put_fat>
 8018df0:	4603      	mov	r3, r0
 8018df2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018df4:	7dfb      	ldrb	r3, [r7, #23]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d116      	bne.n	8018e28 <create_chain+0x116>
		fs->last_clst = ncl;
 8018dfa:	693b      	ldr	r3, [r7, #16]
 8018dfc:	69fa      	ldr	r2, [r7, #28]
 8018dfe:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018e00:	693b      	ldr	r3, [r7, #16]
 8018e02:	695a      	ldr	r2, [r3, #20]
 8018e04:	693b      	ldr	r3, [r7, #16]
 8018e06:	69db      	ldr	r3, [r3, #28]
 8018e08:	3b02      	subs	r3, #2
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	d804      	bhi.n	8018e18 <create_chain+0x106>
 8018e0e:	693b      	ldr	r3, [r7, #16]
 8018e10:	695b      	ldr	r3, [r3, #20]
 8018e12:	1e5a      	subs	r2, r3, #1
 8018e14:	693b      	ldr	r3, [r7, #16]
 8018e16:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8018e18:	693b      	ldr	r3, [r7, #16]
 8018e1a:	791b      	ldrb	r3, [r3, #4]
 8018e1c:	f043 0301 	orr.w	r3, r3, #1
 8018e20:	b2da      	uxtb	r2, r3
 8018e22:	693b      	ldr	r3, [r7, #16]
 8018e24:	711a      	strb	r2, [r3, #4]
 8018e26:	e007      	b.n	8018e38 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018e28:	7dfb      	ldrb	r3, [r7, #23]
 8018e2a:	2b01      	cmp	r3, #1
 8018e2c:	d102      	bne.n	8018e34 <create_chain+0x122>
 8018e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e32:	e000      	b.n	8018e36 <create_chain+0x124>
 8018e34:	2301      	movs	r3, #1
 8018e36:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018e38:	69fb      	ldr	r3, [r7, #28]
}
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	3720      	adds	r7, #32
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}

08018e42 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8018e42:	b480      	push	{r7}
 8018e44:	b087      	sub	sp, #28
 8018e46:	af00      	add	r7, sp, #0
 8018e48:	6078      	str	r0, [r7, #4]
 8018e4a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e56:	3304      	adds	r3, #4
 8018e58:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	0a5b      	lsrs	r3, r3, #9
 8018e5e:	68fa      	ldr	r2, [r7, #12]
 8018e60:	8952      	ldrh	r2, [r2, #10]
 8018e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e66:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018e68:	693b      	ldr	r3, [r7, #16]
 8018e6a:	1d1a      	adds	r2, r3, #4
 8018e6c:	613a      	str	r2, [r7, #16]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d101      	bne.n	8018e7c <clmt_clust+0x3a>
 8018e78:	2300      	movs	r3, #0
 8018e7a:	e010      	b.n	8018e9e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8018e7c:	697a      	ldr	r2, [r7, #20]
 8018e7e:	68bb      	ldr	r3, [r7, #8]
 8018e80:	429a      	cmp	r2, r3
 8018e82:	d307      	bcc.n	8018e94 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8018e84:	697a      	ldr	r2, [r7, #20]
 8018e86:	68bb      	ldr	r3, [r7, #8]
 8018e88:	1ad3      	subs	r3, r2, r3
 8018e8a:	617b      	str	r3, [r7, #20]
 8018e8c:	693b      	ldr	r3, [r7, #16]
 8018e8e:	3304      	adds	r3, #4
 8018e90:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018e92:	e7e9      	b.n	8018e68 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8018e94:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8018e96:	693b      	ldr	r3, [r7, #16]
 8018e98:	681a      	ldr	r2, [r3, #0]
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	4413      	add	r3, r2
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	371c      	adds	r7, #28
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea8:	4770      	bx	lr

08018eaa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b086      	sub	sp, #24
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
 8018eb2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018ec0:	d204      	bcs.n	8018ecc <dir_sdi+0x22>
 8018ec2:	683b      	ldr	r3, [r7, #0]
 8018ec4:	f003 031f 	and.w	r3, r3, #31
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d001      	beq.n	8018ed0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8018ecc:	2302      	movs	r3, #2
 8018ece:	e063      	b.n	8018f98 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	683a      	ldr	r2, [r7, #0]
 8018ed4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	689b      	ldr	r3, [r3, #8]
 8018eda:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d106      	bne.n	8018ef0 <dir_sdi+0x46>
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	2b02      	cmp	r3, #2
 8018ee8:	d902      	bls.n	8018ef0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8018eea:	693b      	ldr	r3, [r7, #16]
 8018eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018eee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018ef0:	697b      	ldr	r3, [r7, #20]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d10c      	bne.n	8018f10 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	095b      	lsrs	r3, r3, #5
 8018efa:	693a      	ldr	r2, [r7, #16]
 8018efc:	8912      	ldrh	r2, [r2, #8]
 8018efe:	4293      	cmp	r3, r2
 8018f00:	d301      	bcc.n	8018f06 <dir_sdi+0x5c>
 8018f02:	2302      	movs	r3, #2
 8018f04:	e048      	b.n	8018f98 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	61da      	str	r2, [r3, #28]
 8018f0e:	e029      	b.n	8018f64 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	895b      	ldrh	r3, [r3, #10]
 8018f14:	025b      	lsls	r3, r3, #9
 8018f16:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018f18:	e019      	b.n	8018f4e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6979      	ldr	r1, [r7, #20]
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7ff fd01 	bl	8018926 <get_fat>
 8018f24:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f2c:	d101      	bne.n	8018f32 <dir_sdi+0x88>
 8018f2e:	2301      	movs	r3, #1
 8018f30:	e032      	b.n	8018f98 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	2b01      	cmp	r3, #1
 8018f36:	d904      	bls.n	8018f42 <dir_sdi+0x98>
 8018f38:	693b      	ldr	r3, [r7, #16]
 8018f3a:	69db      	ldr	r3, [r3, #28]
 8018f3c:	697a      	ldr	r2, [r7, #20]
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	d301      	bcc.n	8018f46 <dir_sdi+0x9c>
 8018f42:	2302      	movs	r3, #2
 8018f44:	e028      	b.n	8018f98 <dir_sdi+0xee>
			ofs -= csz;
 8018f46:	683a      	ldr	r2, [r7, #0]
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	1ad3      	subs	r3, r2, r3
 8018f4c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018f4e:	683a      	ldr	r2, [r7, #0]
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	429a      	cmp	r2, r3
 8018f54:	d2e1      	bcs.n	8018f1a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8018f56:	6979      	ldr	r1, [r7, #20]
 8018f58:	6938      	ldr	r0, [r7, #16]
 8018f5a:	f7ff fcc5 	bl	80188e8 <clust2sect>
 8018f5e:	4602      	mov	r2, r0
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	697a      	ldr	r2, [r7, #20]
 8018f68:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	69db      	ldr	r3, [r3, #28]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d101      	bne.n	8018f76 <dir_sdi+0xcc>
 8018f72:	2302      	movs	r3, #2
 8018f74:	e010      	b.n	8018f98 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	69da      	ldr	r2, [r3, #28]
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	0a5b      	lsrs	r3, r3, #9
 8018f7e:	441a      	add	r2, r3
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018f84:	693b      	ldr	r3, [r7, #16]
 8018f86:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018f90:	441a      	add	r2, r3
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018f96:	2300      	movs	r3, #0
}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	3718      	adds	r7, #24
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}

08018fa0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b086      	sub	sp, #24
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
 8018fa8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	695b      	ldr	r3, [r3, #20]
 8018fb4:	3320      	adds	r3, #32
 8018fb6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	69db      	ldr	r3, [r3, #28]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d003      	beq.n	8018fc8 <dir_next+0x28>
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018fc6:	d301      	bcc.n	8018fcc <dir_next+0x2c>
 8018fc8:	2304      	movs	r3, #4
 8018fca:	e0aa      	b.n	8019122 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	f040 8098 	bne.w	8019108 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	69db      	ldr	r3, [r3, #28]
 8018fdc:	1c5a      	adds	r2, r3, #1
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	699b      	ldr	r3, [r3, #24]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d10b      	bne.n	8019002 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018fea:	68bb      	ldr	r3, [r7, #8]
 8018fec:	095b      	lsrs	r3, r3, #5
 8018fee:	68fa      	ldr	r2, [r7, #12]
 8018ff0:	8912      	ldrh	r2, [r2, #8]
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	f0c0 8088 	bcc.w	8019108 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	61da      	str	r2, [r3, #28]
 8018ffe:	2304      	movs	r3, #4
 8019000:	e08f      	b.n	8019122 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8019002:	68bb      	ldr	r3, [r7, #8]
 8019004:	0a5b      	lsrs	r3, r3, #9
 8019006:	68fa      	ldr	r2, [r7, #12]
 8019008:	8952      	ldrh	r2, [r2, #10]
 801900a:	3a01      	subs	r2, #1
 801900c:	4013      	ands	r3, r2
 801900e:	2b00      	cmp	r3, #0
 8019010:	d17a      	bne.n	8019108 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	699b      	ldr	r3, [r3, #24]
 8019018:	4619      	mov	r1, r3
 801901a:	4610      	mov	r0, r2
 801901c:	f7ff fc83 	bl	8018926 <get_fat>
 8019020:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019022:	697b      	ldr	r3, [r7, #20]
 8019024:	2b01      	cmp	r3, #1
 8019026:	d801      	bhi.n	801902c <dir_next+0x8c>
 8019028:	2302      	movs	r3, #2
 801902a:	e07a      	b.n	8019122 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019032:	d101      	bne.n	8019038 <dir_next+0x98>
 8019034:	2301      	movs	r3, #1
 8019036:	e074      	b.n	8019122 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	69db      	ldr	r3, [r3, #28]
 801903c:	697a      	ldr	r2, [r7, #20]
 801903e:	429a      	cmp	r2, r3
 8019040:	d358      	bcc.n	80190f4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8019042:	683b      	ldr	r3, [r7, #0]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d104      	bne.n	8019052 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	2200      	movs	r2, #0
 801904c:	61da      	str	r2, [r3, #28]
 801904e:	2304      	movs	r3, #4
 8019050:	e067      	b.n	8019122 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8019052:	687a      	ldr	r2, [r7, #4]
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	699b      	ldr	r3, [r3, #24]
 8019058:	4619      	mov	r1, r3
 801905a:	4610      	mov	r0, r2
 801905c:	f7ff fe59 	bl	8018d12 <create_chain>
 8019060:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019062:	697b      	ldr	r3, [r7, #20]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d101      	bne.n	801906c <dir_next+0xcc>
 8019068:	2307      	movs	r3, #7
 801906a:	e05a      	b.n	8019122 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801906c:	697b      	ldr	r3, [r7, #20]
 801906e:	2b01      	cmp	r3, #1
 8019070:	d101      	bne.n	8019076 <dir_next+0xd6>
 8019072:	2302      	movs	r3, #2
 8019074:	e055      	b.n	8019122 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801907c:	d101      	bne.n	8019082 <dir_next+0xe2>
 801907e:	2301      	movs	r3, #1
 8019080:	e04f      	b.n	8019122 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8019082:	68f8      	ldr	r0, [r7, #12]
 8019084:	f7ff fb50 	bl	8018728 <sync_window>
 8019088:	4603      	mov	r3, r0
 801908a:	2b00      	cmp	r3, #0
 801908c:	d001      	beq.n	8019092 <dir_next+0xf2>
 801908e:	2301      	movs	r3, #1
 8019090:	e047      	b.n	8019122 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	3338      	adds	r3, #56	@ 0x38
 8019096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801909a:	2100      	movs	r1, #0
 801909c:	4618      	mov	r0, r3
 801909e:	f7ff f948 	bl	8018332 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80190a2:	2300      	movs	r3, #0
 80190a4:	613b      	str	r3, [r7, #16]
 80190a6:	6979      	ldr	r1, [r7, #20]
 80190a8:	68f8      	ldr	r0, [r7, #12]
 80190aa:	f7ff fc1d 	bl	80188e8 <clust2sect>
 80190ae:	4602      	mov	r2, r0
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80190b4:	e012      	b.n	80190dc <dir_next+0x13c>
						fs->wflag = 1;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	2201      	movs	r2, #1
 80190ba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80190bc:	68f8      	ldr	r0, [r7, #12]
 80190be:	f7ff fb33 	bl	8018728 <sync_window>
 80190c2:	4603      	mov	r3, r0
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d001      	beq.n	80190cc <dir_next+0x12c>
 80190c8:	2301      	movs	r3, #1
 80190ca:	e02a      	b.n	8019122 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80190cc:	693b      	ldr	r3, [r7, #16]
 80190ce:	3301      	adds	r3, #1
 80190d0:	613b      	str	r3, [r7, #16]
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80190d6:	1c5a      	adds	r2, r3, #1
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	635a      	str	r2, [r3, #52]	@ 0x34
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	895b      	ldrh	r3, [r3, #10]
 80190e0:	461a      	mov	r2, r3
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d3e6      	bcc.n	80190b6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80190ec:	693b      	ldr	r3, [r7, #16]
 80190ee:	1ad2      	subs	r2, r2, r3
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	697a      	ldr	r2, [r7, #20]
 80190f8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80190fa:	6979      	ldr	r1, [r7, #20]
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f7ff fbf3 	bl	80188e8 <clust2sect>
 8019102:	4602      	mov	r2, r0
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	68ba      	ldr	r2, [r7, #8]
 801910c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801911a:	441a      	add	r2, r3
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019120:	2300      	movs	r3, #0
}
 8019122:	4618      	mov	r0, r3
 8019124:	3718      	adds	r7, #24
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}

0801912a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801912a:	b580      	push	{r7, lr}
 801912c:	b086      	sub	sp, #24
 801912e:	af00      	add	r7, sp, #0
 8019130:	6078      	str	r0, [r7, #4]
 8019132:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801913a:	2100      	movs	r1, #0
 801913c:	6878      	ldr	r0, [r7, #4]
 801913e:	f7ff feb4 	bl	8018eaa <dir_sdi>
 8019142:	4603      	mov	r3, r0
 8019144:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019146:	7dfb      	ldrb	r3, [r7, #23]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d12b      	bne.n	80191a4 <dir_alloc+0x7a>
		n = 0;
 801914c:	2300      	movs	r3, #0
 801914e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	69db      	ldr	r3, [r3, #28]
 8019154:	4619      	mov	r1, r3
 8019156:	68f8      	ldr	r0, [r7, #12]
 8019158:	f7ff fb2a 	bl	80187b0 <move_window>
 801915c:	4603      	mov	r3, r0
 801915e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019160:	7dfb      	ldrb	r3, [r7, #23]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d11d      	bne.n	80191a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6a1b      	ldr	r3, [r3, #32]
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	2be5      	cmp	r3, #229	@ 0xe5
 801916e:	d004      	beq.n	801917a <dir_alloc+0x50>
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	6a1b      	ldr	r3, [r3, #32]
 8019174:	781b      	ldrb	r3, [r3, #0]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d107      	bne.n	801918a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	3301      	adds	r3, #1
 801917e:	613b      	str	r3, [r7, #16]
 8019180:	693a      	ldr	r2, [r7, #16]
 8019182:	683b      	ldr	r3, [r7, #0]
 8019184:	429a      	cmp	r2, r3
 8019186:	d102      	bne.n	801918e <dir_alloc+0x64>
 8019188:	e00c      	b.n	80191a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801918a:	2300      	movs	r3, #0
 801918c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801918e:	2101      	movs	r1, #1
 8019190:	6878      	ldr	r0, [r7, #4]
 8019192:	f7ff ff05 	bl	8018fa0 <dir_next>
 8019196:	4603      	mov	r3, r0
 8019198:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801919a:	7dfb      	ldrb	r3, [r7, #23]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d0d7      	beq.n	8019150 <dir_alloc+0x26>
 80191a0:	e000      	b.n	80191a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80191a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80191a4:	7dfb      	ldrb	r3, [r7, #23]
 80191a6:	2b04      	cmp	r3, #4
 80191a8:	d101      	bne.n	80191ae <dir_alloc+0x84>
 80191aa:	2307      	movs	r3, #7
 80191ac:	75fb      	strb	r3, [r7, #23]
	return res;
 80191ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	3718      	adds	r7, #24
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b084      	sub	sp, #16
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	331a      	adds	r3, #26
 80191c6:	4618      	mov	r0, r3
 80191c8:	f7ff f810 	bl	80181ec <ld_word>
 80191cc:	4603      	mov	r3, r0
 80191ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	781b      	ldrb	r3, [r3, #0]
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d109      	bne.n	80191ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80191d8:	683b      	ldr	r3, [r7, #0]
 80191da:	3314      	adds	r3, #20
 80191dc:	4618      	mov	r0, r3
 80191de:	f7ff f805 	bl	80181ec <ld_word>
 80191e2:	4603      	mov	r3, r0
 80191e4:	041b      	lsls	r3, r3, #16
 80191e6:	68fa      	ldr	r2, [r7, #12]
 80191e8:	4313      	orrs	r3, r2
 80191ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80191ec:	68fb      	ldr	r3, [r7, #12]
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3710      	adds	r7, #16
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}

080191f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80191f6:	b580      	push	{r7, lr}
 80191f8:	b084      	sub	sp, #16
 80191fa:	af00      	add	r7, sp, #0
 80191fc:	60f8      	str	r0, [r7, #12]
 80191fe:	60b9      	str	r1, [r7, #8]
 8019200:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8019202:	68bb      	ldr	r3, [r7, #8]
 8019204:	331a      	adds	r3, #26
 8019206:	687a      	ldr	r2, [r7, #4]
 8019208:	b292      	uxth	r2, r2
 801920a:	4611      	mov	r1, r2
 801920c:	4618      	mov	r0, r3
 801920e:	f7ff f828 	bl	8018262 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	781b      	ldrb	r3, [r3, #0]
 8019216:	2b03      	cmp	r3, #3
 8019218:	d109      	bne.n	801922e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801921a:	68bb      	ldr	r3, [r7, #8]
 801921c:	f103 0214 	add.w	r2, r3, #20
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	0c1b      	lsrs	r3, r3, #16
 8019224:	b29b      	uxth	r3, r3
 8019226:	4619      	mov	r1, r3
 8019228:	4610      	mov	r0, r2
 801922a:	f7ff f81a 	bl	8018262 <st_word>
	}
}
 801922e:	bf00      	nop
 8019230:	3710      	adds	r7, #16
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}

08019236 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8019236:	b580      	push	{r7, lr}
 8019238:	b086      	sub	sp, #24
 801923a:	af00      	add	r7, sp, #0
 801923c:	6078      	str	r0, [r7, #4]
 801923e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8019240:	2304      	movs	r3, #4
 8019242:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801924a:	e03c      	b.n	80192c6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	69db      	ldr	r3, [r3, #28]
 8019250:	4619      	mov	r1, r3
 8019252:	6938      	ldr	r0, [r7, #16]
 8019254:	f7ff faac 	bl	80187b0 <move_window>
 8019258:	4603      	mov	r3, r0
 801925a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801925c:	7dfb      	ldrb	r3, [r7, #23]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d136      	bne.n	80192d0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6a1b      	ldr	r3, [r3, #32]
 8019266:	781b      	ldrb	r3, [r3, #0]
 8019268:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801926a:	7bfb      	ldrb	r3, [r7, #15]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d102      	bne.n	8019276 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8019270:	2304      	movs	r3, #4
 8019272:	75fb      	strb	r3, [r7, #23]
 8019274:	e031      	b.n	80192da <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	6a1b      	ldr	r3, [r3, #32]
 801927a:	330b      	adds	r3, #11
 801927c:	781b      	ldrb	r3, [r3, #0]
 801927e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019282:	73bb      	strb	r3, [r7, #14]
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	7bba      	ldrb	r2, [r7, #14]
 8019288:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801928a:	7bfb      	ldrb	r3, [r7, #15]
 801928c:	2be5      	cmp	r3, #229	@ 0xe5
 801928e:	d011      	beq.n	80192b4 <dir_read+0x7e>
 8019290:	7bfb      	ldrb	r3, [r7, #15]
 8019292:	2b2e      	cmp	r3, #46	@ 0x2e
 8019294:	d00e      	beq.n	80192b4 <dir_read+0x7e>
 8019296:	7bbb      	ldrb	r3, [r7, #14]
 8019298:	2b0f      	cmp	r3, #15
 801929a:	d00b      	beq.n	80192b4 <dir_read+0x7e>
 801929c:	7bbb      	ldrb	r3, [r7, #14]
 801929e:	f023 0320 	bic.w	r3, r3, #32
 80192a2:	2b08      	cmp	r3, #8
 80192a4:	bf0c      	ite	eq
 80192a6:	2301      	moveq	r3, #1
 80192a8:	2300      	movne	r3, #0
 80192aa:	b2db      	uxtb	r3, r3
 80192ac:	461a      	mov	r2, r3
 80192ae:	683b      	ldr	r3, [r7, #0]
 80192b0:	4293      	cmp	r3, r2
 80192b2:	d00f      	beq.n	80192d4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80192b4:	2100      	movs	r1, #0
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f7ff fe72 	bl	8018fa0 <dir_next>
 80192bc:	4603      	mov	r3, r0
 80192be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80192c0:	7dfb      	ldrb	r3, [r7, #23]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d108      	bne.n	80192d8 <dir_read+0xa2>
	while (dp->sect) {
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	69db      	ldr	r3, [r3, #28]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d1be      	bne.n	801924c <dir_read+0x16>
 80192ce:	e004      	b.n	80192da <dir_read+0xa4>
		if (res != FR_OK) break;
 80192d0:	bf00      	nop
 80192d2:	e002      	b.n	80192da <dir_read+0xa4>
				break;
 80192d4:	bf00      	nop
 80192d6:	e000      	b.n	80192da <dir_read+0xa4>
		if (res != FR_OK) break;
 80192d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80192da:	7dfb      	ldrb	r3, [r7, #23]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d002      	beq.n	80192e6 <dir_read+0xb0>
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	2200      	movs	r2, #0
 80192e4:	61da      	str	r2, [r3, #28]
	return res;
 80192e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80192e8:	4618      	mov	r0, r3
 80192ea:	3718      	adds	r7, #24
 80192ec:	46bd      	mov	sp, r7
 80192ee:	bd80      	pop	{r7, pc}

080192f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b086      	sub	sp, #24
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80192fe:	2100      	movs	r1, #0
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	f7ff fdd2 	bl	8018eaa <dir_sdi>
 8019306:	4603      	mov	r3, r0
 8019308:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801930a:	7dfb      	ldrb	r3, [r7, #23]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d001      	beq.n	8019314 <dir_find+0x24>
 8019310:	7dfb      	ldrb	r3, [r7, #23]
 8019312:	e03e      	b.n	8019392 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	69db      	ldr	r3, [r3, #28]
 8019318:	4619      	mov	r1, r3
 801931a:	6938      	ldr	r0, [r7, #16]
 801931c:	f7ff fa48 	bl	80187b0 <move_window>
 8019320:	4603      	mov	r3, r0
 8019322:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8019324:	7dfb      	ldrb	r3, [r7, #23]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d12f      	bne.n	801938a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	6a1b      	ldr	r3, [r3, #32]
 801932e:	781b      	ldrb	r3, [r3, #0]
 8019330:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8019332:	7bfb      	ldrb	r3, [r7, #15]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d102      	bne.n	801933e <dir_find+0x4e>
 8019338:	2304      	movs	r3, #4
 801933a:	75fb      	strb	r3, [r7, #23]
 801933c:	e028      	b.n	8019390 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	6a1b      	ldr	r3, [r3, #32]
 8019342:	330b      	adds	r3, #11
 8019344:	781b      	ldrb	r3, [r3, #0]
 8019346:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801934a:	b2da      	uxtb	r2, r3
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	6a1b      	ldr	r3, [r3, #32]
 8019354:	330b      	adds	r3, #11
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	f003 0308 	and.w	r3, r3, #8
 801935c:	2b00      	cmp	r3, #0
 801935e:	d10a      	bne.n	8019376 <dir_find+0x86>
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6a18      	ldr	r0, [r3, #32]
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	3324      	adds	r3, #36	@ 0x24
 8019368:	220b      	movs	r2, #11
 801936a:	4619      	mov	r1, r3
 801936c:	f7fe fffc 	bl	8018368 <mem_cmp>
 8019370:	4603      	mov	r3, r0
 8019372:	2b00      	cmp	r3, #0
 8019374:	d00b      	beq.n	801938e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8019376:	2100      	movs	r1, #0
 8019378:	6878      	ldr	r0, [r7, #4]
 801937a:	f7ff fe11 	bl	8018fa0 <dir_next>
 801937e:	4603      	mov	r3, r0
 8019380:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8019382:	7dfb      	ldrb	r3, [r7, #23]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d0c5      	beq.n	8019314 <dir_find+0x24>
 8019388:	e002      	b.n	8019390 <dir_find+0xa0>
		if (res != FR_OK) break;
 801938a:	bf00      	nop
 801938c:	e000      	b.n	8019390 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801938e:	bf00      	nop

	return res;
 8019390:	7dfb      	ldrb	r3, [r7, #23]
}
 8019392:	4618      	mov	r0, r3
 8019394:	3718      	adds	r7, #24
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}

0801939a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801939a:	b580      	push	{r7, lr}
 801939c:	b084      	sub	sp, #16
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80193a8:	2101      	movs	r1, #1
 80193aa:	6878      	ldr	r0, [r7, #4]
 80193ac:	f7ff febd 	bl	801912a <dir_alloc>
 80193b0:	4603      	mov	r3, r0
 80193b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80193b4:	7bfb      	ldrb	r3, [r7, #15]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d11c      	bne.n	80193f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	69db      	ldr	r3, [r3, #28]
 80193be:	4619      	mov	r1, r3
 80193c0:	68b8      	ldr	r0, [r7, #8]
 80193c2:	f7ff f9f5 	bl	80187b0 <move_window>
 80193c6:	4603      	mov	r3, r0
 80193c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80193ca:	7bfb      	ldrb	r3, [r7, #15]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d111      	bne.n	80193f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	6a1b      	ldr	r3, [r3, #32]
 80193d4:	2220      	movs	r2, #32
 80193d6:	2100      	movs	r1, #0
 80193d8:	4618      	mov	r0, r3
 80193da:	f7fe ffaa 	bl	8018332 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	6a18      	ldr	r0, [r3, #32]
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	3324      	adds	r3, #36	@ 0x24
 80193e6:	220b      	movs	r2, #11
 80193e8:	4619      	mov	r1, r3
 80193ea:	f7fe ff81 	bl	80182f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80193ee:	68bb      	ldr	r3, [r7, #8]
 80193f0:	2201      	movs	r2, #1
 80193f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80193f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80193f6:	4618      	mov	r0, r3
 80193f8:	3710      	adds	r7, #16
 80193fa:	46bd      	mov	sp, r7
 80193fc:	bd80      	pop	{r7, pc}

080193fe <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80193fe:	b580      	push	{r7, lr}
 8019400:	b084      	sub	sp, #16
 8019402:	af00      	add	r7, sp, #0
 8019404:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	69db      	ldr	r3, [r3, #28]
 8019410:	4619      	mov	r1, r3
 8019412:	68f8      	ldr	r0, [r7, #12]
 8019414:	f7ff f9cc 	bl	80187b0 <move_window>
 8019418:	4603      	mov	r3, r0
 801941a:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801941c:	7afb      	ldrb	r3, [r7, #11]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d106      	bne.n	8019430 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6a1b      	ldr	r3, [r3, #32]
 8019426:	22e5      	movs	r2, #229	@ 0xe5
 8019428:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	2201      	movs	r2, #1
 801942e:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8019430:	7afb      	ldrb	r3, [r7, #11]
}
 8019432:	4618      	mov	r0, r3
 8019434:	3710      	adds	r7, #16
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}

0801943a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801943a:	b580      	push	{r7, lr}
 801943c:	b086      	sub	sp, #24
 801943e:	af00      	add	r7, sp, #0
 8019440:	6078      	str	r0, [r7, #4]
 8019442:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8019444:	683b      	ldr	r3, [r7, #0]
 8019446:	2200      	movs	r2, #0
 8019448:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	69db      	ldr	r3, [r3, #28]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d04f      	beq.n	80194f2 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8019452:	2300      	movs	r3, #0
 8019454:	613b      	str	r3, [r7, #16]
 8019456:	693b      	ldr	r3, [r7, #16]
 8019458:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801945a:	e022      	b.n	80194a2 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	6a1a      	ldr	r2, [r3, #32]
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	1c59      	adds	r1, r3, #1
 8019464:	6179      	str	r1, [r7, #20]
 8019466:	4413      	add	r3, r2
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801946c:	7bfb      	ldrb	r3, [r7, #15]
 801946e:	2b20      	cmp	r3, #32
 8019470:	d016      	beq.n	80194a0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8019472:	7bfb      	ldrb	r3, [r7, #15]
 8019474:	2b05      	cmp	r3, #5
 8019476:	d101      	bne.n	801947c <get_fileinfo+0x42>
 8019478:	23e5      	movs	r3, #229	@ 0xe5
 801947a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	2b09      	cmp	r3, #9
 8019480:	d106      	bne.n	8019490 <get_fileinfo+0x56>
 8019482:	693b      	ldr	r3, [r7, #16]
 8019484:	1c5a      	adds	r2, r3, #1
 8019486:	613a      	str	r2, [r7, #16]
 8019488:	683a      	ldr	r2, [r7, #0]
 801948a:	4413      	add	r3, r2
 801948c:	222e      	movs	r2, #46	@ 0x2e
 801948e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8019490:	693b      	ldr	r3, [r7, #16]
 8019492:	1c5a      	adds	r2, r3, #1
 8019494:	613a      	str	r2, [r7, #16]
 8019496:	683a      	ldr	r2, [r7, #0]
 8019498:	4413      	add	r3, r2
 801949a:	7bfa      	ldrb	r2, [r7, #15]
 801949c:	725a      	strb	r2, [r3, #9]
 801949e:	e000      	b.n	80194a2 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80194a0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80194a2:	697b      	ldr	r3, [r7, #20]
 80194a4:	2b0a      	cmp	r3, #10
 80194a6:	d9d9      	bls.n	801945c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80194a8:	683a      	ldr	r2, [r7, #0]
 80194aa:	693b      	ldr	r3, [r7, #16]
 80194ac:	4413      	add	r3, r2
 80194ae:	3309      	adds	r3, #9
 80194b0:	2200      	movs	r2, #0
 80194b2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6a1b      	ldr	r3, [r3, #32]
 80194b8:	7ada      	ldrb	r2, [r3, #11]
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	6a1b      	ldr	r3, [r3, #32]
 80194c2:	331c      	adds	r3, #28
 80194c4:	4618      	mov	r0, r3
 80194c6:	f7fe fea9 	bl	801821c <ld_dword>
 80194ca:	4602      	mov	r2, r0
 80194cc:	683b      	ldr	r3, [r7, #0]
 80194ce:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	6a1b      	ldr	r3, [r3, #32]
 80194d4:	3316      	adds	r3, #22
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7fe fea0 	bl	801821c <ld_dword>
 80194dc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80194de:	68bb      	ldr	r3, [r7, #8]
 80194e0:	b29a      	uxth	r2, r3
 80194e2:	683b      	ldr	r3, [r7, #0]
 80194e4:	80da      	strh	r2, [r3, #6]
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	0c1b      	lsrs	r3, r3, #16
 80194ea:	b29a      	uxth	r2, r3
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	809a      	strh	r2, [r3, #4]
 80194f0:	e000      	b.n	80194f4 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80194f2:	bf00      	nop
}
 80194f4:	3718      	adds	r7, #24
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
	...

080194fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b088      	sub	sp, #32
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
 8019504:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8019506:	683b      	ldr	r3, [r7, #0]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	60fb      	str	r3, [r7, #12]
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	3324      	adds	r3, #36	@ 0x24
 8019510:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8019512:	220b      	movs	r2, #11
 8019514:	2120      	movs	r1, #32
 8019516:	68b8      	ldr	r0, [r7, #8]
 8019518:	f7fe ff0b 	bl	8018332 <mem_set>
	si = i = 0; ni = 8;
 801951c:	2300      	movs	r3, #0
 801951e:	613b      	str	r3, [r7, #16]
 8019520:	693b      	ldr	r3, [r7, #16]
 8019522:	61fb      	str	r3, [r7, #28]
 8019524:	2308      	movs	r3, #8
 8019526:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8019528:	68fa      	ldr	r2, [r7, #12]
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	4413      	add	r3, r2
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	2b2e      	cmp	r3, #46	@ 0x2e
 8019532:	d12f      	bne.n	8019594 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8019534:	69fb      	ldr	r3, [r7, #28]
 8019536:	1c5a      	adds	r2, r3, #1
 8019538:	61fa      	str	r2, [r7, #28]
 801953a:	68fa      	ldr	r2, [r7, #12]
 801953c:	4413      	add	r3, r2
 801953e:	781b      	ldrb	r3, [r3, #0]
 8019540:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 8019542:	7efb      	ldrb	r3, [r7, #27]
 8019544:	2b2e      	cmp	r3, #46	@ 0x2e
 8019546:	d10a      	bne.n	801955e <create_name+0x62>
 8019548:	69fb      	ldr	r3, [r7, #28]
 801954a:	2b02      	cmp	r3, #2
 801954c:	d807      	bhi.n	801955e <create_name+0x62>
			sfn[i++] = c;
 801954e:	693b      	ldr	r3, [r7, #16]
 8019550:	1c5a      	adds	r2, r3, #1
 8019552:	613a      	str	r2, [r7, #16]
 8019554:	68ba      	ldr	r2, [r7, #8]
 8019556:	4413      	add	r3, r2
 8019558:	7efa      	ldrb	r2, [r7, #27]
 801955a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 801955c:	e7ea      	b.n	8019534 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801955e:	7efb      	ldrb	r3, [r7, #27]
 8019560:	2b2f      	cmp	r3, #47	@ 0x2f
 8019562:	d007      	beq.n	8019574 <create_name+0x78>
 8019564:	7efb      	ldrb	r3, [r7, #27]
 8019566:	2b5c      	cmp	r3, #92	@ 0x5c
 8019568:	d004      	beq.n	8019574 <create_name+0x78>
 801956a:	7efb      	ldrb	r3, [r7, #27]
 801956c:	2b20      	cmp	r3, #32
 801956e:	d901      	bls.n	8019574 <create_name+0x78>
 8019570:	2306      	movs	r3, #6
 8019572:	e084      	b.n	801967e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8019574:	68fa      	ldr	r2, [r7, #12]
 8019576:	69fb      	ldr	r3, [r7, #28]
 8019578:	441a      	add	r2, r3
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801957e:	7efb      	ldrb	r3, [r7, #27]
 8019580:	2b20      	cmp	r3, #32
 8019582:	d801      	bhi.n	8019588 <create_name+0x8c>
 8019584:	2224      	movs	r2, #36	@ 0x24
 8019586:	e000      	b.n	801958a <create_name+0x8e>
 8019588:	2220      	movs	r2, #32
 801958a:	68bb      	ldr	r3, [r7, #8]
 801958c:	330b      	adds	r3, #11
 801958e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8019590:	2300      	movs	r3, #0
 8019592:	e074      	b.n	801967e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8019594:	69fb      	ldr	r3, [r7, #28]
 8019596:	1c5a      	adds	r2, r3, #1
 8019598:	61fa      	str	r2, [r7, #28]
 801959a:	68fa      	ldr	r2, [r7, #12]
 801959c:	4413      	add	r3, r2
 801959e:	781b      	ldrb	r3, [r3, #0]
 80195a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80195a2:	7efb      	ldrb	r3, [r7, #27]
 80195a4:	2b20      	cmp	r3, #32
 80195a6:	d94e      	bls.n	8019646 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80195a8:	7efb      	ldrb	r3, [r7, #27]
 80195aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80195ac:	d006      	beq.n	80195bc <create_name+0xc0>
 80195ae:	7efb      	ldrb	r3, [r7, #27]
 80195b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80195b2:	d110      	bne.n	80195d6 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80195b4:	e002      	b.n	80195bc <create_name+0xc0>
 80195b6:	69fb      	ldr	r3, [r7, #28]
 80195b8:	3301      	adds	r3, #1
 80195ba:	61fb      	str	r3, [r7, #28]
 80195bc:	68fa      	ldr	r2, [r7, #12]
 80195be:	69fb      	ldr	r3, [r7, #28]
 80195c0:	4413      	add	r3, r2
 80195c2:	781b      	ldrb	r3, [r3, #0]
 80195c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80195c6:	d0f6      	beq.n	80195b6 <create_name+0xba>
 80195c8:	68fa      	ldr	r2, [r7, #12]
 80195ca:	69fb      	ldr	r3, [r7, #28]
 80195cc:	4413      	add	r3, r2
 80195ce:	781b      	ldrb	r3, [r3, #0]
 80195d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80195d2:	d0f0      	beq.n	80195b6 <create_name+0xba>
			break;
 80195d4:	e038      	b.n	8019648 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80195d6:	7efb      	ldrb	r3, [r7, #27]
 80195d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80195da:	d003      	beq.n	80195e4 <create_name+0xe8>
 80195dc:	693a      	ldr	r2, [r7, #16]
 80195de:	697b      	ldr	r3, [r7, #20]
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d30c      	bcc.n	80195fe <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80195e4:	697b      	ldr	r3, [r7, #20]
 80195e6:	2b0b      	cmp	r3, #11
 80195e8:	d002      	beq.n	80195f0 <create_name+0xf4>
 80195ea:	7efb      	ldrb	r3, [r7, #27]
 80195ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80195ee:	d001      	beq.n	80195f4 <create_name+0xf8>
 80195f0:	2306      	movs	r3, #6
 80195f2:	e044      	b.n	801967e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80195f4:	2308      	movs	r3, #8
 80195f6:	613b      	str	r3, [r7, #16]
 80195f8:	230b      	movs	r3, #11
 80195fa:	617b      	str	r3, [r7, #20]
			continue;
 80195fc:	e022      	b.n	8019644 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80195fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019602:	2b00      	cmp	r3, #0
 8019604:	da04      	bge.n	8019610 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8019606:	7efb      	ldrb	r3, [r7, #27]
 8019608:	3b80      	subs	r3, #128	@ 0x80
 801960a:	4a1f      	ldr	r2, [pc, #124]	@ (8019688 <create_name+0x18c>)
 801960c:	5cd3      	ldrb	r3, [r2, r3]
 801960e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8019610:	7efb      	ldrb	r3, [r7, #27]
 8019612:	4619      	mov	r1, r3
 8019614:	481d      	ldr	r0, [pc, #116]	@ (801968c <create_name+0x190>)
 8019616:	f7fe fece 	bl	80183b6 <chk_chr>
 801961a:	4603      	mov	r3, r0
 801961c:	2b00      	cmp	r3, #0
 801961e:	d001      	beq.n	8019624 <create_name+0x128>
 8019620:	2306      	movs	r3, #6
 8019622:	e02c      	b.n	801967e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8019624:	7efb      	ldrb	r3, [r7, #27]
 8019626:	2b60      	cmp	r3, #96	@ 0x60
 8019628:	d905      	bls.n	8019636 <create_name+0x13a>
 801962a:	7efb      	ldrb	r3, [r7, #27]
 801962c:	2b7a      	cmp	r3, #122	@ 0x7a
 801962e:	d802      	bhi.n	8019636 <create_name+0x13a>
 8019630:	7efb      	ldrb	r3, [r7, #27]
 8019632:	3b20      	subs	r3, #32
 8019634:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8019636:	693b      	ldr	r3, [r7, #16]
 8019638:	1c5a      	adds	r2, r3, #1
 801963a:	613a      	str	r2, [r7, #16]
 801963c:	68ba      	ldr	r2, [r7, #8]
 801963e:	4413      	add	r3, r2
 8019640:	7efa      	ldrb	r2, [r7, #27]
 8019642:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8019644:	e7a6      	b.n	8019594 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8019646:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8019648:	68fa      	ldr	r2, [r7, #12]
 801964a:	69fb      	ldr	r3, [r7, #28]
 801964c:	441a      	add	r2, r3
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8019652:	693b      	ldr	r3, [r7, #16]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d101      	bne.n	801965c <create_name+0x160>
 8019658:	2306      	movs	r3, #6
 801965a:	e010      	b.n	801967e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801965c:	68bb      	ldr	r3, [r7, #8]
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	2be5      	cmp	r3, #229	@ 0xe5
 8019662:	d102      	bne.n	801966a <create_name+0x16e>
 8019664:	68bb      	ldr	r3, [r7, #8]
 8019666:	2205      	movs	r2, #5
 8019668:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801966a:	7efb      	ldrb	r3, [r7, #27]
 801966c:	2b20      	cmp	r3, #32
 801966e:	d801      	bhi.n	8019674 <create_name+0x178>
 8019670:	2204      	movs	r2, #4
 8019672:	e000      	b.n	8019676 <create_name+0x17a>
 8019674:	2200      	movs	r2, #0
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	330b      	adds	r3, #11
 801967a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801967c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801967e:	4618      	mov	r0, r3
 8019680:	3720      	adds	r7, #32
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}
 8019686:	bf00      	nop
 8019688:	0802bd80 	.word	0x0802bd80
 801968c:	080274cc 	.word	0x080274cc

08019690 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b086      	sub	sp, #24
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801969e:	693b      	ldr	r3, [r7, #16]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80196a4:	683b      	ldr	r3, [r7, #0]
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80196aa:	d00b      	beq.n	80196c4 <follow_path+0x34>
 80196ac:	683b      	ldr	r3, [r7, #0]
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80196b2:	d007      	beq.n	80196c4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	699a      	ldr	r2, [r3, #24]
 80196b8:	693b      	ldr	r3, [r7, #16]
 80196ba:	609a      	str	r2, [r3, #8]
 80196bc:	e00d      	b.n	80196da <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	3301      	adds	r3, #1
 80196c2:	603b      	str	r3, [r7, #0]
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80196ca:	d0f8      	beq.n	80196be <follow_path+0x2e>
 80196cc:	683b      	ldr	r3, [r7, #0]
 80196ce:	781b      	ldrb	r3, [r3, #0]
 80196d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80196d2:	d0f4      	beq.n	80196be <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80196d4:	693b      	ldr	r3, [r7, #16]
 80196d6:	2200      	movs	r2, #0
 80196d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	2b1f      	cmp	r3, #31
 80196e0:	d80a      	bhi.n	80196f8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2280      	movs	r2, #128	@ 0x80
 80196e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80196ea:	2100      	movs	r1, #0
 80196ec:	6878      	ldr	r0, [r7, #4]
 80196ee:	f7ff fbdc 	bl	8018eaa <dir_sdi>
 80196f2:	4603      	mov	r3, r0
 80196f4:	75fb      	strb	r3, [r7, #23]
 80196f6:	e056      	b.n	80197a6 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80196f8:	463b      	mov	r3, r7
 80196fa:	4619      	mov	r1, r3
 80196fc:	6878      	ldr	r0, [r7, #4]
 80196fe:	f7ff fefd 	bl	80194fc <create_name>
 8019702:	4603      	mov	r3, r0
 8019704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019706:	7dfb      	ldrb	r3, [r7, #23]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d147      	bne.n	801979c <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 801970c:	6878      	ldr	r0, [r7, #4]
 801970e:	f7ff fdef 	bl	80192f0 <dir_find>
 8019712:	4603      	mov	r3, r0
 8019714:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801971c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801971e:	7dfb      	ldrb	r3, [r7, #23]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d01b      	beq.n	801975c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019724:	7dfb      	ldrb	r3, [r7, #23]
 8019726:	2b04      	cmp	r3, #4
 8019728:	d13a      	bne.n	80197a0 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801972a:	7afb      	ldrb	r3, [r7, #11]
 801972c:	f003 0320 	and.w	r3, r3, #32
 8019730:	2b00      	cmp	r3, #0
 8019732:	d00b      	beq.n	801974c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8019734:	7afb      	ldrb	r3, [r7, #11]
 8019736:	f003 0304 	and.w	r3, r3, #4
 801973a:	2b00      	cmp	r3, #0
 801973c:	d02c      	beq.n	8019798 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	2280      	movs	r2, #128	@ 0x80
 8019742:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8019746:	2300      	movs	r3, #0
 8019748:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801974a:	e029      	b.n	80197a0 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801974c:	7afb      	ldrb	r3, [r7, #11]
 801974e:	f003 0304 	and.w	r3, r3, #4
 8019752:	2b00      	cmp	r3, #0
 8019754:	d124      	bne.n	80197a0 <follow_path+0x110>
 8019756:	2305      	movs	r3, #5
 8019758:	75fb      	strb	r3, [r7, #23]
				break;
 801975a:	e021      	b.n	80197a0 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801975c:	7afb      	ldrb	r3, [r7, #11]
 801975e:	f003 0304 	and.w	r3, r3, #4
 8019762:	2b00      	cmp	r3, #0
 8019764:	d11e      	bne.n	80197a4 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019766:	693b      	ldr	r3, [r7, #16]
 8019768:	799b      	ldrb	r3, [r3, #6]
 801976a:	f003 0310 	and.w	r3, r3, #16
 801976e:	2b00      	cmp	r3, #0
 8019770:	d102      	bne.n	8019778 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8019772:	2305      	movs	r3, #5
 8019774:	75fb      	strb	r3, [r7, #23]
 8019776:	e016      	b.n	80197a6 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	695b      	ldr	r3, [r3, #20]
 8019782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019786:	4413      	add	r3, r2
 8019788:	4619      	mov	r1, r3
 801978a:	68f8      	ldr	r0, [r7, #12]
 801978c:	f7ff fd14 	bl	80191b8 <ld_clust>
 8019790:	4602      	mov	r2, r0
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	609a      	str	r2, [r3, #8]
 8019796:	e7af      	b.n	80196f8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8019798:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801979a:	e7ad      	b.n	80196f8 <follow_path+0x68>
			if (res != FR_OK) break;
 801979c:	bf00      	nop
 801979e:	e002      	b.n	80197a6 <follow_path+0x116>
				break;
 80197a0:	bf00      	nop
 80197a2:	e000      	b.n	80197a6 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80197a4:	bf00      	nop
			}
		}
	}

	return res;
 80197a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3718      	adds	r7, #24
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}

080197b0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80197b0:	b480      	push	{r7}
 80197b2:	b087      	sub	sp, #28
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80197b8:	f04f 33ff 	mov.w	r3, #4294967295
 80197bc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d031      	beq.n	801982a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	617b      	str	r3, [r7, #20]
 80197cc:	e002      	b.n	80197d4 <get_ldnumber+0x24>
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	3301      	adds	r3, #1
 80197d2:	617b      	str	r3, [r7, #20]
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	781b      	ldrb	r3, [r3, #0]
 80197d8:	2b20      	cmp	r3, #32
 80197da:	d903      	bls.n	80197e4 <get_ldnumber+0x34>
 80197dc:	697b      	ldr	r3, [r7, #20]
 80197de:	781b      	ldrb	r3, [r3, #0]
 80197e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80197e2:	d1f4      	bne.n	80197ce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80197e4:	697b      	ldr	r3, [r7, #20]
 80197e6:	781b      	ldrb	r3, [r3, #0]
 80197e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80197ea:	d11c      	bne.n	8019826 <get_ldnumber+0x76>
			tp = *path;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	1c5a      	adds	r2, r3, #1
 80197f6:	60fa      	str	r2, [r7, #12]
 80197f8:	781b      	ldrb	r3, [r3, #0]
 80197fa:	3b30      	subs	r3, #48	@ 0x30
 80197fc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80197fe:	68bb      	ldr	r3, [r7, #8]
 8019800:	2b09      	cmp	r3, #9
 8019802:	d80e      	bhi.n	8019822 <get_ldnumber+0x72>
 8019804:	68fa      	ldr	r2, [r7, #12]
 8019806:	697b      	ldr	r3, [r7, #20]
 8019808:	429a      	cmp	r2, r3
 801980a:	d10a      	bne.n	8019822 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801980c:	68bb      	ldr	r3, [r7, #8]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d107      	bne.n	8019822 <get_ldnumber+0x72>
					vol = (int)i;
 8019812:	68bb      	ldr	r3, [r7, #8]
 8019814:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	3301      	adds	r3, #1
 801981a:	617b      	str	r3, [r7, #20]
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	697a      	ldr	r2, [r7, #20]
 8019820:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019822:	693b      	ldr	r3, [r7, #16]
 8019824:	e002      	b.n	801982c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8019826:	2300      	movs	r3, #0
 8019828:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801982a:	693b      	ldr	r3, [r7, #16]
}
 801982c:	4618      	mov	r0, r3
 801982e:	371c      	adds	r7, #28
 8019830:	46bd      	mov	sp, r7
 8019832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019836:	4770      	bx	lr

08019838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
 8019840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	2200      	movs	r2, #0
 8019846:	70da      	strb	r2, [r3, #3]
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f04f 32ff 	mov.w	r2, #4294967295
 801984e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019850:	6839      	ldr	r1, [r7, #0]
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f7fe ffac 	bl	80187b0 <move_window>
 8019858:	4603      	mov	r3, r0
 801985a:	2b00      	cmp	r3, #0
 801985c:	d001      	beq.n	8019862 <check_fs+0x2a>
 801985e:	2304      	movs	r3, #4
 8019860:	e038      	b.n	80198d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	3338      	adds	r3, #56	@ 0x38
 8019866:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801986a:	4618      	mov	r0, r3
 801986c:	f7fe fcbe 	bl	80181ec <ld_word>
 8019870:	4603      	mov	r3, r0
 8019872:	461a      	mov	r2, r3
 8019874:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019878:	429a      	cmp	r2, r3
 801987a:	d001      	beq.n	8019880 <check_fs+0x48>
 801987c:	2303      	movs	r3, #3
 801987e:	e029      	b.n	80198d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019886:	2be9      	cmp	r3, #233	@ 0xe9
 8019888:	d009      	beq.n	801989e <check_fs+0x66>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019890:	2beb      	cmp	r3, #235	@ 0xeb
 8019892:	d11e      	bne.n	80198d2 <check_fs+0x9a>
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801989a:	2b90      	cmp	r3, #144	@ 0x90
 801989c:	d119      	bne.n	80198d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	3338      	adds	r3, #56	@ 0x38
 80198a2:	3336      	adds	r3, #54	@ 0x36
 80198a4:	4618      	mov	r0, r3
 80198a6:	f7fe fcb9 	bl	801821c <ld_dword>
 80198aa:	4603      	mov	r3, r0
 80198ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80198b0:	4a0a      	ldr	r2, [pc, #40]	@ (80198dc <check_fs+0xa4>)
 80198b2:	4293      	cmp	r3, r2
 80198b4:	d101      	bne.n	80198ba <check_fs+0x82>
 80198b6:	2300      	movs	r3, #0
 80198b8:	e00c      	b.n	80198d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	3338      	adds	r3, #56	@ 0x38
 80198be:	3352      	adds	r3, #82	@ 0x52
 80198c0:	4618      	mov	r0, r3
 80198c2:	f7fe fcab 	bl	801821c <ld_dword>
 80198c6:	4603      	mov	r3, r0
 80198c8:	4a05      	ldr	r2, [pc, #20]	@ (80198e0 <check_fs+0xa8>)
 80198ca:	4293      	cmp	r3, r2
 80198cc:	d101      	bne.n	80198d2 <check_fs+0x9a>
 80198ce:	2300      	movs	r3, #0
 80198d0:	e000      	b.n	80198d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80198d2:	2302      	movs	r3, #2
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	3708      	adds	r7, #8
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd80      	pop	{r7, pc}
 80198dc:	00544146 	.word	0x00544146
 80198e0:	33544146 	.word	0x33544146

080198e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b096      	sub	sp, #88	@ 0x58
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	60f8      	str	r0, [r7, #12]
 80198ec:	60b9      	str	r1, [r7, #8]
 80198ee:	4613      	mov	r3, r2
 80198f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80198f2:	68bb      	ldr	r3, [r7, #8]
 80198f4:	2200      	movs	r2, #0
 80198f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80198f8:	68f8      	ldr	r0, [r7, #12]
 80198fa:	f7ff ff59 	bl	80197b0 <get_ldnumber>
 80198fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019902:	2b00      	cmp	r3, #0
 8019904:	da01      	bge.n	801990a <find_volume+0x26>
 8019906:	230b      	movs	r3, #11
 8019908:	e238      	b.n	8019d7c <find_volume+0x498>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801990a:	4aa5      	ldr	r2, [pc, #660]	@ (8019ba0 <find_volume+0x2bc>)
 801990c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801990e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019912:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019916:	2b00      	cmp	r3, #0
 8019918:	d101      	bne.n	801991e <find_volume+0x3a>
 801991a:	230c      	movs	r3, #12
 801991c:	e22e      	b.n	8019d7c <find_volume+0x498>

	ENTER_FF(fs);						/* Lock the volume */
 801991e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019920:	f7fe fd64 	bl	80183ec <lock_fs>
 8019924:	4603      	mov	r3, r0
 8019926:	2b00      	cmp	r3, #0
 8019928:	d101      	bne.n	801992e <find_volume+0x4a>
 801992a:	230f      	movs	r3, #15
 801992c:	e226      	b.n	8019d7c <find_volume+0x498>
	*rfs = fs;							/* Return pointer to the file system object */
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019932:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019934:	79fb      	ldrb	r3, [r7, #7]
 8019936:	f023 0301 	bic.w	r3, r3, #1
 801993a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801993c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801993e:	781b      	ldrb	r3, [r3, #0]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d01a      	beq.n	801997a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8019944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019946:	785b      	ldrb	r3, [r3, #1]
 8019948:	4618      	mov	r0, r3
 801994a:	f7fe fbb1 	bl	80180b0 <disk_status>
 801994e:	4603      	mov	r3, r0
 8019950:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019954:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019958:	f003 0301 	and.w	r3, r3, #1
 801995c:	2b00      	cmp	r3, #0
 801995e:	d10c      	bne.n	801997a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019960:	79fb      	ldrb	r3, [r7, #7]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d007      	beq.n	8019976 <find_volume+0x92>
 8019966:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801996a:	f003 0304 	and.w	r3, r3, #4
 801996e:	2b00      	cmp	r3, #0
 8019970:	d001      	beq.n	8019976 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8019972:	230a      	movs	r3, #10
 8019974:	e202      	b.n	8019d7c <find_volume+0x498>
			}
			return FR_OK;				/* The file system object is valid */
 8019976:	2300      	movs	r3, #0
 8019978:	e200      	b.n	8019d7c <find_volume+0x498>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801997c:	2200      	movs	r2, #0
 801997e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019982:	b2da      	uxtb	r2, r3
 8019984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019986:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8019988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801998a:	785b      	ldrb	r3, [r3, #1]
 801998c:	4618      	mov	r0, r3
 801998e:	f7fe fba9 	bl	80180e4 <disk_initialize>
 8019992:	4603      	mov	r3, r0
 8019994:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019998:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801999c:	f003 0301 	and.w	r3, r3, #1
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d001      	beq.n	80199a8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80199a4:	2303      	movs	r3, #3
 80199a6:	e1e9      	b.n	8019d7c <find_volume+0x498>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80199a8:	79fb      	ldrb	r3, [r7, #7]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d007      	beq.n	80199be <find_volume+0xda>
 80199ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80199b2:	f003 0304 	and.w	r3, r3, #4
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d001      	beq.n	80199be <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80199ba:	230a      	movs	r3, #10
 80199bc:	e1de      	b.n	8019d7c <find_volume+0x498>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80199be:	2300      	movs	r3, #0
 80199c0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80199c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80199c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80199c6:	f7ff ff37 	bl	8019838 <check_fs>
 80199ca:	4603      	mov	r3, r0
 80199cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80199d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80199d4:	2b02      	cmp	r3, #2
 80199d6:	d149      	bne.n	8019a6c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80199d8:	2300      	movs	r3, #0
 80199da:	643b      	str	r3, [r7, #64]	@ 0x40
 80199dc:	e01e      	b.n	8019a1c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80199de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199e0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80199e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80199e6:	011b      	lsls	r3, r3, #4
 80199e8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80199ec:	4413      	add	r3, r2
 80199ee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80199f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199f2:	3304      	adds	r3, #4
 80199f4:	781b      	ldrb	r3, [r3, #0]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d006      	beq.n	8019a08 <find_volume+0x124>
 80199fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199fc:	3308      	adds	r3, #8
 80199fe:	4618      	mov	r0, r3
 8019a00:	f7fe fc0c 	bl	801821c <ld_dword>
 8019a04:	4602      	mov	r2, r0
 8019a06:	e000      	b.n	8019a0a <find_volume+0x126>
 8019a08:	2200      	movs	r2, #0
 8019a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a0c:	009b      	lsls	r3, r3, #2
 8019a0e:	3358      	adds	r3, #88	@ 0x58
 8019a10:	443b      	add	r3, r7
 8019a12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a18:	3301      	adds	r3, #1
 8019a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8019a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a1e:	2b03      	cmp	r3, #3
 8019a20:	d9dd      	bls.n	80199de <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8019a22:	2300      	movs	r3, #0
 8019a24:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8019a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d002      	beq.n	8019a32 <find_volume+0x14e>
 8019a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a2e:	3b01      	subs	r3, #1
 8019a30:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8019a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a34:	009b      	lsls	r3, r3, #2
 8019a36:	3358      	adds	r3, #88	@ 0x58
 8019a38:	443b      	add	r3, r7
 8019a3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019a3e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d005      	beq.n	8019a52 <find_volume+0x16e>
 8019a46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019a48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019a4a:	f7ff fef5 	bl	8019838 <check_fs>
 8019a4e:	4603      	mov	r3, r0
 8019a50:	e000      	b.n	8019a54 <find_volume+0x170>
 8019a52:	2303      	movs	r3, #3
 8019a54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019a58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019a5c:	2b01      	cmp	r3, #1
 8019a5e:	d905      	bls.n	8019a6c <find_volume+0x188>
 8019a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a62:	3301      	adds	r3, #1
 8019a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8019a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a68:	2b03      	cmp	r3, #3
 8019a6a:	d9e2      	bls.n	8019a32 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019a70:	2b04      	cmp	r3, #4
 8019a72:	d101      	bne.n	8019a78 <find_volume+0x194>
 8019a74:	2301      	movs	r3, #1
 8019a76:	e181      	b.n	8019d7c <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019a78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019a7c:	2b01      	cmp	r3, #1
 8019a7e:	d901      	bls.n	8019a84 <find_volume+0x1a0>
 8019a80:	230d      	movs	r3, #13
 8019a82:	e17b      	b.n	8019d7c <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8019a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a86:	3338      	adds	r3, #56	@ 0x38
 8019a88:	330b      	adds	r3, #11
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f7fe fbae 	bl	80181ec <ld_word>
 8019a90:	4603      	mov	r3, r0
 8019a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019a96:	d001      	beq.n	8019a9c <find_volume+0x1b8>
 8019a98:	230d      	movs	r3, #13
 8019a9a:	e16f      	b.n	8019d7c <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8019a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a9e:	3338      	adds	r3, #56	@ 0x38
 8019aa0:	3316      	adds	r3, #22
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f7fe fba2 	bl	80181ec <ld_word>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d106      	bne.n	8019ac0 <find_volume+0x1dc>
 8019ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ab4:	3338      	adds	r3, #56	@ 0x38
 8019ab6:	3324      	adds	r3, #36	@ 0x24
 8019ab8:	4618      	mov	r0, r3
 8019aba:	f7fe fbaf 	bl	801821c <ld_dword>
 8019abe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8019ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ac2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019ac4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ac8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8019acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ace:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ad2:	789b      	ldrb	r3, [r3, #2]
 8019ad4:	2b01      	cmp	r3, #1
 8019ad6:	d005      	beq.n	8019ae4 <find_volume+0x200>
 8019ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ada:	789b      	ldrb	r3, [r3, #2]
 8019adc:	2b02      	cmp	r3, #2
 8019ade:	d001      	beq.n	8019ae4 <find_volume+0x200>
 8019ae0:	230d      	movs	r3, #13
 8019ae2:	e14b      	b.n	8019d7c <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ae6:	789b      	ldrb	r3, [r3, #2]
 8019ae8:	461a      	mov	r2, r3
 8019aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019aec:	fb02 f303 	mul.w	r3, r2, r3
 8019af0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019af4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019af8:	461a      	mov	r2, r3
 8019afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019afc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b00:	895b      	ldrh	r3, [r3, #10]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d008      	beq.n	8019b18 <find_volume+0x234>
 8019b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b08:	895b      	ldrh	r3, [r3, #10]
 8019b0a:	461a      	mov	r2, r3
 8019b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b0e:	895b      	ldrh	r3, [r3, #10]
 8019b10:	3b01      	subs	r3, #1
 8019b12:	4013      	ands	r3, r2
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d001      	beq.n	8019b1c <find_volume+0x238>
 8019b18:	230d      	movs	r3, #13
 8019b1a:	e12f      	b.n	8019d7c <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b1e:	3338      	adds	r3, #56	@ 0x38
 8019b20:	3311      	adds	r3, #17
 8019b22:	4618      	mov	r0, r3
 8019b24:	f7fe fb62 	bl	80181ec <ld_word>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	461a      	mov	r2, r3
 8019b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b32:	891b      	ldrh	r3, [r3, #8]
 8019b34:	f003 030f 	and.w	r3, r3, #15
 8019b38:	b29b      	uxth	r3, r3
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d001      	beq.n	8019b42 <find_volume+0x25e>
 8019b3e:	230d      	movs	r3, #13
 8019b40:	e11c      	b.n	8019d7c <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b44:	3338      	adds	r3, #56	@ 0x38
 8019b46:	3313      	adds	r3, #19
 8019b48:	4618      	mov	r0, r3
 8019b4a:	f7fe fb4f 	bl	80181ec <ld_word>
 8019b4e:	4603      	mov	r3, r0
 8019b50:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d106      	bne.n	8019b66 <find_volume+0x282>
 8019b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b5a:	3338      	adds	r3, #56	@ 0x38
 8019b5c:	3320      	adds	r3, #32
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7fe fb5c 	bl	801821c <ld_dword>
 8019b64:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b68:	3338      	adds	r3, #56	@ 0x38
 8019b6a:	330e      	adds	r3, #14
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f7fe fb3d 	bl	80181ec <ld_word>
 8019b72:	4603      	mov	r3, r0
 8019b74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019b76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d101      	bne.n	8019b80 <find_volume+0x29c>
 8019b7c:	230d      	movs	r3, #13
 8019b7e:	e0fd      	b.n	8019d7c <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8019b80:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b84:	4413      	add	r3, r2
 8019b86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019b88:	8912      	ldrh	r2, [r2, #8]
 8019b8a:	0912      	lsrs	r2, r2, #4
 8019b8c:	b292      	uxth	r2, r2
 8019b8e:	4413      	add	r3, r2
 8019b90:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8019b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b96:	429a      	cmp	r2, r3
 8019b98:	d204      	bcs.n	8019ba4 <find_volume+0x2c0>
 8019b9a:	230d      	movs	r3, #13
 8019b9c:	e0ee      	b.n	8019d7c <find_volume+0x498>
 8019b9e:	bf00      	nop
 8019ba0:	2001c884 	.word	0x2001c884
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ba8:	1ad3      	subs	r3, r2, r3
 8019baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019bac:	8952      	ldrh	r2, [r2, #10]
 8019bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8019bb2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d101      	bne.n	8019bbe <find_volume+0x2da>
 8019bba:	230d      	movs	r3, #13
 8019bbc:	e0de      	b.n	8019d7c <find_volume+0x498>
		fmt = FS_FAT32;
 8019bbe:	2303      	movs	r3, #3
 8019bc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bc6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8019bca:	4293      	cmp	r3, r2
 8019bcc:	d802      	bhi.n	8019bd4 <find_volume+0x2f0>
 8019bce:	2302      	movs	r3, #2
 8019bd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bd6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8019bda:	4293      	cmp	r3, r2
 8019bdc:	d802      	bhi.n	8019be4 <find_volume+0x300>
 8019bde:	2301      	movs	r3, #1
 8019be0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019be6:	1c9a      	adds	r2, r3, #2
 8019be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bea:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8019bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019bf0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019bf2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bf6:	441a      	add	r2, r3
 8019bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bfa:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8019bfc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c00:	441a      	add	r2, r3
 8019c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c04:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8019c06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019c0a:	2b03      	cmp	r3, #3
 8019c0c:	d11e      	bne.n	8019c4c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c10:	3338      	adds	r3, #56	@ 0x38
 8019c12:	332a      	adds	r3, #42	@ 0x2a
 8019c14:	4618      	mov	r0, r3
 8019c16:	f7fe fae9 	bl	80181ec <ld_word>
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d001      	beq.n	8019c24 <find_volume+0x340>
 8019c20:	230d      	movs	r3, #13
 8019c22:	e0ab      	b.n	8019d7c <find_volume+0x498>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c26:	891b      	ldrh	r3, [r3, #8]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d001      	beq.n	8019c30 <find_volume+0x34c>
 8019c2c:	230d      	movs	r3, #13
 8019c2e:	e0a5      	b.n	8019d7c <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c32:	3338      	adds	r3, #56	@ 0x38
 8019c34:	332c      	adds	r3, #44	@ 0x2c
 8019c36:	4618      	mov	r0, r3
 8019c38:	f7fe faf0 	bl	801821c <ld_dword>
 8019c3c:	4602      	mov	r2, r0
 8019c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c40:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c44:	69db      	ldr	r3, [r3, #28]
 8019c46:	009b      	lsls	r3, r3, #2
 8019c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8019c4a:	e01f      	b.n	8019c8c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c4e:	891b      	ldrh	r3, [r3, #8]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d101      	bne.n	8019c58 <find_volume+0x374>
 8019c54:	230d      	movs	r3, #13
 8019c56:	e091      	b.n	8019d7c <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c5e:	441a      	add	r2, r3
 8019c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c62:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019c64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019c68:	2b02      	cmp	r3, #2
 8019c6a:	d103      	bne.n	8019c74 <find_volume+0x390>
 8019c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c6e:	69db      	ldr	r3, [r3, #28]
 8019c70:	005b      	lsls	r3, r3, #1
 8019c72:	e00a      	b.n	8019c8a <find_volume+0x3a6>
 8019c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c76:	69da      	ldr	r2, [r3, #28]
 8019c78:	4613      	mov	r3, r2
 8019c7a:	005b      	lsls	r3, r3, #1
 8019c7c:	4413      	add	r3, r2
 8019c7e:	085a      	lsrs	r2, r3, #1
 8019c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c82:	69db      	ldr	r3, [r3, #28]
 8019c84:	f003 0301 	and.w	r3, r3, #1
 8019c88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019c8a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c8e:	6a1a      	ldr	r2, [r3, #32]
 8019c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019c92:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8019c96:	0a5b      	lsrs	r3, r3, #9
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	d201      	bcs.n	8019ca0 <find_volume+0x3bc>
 8019c9c:	230d      	movs	r3, #13
 8019c9e:	e06d      	b.n	8019d7c <find_volume+0x498>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8019ca6:	615a      	str	r2, [r3, #20]
 8019ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019caa:	695a      	ldr	r2, [r3, #20]
 8019cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8019cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cb2:	2280      	movs	r2, #128	@ 0x80
 8019cb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019cba:	2b03      	cmp	r3, #3
 8019cbc:	d149      	bne.n	8019d52 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cc0:	3338      	adds	r3, #56	@ 0x38
 8019cc2:	3330      	adds	r3, #48	@ 0x30
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	f7fe fa91 	bl	80181ec <ld_word>
 8019cca:	4603      	mov	r3, r0
 8019ccc:	2b01      	cmp	r3, #1
 8019cce:	d140      	bne.n	8019d52 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019cd2:	3301      	adds	r3, #1
 8019cd4:	4619      	mov	r1, r3
 8019cd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019cd8:	f7fe fd6a 	bl	80187b0 <move_window>
 8019cdc:	4603      	mov	r3, r0
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d137      	bne.n	8019d52 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8019ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cea:	3338      	adds	r3, #56	@ 0x38
 8019cec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f7fe fa7b 	bl	80181ec <ld_word>
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	461a      	mov	r2, r3
 8019cfa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019cfe:	429a      	cmp	r2, r3
 8019d00:	d127      	bne.n	8019d52 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d04:	3338      	adds	r3, #56	@ 0x38
 8019d06:	4618      	mov	r0, r3
 8019d08:	f7fe fa88 	bl	801821c <ld_dword>
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8019d84 <find_volume+0x4a0>)
 8019d10:	4293      	cmp	r3, r2
 8019d12:	d11e      	bne.n	8019d52 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d16:	3338      	adds	r3, #56	@ 0x38
 8019d18:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f7fe fa7d 	bl	801821c <ld_dword>
 8019d22:	4603      	mov	r3, r0
 8019d24:	4a18      	ldr	r2, [pc, #96]	@ (8019d88 <find_volume+0x4a4>)
 8019d26:	4293      	cmp	r3, r2
 8019d28:	d113      	bne.n	8019d52 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d2c:	3338      	adds	r3, #56	@ 0x38
 8019d2e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7fe fa72 	bl	801821c <ld_dword>
 8019d38:	4602      	mov	r2, r0
 8019d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d3c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d40:	3338      	adds	r3, #56	@ 0x38
 8019d42:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8019d46:	4618      	mov	r0, r3
 8019d48:	f7fe fa68 	bl	801821c <ld_dword>
 8019d4c:	4602      	mov	r2, r0
 8019d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d50:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d54:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8019d58:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8019d8c <find_volume+0x4a8>)
 8019d5c:	881b      	ldrh	r3, [r3, #0]
 8019d5e:	3301      	adds	r3, #1
 8019d60:	b29a      	uxth	r2, r3
 8019d62:	4b0a      	ldr	r3, [pc, #40]	@ (8019d8c <find_volume+0x4a8>)
 8019d64:	801a      	strh	r2, [r3, #0]
 8019d66:	4b09      	ldr	r3, [pc, #36]	@ (8019d8c <find_volume+0x4a8>)
 8019d68:	881a      	ldrh	r2, [r3, #0]
 8019d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d6c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8019d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d70:	2200      	movs	r2, #0
 8019d72:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019d74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019d76:	f7fe fcb3 	bl	80186e0 <clear_lock>
#endif
	return FR_OK;
 8019d7a:	2300      	movs	r3, #0
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	3758      	adds	r7, #88	@ 0x58
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}
 8019d84:	41615252 	.word	0x41615252
 8019d88:	61417272 	.word	0x61417272
 8019d8c:	2001c888 	.word	0x2001c888

08019d90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
 8019d98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019d9a:	2309      	movs	r3, #9
 8019d9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d02e      	beq.n	8019e02 <validate+0x72>
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d02a      	beq.n	8019e02 <validate+0x72>
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d025      	beq.n	8019e02 <validate+0x72>
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	889a      	ldrh	r2, [r3, #4]
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	88db      	ldrh	r3, [r3, #6]
 8019dc0:	429a      	cmp	r2, r3
 8019dc2:	d11e      	bne.n	8019e02 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	4618      	mov	r0, r3
 8019dca:	f7fe fb0f 	bl	80183ec <lock_fs>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d014      	beq.n	8019dfe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	785b      	ldrb	r3, [r3, #1]
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f7fe f968 	bl	80180b0 <disk_status>
 8019de0:	4603      	mov	r3, r0
 8019de2:	f003 0301 	and.w	r3, r3, #1
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d102      	bne.n	8019df0 <validate+0x60>
				res = FR_OK;
 8019dea:	2300      	movs	r3, #0
 8019dec:	73fb      	strb	r3, [r7, #15]
 8019dee:	e008      	b.n	8019e02 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	2100      	movs	r1, #0
 8019df6:	4618      	mov	r0, r3
 8019df8:	f7fe fb0e 	bl	8018418 <unlock_fs>
 8019dfc:	e001      	b.n	8019e02 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8019dfe:	230f      	movs	r3, #15
 8019e00:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019e02:	7bfb      	ldrb	r3, [r7, #15]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d102      	bne.n	8019e0e <validate+0x7e>
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	e000      	b.n	8019e10 <validate+0x80>
 8019e0e:	2300      	movs	r3, #0
 8019e10:	683a      	ldr	r2, [r7, #0]
 8019e12:	6013      	str	r3, [r2, #0]
	return res;
 8019e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e16:	4618      	mov	r0, r3
 8019e18:	3710      	adds	r7, #16
 8019e1a:	46bd      	mov	sp, r7
 8019e1c:	bd80      	pop	{r7, pc}
	...

08019e20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b088      	sub	sp, #32
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	60f8      	str	r0, [r7, #12]
 8019e28:	60b9      	str	r1, [r7, #8]
 8019e2a:	4613      	mov	r3, r2
 8019e2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019e2e:	68bb      	ldr	r3, [r7, #8]
 8019e30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019e32:	f107 0310 	add.w	r3, r7, #16
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7ff fcba 	bl	80197b0 <get_ldnumber>
 8019e3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019e3e:	69fb      	ldr	r3, [r7, #28]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	da01      	bge.n	8019e48 <f_mount+0x28>
 8019e44:	230b      	movs	r3, #11
 8019e46:	e048      	b.n	8019eda <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019e48:	4a26      	ldr	r2, [pc, #152]	@ (8019ee4 <f_mount+0xc4>)
 8019e4a:	69fb      	ldr	r3, [r7, #28]
 8019e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019e52:	69bb      	ldr	r3, [r7, #24]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d00f      	beq.n	8019e78 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019e58:	69b8      	ldr	r0, [r7, #24]
 8019e5a:	f7fe fc41 	bl	80186e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8019e5e:	69bb      	ldr	r3, [r7, #24]
 8019e60:	68db      	ldr	r3, [r3, #12]
 8019e62:	4618      	mov	r0, r3
 8019e64:	f001 ff22 	bl	801bcac <ff_del_syncobj>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d101      	bne.n	8019e72 <f_mount+0x52>
 8019e6e:	2302      	movs	r3, #2
 8019e70:	e033      	b.n	8019eda <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019e72:	69bb      	ldr	r3, [r7, #24]
 8019e74:	2200      	movs	r2, #0
 8019e76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d00f      	beq.n	8019e9e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	2200      	movs	r2, #0
 8019e82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8019e84:	69fb      	ldr	r3, [r7, #28]
 8019e86:	b2da      	uxtb	r2, r3
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	330c      	adds	r3, #12
 8019e8c:	4619      	mov	r1, r3
 8019e8e:	4610      	mov	r0, r2
 8019e90:	f001 fef1 	bl	801bc76 <ff_cre_syncobj>
 8019e94:	4603      	mov	r3, r0
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d101      	bne.n	8019e9e <f_mount+0x7e>
 8019e9a:	2302      	movs	r3, #2
 8019e9c:	e01d      	b.n	8019eda <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019e9e:	68fa      	ldr	r2, [r7, #12]
 8019ea0:	4910      	ldr	r1, [pc, #64]	@ (8019ee4 <f_mount+0xc4>)
 8019ea2:	69fb      	ldr	r3, [r7, #28]
 8019ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d002      	beq.n	8019eb4 <f_mount+0x94>
 8019eae:	79fb      	ldrb	r3, [r7, #7]
 8019eb0:	2b01      	cmp	r3, #1
 8019eb2:	d001      	beq.n	8019eb8 <f_mount+0x98>
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	e010      	b.n	8019eda <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8019eb8:	f107 010c 	add.w	r1, r7, #12
 8019ebc:	f107 0308 	add.w	r3, r7, #8
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f7ff fd0e 	bl	80198e4 <find_volume>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	7dfa      	ldrb	r2, [r7, #23]
 8019ed0:	4611      	mov	r1, r2
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f7fe faa0 	bl	8018418 <unlock_fs>
 8019ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8019eda:	4618      	mov	r0, r3
 8019edc:	3720      	adds	r7, #32
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd80      	pop	{r7, pc}
 8019ee2:	bf00      	nop
 8019ee4:	2001c884 	.word	0x2001c884

08019ee8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b098      	sub	sp, #96	@ 0x60
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	60f8      	str	r0, [r7, #12]
 8019ef0:	60b9      	str	r1, [r7, #8]
 8019ef2:	4613      	mov	r3, r2
 8019ef4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d101      	bne.n	8019f00 <f_open+0x18>
 8019efc:	2309      	movs	r3, #9
 8019efe:	e1b0      	b.n	801a262 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019f00:	79fb      	ldrb	r3, [r7, #7]
 8019f02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019f06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019f08:	79fa      	ldrb	r2, [r7, #7]
 8019f0a:	f107 0110 	add.w	r1, r7, #16
 8019f0e:	f107 0308 	add.w	r3, r7, #8
 8019f12:	4618      	mov	r0, r3
 8019f14:	f7ff fce6 	bl	80198e4 <find_volume>
 8019f18:	4603      	mov	r3, r0
 8019f1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8019f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	f040 818d 	bne.w	801a242 <f_open+0x35a>
		dj.obj.fs = fs;
 8019f28:	693b      	ldr	r3, [r7, #16]
 8019f2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019f2c:	68ba      	ldr	r2, [r7, #8]
 8019f2e:	f107 0314 	add.w	r3, r7, #20
 8019f32:	4611      	mov	r1, r2
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7ff fbab 	bl	8019690 <follow_path>
 8019f3a:	4603      	mov	r3, r0
 8019f3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019f40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d118      	bne.n	8019f7a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019f48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019f4c:	b25b      	sxtb	r3, r3
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	da03      	bge.n	8019f5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8019f52:	2306      	movs	r3, #6
 8019f54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8019f58:	e00f      	b.n	8019f7a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019f5a:	79fb      	ldrb	r3, [r7, #7]
 8019f5c:	2b01      	cmp	r3, #1
 8019f5e:	bf8c      	ite	hi
 8019f60:	2301      	movhi	r3, #1
 8019f62:	2300      	movls	r3, #0
 8019f64:	b2db      	uxtb	r3, r3
 8019f66:	461a      	mov	r2, r3
 8019f68:	f107 0314 	add.w	r3, r7, #20
 8019f6c:	4611      	mov	r1, r2
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7fe fa6e 	bl	8018450 <chk_lock>
 8019f74:	4603      	mov	r3, r0
 8019f76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019f7a:	79fb      	ldrb	r3, [r7, #7]
 8019f7c:	f003 031c 	and.w	r3, r3, #28
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d07f      	beq.n	801a084 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8019f84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d017      	beq.n	8019fbc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8019f90:	2b04      	cmp	r3, #4
 8019f92:	d10e      	bne.n	8019fb2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019f94:	f7fe fab8 	bl	8018508 <enq_lock>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d006      	beq.n	8019fac <f_open+0xc4>
 8019f9e:	f107 0314 	add.w	r3, r7, #20
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f7ff f9f9 	bl	801939a <dir_register>
 8019fa8:	4603      	mov	r3, r0
 8019faa:	e000      	b.n	8019fae <f_open+0xc6>
 8019fac:	2312      	movs	r3, #18
 8019fae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019fb2:	79fb      	ldrb	r3, [r7, #7]
 8019fb4:	f043 0308 	orr.w	r3, r3, #8
 8019fb8:	71fb      	strb	r3, [r7, #7]
 8019fba:	e010      	b.n	8019fde <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019fbc:	7ebb      	ldrb	r3, [r7, #26]
 8019fbe:	f003 0311 	and.w	r3, r3, #17
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d003      	beq.n	8019fce <f_open+0xe6>
					res = FR_DENIED;
 8019fc6:	2307      	movs	r3, #7
 8019fc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8019fcc:	e007      	b.n	8019fde <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019fce:	79fb      	ldrb	r3, [r7, #7]
 8019fd0:	f003 0304 	and.w	r3, r3, #4
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d002      	beq.n	8019fde <f_open+0xf6>
 8019fd8:	2308      	movs	r3, #8
 8019fda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019fde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d168      	bne.n	801a0b8 <f_open+0x1d0>
 8019fe6:	79fb      	ldrb	r3, [r7, #7]
 8019fe8:	f003 0308 	and.w	r3, r3, #8
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d063      	beq.n	801a0b8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8019ff0:	f7f0 f9d6 	bl	800a3a0 <get_fattime>
 8019ff4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ff8:	330e      	adds	r3, #14
 8019ffa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f7fe f94b 	bl	8018298 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801a002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a004:	3316      	adds	r3, #22
 801a006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a008:	4618      	mov	r0, r3
 801a00a:	f7fe f945 	bl	8018298 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801a00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a010:	330b      	adds	r3, #11
 801a012:	2220      	movs	r2, #32
 801a014:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801a016:	693b      	ldr	r3, [r7, #16]
 801a018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a01a:	4611      	mov	r1, r2
 801a01c:	4618      	mov	r0, r3
 801a01e:	f7ff f8cb 	bl	80191b8 <ld_clust>
 801a022:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801a024:	693b      	ldr	r3, [r7, #16]
 801a026:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a028:	2200      	movs	r2, #0
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7ff f8e3 	bl	80191f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801a030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a032:	331c      	adds	r3, #28
 801a034:	2100      	movs	r1, #0
 801a036:	4618      	mov	r0, r3
 801a038:	f7fe f92e 	bl	8018298 <st_dword>
					fs->wflag = 1;
 801a03c:	693b      	ldr	r3, [r7, #16]
 801a03e:	2201      	movs	r2, #1
 801a040:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801a042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a044:	2b00      	cmp	r3, #0
 801a046:	d037      	beq.n	801a0b8 <f_open+0x1d0>
						dw = fs->winsect;
 801a048:	693b      	ldr	r3, [r7, #16]
 801a04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a04c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801a04e:	f107 0314 	add.w	r3, r7, #20
 801a052:	2200      	movs	r2, #0
 801a054:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801a056:	4618      	mov	r0, r3
 801a058:	f7fe fdf6 	bl	8018c48 <remove_chain>
 801a05c:	4603      	mov	r3, r0
 801a05e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801a062:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a066:	2b00      	cmp	r3, #0
 801a068:	d126      	bne.n	801a0b8 <f_open+0x1d0>
							res = move_window(fs, dw);
 801a06a:	693b      	ldr	r3, [r7, #16]
 801a06c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a06e:	4618      	mov	r0, r3
 801a070:	f7fe fb9e 	bl	80187b0 <move_window>
 801a074:	4603      	mov	r3, r0
 801a076:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801a07a:	693b      	ldr	r3, [r7, #16]
 801a07c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a07e:	3a01      	subs	r2, #1
 801a080:	611a      	str	r2, [r3, #16]
 801a082:	e019      	b.n	801a0b8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801a084:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d115      	bne.n	801a0b8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801a08c:	7ebb      	ldrb	r3, [r7, #26]
 801a08e:	f003 0310 	and.w	r3, r3, #16
 801a092:	2b00      	cmp	r3, #0
 801a094:	d003      	beq.n	801a09e <f_open+0x1b6>
					res = FR_NO_FILE;
 801a096:	2304      	movs	r3, #4
 801a098:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a09c:	e00c      	b.n	801a0b8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801a09e:	79fb      	ldrb	r3, [r7, #7]
 801a0a0:	f003 0302 	and.w	r3, r3, #2
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d007      	beq.n	801a0b8 <f_open+0x1d0>
 801a0a8:	7ebb      	ldrb	r3, [r7, #26]
 801a0aa:	f003 0301 	and.w	r3, r3, #1
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d002      	beq.n	801a0b8 <f_open+0x1d0>
						res = FR_DENIED;
 801a0b2:	2307      	movs	r3, #7
 801a0b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801a0b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d126      	bne.n	801a10e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801a0c0:	79fb      	ldrb	r3, [r7, #7]
 801a0c2:	f003 0308 	and.w	r3, r3, #8
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d003      	beq.n	801a0d2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801a0ca:	79fb      	ldrb	r3, [r7, #7]
 801a0cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a0d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a0d2:	693b      	ldr	r3, [r7, #16]
 801a0d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801a0da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a0e0:	79fb      	ldrb	r3, [r7, #7]
 801a0e2:	2b01      	cmp	r3, #1
 801a0e4:	bf8c      	ite	hi
 801a0e6:	2301      	movhi	r3, #1
 801a0e8:	2300      	movls	r3, #0
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	f107 0314 	add.w	r3, r7, #20
 801a0f2:	4611      	mov	r1, r2
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f7fe fa29 	bl	801854c <inc_lock>
 801a0fa:	4602      	mov	r2, r0
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	691b      	ldr	r3, [r3, #16]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d102      	bne.n	801a10e <f_open+0x226>
 801a108:	2302      	movs	r3, #2
 801a10a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801a10e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a112:	2b00      	cmp	r3, #0
 801a114:	f040 8095 	bne.w	801a242 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801a118:	693b      	ldr	r3, [r7, #16]
 801a11a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a11c:	4611      	mov	r1, r2
 801a11e:	4618      	mov	r0, r3
 801a120:	f7ff f84a 	bl	80191b8 <ld_clust>
 801a124:	4602      	mov	r2, r0
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a12c:	331c      	adds	r3, #28
 801a12e:	4618      	mov	r0, r3
 801a130:	f7fe f874 	bl	801821c <ld_dword>
 801a134:	4602      	mov	r2, r0
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	2200      	movs	r2, #0
 801a13e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801a140:	693a      	ldr	r2, [r7, #16]
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801a146:	693b      	ldr	r3, [r7, #16]
 801a148:	88da      	ldrh	r2, [r3, #6]
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	79fa      	ldrb	r2, [r7, #7]
 801a152:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	2200      	movs	r2, #0
 801a158:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	2200      	movs	r2, #0
 801a15e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	2200      	movs	r2, #0
 801a164:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	3330      	adds	r3, #48	@ 0x30
 801a16a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a16e:	2100      	movs	r1, #0
 801a170:	4618      	mov	r0, r3
 801a172:	f7fe f8de 	bl	8018332 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801a176:	79fb      	ldrb	r3, [r7, #7]
 801a178:	f003 0320 	and.w	r3, r3, #32
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d060      	beq.n	801a242 <f_open+0x35a>
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	68db      	ldr	r3, [r3, #12]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d05c      	beq.n	801a242 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	68da      	ldr	r2, [r3, #12]
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a190:	693b      	ldr	r3, [r7, #16]
 801a192:	895b      	ldrh	r3, [r3, #10]
 801a194:	025b      	lsls	r3, r3, #9
 801a196:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	689b      	ldr	r3, [r3, #8]
 801a19c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	68db      	ldr	r3, [r3, #12]
 801a1a2:	657b      	str	r3, [r7, #84]	@ 0x54
 801a1a4:	e016      	b.n	801a1d4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	f7fe fbbb 	bl	8018926 <get_fat>
 801a1b0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801a1b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a1b4:	2b01      	cmp	r3, #1
 801a1b6:	d802      	bhi.n	801a1be <f_open+0x2d6>
 801a1b8:	2302      	movs	r3, #2
 801a1ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801a1be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1c4:	d102      	bne.n	801a1cc <f_open+0x2e4>
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a1cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1d0:	1ad3      	subs	r3, r2, r3
 801a1d2:	657b      	str	r3, [r7, #84]	@ 0x54
 801a1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d103      	bne.n	801a1e4 <f_open+0x2fc>
 801a1dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a1de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1e0:	429a      	cmp	r2, r3
 801a1e2:	d8e0      	bhi.n	801a1a6 <f_open+0x2be>
				}
				fp->clust = clst;
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a1ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d127      	bne.n	801a242 <f_open+0x35a>
 801a1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d022      	beq.n	801a242 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a1fc:	693b      	ldr	r3, [r7, #16]
 801a1fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a200:	4618      	mov	r0, r3
 801a202:	f7fe fb71 	bl	80188e8 <clust2sect>
 801a206:	6478      	str	r0, [r7, #68]	@ 0x44
 801a208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d103      	bne.n	801a216 <f_open+0x32e>
						res = FR_INT_ERR;
 801a20e:	2302      	movs	r3, #2
 801a210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a214:	e015      	b.n	801a242 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a218:	0a5a      	lsrs	r2, r3, #9
 801a21a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a21c:	441a      	add	r2, r3
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a222:	693b      	ldr	r3, [r7, #16]
 801a224:	7858      	ldrb	r0, [r3, #1]
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	6a1a      	ldr	r2, [r3, #32]
 801a230:	2301      	movs	r3, #1
 801a232:	f7fd ff7d 	bl	8018130 <disk_read>
 801a236:	4603      	mov	r3, r0
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d002      	beq.n	801a242 <f_open+0x35a>
 801a23c:	2301      	movs	r3, #1
 801a23e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a242:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a246:	2b00      	cmp	r3, #0
 801a248:	d002      	beq.n	801a250 <f_open+0x368>
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	2200      	movs	r2, #0
 801a24e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801a250:	693b      	ldr	r3, [r7, #16]
 801a252:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a256:	4611      	mov	r1, r2
 801a258:	4618      	mov	r0, r3
 801a25a:	f7fe f8dd 	bl	8018418 <unlock_fs>
 801a25e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801a262:	4618      	mov	r0, r3
 801a264:	3760      	adds	r7, #96	@ 0x60
 801a266:	46bd      	mov	sp, r7
 801a268:	bd80      	pop	{r7, pc}

0801a26a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801a26a:	b580      	push	{r7, lr}
 801a26c:	b08e      	sub	sp, #56	@ 0x38
 801a26e:	af00      	add	r7, sp, #0
 801a270:	60f8      	str	r0, [r7, #12]
 801a272:	60b9      	str	r1, [r7, #8]
 801a274:	607a      	str	r2, [r7, #4]
 801a276:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801a278:	68bb      	ldr	r3, [r7, #8]
 801a27a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801a27c:	683b      	ldr	r3, [r7, #0]
 801a27e:	2200      	movs	r2, #0
 801a280:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	f107 0214 	add.w	r2, r7, #20
 801a288:	4611      	mov	r1, r2
 801a28a:	4618      	mov	r0, r3
 801a28c:	f7ff fd80 	bl	8019d90 <validate>
 801a290:	4603      	mov	r3, r0
 801a292:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d107      	bne.n	801a2ae <f_read+0x44>
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	7d5b      	ldrb	r3, [r3, #21]
 801a2a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801a2a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d009      	beq.n	801a2c2 <f_read+0x58>
 801a2ae:	697b      	ldr	r3, [r7, #20]
 801a2b0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801a2b4:	4611      	mov	r1, r2
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f7fe f8ae 	bl	8018418 <unlock_fs>
 801a2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a2c0:	e13d      	b.n	801a53e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	7d1b      	ldrb	r3, [r3, #20]
 801a2c6:	f003 0301 	and.w	r3, r3, #1
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d106      	bne.n	801a2dc <f_read+0x72>
 801a2ce:	697b      	ldr	r3, [r7, #20]
 801a2d0:	2107      	movs	r1, #7
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f7fe f8a0 	bl	8018418 <unlock_fs>
 801a2d8:	2307      	movs	r3, #7
 801a2da:	e130      	b.n	801a53e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	68da      	ldr	r2, [r3, #12]
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	699b      	ldr	r3, [r3, #24]
 801a2e4:	1ad3      	subs	r3, r2, r3
 801a2e6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801a2e8:	687a      	ldr	r2, [r7, #4]
 801a2ea:	6a3b      	ldr	r3, [r7, #32]
 801a2ec:	429a      	cmp	r2, r3
 801a2ee:	f240 811c 	bls.w	801a52a <f_read+0x2c0>
 801a2f2:	6a3b      	ldr	r3, [r7, #32]
 801a2f4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801a2f6:	e118      	b.n	801a52a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	699b      	ldr	r3, [r3, #24]
 801a2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a300:	2b00      	cmp	r3, #0
 801a302:	f040 80e4 	bne.w	801a4ce <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	699b      	ldr	r3, [r3, #24]
 801a30a:	0a5b      	lsrs	r3, r3, #9
 801a30c:	697a      	ldr	r2, [r7, #20]
 801a30e:	8952      	ldrh	r2, [r2, #10]
 801a310:	3a01      	subs	r2, #1
 801a312:	4013      	ands	r3, r2
 801a314:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801a316:	69fb      	ldr	r3, [r7, #28]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d139      	bne.n	801a390 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	699b      	ldr	r3, [r3, #24]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d103      	bne.n	801a32c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	689b      	ldr	r3, [r3, #8]
 801a328:	633b      	str	r3, [r7, #48]	@ 0x30
 801a32a:	e013      	b.n	801a354 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a330:	2b00      	cmp	r3, #0
 801a332:	d007      	beq.n	801a344 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	699b      	ldr	r3, [r3, #24]
 801a338:	4619      	mov	r1, r3
 801a33a:	68f8      	ldr	r0, [r7, #12]
 801a33c:	f7fe fd81 	bl	8018e42 <clmt_clust>
 801a340:	6338      	str	r0, [r7, #48]	@ 0x30
 801a342:	e007      	b.n	801a354 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801a344:	68fa      	ldr	r2, [r7, #12]
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	69db      	ldr	r3, [r3, #28]
 801a34a:	4619      	mov	r1, r3
 801a34c:	4610      	mov	r0, r2
 801a34e:	f7fe faea 	bl	8018926 <get_fat>
 801a352:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a356:	2b01      	cmp	r3, #1
 801a358:	d809      	bhi.n	801a36e <f_read+0x104>
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	2202      	movs	r2, #2
 801a35e:	755a      	strb	r2, [r3, #21]
 801a360:	697b      	ldr	r3, [r7, #20]
 801a362:	2102      	movs	r1, #2
 801a364:	4618      	mov	r0, r3
 801a366:	f7fe f857 	bl	8018418 <unlock_fs>
 801a36a:	2302      	movs	r3, #2
 801a36c:	e0e7      	b.n	801a53e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a370:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a374:	d109      	bne.n	801a38a <f_read+0x120>
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	2201      	movs	r2, #1
 801a37a:	755a      	strb	r2, [r3, #21]
 801a37c:	697b      	ldr	r3, [r7, #20]
 801a37e:	2101      	movs	r1, #1
 801a380:	4618      	mov	r0, r3
 801a382:	f7fe f849 	bl	8018418 <unlock_fs>
 801a386:	2301      	movs	r3, #1
 801a388:	e0d9      	b.n	801a53e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a38e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a390:	697a      	ldr	r2, [r7, #20]
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	69db      	ldr	r3, [r3, #28]
 801a396:	4619      	mov	r1, r3
 801a398:	4610      	mov	r0, r2
 801a39a:	f7fe faa5 	bl	80188e8 <clust2sect>
 801a39e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d109      	bne.n	801a3ba <f_read+0x150>
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	2202      	movs	r2, #2
 801a3aa:	755a      	strb	r2, [r3, #21]
 801a3ac:	697b      	ldr	r3, [r7, #20]
 801a3ae:	2102      	movs	r1, #2
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	f7fe f831 	bl	8018418 <unlock_fs>
 801a3b6:	2302      	movs	r3, #2
 801a3b8:	e0c1      	b.n	801a53e <f_read+0x2d4>
			sect += csect;
 801a3ba:	69ba      	ldr	r2, [r7, #24]
 801a3bc:	69fb      	ldr	r3, [r7, #28]
 801a3be:	4413      	add	r3, r2
 801a3c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	0a5b      	lsrs	r3, r3, #9
 801a3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d03e      	beq.n	801a44c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a3ce:	69fa      	ldr	r2, [r7, #28]
 801a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3d2:	4413      	add	r3, r2
 801a3d4:	697a      	ldr	r2, [r7, #20]
 801a3d6:	8952      	ldrh	r2, [r2, #10]
 801a3d8:	4293      	cmp	r3, r2
 801a3da:	d905      	bls.n	801a3e8 <f_read+0x17e>
					cc = fs->csize - csect;
 801a3dc:	697b      	ldr	r3, [r7, #20]
 801a3de:	895b      	ldrh	r3, [r3, #10]
 801a3e0:	461a      	mov	r2, r3
 801a3e2:	69fb      	ldr	r3, [r7, #28]
 801a3e4:	1ad3      	subs	r3, r2, r3
 801a3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a3e8:	697b      	ldr	r3, [r7, #20]
 801a3ea:	7858      	ldrb	r0, [r3, #1]
 801a3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ee:	69ba      	ldr	r2, [r7, #24]
 801a3f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a3f2:	f7fd fe9d 	bl	8018130 <disk_read>
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d009      	beq.n	801a410 <f_read+0x1a6>
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	2201      	movs	r2, #1
 801a400:	755a      	strb	r2, [r3, #21]
 801a402:	697b      	ldr	r3, [r7, #20]
 801a404:	2101      	movs	r1, #1
 801a406:	4618      	mov	r0, r3
 801a408:	f7fe f806 	bl	8018418 <unlock_fs>
 801a40c:	2301      	movs	r3, #1
 801a40e:	e096      	b.n	801a53e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	7d1b      	ldrb	r3, [r3, #20]
 801a414:	b25b      	sxtb	r3, r3
 801a416:	2b00      	cmp	r3, #0
 801a418:	da14      	bge.n	801a444 <f_read+0x1da>
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	6a1a      	ldr	r2, [r3, #32]
 801a41e:	69bb      	ldr	r3, [r7, #24]
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a424:	429a      	cmp	r2, r3
 801a426:	d90d      	bls.n	801a444 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	6a1a      	ldr	r2, [r3, #32]
 801a42c:	69bb      	ldr	r3, [r7, #24]
 801a42e:	1ad3      	subs	r3, r2, r3
 801a430:	025b      	lsls	r3, r3, #9
 801a432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a434:	18d0      	adds	r0, r2, r3
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	3330      	adds	r3, #48	@ 0x30
 801a43a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a43e:	4619      	mov	r1, r3
 801a440:	f7fd ff56 	bl	80182f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a446:	025b      	lsls	r3, r3, #9
 801a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801a44a:	e05a      	b.n	801a502 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	6a1b      	ldr	r3, [r3, #32]
 801a450:	69ba      	ldr	r2, [r7, #24]
 801a452:	429a      	cmp	r2, r3
 801a454:	d038      	beq.n	801a4c8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	7d1b      	ldrb	r3, [r3, #20]
 801a45a:	b25b      	sxtb	r3, r3
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	da1d      	bge.n	801a49c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a460:	697b      	ldr	r3, [r7, #20]
 801a462:	7858      	ldrb	r0, [r3, #1]
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	6a1a      	ldr	r2, [r3, #32]
 801a46e:	2301      	movs	r3, #1
 801a470:	f7fd fe7e 	bl	8018170 <disk_write>
 801a474:	4603      	mov	r3, r0
 801a476:	2b00      	cmp	r3, #0
 801a478:	d009      	beq.n	801a48e <f_read+0x224>
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	2201      	movs	r2, #1
 801a47e:	755a      	strb	r2, [r3, #21]
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	2101      	movs	r1, #1
 801a484:	4618      	mov	r0, r3
 801a486:	f7fd ffc7 	bl	8018418 <unlock_fs>
 801a48a:	2301      	movs	r3, #1
 801a48c:	e057      	b.n	801a53e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	7d1b      	ldrb	r3, [r3, #20]
 801a492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a496:	b2da      	uxtb	r2, r3
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801a49c:	697b      	ldr	r3, [r7, #20]
 801a49e:	7858      	ldrb	r0, [r3, #1]
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a4a6:	2301      	movs	r3, #1
 801a4a8:	69ba      	ldr	r2, [r7, #24]
 801a4aa:	f7fd fe41 	bl	8018130 <disk_read>
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d009      	beq.n	801a4c8 <f_read+0x25e>
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	2201      	movs	r2, #1
 801a4b8:	755a      	strb	r2, [r3, #21]
 801a4ba:	697b      	ldr	r3, [r7, #20]
 801a4bc:	2101      	movs	r1, #1
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f7fd ffaa 	bl	8018418 <unlock_fs>
 801a4c4:	2301      	movs	r3, #1
 801a4c6:	e03a      	b.n	801a53e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	69ba      	ldr	r2, [r7, #24]
 801a4cc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	699b      	ldr	r3, [r3, #24]
 801a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a4d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801a4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801a4dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	429a      	cmp	r2, r3
 801a4e2:	d901      	bls.n	801a4e8 <f_read+0x27e>
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	699b      	ldr	r3, [r3, #24]
 801a4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a4f6:	4413      	add	r3, r2
 801a4f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4fa:	4619      	mov	r1, r3
 801a4fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a4fe:	f7fd fef7 	bl	80182f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801a502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a506:	4413      	add	r3, r2
 801a508:	627b      	str	r3, [r7, #36]	@ 0x24
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	699a      	ldr	r2, [r3, #24]
 801a50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a510:	441a      	add	r2, r3
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	619a      	str	r2, [r3, #24]
 801a516:	683b      	ldr	r3, [r7, #0]
 801a518:	681a      	ldr	r2, [r3, #0]
 801a51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a51c:	441a      	add	r2, r3
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	601a      	str	r2, [r3, #0]
 801a522:	687a      	ldr	r2, [r7, #4]
 801a524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a526:	1ad3      	subs	r3, r2, r3
 801a528:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	f47f aee3 	bne.w	801a2f8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801a532:	697b      	ldr	r3, [r7, #20]
 801a534:	2100      	movs	r1, #0
 801a536:	4618      	mov	r0, r3
 801a538:	f7fd ff6e 	bl	8018418 <unlock_fs>
 801a53c:	2300      	movs	r3, #0
}
 801a53e:	4618      	mov	r0, r3
 801a540:	3738      	adds	r7, #56	@ 0x38
 801a542:	46bd      	mov	sp, r7
 801a544:	bd80      	pop	{r7, pc}

0801a546 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801a546:	b580      	push	{r7, lr}
 801a548:	b08c      	sub	sp, #48	@ 0x30
 801a54a:	af00      	add	r7, sp, #0
 801a54c:	60f8      	str	r0, [r7, #12]
 801a54e:	60b9      	str	r1, [r7, #8]
 801a550:	607a      	str	r2, [r7, #4]
 801a552:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801a554:	68bb      	ldr	r3, [r7, #8]
 801a556:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801a558:	683b      	ldr	r3, [r7, #0]
 801a55a:	2200      	movs	r2, #0
 801a55c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	f107 0210 	add.w	r2, r7, #16
 801a564:	4611      	mov	r1, r2
 801a566:	4618      	mov	r0, r3
 801a568:	f7ff fc12 	bl	8019d90 <validate>
 801a56c:	4603      	mov	r3, r0
 801a56e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a572:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a576:	2b00      	cmp	r3, #0
 801a578:	d107      	bne.n	801a58a <f_write+0x44>
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	7d5b      	ldrb	r3, [r3, #21]
 801a57e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a586:	2b00      	cmp	r3, #0
 801a588:	d009      	beq.n	801a59e <f_write+0x58>
 801a58a:	693b      	ldr	r3, [r7, #16]
 801a58c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801a590:	4611      	mov	r1, r2
 801a592:	4618      	mov	r0, r3
 801a594:	f7fd ff40 	bl	8018418 <unlock_fs>
 801a598:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a59c:	e173      	b.n	801a886 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	7d1b      	ldrb	r3, [r3, #20]
 801a5a2:	f003 0302 	and.w	r3, r3, #2
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d106      	bne.n	801a5b8 <f_write+0x72>
 801a5aa:	693b      	ldr	r3, [r7, #16]
 801a5ac:	2107      	movs	r1, #7
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f7fd ff32 	bl	8018418 <unlock_fs>
 801a5b4:	2307      	movs	r3, #7
 801a5b6:	e166      	b.n	801a886 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	699a      	ldr	r2, [r3, #24]
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	441a      	add	r2, r3
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	699b      	ldr	r3, [r3, #24]
 801a5c4:	429a      	cmp	r2, r3
 801a5c6:	f080 814b 	bcs.w	801a860 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	699b      	ldr	r3, [r3, #24]
 801a5ce:	43db      	mvns	r3, r3
 801a5d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801a5d2:	e145      	b.n	801a860 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	699b      	ldr	r3, [r3, #24]
 801a5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	f040 8101 	bne.w	801a7e4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	699b      	ldr	r3, [r3, #24]
 801a5e6:	0a5b      	lsrs	r3, r3, #9
 801a5e8:	693a      	ldr	r2, [r7, #16]
 801a5ea:	8952      	ldrh	r2, [r2, #10]
 801a5ec:	3a01      	subs	r2, #1
 801a5ee:	4013      	ands	r3, r2
 801a5f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801a5f2:	69bb      	ldr	r3, [r7, #24]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d14d      	bne.n	801a694 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	699b      	ldr	r3, [r3, #24]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d10c      	bne.n	801a61a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	689b      	ldr	r3, [r3, #8]
 801a604:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801a606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d11a      	bne.n	801a642 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	2100      	movs	r1, #0
 801a610:	4618      	mov	r0, r3
 801a612:	f7fe fb7e 	bl	8018d12 <create_chain>
 801a616:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a618:	e013      	b.n	801a642 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d007      	beq.n	801a632 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	699b      	ldr	r3, [r3, #24]
 801a626:	4619      	mov	r1, r3
 801a628:	68f8      	ldr	r0, [r7, #12]
 801a62a:	f7fe fc0a 	bl	8018e42 <clmt_clust>
 801a62e:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a630:	e007      	b.n	801a642 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a632:	68fa      	ldr	r2, [r7, #12]
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	69db      	ldr	r3, [r3, #28]
 801a638:	4619      	mov	r1, r3
 801a63a:	4610      	mov	r0, r2
 801a63c:	f7fe fb69 	bl	8018d12 <create_chain>
 801a640:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a644:	2b00      	cmp	r3, #0
 801a646:	f000 8110 	beq.w	801a86a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a64c:	2b01      	cmp	r3, #1
 801a64e:	d109      	bne.n	801a664 <f_write+0x11e>
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	2202      	movs	r2, #2
 801a654:	755a      	strb	r2, [r3, #21]
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	2102      	movs	r1, #2
 801a65a:	4618      	mov	r0, r3
 801a65c:	f7fd fedc 	bl	8018418 <unlock_fs>
 801a660:	2302      	movs	r3, #2
 801a662:	e110      	b.n	801a886 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a66a:	d109      	bne.n	801a680 <f_write+0x13a>
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	2201      	movs	r2, #1
 801a670:	755a      	strb	r2, [r3, #21]
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	2101      	movs	r1, #1
 801a676:	4618      	mov	r0, r3
 801a678:	f7fd fece 	bl	8018418 <unlock_fs>
 801a67c:	2301      	movs	r3, #1
 801a67e:	e102      	b.n	801a886 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a684:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	689b      	ldr	r3, [r3, #8]
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d102      	bne.n	801a694 <f_write+0x14e>
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a692:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	7d1b      	ldrb	r3, [r3, #20]
 801a698:	b25b      	sxtb	r3, r3
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	da1d      	bge.n	801a6da <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a69e:	693b      	ldr	r3, [r7, #16]
 801a6a0:	7858      	ldrb	r0, [r3, #1]
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	6a1a      	ldr	r2, [r3, #32]
 801a6ac:	2301      	movs	r3, #1
 801a6ae:	f7fd fd5f 	bl	8018170 <disk_write>
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d009      	beq.n	801a6cc <f_write+0x186>
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	2201      	movs	r2, #1
 801a6bc:	755a      	strb	r2, [r3, #21]
 801a6be:	693b      	ldr	r3, [r7, #16]
 801a6c0:	2101      	movs	r1, #1
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f7fd fea8 	bl	8018418 <unlock_fs>
 801a6c8:	2301      	movs	r3, #1
 801a6ca:	e0dc      	b.n	801a886 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	7d1b      	ldrb	r3, [r3, #20]
 801a6d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a6d4:	b2da      	uxtb	r2, r3
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a6da:	693a      	ldr	r2, [r7, #16]
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	69db      	ldr	r3, [r3, #28]
 801a6e0:	4619      	mov	r1, r3
 801a6e2:	4610      	mov	r0, r2
 801a6e4:	f7fe f900 	bl	80188e8 <clust2sect>
 801a6e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a6ea:	697b      	ldr	r3, [r7, #20]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d109      	bne.n	801a704 <f_write+0x1be>
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	2202      	movs	r2, #2
 801a6f4:	755a      	strb	r2, [r3, #21]
 801a6f6:	693b      	ldr	r3, [r7, #16]
 801a6f8:	2102      	movs	r1, #2
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7fd fe8c 	bl	8018418 <unlock_fs>
 801a700:	2302      	movs	r3, #2
 801a702:	e0c0      	b.n	801a886 <f_write+0x340>
			sect += csect;
 801a704:	697a      	ldr	r2, [r7, #20]
 801a706:	69bb      	ldr	r3, [r7, #24]
 801a708:	4413      	add	r3, r2
 801a70a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	0a5b      	lsrs	r3, r3, #9
 801a710:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a712:	6a3b      	ldr	r3, [r7, #32]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d041      	beq.n	801a79c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a718:	69ba      	ldr	r2, [r7, #24]
 801a71a:	6a3b      	ldr	r3, [r7, #32]
 801a71c:	4413      	add	r3, r2
 801a71e:	693a      	ldr	r2, [r7, #16]
 801a720:	8952      	ldrh	r2, [r2, #10]
 801a722:	4293      	cmp	r3, r2
 801a724:	d905      	bls.n	801a732 <f_write+0x1ec>
					cc = fs->csize - csect;
 801a726:	693b      	ldr	r3, [r7, #16]
 801a728:	895b      	ldrh	r3, [r3, #10]
 801a72a:	461a      	mov	r2, r3
 801a72c:	69bb      	ldr	r3, [r7, #24]
 801a72e:	1ad3      	subs	r3, r2, r3
 801a730:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a732:	693b      	ldr	r3, [r7, #16]
 801a734:	7858      	ldrb	r0, [r3, #1]
 801a736:	6a3b      	ldr	r3, [r7, #32]
 801a738:	697a      	ldr	r2, [r7, #20]
 801a73a:	69f9      	ldr	r1, [r7, #28]
 801a73c:	f7fd fd18 	bl	8018170 <disk_write>
 801a740:	4603      	mov	r3, r0
 801a742:	2b00      	cmp	r3, #0
 801a744:	d009      	beq.n	801a75a <f_write+0x214>
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	2201      	movs	r2, #1
 801a74a:	755a      	strb	r2, [r3, #21]
 801a74c:	693b      	ldr	r3, [r7, #16]
 801a74e:	2101      	movs	r1, #1
 801a750:	4618      	mov	r0, r3
 801a752:	f7fd fe61 	bl	8018418 <unlock_fs>
 801a756:	2301      	movs	r3, #1
 801a758:	e095      	b.n	801a886 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	6a1a      	ldr	r2, [r3, #32]
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	1ad3      	subs	r3, r2, r3
 801a762:	6a3a      	ldr	r2, [r7, #32]
 801a764:	429a      	cmp	r2, r3
 801a766:	d915      	bls.n	801a794 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	6a1a      	ldr	r2, [r3, #32]
 801a772:	697b      	ldr	r3, [r7, #20]
 801a774:	1ad3      	subs	r3, r2, r3
 801a776:	025b      	lsls	r3, r3, #9
 801a778:	69fa      	ldr	r2, [r7, #28]
 801a77a:	4413      	add	r3, r2
 801a77c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a780:	4619      	mov	r1, r3
 801a782:	f7fd fdb5 	bl	80182f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	7d1b      	ldrb	r3, [r3, #20]
 801a78a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a78e:	b2da      	uxtb	r2, r3
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a794:	6a3b      	ldr	r3, [r7, #32]
 801a796:	025b      	lsls	r3, r3, #9
 801a798:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801a79a:	e044      	b.n	801a826 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	6a1b      	ldr	r3, [r3, #32]
 801a7a0:	697a      	ldr	r2, [r7, #20]
 801a7a2:	429a      	cmp	r2, r3
 801a7a4:	d01b      	beq.n	801a7de <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	699a      	ldr	r2, [r3, #24]
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a7ae:	429a      	cmp	r2, r3
 801a7b0:	d215      	bcs.n	801a7de <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a7b2:	693b      	ldr	r3, [r7, #16]
 801a7b4:	7858      	ldrb	r0, [r3, #1]
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a7bc:	2301      	movs	r3, #1
 801a7be:	697a      	ldr	r2, [r7, #20]
 801a7c0:	f7fd fcb6 	bl	8018130 <disk_read>
 801a7c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d009      	beq.n	801a7de <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801a7ca:	68fb      	ldr	r3, [r7, #12]
 801a7cc:	2201      	movs	r2, #1
 801a7ce:	755a      	strb	r2, [r3, #21]
 801a7d0:	693b      	ldr	r3, [r7, #16]
 801a7d2:	2101      	movs	r1, #1
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	f7fd fe1f 	bl	8018418 <unlock_fs>
 801a7da:	2301      	movs	r3, #1
 801a7dc:	e053      	b.n	801a886 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	697a      	ldr	r2, [r7, #20]
 801a7e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	699b      	ldr	r3, [r3, #24]
 801a7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a7ec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801a7f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a7f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	d901      	bls.n	801a7fe <f_write+0x2b8>
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	699b      	ldr	r3, [r3, #24]
 801a808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a80c:	4413      	add	r3, r2
 801a80e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a810:	69f9      	ldr	r1, [r7, #28]
 801a812:	4618      	mov	r0, r3
 801a814:	f7fd fd6c 	bl	80182f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	7d1b      	ldrb	r3, [r3, #20]
 801a81c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a820:	b2da      	uxtb	r2, r3
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a826:	69fa      	ldr	r2, [r7, #28]
 801a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a82a:	4413      	add	r3, r2
 801a82c:	61fb      	str	r3, [r7, #28]
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	699a      	ldr	r2, [r3, #24]
 801a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a834:	441a      	add	r2, r3
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	619a      	str	r2, [r3, #24]
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	68da      	ldr	r2, [r3, #12]
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	699b      	ldr	r3, [r3, #24]
 801a842:	429a      	cmp	r2, r3
 801a844:	bf38      	it	cc
 801a846:	461a      	movcc	r2, r3
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	60da      	str	r2, [r3, #12]
 801a84c:	683b      	ldr	r3, [r7, #0]
 801a84e:	681a      	ldr	r2, [r3, #0]
 801a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a852:	441a      	add	r2, r3
 801a854:	683b      	ldr	r3, [r7, #0]
 801a856:	601a      	str	r2, [r3, #0]
 801a858:	687a      	ldr	r2, [r7, #4]
 801a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a85c:	1ad3      	subs	r3, r2, r3
 801a85e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	2b00      	cmp	r3, #0
 801a864:	f47f aeb6 	bne.w	801a5d4 <f_write+0x8e>
 801a868:	e000      	b.n	801a86c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a86a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	7d1b      	ldrb	r3, [r3, #20]
 801a870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a874:	b2da      	uxtb	r2, r3
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a87a:	693b      	ldr	r3, [r7, #16]
 801a87c:	2100      	movs	r1, #0
 801a87e:	4618      	mov	r0, r3
 801a880:	f7fd fdca 	bl	8018418 <unlock_fs>
 801a884:	2300      	movs	r3, #0
}
 801a886:	4618      	mov	r0, r3
 801a888:	3730      	adds	r7, #48	@ 0x30
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}

0801a88e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a88e:	b580      	push	{r7, lr}
 801a890:	b086      	sub	sp, #24
 801a892:	af00      	add	r7, sp, #0
 801a894:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	f107 0208 	add.w	r2, r7, #8
 801a89c:	4611      	mov	r1, r2
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7ff fa76 	bl	8019d90 <validate>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a8a8:	7dfb      	ldrb	r3, [r7, #23]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d16d      	bne.n	801a98a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	7d1b      	ldrb	r3, [r3, #20]
 801a8b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d067      	beq.n	801a98a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	7d1b      	ldrb	r3, [r3, #20]
 801a8be:	b25b      	sxtb	r3, r3
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	da1a      	bge.n	801a8fa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a8c4:	68bb      	ldr	r3, [r7, #8]
 801a8c6:	7858      	ldrb	r0, [r3, #1]
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	6a1a      	ldr	r2, [r3, #32]
 801a8d2:	2301      	movs	r3, #1
 801a8d4:	f7fd fc4c 	bl	8018170 <disk_write>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d006      	beq.n	801a8ec <f_sync+0x5e>
 801a8de:	68bb      	ldr	r3, [r7, #8]
 801a8e0:	2101      	movs	r1, #1
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f7fd fd98 	bl	8018418 <unlock_fs>
 801a8e8:	2301      	movs	r3, #1
 801a8ea:	e055      	b.n	801a998 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	7d1b      	ldrb	r3, [r3, #20]
 801a8f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a8f4:	b2da      	uxtb	r2, r3
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a8fa:	f7ef fd51 	bl	800a3a0 <get_fattime>
 801a8fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a900:	68ba      	ldr	r2, [r7, #8]
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a906:	4619      	mov	r1, r3
 801a908:	4610      	mov	r0, r2
 801a90a:	f7fd ff51 	bl	80187b0 <move_window>
 801a90e:	4603      	mov	r3, r0
 801a910:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a912:	7dfb      	ldrb	r3, [r7, #23]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d138      	bne.n	801a98a <f_sync+0xfc>
					dir = fp->dir_ptr;
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a91c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	330b      	adds	r3, #11
 801a922:	781a      	ldrb	r2, [r3, #0]
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	330b      	adds	r3, #11
 801a928:	f042 0220 	orr.w	r2, r2, #32
 801a92c:	b2d2      	uxtb	r2, r2
 801a92e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	6818      	ldr	r0, [r3, #0]
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	689b      	ldr	r3, [r3, #8]
 801a938:	461a      	mov	r2, r3
 801a93a:	68f9      	ldr	r1, [r7, #12]
 801a93c:	f7fe fc5b 	bl	80191f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	f103 021c 	add.w	r2, r3, #28
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	68db      	ldr	r3, [r3, #12]
 801a94a:	4619      	mov	r1, r3
 801a94c:	4610      	mov	r0, r2
 801a94e:	f7fd fca3 	bl	8018298 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	3316      	adds	r3, #22
 801a956:	6939      	ldr	r1, [r7, #16]
 801a958:	4618      	mov	r0, r3
 801a95a:	f7fd fc9d 	bl	8018298 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	3312      	adds	r3, #18
 801a962:	2100      	movs	r1, #0
 801a964:	4618      	mov	r0, r3
 801a966:	f7fd fc7c 	bl	8018262 <st_word>
					fs->wflag = 1;
 801a96a:	68bb      	ldr	r3, [r7, #8]
 801a96c:	2201      	movs	r2, #1
 801a96e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a970:	68bb      	ldr	r3, [r7, #8]
 801a972:	4618      	mov	r0, r3
 801a974:	f7fd ff4a 	bl	801880c <sync_fs>
 801a978:	4603      	mov	r3, r0
 801a97a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	7d1b      	ldrb	r3, [r3, #20]
 801a980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a984:	b2da      	uxtb	r2, r3
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	7dfa      	ldrb	r2, [r7, #23]
 801a98e:	4611      	mov	r1, r2
 801a990:	4618      	mov	r0, r3
 801a992:	f7fd fd41 	bl	8018418 <unlock_fs>
 801a996:	7dfb      	ldrb	r3, [r7, #23]
}
 801a998:	4618      	mov	r0, r3
 801a99a:	3718      	adds	r7, #24
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bd80      	pop	{r7, pc}

0801a9a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b084      	sub	sp, #16
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a9a8:	6878      	ldr	r0, [r7, #4]
 801a9aa:	f7ff ff70 	bl	801a88e <f_sync>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a9b2:	7bfb      	ldrb	r3, [r7, #15]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d11d      	bne.n	801a9f4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	f107 0208 	add.w	r2, r7, #8
 801a9be:	4611      	mov	r1, r2
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	f7ff f9e5 	bl	8019d90 <validate>
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a9ca:	7bfb      	ldrb	r3, [r7, #15]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d111      	bne.n	801a9f4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	691b      	ldr	r3, [r3, #16]
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7fd fe47 	bl	8018668 <dec_lock>
 801a9da:	4603      	mov	r3, r0
 801a9dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a9de:	7bfb      	ldrb	r3, [r7, #15]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d102      	bne.n	801a9ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2200      	movs	r2, #0
 801a9e8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801a9ea:	68bb      	ldr	r3, [r7, #8]
 801a9ec:	2100      	movs	r1, #0
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f7fd fd12 	bl	8018418 <unlock_fs>
#endif
		}
	}
	return res;
 801a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	3710      	adds	r7, #16
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	bd80      	pop	{r7, pc}

0801a9fe <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801a9fe:	b590      	push	{r4, r7, lr}
 801aa00:	b091      	sub	sp, #68	@ 0x44
 801aa02:	af00      	add	r7, sp, #0
 801aa04:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801aa06:	f107 0108 	add.w	r1, r7, #8
 801aa0a:	1d3b      	adds	r3, r7, #4
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f7fe ff68 	bl	80198e4 <find_volume>
 801aa14:	4603      	mov	r3, r0
 801aa16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801aa1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d131      	bne.n	801aa86 <f_chdir+0x88>
		dj.obj.fs = fs;
 801aa22:	68bb      	ldr	r3, [r7, #8]
 801aa24:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 801aa26:	687a      	ldr	r2, [r7, #4]
 801aa28:	f107 030c 	add.w	r3, r7, #12
 801aa2c:	4611      	mov	r1, r2
 801aa2e:	4618      	mov	r0, r3
 801aa30:	f7fe fe2e 	bl	8019690 <follow_path>
 801aa34:	4603      	mov	r3, r0
 801aa36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801aa3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d11a      	bne.n	801aa78 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801aa42:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801aa46:	b25b      	sxtb	r3, r3
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	da03      	bge.n	801aa54 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	697a      	ldr	r2, [r7, #20]
 801aa50:	619a      	str	r2, [r3, #24]
 801aa52:	e011      	b.n	801aa78 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801aa54:	7cbb      	ldrb	r3, [r7, #18]
 801aa56:	f003 0310 	and.w	r3, r3, #16
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d009      	beq.n	801aa72 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801aa5e:	68bb      	ldr	r3, [r7, #8]
 801aa60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aa62:	68bc      	ldr	r4, [r7, #8]
 801aa64:	4611      	mov	r1, r2
 801aa66:	4618      	mov	r0, r3
 801aa68:	f7fe fba6 	bl	80191b8 <ld_clust>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	61a3      	str	r3, [r4, #24]
 801aa70:	e002      	b.n	801aa78 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 801aa72:	2305      	movs	r3, #5
 801aa74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801aa78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa7c:	2b04      	cmp	r3, #4
 801aa7e:	d102      	bne.n	801aa86 <f_chdir+0x88>
 801aa80:	2305      	movs	r3, #5
 801aa82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	LEAVE_FF(fs, res);
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801aa8c:	4611      	mov	r1, r2
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7fd fcc2 	bl	8018418 <unlock_fs>
 801aa94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801aa98:	4618      	mov	r0, r3
 801aa9a:	3744      	adds	r7, #68	@ 0x44
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd90      	pop	{r4, r7, pc}

0801aaa0 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b09a      	sub	sp, #104	@ 0x68
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	2200      	movs	r2, #0
 801aaae:	701a      	strb	r2, [r3, #0]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 801aab0:	f107 0120 	add.w	r1, r7, #32
 801aab4:	1d3b      	adds	r3, r7, #4
 801aab6:	2200      	movs	r2, #0
 801aab8:	4618      	mov	r0, r3
 801aaba:	f7fe ff13 	bl	80198e4 <find_volume>
 801aabe:	4603      	mov	r3, r0
 801aac0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801aac4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	f040 80d3 	bne.w	801ac74 <f_getcwd+0x1d4>
		dj.obj.fs = fs;
 801aace:	6a3b      	ldr	r3, [r7, #32]
 801aad0:	627b      	str	r3, [r7, #36]	@ 0x24
		INIT_NAMBUF(fs);
		i = len;			/* Bottom of buffer (directory stack base) */
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	663b      	str	r3, [r7, #96]	@ 0x60
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 801aad6:	6a3b      	ldr	r3, [r7, #32]
 801aad8:	699b      	ldr	r3, [r3, #24]
 801aada:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 801aadc:	e09b      	b.n	801ac16 <f_getcwd+0x176>
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 801aade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801aae2:	2120      	movs	r1, #32
 801aae4:	4618      	mov	r0, r3
 801aae6:	f7fe f9e0 	bl	8018eaa <dir_sdi>
 801aaea:	4603      	mov	r3, r0
 801aaec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res != FR_OK) break;
 801aaf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	f040 8095 	bne.w	801ac24 <f_getcwd+0x184>
				res = move_window(fs, dj.sect);
 801aafa:	6a3b      	ldr	r3, [r7, #32]
 801aafc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aafe:	4611      	mov	r1, r2
 801ab00:	4618      	mov	r0, r3
 801ab02:	f7fd fe55 	bl	80187b0 <move_window>
 801ab06:	4603      	mov	r3, r0
 801ab08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res != FR_OK) break;
 801ab0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	f040 8089 	bne.w	801ac28 <f_getcwd+0x188>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 801ab16:	6a3b      	ldr	r3, [r7, #32]
 801ab18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ab1a:	4611      	mov	r1, r2
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7fe fb4b 	bl	80191b8 <ld_clust>
 801ab22:	4603      	mov	r3, r0
 801ab24:	62fb      	str	r3, [r7, #44]	@ 0x2c
				res = dir_sdi(&dj, 0);
 801ab26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ab2a:	2100      	movs	r1, #0
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	f7fe f9bc 	bl	8018eaa <dir_sdi>
 801ab32:	4603      	mov	r3, r0
 801ab34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res != FR_OK) break;
 801ab38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d175      	bne.n	801ac2c <f_getcwd+0x18c>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 801ab40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ab44:	2100      	movs	r1, #0
 801ab46:	4618      	mov	r0, r3
 801ab48:	f7fe fb75 	bl	8019236 <dir_read>
 801ab4c:	4603      	mov	r3, r0
 801ab4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res != FR_OK) break;
 801ab52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d117      	bne.n	801ab8a <f_getcwd+0xea>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 801ab5a:	6a3b      	ldr	r3, [r7, #32]
 801ab5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ab5e:	4611      	mov	r1, r2
 801ab60:	4618      	mov	r0, r3
 801ab62:	f7fe fb29 	bl	80191b8 <ld_clust>
 801ab66:	4602      	mov	r2, r0
 801ab68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab6a:	4293      	cmp	r3, r2
 801ab6c:	d00f      	beq.n	801ab8e <f_getcwd+0xee>
					res = dir_next(&dj, 0);
 801ab6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ab72:	2100      	movs	r1, #0
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7fe fa13 	bl	8018fa0 <dir_next>
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				} while (res == FR_OK);
 801ab80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d0db      	beq.n	801ab40 <f_getcwd+0xa0>
 801ab88:	e002      	b.n	801ab90 <f_getcwd+0xf0>
					if (res != FR_OK) break;
 801ab8a:	bf00      	nop
 801ab8c:	e000      	b.n	801ab90 <f_getcwd+0xf0>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 801ab8e:	bf00      	nop
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 801ab90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ab94:	2b04      	cmp	r3, #4
 801ab96:	d102      	bne.n	801ab9e <f_getcwd+0xfe>
 801ab98:	2302      	movs	r3, #2
 801ab9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res != FR_OK) break;
 801ab9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d144      	bne.n	801ac30 <f_getcwd+0x190>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 801aba6:	f107 0208 	add.w	r2, r7, #8
 801abaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801abae:	4611      	mov	r1, r2
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7fe fc42 	bl	801943a <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 801abb6:	2300      	movs	r3, #0
 801abb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801abba:	e002      	b.n	801abc2 <f_getcwd+0x122>
 801abbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801abbe:	3301      	adds	r3, #1
 801abc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801abc2:	f107 0211 	add.w	r2, r7, #17
 801abc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801abc8:	4413      	add	r3, r2
 801abca:	781b      	ldrb	r3, [r3, #0]
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d1f5      	bne.n	801abbc <f_getcwd+0x11c>
				if (i < n + 3) {
 801abd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801abd2:	3303      	adds	r3, #3
 801abd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d212      	bcs.n	801ac00 <f_getcwd+0x160>
					res = FR_NOT_ENOUGH_CORE; break;
 801abda:	2311      	movs	r3, #17
 801abdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801abe0:	e027      	b.n	801ac32 <f_getcwd+0x192>
				}
				while (n) buff[--i] = fno.fname[--n];
 801abe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801abe4:	3b01      	subs	r3, #1
 801abe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801abe8:	687a      	ldr	r2, [r7, #4]
 801abea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801abec:	3b01      	subs	r3, #1
 801abee:	663b      	str	r3, [r7, #96]	@ 0x60
 801abf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801abf2:	4413      	add	r3, r2
 801abf4:	f107 0111 	add.w	r1, r7, #17
 801abf8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801abfa:	440a      	add	r2, r1
 801abfc:	7812      	ldrb	r2, [r2, #0]
 801abfe:	701a      	strb	r2, [r3, #0]
 801ac00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d1ed      	bne.n	801abe2 <f_getcwd+0x142>
				buff[--i] = '/';
 801ac06:	687a      	ldr	r2, [r7, #4]
 801ac08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ac0a:	3b01      	subs	r3, #1
 801ac0c:	663b      	str	r3, [r7, #96]	@ 0x60
 801ac0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ac10:	4413      	add	r3, r2
 801ac12:	222f      	movs	r2, #47	@ 0x2f
 801ac14:	701a      	strb	r2, [r3, #0]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 801ac16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac18:	657b      	str	r3, [r7, #84]	@ 0x54
 801ac1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	f47f af5e 	bne.w	801aade <f_getcwd+0x3e>
 801ac22:	e006      	b.n	801ac32 <f_getcwd+0x192>
				if (res != FR_OK) break;
 801ac24:	bf00      	nop
 801ac26:	e004      	b.n	801ac32 <f_getcwd+0x192>
				if (res != FR_OK) break;
 801ac28:	bf00      	nop
 801ac2a:	e002      	b.n	801ac32 <f_getcwd+0x192>
				if (res != FR_OK) break;
 801ac2c:	bf00      	nop
 801ac2e:	e000      	b.n	801ac32 <f_getcwd+0x192>
				if (res != FR_OK) break;
 801ac30:	bf00      	nop
			}
		}
		tp = buff;
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (res == FR_OK) {
 801ac36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d117      	bne.n	801ac6e <f_getcwd+0x1ce>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
 801ac3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d105      	bne.n	801ac52 <f_getcwd+0x1b2>
				*tp++ = '/';
 801ac46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ac48:	1c5a      	adds	r2, r3, #1
 801ac4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 801ac4c:	222f      	movs	r2, #47	@ 0x2f
 801ac4e:	701a      	strb	r2, [r3, #0]
 801ac50:	e00d      	b.n	801ac6e <f_getcwd+0x1ce>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 801ac52:	687a      	ldr	r2, [r7, #4]
 801ac54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ac56:	1c59      	adds	r1, r3, #1
 801ac58:	6639      	str	r1, [r7, #96]	@ 0x60
 801ac5a:	441a      	add	r2, r3
 801ac5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ac5e:	1c59      	adds	r1, r3, #1
 801ac60:	65b9      	str	r1, [r7, #88]	@ 0x58
 801ac62:	7812      	ldrb	r2, [r2, #0]
 801ac64:	701a      	strb	r2, [r3, #0]
				while (i < len);
 801ac66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	429a      	cmp	r2, r3
 801ac6c:	d3f1      	bcc.n	801ac52 <f_getcwd+0x1b2>
			}
		}
		*tp = 0;
 801ac6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ac70:	2200      	movs	r2, #0
 801ac72:	701a      	strb	r2, [r3, #0]
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801ac74:	6a3b      	ldr	r3, [r7, #32]
 801ac76:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 801ac7a:	4611      	mov	r1, r2
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f7fd fbcb 	bl	8018418 <unlock_fs>
 801ac82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801ac86:	4618      	mov	r0, r3
 801ac88:	3768      	adds	r7, #104	@ 0x68
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	bd80      	pop	{r7, pc}

0801ac8e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801ac8e:	b580      	push	{r7, lr}
 801ac90:	b090      	sub	sp, #64	@ 0x40
 801ac92:	af00      	add	r7, sp, #0
 801ac94:	6078      	str	r0, [r7, #4]
 801ac96:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	f107 0208 	add.w	r2, r7, #8
 801ac9e:	4611      	mov	r1, r2
 801aca0:	4618      	mov	r0, r3
 801aca2:	f7ff f875 	bl	8019d90 <validate>
 801aca6:	4603      	mov	r3, r0
 801aca8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801acac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d103      	bne.n	801acbc <f_lseek+0x2e>
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	7d5b      	ldrb	r3, [r3, #21]
 801acb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801acbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d009      	beq.n	801acd8 <f_lseek+0x4a>
 801acc4:	68bb      	ldr	r3, [r7, #8]
 801acc6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801acca:	4611      	mov	r1, r2
 801accc:	4618      	mov	r0, r3
 801acce:	f7fd fba3 	bl	8018418 <unlock_fs>
 801acd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801acd6:	e229      	b.n	801b12c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acdc:	2b00      	cmp	r3, #0
 801acde:	f000 80ea 	beq.w	801aeb6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ace8:	d164      	bne.n	801adb4 <f_lseek+0x126>
			tbl = fp->cltbl;
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acee:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801acf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acf2:	1d1a      	adds	r2, r3, #4
 801acf4:	627a      	str	r2, [r7, #36]	@ 0x24
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	617b      	str	r3, [r7, #20]
 801acfa:	2302      	movs	r3, #2
 801acfc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	689b      	ldr	r3, [r3, #8]
 801ad02:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d044      	beq.n	801ad94 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801ad0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad0c:	613b      	str	r3, [r7, #16]
 801ad0e:	2300      	movs	r3, #0
 801ad10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ad12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad14:	3302      	adds	r3, #2
 801ad16:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801ad18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad1a:	60fb      	str	r3, [r7, #12]
 801ad1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad1e:	3301      	adds	r3, #1
 801ad20:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801ad26:	4618      	mov	r0, r3
 801ad28:	f7fd fdfd 	bl	8018926 <get_fat>
 801ad2c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad30:	2b01      	cmp	r3, #1
 801ad32:	d809      	bhi.n	801ad48 <f_lseek+0xba>
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	2202      	movs	r2, #2
 801ad38:	755a      	strb	r2, [r3, #21]
 801ad3a:	68bb      	ldr	r3, [r7, #8]
 801ad3c:	2102      	movs	r1, #2
 801ad3e:	4618      	mov	r0, r3
 801ad40:	f7fd fb6a 	bl	8018418 <unlock_fs>
 801ad44:	2302      	movs	r3, #2
 801ad46:	e1f1      	b.n	801b12c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ad48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad4e:	d109      	bne.n	801ad64 <f_lseek+0xd6>
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	2201      	movs	r2, #1
 801ad54:	755a      	strb	r2, [r3, #21]
 801ad56:	68bb      	ldr	r3, [r7, #8]
 801ad58:	2101      	movs	r1, #1
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	f7fd fb5c 	bl	8018418 <unlock_fs>
 801ad60:	2301      	movs	r3, #1
 801ad62:	e1e3      	b.n	801b12c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	3301      	adds	r3, #1
 801ad68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ad6a:	429a      	cmp	r2, r3
 801ad6c:	d0d4      	beq.n	801ad18 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801ad6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ad70:	697b      	ldr	r3, [r7, #20]
 801ad72:	429a      	cmp	r2, r3
 801ad74:	d809      	bhi.n	801ad8a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad78:	1d1a      	adds	r2, r3, #4
 801ad7a:	627a      	str	r2, [r7, #36]	@ 0x24
 801ad7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad7e:	601a      	str	r2, [r3, #0]
 801ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad82:	1d1a      	adds	r2, r3, #4
 801ad84:	627a      	str	r2, [r7, #36]	@ 0x24
 801ad86:	693a      	ldr	r2, [r7, #16]
 801ad88:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	69db      	ldr	r3, [r3, #28]
 801ad8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ad90:	429a      	cmp	r2, r3
 801ad92:	d3ba      	bcc.n	801ad0a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ad9a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801ad9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	429a      	cmp	r2, r3
 801ada2:	d803      	bhi.n	801adac <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ada6:	2200      	movs	r2, #0
 801ada8:	601a      	str	r2, [r3, #0]
 801adaa:	e1b6      	b.n	801b11a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801adac:	2311      	movs	r3, #17
 801adae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801adb2:	e1b2      	b.n	801b11a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	68db      	ldr	r3, [r3, #12]
 801adb8:	683a      	ldr	r2, [r7, #0]
 801adba:	429a      	cmp	r2, r3
 801adbc:	d902      	bls.n	801adc4 <f_lseek+0x136>
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	68db      	ldr	r3, [r3, #12]
 801adc2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	683a      	ldr	r2, [r7, #0]
 801adc8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	f000 81a4 	beq.w	801b11a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801add2:	683b      	ldr	r3, [r7, #0]
 801add4:	3b01      	subs	r3, #1
 801add6:	4619      	mov	r1, r3
 801add8:	6878      	ldr	r0, [r7, #4]
 801adda:	f7fe f832 	bl	8018e42 <clmt_clust>
 801adde:	4602      	mov	r2, r0
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801ade4:	68ba      	ldr	r2, [r7, #8]
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	69db      	ldr	r3, [r3, #28]
 801adea:	4619      	mov	r1, r3
 801adec:	4610      	mov	r0, r2
 801adee:	f7fd fd7b 	bl	80188e8 <clust2sect>
 801adf2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801adf4:	69bb      	ldr	r3, [r7, #24]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d109      	bne.n	801ae0e <f_lseek+0x180>
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	2202      	movs	r2, #2
 801adfe:	755a      	strb	r2, [r3, #21]
 801ae00:	68bb      	ldr	r3, [r7, #8]
 801ae02:	2102      	movs	r1, #2
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7fd fb07 	bl	8018418 <unlock_fs>
 801ae0a:	2302      	movs	r3, #2
 801ae0c:	e18e      	b.n	801b12c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	3b01      	subs	r3, #1
 801ae12:	0a5b      	lsrs	r3, r3, #9
 801ae14:	68ba      	ldr	r2, [r7, #8]
 801ae16:	8952      	ldrh	r2, [r2, #10]
 801ae18:	3a01      	subs	r2, #1
 801ae1a:	4013      	ands	r3, r2
 801ae1c:	69ba      	ldr	r2, [r7, #24]
 801ae1e:	4413      	add	r3, r2
 801ae20:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	699b      	ldr	r3, [r3, #24]
 801ae26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	f000 8175 	beq.w	801b11a <f_lseek+0x48c>
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	6a1b      	ldr	r3, [r3, #32]
 801ae34:	69ba      	ldr	r2, [r7, #24]
 801ae36:	429a      	cmp	r2, r3
 801ae38:	f000 816f 	beq.w	801b11a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	7d1b      	ldrb	r3, [r3, #20]
 801ae40:	b25b      	sxtb	r3, r3
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	da1d      	bge.n	801ae82 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ae46:	68bb      	ldr	r3, [r7, #8]
 801ae48:	7858      	ldrb	r0, [r3, #1]
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	6a1a      	ldr	r2, [r3, #32]
 801ae54:	2301      	movs	r3, #1
 801ae56:	f7fd f98b 	bl	8018170 <disk_write>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d009      	beq.n	801ae74 <f_lseek+0x1e6>
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	2201      	movs	r2, #1
 801ae64:	755a      	strb	r2, [r3, #21]
 801ae66:	68bb      	ldr	r3, [r7, #8]
 801ae68:	2101      	movs	r1, #1
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	f7fd fad4 	bl	8018418 <unlock_fs>
 801ae70:	2301      	movs	r3, #1
 801ae72:	e15b      	b.n	801b12c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	7d1b      	ldrb	r3, [r3, #20]
 801ae78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ae7c:	b2da      	uxtb	r2, r3
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801ae82:	68bb      	ldr	r3, [r7, #8]
 801ae84:	7858      	ldrb	r0, [r3, #1]
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ae8c:	2301      	movs	r3, #1
 801ae8e:	69ba      	ldr	r2, [r7, #24]
 801ae90:	f7fd f94e 	bl	8018130 <disk_read>
 801ae94:	4603      	mov	r3, r0
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d009      	beq.n	801aeae <f_lseek+0x220>
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	2201      	movs	r2, #1
 801ae9e:	755a      	strb	r2, [r3, #21]
 801aea0:	68bb      	ldr	r3, [r7, #8]
 801aea2:	2101      	movs	r1, #1
 801aea4:	4618      	mov	r0, r3
 801aea6:	f7fd fab7 	bl	8018418 <unlock_fs>
 801aeaa:	2301      	movs	r3, #1
 801aeac:	e13e      	b.n	801b12c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	69ba      	ldr	r2, [r7, #24]
 801aeb2:	621a      	str	r2, [r3, #32]
 801aeb4:	e131      	b.n	801b11a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	68db      	ldr	r3, [r3, #12]
 801aeba:	683a      	ldr	r2, [r7, #0]
 801aebc:	429a      	cmp	r2, r3
 801aebe:	d908      	bls.n	801aed2 <f_lseek+0x244>
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	7d1b      	ldrb	r3, [r3, #20]
 801aec4:	f003 0302 	and.w	r3, r3, #2
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d102      	bne.n	801aed2 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	68db      	ldr	r3, [r3, #12]
 801aed0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	699b      	ldr	r3, [r3, #24]
 801aed6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801aed8:	2300      	movs	r3, #0
 801aeda:	637b      	str	r3, [r7, #52]	@ 0x34
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aee0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	f000 80c0 	beq.w	801b06a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801aeea:	68bb      	ldr	r3, [r7, #8]
 801aeec:	895b      	ldrh	r3, [r3, #10]
 801aeee:	025b      	lsls	r3, r3, #9
 801aef0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801aef2:	6a3b      	ldr	r3, [r7, #32]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d01b      	beq.n	801af30 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801aef8:	683b      	ldr	r3, [r7, #0]
 801aefa:	1e5a      	subs	r2, r3, #1
 801aefc:	69fb      	ldr	r3, [r7, #28]
 801aefe:	fbb2 f2f3 	udiv	r2, r2, r3
 801af02:	6a3b      	ldr	r3, [r7, #32]
 801af04:	1e59      	subs	r1, r3, #1
 801af06:	69fb      	ldr	r3, [r7, #28]
 801af08:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801af0c:	429a      	cmp	r2, r3
 801af0e:	d30f      	bcc.n	801af30 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801af10:	6a3b      	ldr	r3, [r7, #32]
 801af12:	1e5a      	subs	r2, r3, #1
 801af14:	69fb      	ldr	r3, [r7, #28]
 801af16:	425b      	negs	r3, r3
 801af18:	401a      	ands	r2, r3
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	699b      	ldr	r3, [r3, #24]
 801af22:	683a      	ldr	r2, [r7, #0]
 801af24:	1ad3      	subs	r3, r2, r3
 801af26:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	69db      	ldr	r3, [r3, #28]
 801af2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801af2e:	e02c      	b.n	801af8a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	689b      	ldr	r3, [r3, #8]
 801af34:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801af36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d123      	bne.n	801af84 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	2100      	movs	r1, #0
 801af40:	4618      	mov	r0, r3
 801af42:	f7fd fee6 	bl	8018d12 <create_chain>
 801af46:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801af48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af4a:	2b01      	cmp	r3, #1
 801af4c:	d109      	bne.n	801af62 <f_lseek+0x2d4>
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	2202      	movs	r2, #2
 801af52:	755a      	strb	r2, [r3, #21]
 801af54:	68bb      	ldr	r3, [r7, #8]
 801af56:	2102      	movs	r1, #2
 801af58:	4618      	mov	r0, r3
 801af5a:	f7fd fa5d 	bl	8018418 <unlock_fs>
 801af5e:	2302      	movs	r3, #2
 801af60:	e0e4      	b.n	801b12c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801af62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af64:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af68:	d109      	bne.n	801af7e <f_lseek+0x2f0>
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	2201      	movs	r2, #1
 801af6e:	755a      	strb	r2, [r3, #21]
 801af70:	68bb      	ldr	r3, [r7, #8]
 801af72:	2101      	movs	r1, #1
 801af74:	4618      	mov	r0, r3
 801af76:	f7fd fa4f 	bl	8018418 <unlock_fs>
 801af7a:	2301      	movs	r3, #1
 801af7c:	e0d6      	b.n	801b12c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801af82:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801af88:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801af8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d06c      	beq.n	801b06a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 801af90:	e044      	b.n	801b01c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801af92:	683a      	ldr	r2, [r7, #0]
 801af94:	69fb      	ldr	r3, [r7, #28]
 801af96:	1ad3      	subs	r3, r2, r3
 801af98:	603b      	str	r3, [r7, #0]
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	699a      	ldr	r2, [r3, #24]
 801af9e:	69fb      	ldr	r3, [r7, #28]
 801afa0:	441a      	add	r2, r3
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	7d1b      	ldrb	r3, [r3, #20]
 801afaa:	f003 0302 	and.w	r3, r3, #2
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d00b      	beq.n	801afca <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801afb6:	4618      	mov	r0, r3
 801afb8:	f7fd feab 	bl	8018d12 <create_chain>
 801afbc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d108      	bne.n	801afd6 <f_lseek+0x348>
							ofs = 0; break;
 801afc4:	2300      	movs	r3, #0
 801afc6:	603b      	str	r3, [r7, #0]
 801afc8:	e02c      	b.n	801b024 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801afce:	4618      	mov	r0, r3
 801afd0:	f7fd fca9 	bl	8018926 <get_fat>
 801afd4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801afd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801afd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afdc:	d109      	bne.n	801aff2 <f_lseek+0x364>
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	2201      	movs	r2, #1
 801afe2:	755a      	strb	r2, [r3, #21]
 801afe4:	68bb      	ldr	r3, [r7, #8]
 801afe6:	2101      	movs	r1, #1
 801afe8:	4618      	mov	r0, r3
 801afea:	f7fd fa15 	bl	8018418 <unlock_fs>
 801afee:	2301      	movs	r3, #1
 801aff0:	e09c      	b.n	801b12c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801aff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aff4:	2b01      	cmp	r3, #1
 801aff6:	d904      	bls.n	801b002 <f_lseek+0x374>
 801aff8:	68bb      	ldr	r3, [r7, #8]
 801affa:	69db      	ldr	r3, [r3, #28]
 801affc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801affe:	429a      	cmp	r2, r3
 801b000:	d309      	bcc.n	801b016 <f_lseek+0x388>
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	2202      	movs	r2, #2
 801b006:	755a      	strb	r2, [r3, #21]
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	2102      	movs	r1, #2
 801b00c:	4618      	mov	r0, r3
 801b00e:	f7fd fa03 	bl	8018418 <unlock_fs>
 801b012:	2302      	movs	r3, #2
 801b014:	e08a      	b.n	801b12c <f_lseek+0x49e>
					fp->clust = clst;
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b01a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801b01c:	683a      	ldr	r2, [r7, #0]
 801b01e:	69fb      	ldr	r3, [r7, #28]
 801b020:	429a      	cmp	r2, r3
 801b022:	d8b6      	bhi.n	801af92 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	699a      	ldr	r2, [r3, #24]
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	441a      	add	r2, r3
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b036:	2b00      	cmp	r3, #0
 801b038:	d017      	beq.n	801b06a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801b03a:	68bb      	ldr	r3, [r7, #8]
 801b03c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b03e:	4618      	mov	r0, r3
 801b040:	f7fd fc52 	bl	80188e8 <clust2sect>
 801b044:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801b046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d109      	bne.n	801b060 <f_lseek+0x3d2>
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2202      	movs	r2, #2
 801b050:	755a      	strb	r2, [r3, #21]
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	2102      	movs	r1, #2
 801b056:	4618      	mov	r0, r3
 801b058:	f7fd f9de 	bl	8018418 <unlock_fs>
 801b05c:	2302      	movs	r3, #2
 801b05e:	e065      	b.n	801b12c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801b060:	683b      	ldr	r3, [r7, #0]
 801b062:	0a5b      	lsrs	r3, r3, #9
 801b064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b066:	4413      	add	r3, r2
 801b068:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	699a      	ldr	r2, [r3, #24]
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	68db      	ldr	r3, [r3, #12]
 801b072:	429a      	cmp	r2, r3
 801b074:	d90a      	bls.n	801b08c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	699a      	ldr	r2, [r3, #24]
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	7d1b      	ldrb	r3, [r3, #20]
 801b082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b086:	b2da      	uxtb	r2, r3
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	699b      	ldr	r3, [r3, #24]
 801b090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b094:	2b00      	cmp	r3, #0
 801b096:	d040      	beq.n	801b11a <f_lseek+0x48c>
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	6a1b      	ldr	r3, [r3, #32]
 801b09c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b09e:	429a      	cmp	r2, r3
 801b0a0:	d03b      	beq.n	801b11a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	7d1b      	ldrb	r3, [r3, #20]
 801b0a6:	b25b      	sxtb	r3, r3
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	da1d      	bge.n	801b0e8 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b0ac:	68bb      	ldr	r3, [r7, #8]
 801b0ae:	7858      	ldrb	r0, [r3, #1]
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	6a1a      	ldr	r2, [r3, #32]
 801b0ba:	2301      	movs	r3, #1
 801b0bc:	f7fd f858 	bl	8018170 <disk_write>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d009      	beq.n	801b0da <f_lseek+0x44c>
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	2201      	movs	r2, #1
 801b0ca:	755a      	strb	r2, [r3, #21]
 801b0cc:	68bb      	ldr	r3, [r7, #8]
 801b0ce:	2101      	movs	r1, #1
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	f7fd f9a1 	bl	8018418 <unlock_fs>
 801b0d6:	2301      	movs	r3, #1
 801b0d8:	e028      	b.n	801b12c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	7d1b      	ldrb	r3, [r3, #20]
 801b0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b0e2:	b2da      	uxtb	r2, r3
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801b0e8:	68bb      	ldr	r3, [r7, #8]
 801b0ea:	7858      	ldrb	r0, [r3, #1]
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b0f6:	f7fd f81b 	bl	8018130 <disk_read>
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d009      	beq.n	801b114 <f_lseek+0x486>
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2201      	movs	r2, #1
 801b104:	755a      	strb	r2, [r3, #21]
 801b106:	68bb      	ldr	r3, [r7, #8]
 801b108:	2101      	movs	r1, #1
 801b10a:	4618      	mov	r0, r3
 801b10c:	f7fd f984 	bl	8018418 <unlock_fs>
 801b110:	2301      	movs	r3, #1
 801b112:	e00b      	b.n	801b12c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b118:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801b120:	4611      	mov	r1, r2
 801b122:	4618      	mov	r0, r3
 801b124:	f7fd f978 	bl	8018418 <unlock_fs>
 801b128:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801b12c:	4618      	mov	r0, r3
 801b12e:	3740      	adds	r7, #64	@ 0x40
 801b130:	46bd      	mov	sp, r7
 801b132:	bd80      	pop	{r7, pc}

0801b134 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b086      	sub	sp, #24
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
 801b13c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d101      	bne.n	801b148 <f_opendir+0x14>
 801b144:	2309      	movs	r3, #9
 801b146:	e06a      	b.n	801b21e <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801b14c:	f107 010c 	add.w	r1, r7, #12
 801b150:	463b      	mov	r3, r7
 801b152:	2200      	movs	r2, #0
 801b154:	4618      	mov	r0, r3
 801b156:	f7fe fbc5 	bl	80198e4 <find_volume>
 801b15a:	4603      	mov	r3, r0
 801b15c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b15e:	7dfb      	ldrb	r3, [r7, #23]
 801b160:	2b00      	cmp	r3, #0
 801b162:	d14f      	bne.n	801b204 <f_opendir+0xd0>
		obj->fs = fs;
 801b164:	68fa      	ldr	r2, [r7, #12]
 801b166:	693b      	ldr	r3, [r7, #16]
 801b168:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801b16a:	683b      	ldr	r3, [r7, #0]
 801b16c:	4619      	mov	r1, r3
 801b16e:	6878      	ldr	r0, [r7, #4]
 801b170:	f7fe fa8e 	bl	8019690 <follow_path>
 801b174:	4603      	mov	r3, r0
 801b176:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801b178:	7dfb      	ldrb	r3, [r7, #23]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d13d      	bne.n	801b1fa <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801b184:	b25b      	sxtb	r3, r3
 801b186:	2b00      	cmp	r3, #0
 801b188:	db12      	blt.n	801b1b0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801b18a:	693b      	ldr	r3, [r7, #16]
 801b18c:	799b      	ldrb	r3, [r3, #6]
 801b18e:	f003 0310 	and.w	r3, r3, #16
 801b192:	2b00      	cmp	r3, #0
 801b194:	d00a      	beq.n	801b1ac <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801b196:	68fa      	ldr	r2, [r7, #12]
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	6a1b      	ldr	r3, [r3, #32]
 801b19c:	4619      	mov	r1, r3
 801b19e:	4610      	mov	r0, r2
 801b1a0:	f7fe f80a 	bl	80191b8 <ld_clust>
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	693b      	ldr	r3, [r7, #16]
 801b1a8:	609a      	str	r2, [r3, #8]
 801b1aa:	e001      	b.n	801b1b0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801b1ac:	2305      	movs	r3, #5
 801b1ae:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801b1b0:	7dfb      	ldrb	r3, [r7, #23]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d121      	bne.n	801b1fa <f_opendir+0xc6>
				obj->id = fs->id;
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	88da      	ldrh	r2, [r3, #6]
 801b1ba:	693b      	ldr	r3, [r7, #16]
 801b1bc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801b1be:	2100      	movs	r1, #0
 801b1c0:	6878      	ldr	r0, [r7, #4]
 801b1c2:	f7fd fe72 	bl	8018eaa <dir_sdi>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801b1ca:	7dfb      	ldrb	r3, [r7, #23]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d114      	bne.n	801b1fa <f_opendir+0xc6>
					if (obj->sclust) {
 801b1d0:	693b      	ldr	r3, [r7, #16]
 801b1d2:	689b      	ldr	r3, [r3, #8]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d00d      	beq.n	801b1f4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801b1d8:	2100      	movs	r1, #0
 801b1da:	6878      	ldr	r0, [r7, #4]
 801b1dc:	f7fd f9b6 	bl	801854c <inc_lock>
 801b1e0:	4602      	mov	r2, r0
 801b1e2:	693b      	ldr	r3, [r7, #16]
 801b1e4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801b1e6:	693b      	ldr	r3, [r7, #16]
 801b1e8:	691b      	ldr	r3, [r3, #16]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d105      	bne.n	801b1fa <f_opendir+0xc6>
 801b1ee:	2312      	movs	r3, #18
 801b1f0:	75fb      	strb	r3, [r7, #23]
 801b1f2:	e002      	b.n	801b1fa <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801b1f4:	693b      	ldr	r3, [r7, #16]
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801b1fa:	7dfb      	ldrb	r3, [r7, #23]
 801b1fc:	2b04      	cmp	r3, #4
 801b1fe:	d101      	bne.n	801b204 <f_opendir+0xd0>
 801b200:	2305      	movs	r3, #5
 801b202:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801b204:	7dfb      	ldrb	r3, [r7, #23]
 801b206:	2b00      	cmp	r3, #0
 801b208:	d002      	beq.n	801b210 <f_opendir+0xdc>
 801b20a:	693b      	ldr	r3, [r7, #16]
 801b20c:	2200      	movs	r2, #0
 801b20e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	7dfa      	ldrb	r2, [r7, #23]
 801b214:	4611      	mov	r1, r2
 801b216:	4618      	mov	r0, r3
 801b218:	f7fd f8fe 	bl	8018418 <unlock_fs>
 801b21c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b21e:	4618      	mov	r0, r3
 801b220:	3718      	adds	r7, #24
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}

0801b226 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801b226:	b580      	push	{r7, lr}
 801b228:	b084      	sub	sp, #16
 801b22a:	af00      	add	r7, sp, #0
 801b22c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	f107 0208 	add.w	r2, r7, #8
 801b234:	4611      	mov	r1, r2
 801b236:	4618      	mov	r0, r3
 801b238:	f7fe fdaa 	bl	8019d90 <validate>
 801b23c:	4603      	mov	r3, r0
 801b23e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b240:	7bfb      	ldrb	r3, [r7, #15]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d115      	bne.n	801b272 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	691b      	ldr	r3, [r3, #16]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d006      	beq.n	801b25c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	691b      	ldr	r3, [r3, #16]
 801b252:	4618      	mov	r0, r3
 801b254:	f7fd fa08 	bl	8018668 <dec_lock>
 801b258:	4603      	mov	r3, r0
 801b25a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801b25c:	7bfb      	ldrb	r3, [r7, #15]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d102      	bne.n	801b268 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2200      	movs	r2, #0
 801b266:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801b268:	68bb      	ldr	r3, [r7, #8]
 801b26a:	2100      	movs	r1, #0
 801b26c:	4618      	mov	r0, r3
 801b26e:	f7fd f8d3 	bl	8018418 <unlock_fs>
#endif
	}
	return res;
 801b272:	7bfb      	ldrb	r3, [r7, #15]
}
 801b274:	4618      	mov	r0, r3
 801b276:	3710      	adds	r7, #16
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd80      	pop	{r7, pc}

0801b27c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b084      	sub	sp, #16
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	f107 0208 	add.w	r2, r7, #8
 801b28c:	4611      	mov	r1, r2
 801b28e:	4618      	mov	r0, r3
 801b290:	f7fe fd7e 	bl	8019d90 <validate>
 801b294:	4603      	mov	r3, r0
 801b296:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b298:	7bfb      	ldrb	r3, [r7, #15]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d126      	bne.n	801b2ec <f_readdir+0x70>
		if (!fno) {
 801b29e:	683b      	ldr	r3, [r7, #0]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d106      	bne.n	801b2b2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801b2a4:	2100      	movs	r1, #0
 801b2a6:	6878      	ldr	r0, [r7, #4]
 801b2a8:	f7fd fdff 	bl	8018eaa <dir_sdi>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	73fb      	strb	r3, [r7, #15]
 801b2b0:	e01c      	b.n	801b2ec <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801b2b2:	2100      	movs	r1, #0
 801b2b4:	6878      	ldr	r0, [r7, #4]
 801b2b6:	f7fd ffbe 	bl	8019236 <dir_read>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801b2be:	7bfb      	ldrb	r3, [r7, #15]
 801b2c0:	2b04      	cmp	r3, #4
 801b2c2:	d101      	bne.n	801b2c8 <f_readdir+0x4c>
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801b2c8:	7bfb      	ldrb	r3, [r7, #15]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d10e      	bne.n	801b2ec <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801b2ce:	6839      	ldr	r1, [r7, #0]
 801b2d0:	6878      	ldr	r0, [r7, #4]
 801b2d2:	f7fe f8b2 	bl	801943a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801b2d6:	2100      	movs	r1, #0
 801b2d8:	6878      	ldr	r0, [r7, #4]
 801b2da:	f7fd fe61 	bl	8018fa0 <dir_next>
 801b2de:	4603      	mov	r3, r0
 801b2e0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801b2e2:	7bfb      	ldrb	r3, [r7, #15]
 801b2e4:	2b04      	cmp	r3, #4
 801b2e6:	d101      	bne.n	801b2ec <f_readdir+0x70>
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801b2ec:	68bb      	ldr	r3, [r7, #8]
 801b2ee:	7bfa      	ldrb	r2, [r7, #15]
 801b2f0:	4611      	mov	r1, r2
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	f7fd f890 	bl	8018418 <unlock_fs>
 801b2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	3710      	adds	r7, #16
 801b2fe:	46bd      	mov	sp, r7
 801b300:	bd80      	pop	{r7, pc}

0801b302 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801b302:	b580      	push	{r7, lr}
 801b304:	b090      	sub	sp, #64	@ 0x40
 801b306:	af00      	add	r7, sp, #0
 801b308:	6078      	str	r0, [r7, #4]
 801b30a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801b30c:	f107 010c 	add.w	r1, r7, #12
 801b310:	1d3b      	adds	r3, r7, #4
 801b312:	2200      	movs	r2, #0
 801b314:	4618      	mov	r0, r3
 801b316:	f7fe fae5 	bl	80198e4 <find_volume>
 801b31a:	4603      	mov	r3, r0
 801b31c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801b320:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b324:	2b00      	cmp	r3, #0
 801b326:	d11f      	bne.n	801b368 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b328:	687a      	ldr	r2, [r7, #4]
 801b32a:	f107 030c 	add.w	r3, r7, #12
 801b32e:	4611      	mov	r1, r2
 801b330:	4618      	mov	r0, r3
 801b332:	f7fe f9ad 	bl	8019690 <follow_path>
 801b336:	4603      	mov	r3, r0
 801b338:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801b33c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b340:	2b00      	cmp	r3, #0
 801b342:	d111      	bne.n	801b368 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801b344:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801b348:	b25b      	sxtb	r3, r3
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	da03      	bge.n	801b356 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801b34e:	2306      	movs	r3, #6
 801b350:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801b354:	e008      	b.n	801b368 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d005      	beq.n	801b368 <f_stat+0x66>
 801b35c:	f107 030c 	add.w	r3, r7, #12
 801b360:	6839      	ldr	r1, [r7, #0]
 801b362:	4618      	mov	r0, r3
 801b364:	f7fe f869 	bl	801943a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801b36e:	4611      	mov	r1, r2
 801b370:	4618      	mov	r0, r3
 801b372:	f7fd f851 	bl	8018418 <unlock_fs>
 801b376:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801b37a:	4618      	mov	r0, r3
 801b37c:	3740      	adds	r7, #64	@ 0x40
 801b37e:	46bd      	mov	sp, r7
 801b380:	bd80      	pop	{r7, pc}

0801b382 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801b382:	b580      	push	{r7, lr}
 801b384:	b09e      	sub	sp, #120	@ 0x78
 801b386:	af00      	add	r7, sp, #0
 801b388:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801b38a:	2300      	movs	r3, #0
 801b38c:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801b38e:	f107 010c 	add.w	r1, r7, #12
 801b392:	1d3b      	adds	r3, r7, #4
 801b394:	2202      	movs	r2, #2
 801b396:	4618      	mov	r0, r3
 801b398:	f7fe faa4 	bl	80198e4 <find_volume>
 801b39c:	4603      	mov	r3, r0
 801b39e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 801b3a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	f040 80a4 	bne.w	801b4f8 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801b3b0:	687a      	ldr	r2, [r7, #4]
 801b3b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b3b6:	4611      	mov	r1, r2
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7fe f969 	bl	8019690 <follow_path>
 801b3be:	4603      	mov	r3, r0
 801b3c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801b3c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d108      	bne.n	801b3de <f_unlink+0x5c>
 801b3cc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801b3d0:	f003 0320 	and.w	r3, r3, #32
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d002      	beq.n	801b3de <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801b3d8:	2306      	movs	r3, #6
 801b3da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801b3de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d108      	bne.n	801b3f8 <f_unlink+0x76>
 801b3e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b3ea:	2102      	movs	r1, #2
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	f7fd f82f 	bl	8018450 <chk_lock>
 801b3f2:	4603      	mov	r3, r0
 801b3f4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801b3f8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d17b      	bne.n	801b4f8 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801b400:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801b404:	b25b      	sxtb	r3, r3
 801b406:	2b00      	cmp	r3, #0
 801b408:	da03      	bge.n	801b412 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801b40a:	2306      	movs	r3, #6
 801b40c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 801b410:	e008      	b.n	801b424 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801b412:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801b416:	f003 0301 	and.w	r3, r3, #1
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d002      	beq.n	801b424 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801b41e:	2307      	movs	r3, #7
 801b420:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 801b424:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d13d      	bne.n	801b4a8 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b430:	4611      	mov	r1, r2
 801b432:	4618      	mov	r0, r3
 801b434:	f7fd fec0 	bl	80191b8 <ld_clust>
 801b438:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801b43a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801b43e:	f003 0310 	and.w	r3, r3, #16
 801b442:	2b00      	cmp	r3, #0
 801b444:	d030      	beq.n	801b4a8 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	699b      	ldr	r3, [r3, #24]
 801b44a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801b44c:	429a      	cmp	r2, r3
 801b44e:	d103      	bne.n	801b458 <f_unlink+0xd6>
						res = FR_DENIED;
 801b450:	2307      	movs	r3, #7
 801b452:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 801b456:	e027      	b.n	801b4a8 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801b45c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b45e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801b460:	f107 0310 	add.w	r3, r7, #16
 801b464:	2100      	movs	r1, #0
 801b466:	4618      	mov	r0, r3
 801b468:	f7fd fd1f 	bl	8018eaa <dir_sdi>
 801b46c:	4603      	mov	r3, r0
 801b46e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 801b472:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b476:	2b00      	cmp	r3, #0
 801b478:	d116      	bne.n	801b4a8 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801b47a:	f107 0310 	add.w	r3, r7, #16
 801b47e:	2100      	movs	r1, #0
 801b480:	4618      	mov	r0, r3
 801b482:	f7fd fed8 	bl	8019236 <dir_read>
 801b486:	4603      	mov	r3, r0
 801b488:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801b48c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b490:	2b00      	cmp	r3, #0
 801b492:	d102      	bne.n	801b49a <f_unlink+0x118>
 801b494:	2307      	movs	r3, #7
 801b496:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801b49a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b49e:	2b04      	cmp	r3, #4
 801b4a0:	d102      	bne.n	801b4a8 <f_unlink+0x126>
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801b4a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d123      	bne.n	801b4f8 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801b4b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7fd ffa2 	bl	80193fe <dir_remove>
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801b4c0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d10c      	bne.n	801b4e2 <f_unlink+0x160>
 801b4c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d009      	beq.n	801b4e2 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801b4ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	f7fd fbb6 	bl	8018c48 <remove_chain>
 801b4dc:	4603      	mov	r3, r0
 801b4de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801b4e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d106      	bne.n	801b4f8 <f_unlink+0x176>
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7fd f98d 	bl	801880c <sync_fs>
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 801b4fe:	4611      	mov	r1, r2
 801b500:	4618      	mov	r0, r3
 801b502:	f7fc ff89 	bl	8018418 <unlock_fs>
 801b506:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 801b50a:	4618      	mov	r0, r3
 801b50c:	3778      	adds	r7, #120	@ 0x78
 801b50e:	46bd      	mov	sp, r7
 801b510:	bd80      	pop	{r7, pc}

0801b512 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801b512:	b580      	push	{r7, lr}
 801b514:	b096      	sub	sp, #88	@ 0x58
 801b516:	af00      	add	r7, sp, #0
 801b518:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801b51a:	f107 0108 	add.w	r1, r7, #8
 801b51e:	1d3b      	adds	r3, r7, #4
 801b520:	2202      	movs	r2, #2
 801b522:	4618      	mov	r0, r3
 801b524:	f7fe f9de 	bl	80198e4 <find_volume>
 801b528:	4603      	mov	r3, r0
 801b52a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 801b52e:	68bb      	ldr	r3, [r7, #8]
 801b530:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801b532:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b536:	2b00      	cmp	r3, #0
 801b538:	f040 80f9 	bne.w	801b72e <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801b53c:	687a      	ldr	r2, [r7, #4]
 801b53e:	f107 030c 	add.w	r3, r7, #12
 801b542:	4611      	mov	r1, r2
 801b544:	4618      	mov	r0, r3
 801b546:	f7fe f8a3 	bl	8019690 <follow_path>
 801b54a:	4603      	mov	r3, r0
 801b54c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801b550:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b554:	2b00      	cmp	r3, #0
 801b556:	d102      	bne.n	801b55e <f_mkdir+0x4c>
 801b558:	2308      	movs	r3, #8
 801b55a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801b55e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b562:	2b04      	cmp	r3, #4
 801b564:	d108      	bne.n	801b578 <f_mkdir+0x66>
 801b566:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801b56a:	f003 0320 	and.w	r3, r3, #32
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d002      	beq.n	801b578 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801b572:	2306      	movs	r3, #6
 801b574:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801b578:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b57c:	2b04      	cmp	r3, #4
 801b57e:	f040 80d6 	bne.w	801b72e <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801b582:	f107 030c 	add.w	r3, r7, #12
 801b586:	2100      	movs	r1, #0
 801b588:	4618      	mov	r0, r3
 801b58a:	f7fd fbc2 	bl	8018d12 <create_chain>
 801b58e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801b590:	68bb      	ldr	r3, [r7, #8]
 801b592:	895b      	ldrh	r3, [r3, #10]
 801b594:	025b      	lsls	r3, r3, #9
 801b596:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801b598:	2300      	movs	r3, #0
 801b59a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801b59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d102      	bne.n	801b5aa <f_mkdir+0x98>
 801b5a4:	2307      	movs	r3, #7
 801b5a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801b5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b5ac:	2b01      	cmp	r3, #1
 801b5ae:	d102      	bne.n	801b5b6 <f_mkdir+0xa4>
 801b5b0:	2302      	movs	r3, #2
 801b5b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5bc:	d102      	bne.n	801b5c4 <f_mkdir+0xb2>
 801b5be:	2301      	movs	r3, #1
 801b5c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801b5c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d106      	bne.n	801b5da <f_mkdir+0xc8>
 801b5cc:	68bb      	ldr	r3, [r7, #8]
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7fd f8aa 	bl	8018728 <sync_window>
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 801b5da:	f7ee fee1 	bl	800a3a0 <get_fattime>
 801b5de:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801b5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d16a      	bne.n	801b6be <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f7fd f97b 	bl	80188e8 <clust2sect>
 801b5f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 801b5f4:	68bb      	ldr	r3, [r7, #8]
 801b5f6:	3338      	adds	r3, #56	@ 0x38
 801b5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 801b5fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b5fe:	2100      	movs	r1, #0
 801b600:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801b602:	f7fc fe96 	bl	8018332 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801b606:	220b      	movs	r2, #11
 801b608:	2120      	movs	r1, #32
 801b60a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801b60c:	f7fc fe91 	bl	8018332 <mem_set>
					dir[DIR_Name] = '.';
 801b610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b612:	222e      	movs	r2, #46	@ 0x2e
 801b614:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801b616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b618:	330b      	adds	r3, #11
 801b61a:	2210      	movs	r2, #16
 801b61c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801b61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b620:	3316      	adds	r3, #22
 801b622:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b624:	4618      	mov	r0, r3
 801b626:	f7fc fe37 	bl	8018298 <st_dword>
					st_clust(fs, dir, dcl);
 801b62a:	68bb      	ldr	r3, [r7, #8]
 801b62c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b62e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b630:	4618      	mov	r0, r3
 801b632:	f7fd fde0 	bl	80191f6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801b636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b638:	3320      	adds	r3, #32
 801b63a:	2220      	movs	r2, #32
 801b63c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b63e:	4618      	mov	r0, r3
 801b640:	f7fc fe56 	bl	80182f0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801b644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b646:	3321      	adds	r3, #33	@ 0x21
 801b648:	222e      	movs	r2, #46	@ 0x2e
 801b64a:	701a      	strb	r2, [r3, #0]
 801b64c:	697b      	ldr	r3, [r7, #20]
 801b64e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801b650:	68bb      	ldr	r3, [r7, #8]
 801b652:	781b      	ldrb	r3, [r3, #0]
 801b654:	2b03      	cmp	r3, #3
 801b656:	d106      	bne.n	801b666 <f_mkdir+0x154>
 801b658:	68bb      	ldr	r3, [r7, #8]
 801b65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b65c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b65e:	429a      	cmp	r2, r3
 801b660:	d101      	bne.n	801b666 <f_mkdir+0x154>
 801b662:	2300      	movs	r3, #0
 801b664:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801b666:	68b8      	ldr	r0, [r7, #8]
 801b668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b66a:	3320      	adds	r3, #32
 801b66c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b66e:	4619      	mov	r1, r3
 801b670:	f7fd fdc1 	bl	80191f6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	895b      	ldrh	r3, [r3, #10]
 801b678:	653b      	str	r3, [r7, #80]	@ 0x50
 801b67a:	e01b      	b.n	801b6b4 <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 801b67c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b67e:	1c5a      	adds	r2, r3, #1
 801b680:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801b682:	68ba      	ldr	r2, [r7, #8]
 801b684:	6353      	str	r3, [r2, #52]	@ 0x34
					fs->wflag = 1;
 801b686:	68bb      	ldr	r3, [r7, #8]
 801b688:	2201      	movs	r2, #1
 801b68a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	4618      	mov	r0, r3
 801b690:	f7fd f84a 	bl	8018728 <sync_window>
 801b694:	4603      	mov	r3, r0
 801b696:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 801b69a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d10c      	bne.n	801b6bc <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 801b6a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b6a6:	2100      	movs	r1, #0
 801b6a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801b6aa:	f7fc fe42 	bl	8018332 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801b6ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b6b0:	3b01      	subs	r3, #1
 801b6b2:	653b      	str	r3, [r7, #80]	@ 0x50
 801b6b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d1e0      	bne.n	801b67c <f_mkdir+0x16a>
 801b6ba:	e000      	b.n	801b6be <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 801b6bc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801b6be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d107      	bne.n	801b6d6 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801b6c6:	f107 030c 	add.w	r3, r7, #12
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f7fd fe65 	bl	801939a <dir_register>
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 801b6d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d120      	bne.n	801b720 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801b6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801b6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6e4:	3316      	adds	r3, #22
 801b6e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	f7fc fdd5 	bl	8018298 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801b6ee:	68bb      	ldr	r3, [r7, #8]
 801b6f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b6f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	f7fd fd7e 	bl	80191f6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801b6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6fc:	330b      	adds	r3, #11
 801b6fe:	2210      	movs	r2, #16
 801b700:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801b702:	68bb      	ldr	r3, [r7, #8]
 801b704:	2201      	movs	r2, #1
 801b706:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801b708:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d10e      	bne.n	801b72e <f_mkdir+0x21c>
					res = sync_fs(fs);
 801b710:	68bb      	ldr	r3, [r7, #8]
 801b712:	4618      	mov	r0, r3
 801b714:	f7fd f87a 	bl	801880c <sync_fs>
 801b718:	4603      	mov	r3, r0
 801b71a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801b71e:	e006      	b.n	801b72e <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801b720:	f107 030c 	add.w	r3, r7, #12
 801b724:	2200      	movs	r2, #0
 801b726:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b728:	4618      	mov	r0, r3
 801b72a:	f7fd fa8d 	bl	8018c48 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801b72e:	68bb      	ldr	r3, [r7, #8]
 801b730:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801b734:	4611      	mov	r1, r2
 801b736:	4618      	mov	r0, r3
 801b738:	f7fc fe6e 	bl	8018418 <unlock_fs>
 801b73c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 801b740:	4618      	mov	r0, r3
 801b742:	3758      	adds	r7, #88	@ 0x58
 801b744:	46bd      	mov	sp, r7
 801b746:	bd80      	pop	{r7, pc}

0801b748 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 801b748:	b590      	push	{r4, r7, lr}
 801b74a:	b0a5      	sub	sp, #148	@ 0x94
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
 801b750:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 801b752:	463b      	mov	r3, r7
 801b754:	4618      	mov	r0, r3
 801b756:	f7fe f82b 	bl	80197b0 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 801b75a:	f107 0120 	add.w	r1, r7, #32
 801b75e:	1d3b      	adds	r3, r7, #4
 801b760:	2202      	movs	r2, #2
 801b762:	4618      	mov	r0, r3
 801b764:	f7fe f8be 	bl	80198e4 <find_volume>
 801b768:	4603      	mov	r3, r0
 801b76a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 801b76e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b772:	2b00      	cmp	r3, #0
 801b774:	f040 80db 	bne.w	801b92e <f_rename+0x1e6>
		djo.obj.fs = fs;
 801b778:	6a3b      	ldr	r3, [r7, #32]
 801b77a:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 801b77c:	687a      	ldr	r2, [r7, #4]
 801b77e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b782:	4611      	mov	r1, r2
 801b784:	4618      	mov	r0, r3
 801b786:	f7fd ff83 	bl	8019690 <follow_path>
 801b78a:	4603      	mov	r3, r0
 801b78c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 801b790:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b794:	2b00      	cmp	r3, #0
 801b796:	d108      	bne.n	801b7aa <f_rename+0x62>
 801b798:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801b79c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d002      	beq.n	801b7aa <f_rename+0x62>
 801b7a4:	2306      	movs	r3, #6
 801b7a6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 801b7aa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d108      	bne.n	801b7c4 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 801b7b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b7b6:	2102      	movs	r1, #2
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	f7fc fe49 	bl	8018450 <chk_lock>
 801b7be:	4603      	mov	r3, r0
 801b7c0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 801b7c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	f040 80b0 	bne.w	801b92e <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 801b7ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b7d0:	f103 010b 	add.w	r1, r3, #11
 801b7d4:	f107 0308 	add.w	r3, r7, #8
 801b7d8:	2215      	movs	r2, #21
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7fc fd88 	bl	80182f0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 801b7e0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801b7e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b7e8:	2230      	movs	r2, #48	@ 0x30
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	f7fc fd80 	bl	80182f0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 801b7f0:	683a      	ldr	r2, [r7, #0]
 801b7f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b7f6:	4611      	mov	r1, r2
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	f7fd ff49 	bl	8019690 <follow_path>
 801b7fe:	4603      	mov	r3, r0
 801b800:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 801b804:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d10c      	bne.n	801b826 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 801b80c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b80e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b810:	429a      	cmp	r2, r3
 801b812:	d105      	bne.n	801b820 <f_rename+0xd8>
 801b814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b818:	429a      	cmp	r2, r3
 801b81a:	d101      	bne.n	801b820 <f_rename+0xd8>
 801b81c:	2304      	movs	r3, #4
 801b81e:	e000      	b.n	801b822 <f_rename+0xda>
 801b820:	2308      	movs	r3, #8
 801b822:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 801b826:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b82a:	2b04      	cmp	r3, #4
 801b82c:	d168      	bne.n	801b900 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 801b82e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b832:	4618      	mov	r0, r3
 801b834:	f7fd fdb1 	bl	801939a <dir_register>
 801b838:	4603      	mov	r3, r0
 801b83a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 801b83e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b842:	2b00      	cmp	r3, #0
 801b844:	d15c      	bne.n	801b900 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 801b846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 801b84c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b850:	f103 000d 	add.w	r0, r3, #13
 801b854:	f107 0308 	add.w	r3, r7, #8
 801b858:	3302      	adds	r3, #2
 801b85a:	2213      	movs	r2, #19
 801b85c:	4619      	mov	r1, r3
 801b85e:	f7fc fd47 	bl	80182f0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 801b862:	7a3a      	ldrb	r2, [r7, #8]
 801b864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b868:	330b      	adds	r3, #11
 801b86a:	f042 0220 	orr.w	r2, r2, #32
 801b86e:	b2d2      	uxtb	r2, r2
 801b870:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 801b872:	6a3b      	ldr	r3, [r7, #32]
 801b874:	2201      	movs	r2, #1
 801b876:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 801b878:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b87c:	330b      	adds	r3, #11
 801b87e:	781b      	ldrb	r3, [r3, #0]
 801b880:	f003 0310 	and.w	r3, r3, #16
 801b884:	2b00      	cmp	r3, #0
 801b886:	d03b      	beq.n	801b900 <f_rename+0x1b8>
 801b888:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b88c:	429a      	cmp	r2, r3
 801b88e:	d037      	beq.n	801b900 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 801b890:	6a3c      	ldr	r4, [r7, #32]
 801b892:	6a3b      	ldr	r3, [r7, #32]
 801b894:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801b898:	4618      	mov	r0, r3
 801b89a:	f7fd fc8d 	bl	80191b8 <ld_clust>
 801b89e:	4603      	mov	r3, r0
 801b8a0:	4619      	mov	r1, r3
 801b8a2:	4620      	mov	r0, r4
 801b8a4:	f7fd f820 	bl	80188e8 <clust2sect>
 801b8a8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 801b8ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d103      	bne.n	801b8bc <f_rename+0x174>
								res = FR_INT_ERR;
 801b8b4:	2302      	movs	r3, #2
 801b8b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 801b8ba:	e021      	b.n	801b900 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 801b8bc:	6a3b      	ldr	r3, [r7, #32]
 801b8be:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	f7fc ff74 	bl	80187b0 <move_window>
 801b8c8:	4603      	mov	r3, r0
 801b8ca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 801b8ce:	6a3b      	ldr	r3, [r7, #32]
 801b8d0:	3338      	adds	r3, #56	@ 0x38
 801b8d2:	3320      	adds	r3, #32
 801b8d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 801b8d8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d10f      	bne.n	801b900 <f_rename+0x1b8>
 801b8e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b8e4:	3301      	adds	r3, #1
 801b8e6:	781b      	ldrb	r3, [r3, #0]
 801b8e8:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8ea:	d109      	bne.n	801b900 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 801b8ec:	6a3b      	ldr	r3, [r7, #32]
 801b8ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b8f0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	f7fd fc7e 	bl	80191f6 <st_clust>
									fs->wflag = 1;
 801b8fa:	6a3b      	ldr	r3, [r7, #32]
 801b8fc:	2201      	movs	r2, #1
 801b8fe:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 801b900:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b904:	2b00      	cmp	r3, #0
 801b906:	d112      	bne.n	801b92e <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 801b908:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b90c:	4618      	mov	r0, r3
 801b90e:	f7fd fd76 	bl	80193fe <dir_remove>
 801b912:	4603      	mov	r3, r0
 801b914:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 801b918:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d106      	bne.n	801b92e <f_rename+0x1e6>
					res = sync_fs(fs);
 801b920:	6a3b      	ldr	r3, [r7, #32]
 801b922:	4618      	mov	r0, r3
 801b924:	f7fc ff72 	bl	801880c <sync_fs>
 801b928:	4603      	mov	r3, r0
 801b92a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801b92e:	6a3b      	ldr	r3, [r7, #32]
 801b930:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 801b934:	4611      	mov	r1, r2
 801b936:	4618      	mov	r0, r3
 801b938:	f7fc fd6e 	bl	8018418 <unlock_fs>
 801b93c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 801b940:	4618      	mov	r0, r3
 801b942:	3794      	adds	r7, #148	@ 0x94
 801b944:	46bd      	mov	sp, r7
 801b946:	bd90      	pop	{r4, r7, pc}

0801b948 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	b090      	sub	sp, #64	@ 0x40
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	6078      	str	r0, [r7, #4]
 801b950:	460b      	mov	r3, r1
 801b952:	70fb      	strb	r3, [r7, #3]
 801b954:	4613      	mov	r3, r2
 801b956:	70bb      	strb	r3, [r7, #2]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 801b958:	f107 0108 	add.w	r1, r7, #8
 801b95c:	1d3b      	adds	r3, r7, #4
 801b95e:	2202      	movs	r2, #2
 801b960:	4618      	mov	r0, r3
 801b962:	f7fd ffbf 	bl	80198e4 <find_volume>
 801b966:	4603      	mov	r3, r0
 801b968:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	dj.obj.fs = fs;
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801b970:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b974:	2b00      	cmp	r3, #0
 801b976:	d13d      	bne.n	801b9f4 <f_chmod+0xac>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b978:	687a      	ldr	r2, [r7, #4]
 801b97a:	f107 030c 	add.w	r3, r7, #12
 801b97e:	4611      	mov	r1, r2
 801b980:	4618      	mov	r0, r3
 801b982:	f7fd fe85 	bl	8019690 <follow_path>
 801b986:	4603      	mov	r3, r0
 801b988:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 801b98c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b990:	2b00      	cmp	r3, #0
 801b992:	d108      	bne.n	801b9a6 <f_chmod+0x5e>
 801b994:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801b998:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d002      	beq.n	801b9a6 <f_chmod+0x5e>
 801b9a0:	2306      	movs	r3, #6
 801b9a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {
 801b9a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d122      	bne.n	801b9f4 <f_chmod+0xac>
			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 801b9ae:	78bb      	ldrb	r3, [r7, #2]
 801b9b0:	f003 0327 	and.w	r3, r3, #39	@ 0x27
 801b9b4:	70bb      	strb	r3, [r7, #2]
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 801b9b6:	78fa      	ldrb	r2, [r7, #3]
 801b9b8:	78bb      	ldrb	r3, [r7, #2]
 801b9ba:	4013      	ands	r3, r2
 801b9bc:	b2d9      	uxtb	r1, r3
 801b9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9c0:	330b      	adds	r3, #11
 801b9c2:	781a      	ldrb	r2, [r3, #0]
 801b9c4:	78bb      	ldrb	r3, [r7, #2]
 801b9c6:	43db      	mvns	r3, r3
 801b9c8:	b2db      	uxtb	r3, r3
 801b9ca:	4013      	ands	r3, r2
 801b9cc:	b2da      	uxtb	r2, r3
 801b9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9d0:	330b      	adds	r3, #11
 801b9d2:	430a      	orrs	r2, r1
 801b9d4:	b2d2      	uxtb	r2, r2
 801b9d6:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 801b9d8:	68bb      	ldr	r3, [r7, #8]
 801b9da:	2201      	movs	r2, #1
 801b9dc:	70da      	strb	r2, [r3, #3]
			}
			if (res == FR_OK) {
 801b9de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d106      	bne.n	801b9f4 <f_chmod+0xac>
				res = sync_fs(fs);
 801b9e6:	68bb      	ldr	r3, [r7, #8]
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f7fc ff0f 	bl	801880c <sync_fs>
 801b9ee:	4603      	mov	r3, r0
 801b9f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801b9fa:	4611      	mov	r1, r2
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f7fc fd0b 	bl	8018418 <unlock_fs>
 801ba02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801ba06:	4618      	mov	r0, r3
 801ba08:	3740      	adds	r7, #64	@ 0x40
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd80      	pop	{r7, pc}

0801ba0e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801ba0e:	b580      	push	{r7, lr}
 801ba10:	b088      	sub	sp, #32
 801ba12:	af00      	add	r7, sp, #0
 801ba14:	60f8      	str	r0, [r7, #12]
 801ba16:	60b9      	str	r1, [r7, #8]
 801ba18:	607a      	str	r2, [r7, #4]
	int n = 0;
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801ba1e:	68fb      	ldr	r3, [r7, #12]
 801ba20:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801ba22:	e01c      	b.n	801ba5e <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801ba24:	f107 0310 	add.w	r3, r7, #16
 801ba28:	f107 0114 	add.w	r1, r7, #20
 801ba2c:	2201      	movs	r2, #1
 801ba2e:	6878      	ldr	r0, [r7, #4]
 801ba30:	f7fe fc1b 	bl	801a26a <f_read>
		if (rc != 1) break;
 801ba34:	693b      	ldr	r3, [r7, #16]
 801ba36:	2b01      	cmp	r3, #1
 801ba38:	d117      	bne.n	801ba6a <f_gets+0x5c>
		c = s[0];
 801ba3a:	7d3b      	ldrb	r3, [r7, #20]
 801ba3c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 801ba3e:	7dfb      	ldrb	r3, [r7, #23]
 801ba40:	2b0d      	cmp	r3, #13
 801ba42:	d00b      	beq.n	801ba5c <f_gets+0x4e>
		*p++ = c;
 801ba44:	69bb      	ldr	r3, [r7, #24]
 801ba46:	1c5a      	adds	r2, r3, #1
 801ba48:	61ba      	str	r2, [r7, #24]
 801ba4a:	7dfa      	ldrb	r2, [r7, #23]
 801ba4c:	701a      	strb	r2, [r3, #0]
		n++;
 801ba4e:	69fb      	ldr	r3, [r7, #28]
 801ba50:	3301      	adds	r3, #1
 801ba52:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801ba54:	7dfb      	ldrb	r3, [r7, #23]
 801ba56:	2b0a      	cmp	r3, #10
 801ba58:	d009      	beq.n	801ba6e <f_gets+0x60>
 801ba5a:	e000      	b.n	801ba5e <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 801ba5c:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801ba5e:	68bb      	ldr	r3, [r7, #8]
 801ba60:	3b01      	subs	r3, #1
 801ba62:	69fa      	ldr	r2, [r7, #28]
 801ba64:	429a      	cmp	r2, r3
 801ba66:	dbdd      	blt.n	801ba24 <f_gets+0x16>
 801ba68:	e002      	b.n	801ba70 <f_gets+0x62>
		if (rc != 1) break;
 801ba6a:	bf00      	nop
 801ba6c:	e000      	b.n	801ba70 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 801ba6e:	bf00      	nop
	}
	*p = 0;
 801ba70:	69bb      	ldr	r3, [r7, #24]
 801ba72:	2200      	movs	r2, #0
 801ba74:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801ba76:	69fb      	ldr	r3, [r7, #28]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d001      	beq.n	801ba80 <f_gets+0x72>
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	e000      	b.n	801ba82 <f_gets+0x74>
 801ba80:	2300      	movs	r3, #0
}
 801ba82:	4618      	mov	r0, r3
 801ba84:	3720      	adds	r7, #32
 801ba86:	46bd      	mov	sp, r7
 801ba88:	bd80      	pop	{r7, pc}

0801ba8a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801ba8a:	b580      	push	{r7, lr}
 801ba8c:	b084      	sub	sp, #16
 801ba8e:	af00      	add	r7, sp, #0
 801ba90:	6078      	str	r0, [r7, #4]
 801ba92:	460b      	mov	r3, r1
 801ba94:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801ba96:	78fb      	ldrb	r3, [r7, #3]
 801ba98:	2b0a      	cmp	r3, #10
 801ba9a:	d103      	bne.n	801baa4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801ba9c:	210d      	movs	r1, #13
 801ba9e:	6878      	ldr	r0, [r7, #4]
 801baa0:	f7ff fff3 	bl	801ba8a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	685b      	ldr	r3, [r3, #4]
 801baa8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	2b00      	cmp	r3, #0
 801baae:	db25      	blt.n	801bafc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	1c5a      	adds	r2, r3, #1
 801bab4:	60fa      	str	r2, [r7, #12]
 801bab6:	687a      	ldr	r2, [r7, #4]
 801bab8:	4413      	add	r3, r2
 801baba:	78fa      	ldrb	r2, [r7, #3]
 801babc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	2b3c      	cmp	r3, #60	@ 0x3c
 801bac2:	dd12      	ble.n	801baea <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	6818      	ldr	r0, [r3, #0]
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	f103 010c 	add.w	r1, r3, #12
 801bace:	68fa      	ldr	r2, [r7, #12]
 801bad0:	f107 0308 	add.w	r3, r7, #8
 801bad4:	f7fe fd37 	bl	801a546 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801bad8:	68ba      	ldr	r2, [r7, #8]
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	429a      	cmp	r2, r3
 801bade:	d101      	bne.n	801bae4 <putc_bfd+0x5a>
 801bae0:	2300      	movs	r3, #0
 801bae2:	e001      	b.n	801bae8 <putc_bfd+0x5e>
 801bae4:	f04f 33ff 	mov.w	r3, #4294967295
 801bae8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	68fa      	ldr	r2, [r7, #12]
 801baee:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	689b      	ldr	r3, [r3, #8]
 801baf4:	1c5a      	adds	r2, r3, #1
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	609a      	str	r2, [r3, #8]
 801bafa:	e000      	b.n	801bafe <putc_bfd+0x74>
	if (i < 0) return;
 801bafc:	bf00      	nop
}
 801bafe:	3710      	adds	r7, #16
 801bb00:	46bd      	mov	sp, r7
 801bb02:	bd80      	pop	{r7, pc}

0801bb04 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b084      	sub	sp, #16
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	685b      	ldr	r3, [r3, #4]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	db16      	blt.n	801bb42 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	6818      	ldr	r0, [r3, #0]
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	f103 010c 	add.w	r1, r3, #12
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	685b      	ldr	r3, [r3, #4]
 801bb22:	461a      	mov	r2, r3
 801bb24:	f107 030c 	add.w	r3, r7, #12
 801bb28:	f7fe fd0d 	bl	801a546 <f_write>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d107      	bne.n	801bb42 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	685b      	ldr	r3, [r3, #4]
 801bb36:	68fa      	ldr	r2, [r7, #12]
 801bb38:	4293      	cmp	r3, r2
 801bb3a:	d102      	bne.n	801bb42 <putc_flush+0x3e>
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	689b      	ldr	r3, [r3, #8]
 801bb40:	e001      	b.n	801bb46 <putc_flush+0x42>
	return EOF;
 801bb42:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bb46:	4618      	mov	r0, r3
 801bb48:	3710      	adds	r7, #16
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bd80      	pop	{r7, pc}

0801bb4e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801bb4e:	b480      	push	{r7}
 801bb50:	b083      	sub	sp, #12
 801bb52:	af00      	add	r7, sp, #0
 801bb54:	6078      	str	r0, [r7, #4]
 801bb56:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	683a      	ldr	r2, [r7, #0]
 801bb5c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	2200      	movs	r2, #0
 801bb62:	605a      	str	r2, [r3, #4]
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	685a      	ldr	r2, [r3, #4]
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	609a      	str	r2, [r3, #8]
}
 801bb6c:	bf00      	nop
 801bb6e:	370c      	adds	r7, #12
 801bb70:	46bd      	mov	sp, r7
 801bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb76:	4770      	bx	lr

0801bb78 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b096      	sub	sp, #88	@ 0x58
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	6078      	str	r0, [r7, #4]
 801bb80:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801bb82:	f107 030c 	add.w	r3, r7, #12
 801bb86:	6839      	ldr	r1, [r7, #0]
 801bb88:	4618      	mov	r0, r3
 801bb8a:	f7ff ffe0 	bl	801bb4e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801bb8e:	e009      	b.n	801bba4 <f_puts+0x2c>
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	1c5a      	adds	r2, r3, #1
 801bb94:	607a      	str	r2, [r7, #4]
 801bb96:	781a      	ldrb	r2, [r3, #0]
 801bb98:	f107 030c 	add.w	r3, r7, #12
 801bb9c:	4611      	mov	r1, r2
 801bb9e:	4618      	mov	r0, r3
 801bba0:	f7ff ff73 	bl	801ba8a <putc_bfd>
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	781b      	ldrb	r3, [r3, #0]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d1f1      	bne.n	801bb90 <f_puts+0x18>
	return putc_flush(&pb);
 801bbac:	f107 030c 	add.w	r3, r7, #12
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f7ff ffa7 	bl	801bb04 <putc_flush>
 801bbb6:	4603      	mov	r3, r0
}
 801bbb8:	4618      	mov	r0, r3
 801bbba:	3758      	adds	r7, #88	@ 0x58
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	bd80      	pop	{r7, pc}

0801bbc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801bbc0:	b480      	push	{r7}
 801bbc2:	b087      	sub	sp, #28
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	60f8      	str	r0, [r7, #12]
 801bbc8:	60b9      	str	r1, [r7, #8]
 801bbca:	4613      	mov	r3, r2
 801bbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801bbce:	2301      	movs	r3, #1
 801bbd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801bbd6:	4b1f      	ldr	r3, [pc, #124]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bbd8:	7a5b      	ldrb	r3, [r3, #9]
 801bbda:	b2db      	uxtb	r3, r3
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d131      	bne.n	801bc44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801bbe0:	4b1c      	ldr	r3, [pc, #112]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bbe2:	7a5b      	ldrb	r3, [r3, #9]
 801bbe4:	b2db      	uxtb	r3, r3
 801bbe6:	461a      	mov	r2, r3
 801bbe8:	4b1a      	ldr	r3, [pc, #104]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bbea:	2100      	movs	r1, #0
 801bbec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801bbee:	4b19      	ldr	r3, [pc, #100]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bbf0:	7a5b      	ldrb	r3, [r3, #9]
 801bbf2:	b2db      	uxtb	r3, r3
 801bbf4:	4a17      	ldr	r2, [pc, #92]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bbf6:	009b      	lsls	r3, r3, #2
 801bbf8:	4413      	add	r3, r2
 801bbfa:	68fa      	ldr	r2, [r7, #12]
 801bbfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801bbfe:	4b15      	ldr	r3, [pc, #84]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bc00:	7a5b      	ldrb	r3, [r3, #9]
 801bc02:	b2db      	uxtb	r3, r3
 801bc04:	461a      	mov	r2, r3
 801bc06:	4b13      	ldr	r3, [pc, #76]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bc08:	4413      	add	r3, r2
 801bc0a:	79fa      	ldrb	r2, [r7, #7]
 801bc0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801bc0e:	4b11      	ldr	r3, [pc, #68]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bc10:	7a5b      	ldrb	r3, [r3, #9]
 801bc12:	b2db      	uxtb	r3, r3
 801bc14:	1c5a      	adds	r2, r3, #1
 801bc16:	b2d1      	uxtb	r1, r2
 801bc18:	4a0e      	ldr	r2, [pc, #56]	@ (801bc54 <FATFS_LinkDriverEx+0x94>)
 801bc1a:	7251      	strb	r1, [r2, #9]
 801bc1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801bc1e:	7dbb      	ldrb	r3, [r7, #22]
 801bc20:	3330      	adds	r3, #48	@ 0x30
 801bc22:	b2da      	uxtb	r2, r3
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801bc28:	68bb      	ldr	r3, [r7, #8]
 801bc2a:	3301      	adds	r3, #1
 801bc2c:	223a      	movs	r2, #58	@ 0x3a
 801bc2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	3302      	adds	r3, #2
 801bc34:	222f      	movs	r2, #47	@ 0x2f
 801bc36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801bc38:	68bb      	ldr	r3, [r7, #8]
 801bc3a:	3303      	adds	r3, #3
 801bc3c:	2200      	movs	r2, #0
 801bc3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801bc40:	2300      	movs	r3, #0
 801bc42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801bc44:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc46:	4618      	mov	r0, r3
 801bc48:	371c      	adds	r7, #28
 801bc4a:	46bd      	mov	sp, r7
 801bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc50:	4770      	bx	lr
 801bc52:	bf00      	nop
 801bc54:	2001c8ac 	.word	0x2001c8ac

0801bc58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b082      	sub	sp, #8
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
 801bc60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801bc62:	2200      	movs	r2, #0
 801bc64:	6839      	ldr	r1, [r7, #0]
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f7ff ffaa 	bl	801bbc0 <FATFS_LinkDriverEx>
 801bc6c:	4603      	mov	r3, r0
}
 801bc6e:	4618      	mov	r0, r3
 801bc70:	3708      	adds	r7, #8
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}

0801bc76 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801bc76:	b580      	push	{r7, lr}
 801bc78:	b084      	sub	sp, #16
 801bc7a:	af00      	add	r7, sp, #0
 801bc7c:	4603      	mov	r3, r0
 801bc7e:	6039      	str	r1, [r7, #0]
 801bc80:	71fb      	strb	r3, [r7, #7]

    int ret;

    //osSemaphoreDef(SEM);
    //*sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
    *sobj =  osSemaphoreNew (2U, 2U, NULL);
 801bc82:	2200      	movs	r2, #0
 801bc84:	2102      	movs	r1, #2
 801bc86:	2002      	movs	r0, #2
 801bc88:	f000 f97c 	bl	801bf84 <osSemaphoreNew>
 801bc8c:	4602      	mov	r2, r0
 801bc8e:	683b      	ldr	r3, [r7, #0]
 801bc90:	601a      	str	r2, [r3, #0]

    ret = (*sobj != NULL);
 801bc92:	683b      	ldr	r3, [r7, #0]
 801bc94:	681b      	ldr	r3, [r3, #0]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	bf14      	ite	ne
 801bc9a:	2301      	movne	r3, #1
 801bc9c:	2300      	moveq	r3, #0
 801bc9e:	b2db      	uxtb	r3, r3
 801bca0:	60fb      	str	r3, [r7, #12]

    return ret;
 801bca2:	68fb      	ldr	r3, [r7, #12]
}
 801bca4:	4618      	mov	r0, r3
 801bca6:	3710      	adds	r7, #16
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	bd80      	pop	{r7, pc}

0801bcac <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b082      	sub	sp, #8
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 801bcb4:	6878      	ldr	r0, [r7, #4]
 801bcb6:	f000 fabf 	bl	801c238 <osSemaphoreDelete>
    return 1;
 801bcba:	2301      	movs	r3, #1
}
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3708      	adds	r7, #8
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd80      	pop	{r7, pc}

0801bcc4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b084      	sub	sp, #16
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801bccc:	2300      	movs	r3, #0
 801bcce:	60fb      	str	r3, [r7, #12]

  //if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
  if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801bcd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801bcd4:	6878      	ldr	r0, [r7, #4]
 801bcd6:	f000 f9f1 	bl	801c0bc <osSemaphoreAcquire>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d101      	bne.n	801bce4 <ff_req_grant+0x20>
  {
    ret = 1;
 801bce0:	2301      	movs	r3, #1
 801bce2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801bce4:	68fb      	ldr	r3, [r7, #12]
}
 801bce6:	4618      	mov	r0, r3
 801bce8:	3710      	adds	r7, #16
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}

0801bcee <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801bcee:	b580      	push	{r7, lr}
 801bcf0:	b082      	sub	sp, #8
 801bcf2:	af00      	add	r7, sp, #0
 801bcf4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 801bcf6:	6878      	ldr	r0, [r7, #4]
 801bcf8:	f000 fa46 	bl	801c188 <osSemaphoreRelease>
}
 801bcfc:	bf00      	nop
 801bcfe:	3708      	adds	r7, #8
 801bd00:	46bd      	mov	sp, r7
 801bd02:	bd80      	pop	{r7, pc}

0801bd04 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801bd04:	b480      	push	{r7}
 801bd06:	b085      	sub	sp, #20
 801bd08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801bd0a:	f3ef 8305 	mrs	r3, IPSR
 801bd0e:	60bb      	str	r3, [r7, #8]
  return(result);
 801bd10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d10f      	bne.n	801bd36 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bd16:	f3ef 8310 	mrs	r3, PRIMASK
 801bd1a:	607b      	str	r3, [r7, #4]
  return(result);
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d109      	bne.n	801bd36 <osKernelInitialize+0x32>
 801bd22:	4b11      	ldr	r3, [pc, #68]	@ (801bd68 <osKernelInitialize+0x64>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	2b02      	cmp	r3, #2
 801bd28:	d109      	bne.n	801bd3e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801bd2a:	f3ef 8311 	mrs	r3, BASEPRI
 801bd2e:	603b      	str	r3, [r7, #0]
  return(result);
 801bd30:	683b      	ldr	r3, [r7, #0]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d003      	beq.n	801bd3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801bd36:	f06f 0305 	mvn.w	r3, #5
 801bd3a:	60fb      	str	r3, [r7, #12]
 801bd3c:	e00c      	b.n	801bd58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801bd3e:	4b0a      	ldr	r3, [pc, #40]	@ (801bd68 <osKernelInitialize+0x64>)
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d105      	bne.n	801bd52 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 801bd46:	4b08      	ldr	r3, [pc, #32]	@ (801bd68 <osKernelInitialize+0x64>)
 801bd48:	2201      	movs	r2, #1
 801bd4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	60fb      	str	r3, [r7, #12]
 801bd50:	e002      	b.n	801bd58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801bd52:	f04f 33ff 	mov.w	r3, #4294967295
 801bd56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801bd58:	68fb      	ldr	r3, [r7, #12]
}
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	3714      	adds	r7, #20
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd64:	4770      	bx	lr
 801bd66:	bf00      	nop
 801bd68:	2001c8b8 	.word	0x2001c8b8

0801bd6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b084      	sub	sp, #16
 801bd70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801bd72:	f3ef 8305 	mrs	r3, IPSR
 801bd76:	60bb      	str	r3, [r7, #8]
  return(result);
 801bd78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d10f      	bne.n	801bd9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bd7e:	f3ef 8310 	mrs	r3, PRIMASK
 801bd82:	607b      	str	r3, [r7, #4]
  return(result);
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d109      	bne.n	801bd9e <osKernelStart+0x32>
 801bd8a:	4b11      	ldr	r3, [pc, #68]	@ (801bdd0 <osKernelStart+0x64>)
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	2b02      	cmp	r3, #2
 801bd90:	d109      	bne.n	801bda6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801bd92:	f3ef 8311 	mrs	r3, BASEPRI
 801bd96:	603b      	str	r3, [r7, #0]
  return(result);
 801bd98:	683b      	ldr	r3, [r7, #0]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d003      	beq.n	801bda6 <osKernelStart+0x3a>
    stat = osErrorISR;
 801bd9e:	f06f 0305 	mvn.w	r3, #5
 801bda2:	60fb      	str	r3, [r7, #12]
 801bda4:	e00e      	b.n	801bdc4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 801bda6:	4b0a      	ldr	r3, [pc, #40]	@ (801bdd0 <osKernelStart+0x64>)
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	2b01      	cmp	r3, #1
 801bdac:	d107      	bne.n	801bdbe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 801bdae:	4b08      	ldr	r3, [pc, #32]	@ (801bdd0 <osKernelStart+0x64>)
 801bdb0:	2202      	movs	r2, #2
 801bdb2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 801bdb4:	f001 fd68 	bl	801d888 <vTaskStartScheduler>
      stat = osOK;
 801bdb8:	2300      	movs	r3, #0
 801bdba:	60fb      	str	r3, [r7, #12]
 801bdbc:	e002      	b.n	801bdc4 <osKernelStart+0x58>
    } else {
      stat = osError;
 801bdbe:	f04f 33ff 	mov.w	r3, #4294967295
 801bdc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801bdc4:	68fb      	ldr	r3, [r7, #12]
}
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	3710      	adds	r7, #16
 801bdca:	46bd      	mov	sp, r7
 801bdcc:	bd80      	pop	{r7, pc}
 801bdce:	bf00      	nop
 801bdd0:	2001c8b8 	.word	0x2001c8b8

0801bdd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b092      	sub	sp, #72	@ 0x48
 801bdd8:	af04      	add	r7, sp, #16
 801bdda:	60f8      	str	r0, [r7, #12]
 801bddc:	60b9      	str	r1, [r7, #8]
 801bdde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801bde0:	2300      	movs	r3, #0
 801bde2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801bde4:	f3ef 8305 	mrs	r3, IPSR
 801bde8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801bdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	f040 8094 	bne.w	801bf1a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bdf2:	f3ef 8310 	mrs	r3, PRIMASK
 801bdf6:	623b      	str	r3, [r7, #32]
  return(result);
 801bdf8:	6a3b      	ldr	r3, [r7, #32]
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	f040 808d 	bne.w	801bf1a <osThreadNew+0x146>
 801be00:	4b48      	ldr	r3, [pc, #288]	@ (801bf24 <osThreadNew+0x150>)
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	2b02      	cmp	r3, #2
 801be06:	d106      	bne.n	801be16 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801be08:	f3ef 8311 	mrs	r3, BASEPRI
 801be0c:	61fb      	str	r3, [r7, #28]
  return(result);
 801be0e:	69fb      	ldr	r3, [r7, #28]
 801be10:	2b00      	cmp	r3, #0
 801be12:	f040 8082 	bne.w	801bf1a <osThreadNew+0x146>
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d07e      	beq.n	801bf1a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 801be1c:	2380      	movs	r3, #128	@ 0x80
 801be1e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 801be20:	2318      	movs	r3, #24
 801be22:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 801be24:	2300      	movs	r3, #0
 801be26:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 801be28:	f107 031b 	add.w	r3, r7, #27
 801be2c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 801be2e:	f04f 33ff 	mov.w	r3, #4294967295
 801be32:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d045      	beq.n	801bec6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d002      	beq.n	801be48 <osThreadNew+0x74>
        name = attr->name;
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	699b      	ldr	r3, [r3, #24]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d002      	beq.n	801be56 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	699b      	ldr	r3, [r3, #24]
 801be54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801be56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d008      	beq.n	801be6e <osThreadNew+0x9a>
 801be5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be5e:	2b38      	cmp	r3, #56	@ 0x38
 801be60:	d805      	bhi.n	801be6e <osThreadNew+0x9a>
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	685b      	ldr	r3, [r3, #4]
 801be66:	f003 0301 	and.w	r3, r3, #1
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d001      	beq.n	801be72 <osThreadNew+0x9e>
        return (NULL);
 801be6e:	2300      	movs	r3, #0
 801be70:	e054      	b.n	801bf1c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	695b      	ldr	r3, [r3, #20]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d003      	beq.n	801be82 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	695b      	ldr	r3, [r3, #20]
 801be7e:	089b      	lsrs	r3, r3, #2
 801be80:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	689b      	ldr	r3, [r3, #8]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d00e      	beq.n	801bea8 <osThreadNew+0xd4>
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	68db      	ldr	r3, [r3, #12]
 801be8e:	2b5b      	cmp	r3, #91	@ 0x5b
 801be90:	d90a      	bls.n	801bea8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801be96:	2b00      	cmp	r3, #0
 801be98:	d006      	beq.n	801bea8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	695b      	ldr	r3, [r3, #20]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d002      	beq.n	801bea8 <osThreadNew+0xd4>
        mem = 1;
 801bea2:	2301      	movs	r3, #1
 801bea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bea6:	e010      	b.n	801beca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	689b      	ldr	r3, [r3, #8]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d10c      	bne.n	801beca <osThreadNew+0xf6>
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	68db      	ldr	r3, [r3, #12]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d108      	bne.n	801beca <osThreadNew+0xf6>
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	691b      	ldr	r3, [r3, #16]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d104      	bne.n	801beca <osThreadNew+0xf6>
          mem = 0;
 801bec0:	2300      	movs	r3, #0
 801bec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bec4:	e001      	b.n	801beca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 801bec6:	2300      	movs	r3, #0
 801bec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 801beca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801becc:	2b01      	cmp	r3, #1
 801bece:	d110      	bne.n	801bef2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801bed4:	687a      	ldr	r2, [r7, #4]
 801bed6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801bed8:	9202      	str	r2, [sp, #8]
 801beda:	9301      	str	r3, [sp, #4]
 801bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bede:	9300      	str	r3, [sp, #0]
 801bee0:	68bb      	ldr	r3, [r7, #8]
 801bee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bee4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bee6:	68f8      	ldr	r0, [r7, #12]
 801bee8:	f001 fafc 	bl	801d4e4 <xTaskCreateStatic>
 801beec:	4603      	mov	r3, r0
 801beee:	617b      	str	r3, [r7, #20]
 801bef0:	e013      	b.n	801bf1a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 801bef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d110      	bne.n	801bf1a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801bef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801befa:	b29a      	uxth	r2, r3
 801befc:	f107 0314 	add.w	r3, r7, #20
 801bf00:	9301      	str	r3, [sp, #4]
 801bf02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf04:	9300      	str	r3, [sp, #0]
 801bf06:	68bb      	ldr	r3, [r7, #8]
 801bf08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bf0a:	68f8      	ldr	r0, [r7, #12]
 801bf0c:	f001 fb49 	bl	801d5a2 <xTaskCreate>
 801bf10:	4603      	mov	r3, r0
 801bf12:	2b01      	cmp	r3, #1
 801bf14:	d001      	beq.n	801bf1a <osThreadNew+0x146>
          hTask = NULL;
 801bf16:	2300      	movs	r3, #0
 801bf18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801bf1a:	697b      	ldr	r3, [r7, #20]
}
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	3738      	adds	r7, #56	@ 0x38
 801bf20:	46bd      	mov	sp, r7
 801bf22:	bd80      	pop	{r7, pc}
 801bf24:	2001c8b8 	.word	0x2001c8b8

0801bf28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b086      	sub	sp, #24
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801bf30:	f3ef 8305 	mrs	r3, IPSR
 801bf34:	613b      	str	r3, [r7, #16]
  return(result);
 801bf36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d10f      	bne.n	801bf5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bf3c:	f3ef 8310 	mrs	r3, PRIMASK
 801bf40:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf42:	68fb      	ldr	r3, [r7, #12]
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	d109      	bne.n	801bf5c <osDelay+0x34>
 801bf48:	4b0d      	ldr	r3, [pc, #52]	@ (801bf80 <osDelay+0x58>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	2b02      	cmp	r3, #2
 801bf4e:	d109      	bne.n	801bf64 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801bf50:	f3ef 8311 	mrs	r3, BASEPRI
 801bf54:	60bb      	str	r3, [r7, #8]
  return(result);
 801bf56:	68bb      	ldr	r3, [r7, #8]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d003      	beq.n	801bf64 <osDelay+0x3c>
    stat = osErrorISR;
 801bf5c:	f06f 0305 	mvn.w	r3, #5
 801bf60:	617b      	str	r3, [r7, #20]
 801bf62:	e007      	b.n	801bf74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801bf64:	2300      	movs	r3, #0
 801bf66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d002      	beq.n	801bf74 <osDelay+0x4c>
      vTaskDelay(ticks);
 801bf6e:	6878      	ldr	r0, [r7, #4]
 801bf70:	f001 fc54 	bl	801d81c <vTaskDelay>
    }
  }

  return (stat);
 801bf74:	697b      	ldr	r3, [r7, #20]
}
 801bf76:	4618      	mov	r0, r3
 801bf78:	3718      	adds	r7, #24
 801bf7a:	46bd      	mov	sp, r7
 801bf7c:	bd80      	pop	{r7, pc}
 801bf7e:	bf00      	nop
 801bf80:	2001c8b8 	.word	0x2001c8b8

0801bf84 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b08c      	sub	sp, #48	@ 0x30
 801bf88:	af02      	add	r7, sp, #8
 801bf8a:	60f8      	str	r0, [r7, #12]
 801bf8c:	60b9      	str	r1, [r7, #8]
 801bf8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801bf90:	2300      	movs	r3, #0
 801bf92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801bf94:	f3ef 8305 	mrs	r3, IPSR
 801bf98:	61bb      	str	r3, [r7, #24]
  return(result);
 801bf9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	f040 8086 	bne.w	801c0ae <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bfa2:	f3ef 8310 	mrs	r3, PRIMASK
 801bfa6:	617b      	str	r3, [r7, #20]
  return(result);
 801bfa8:	697b      	ldr	r3, [r7, #20]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d17f      	bne.n	801c0ae <osSemaphoreNew+0x12a>
 801bfae:	4b42      	ldr	r3, [pc, #264]	@ (801c0b8 <osSemaphoreNew+0x134>)
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	2b02      	cmp	r3, #2
 801bfb4:	d105      	bne.n	801bfc2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801bfb6:	f3ef 8311 	mrs	r3, BASEPRI
 801bfba:	613b      	str	r3, [r7, #16]
  return(result);
 801bfbc:	693b      	ldr	r3, [r7, #16]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d175      	bne.n	801c0ae <osSemaphoreNew+0x12a>
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d072      	beq.n	801c0ae <osSemaphoreNew+0x12a>
 801bfc8:	68ba      	ldr	r2, [r7, #8]
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	429a      	cmp	r2, r3
 801bfce:	d86e      	bhi.n	801c0ae <osSemaphoreNew+0x12a>
    mem = -1;
 801bfd0:	f04f 33ff 	mov.w	r3, #4294967295
 801bfd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d015      	beq.n	801c008 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	689b      	ldr	r3, [r3, #8]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d006      	beq.n	801bff2 <osSemaphoreNew+0x6e>
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	68db      	ldr	r3, [r3, #12]
 801bfe8:	2b4f      	cmp	r3, #79	@ 0x4f
 801bfea:	d902      	bls.n	801bff2 <osSemaphoreNew+0x6e>
        mem = 1;
 801bfec:	2301      	movs	r3, #1
 801bfee:	623b      	str	r3, [r7, #32]
 801bff0:	e00c      	b.n	801c00c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	689b      	ldr	r3, [r3, #8]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d108      	bne.n	801c00c <osSemaphoreNew+0x88>
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	68db      	ldr	r3, [r3, #12]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d104      	bne.n	801c00c <osSemaphoreNew+0x88>
          mem = 0;
 801c002:	2300      	movs	r3, #0
 801c004:	623b      	str	r3, [r7, #32]
 801c006:	e001      	b.n	801c00c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 801c008:	2300      	movs	r3, #0
 801c00a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801c00c:	6a3b      	ldr	r3, [r7, #32]
 801c00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c012:	d04c      	beq.n	801c0ae <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	2b01      	cmp	r3, #1
 801c018:	d128      	bne.n	801c06c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 801c01a:	6a3b      	ldr	r3, [r7, #32]
 801c01c:	2b01      	cmp	r3, #1
 801c01e:	d10a      	bne.n	801c036 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	689b      	ldr	r3, [r3, #8]
 801c024:	2203      	movs	r2, #3
 801c026:	9200      	str	r2, [sp, #0]
 801c028:	2200      	movs	r2, #0
 801c02a:	2100      	movs	r1, #0
 801c02c:	2001      	movs	r0, #1
 801c02e:	f000 fa97 	bl	801c560 <xQueueGenericCreateStatic>
 801c032:	6278      	str	r0, [r7, #36]	@ 0x24
 801c034:	e005      	b.n	801c042 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801c036:	2203      	movs	r2, #3
 801c038:	2100      	movs	r1, #0
 801c03a:	2001      	movs	r0, #1
 801c03c:	f000 fb0c 	bl	801c658 <xQueueGenericCreate>
 801c040:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801c042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c044:	2b00      	cmp	r3, #0
 801c046:	d022      	beq.n	801c08e <osSemaphoreNew+0x10a>
 801c048:	68bb      	ldr	r3, [r7, #8]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d01f      	beq.n	801c08e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801c04e:	2300      	movs	r3, #0
 801c050:	2200      	movs	r2, #0
 801c052:	2100      	movs	r1, #0
 801c054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c056:	f000 fbcf 	bl	801c7f8 <xQueueGenericSend>
 801c05a:	4603      	mov	r3, r0
 801c05c:	2b01      	cmp	r3, #1
 801c05e:	d016      	beq.n	801c08e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 801c060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c062:	f001 f86b 	bl	801d13c <vQueueDelete>
            hSemaphore = NULL;
 801c066:	2300      	movs	r3, #0
 801c068:	627b      	str	r3, [r7, #36]	@ 0x24
 801c06a:	e010      	b.n	801c08e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 801c06c:	6a3b      	ldr	r3, [r7, #32]
 801c06e:	2b01      	cmp	r3, #1
 801c070:	d108      	bne.n	801c084 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	689b      	ldr	r3, [r3, #8]
 801c076:	461a      	mov	r2, r3
 801c078:	68b9      	ldr	r1, [r7, #8]
 801c07a:	68f8      	ldr	r0, [r7, #12]
 801c07c:	f000 fb4e 	bl	801c71c <xQueueCreateCountingSemaphoreStatic>
 801c080:	6278      	str	r0, [r7, #36]	@ 0x24
 801c082:	e004      	b.n	801c08e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801c084:	68b9      	ldr	r1, [r7, #8]
 801c086:	68f8      	ldr	r0, [r7, #12]
 801c088:	f000 fb81 	bl	801c78e <xQueueCreateCountingSemaphore>
 801c08c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801c08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c090:	2b00      	cmp	r3, #0
 801c092:	d00c      	beq.n	801c0ae <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d003      	beq.n	801c0a2 <osSemaphoreNew+0x11e>
          name = attr->name;
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	61fb      	str	r3, [r7, #28]
 801c0a0:	e001      	b.n	801c0a6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801c0a6:	69f9      	ldr	r1, [r7, #28]
 801c0a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c0aa:	f001 f993 	bl	801d3d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	3728      	adds	r7, #40	@ 0x28
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	bd80      	pop	{r7, pc}
 801c0b8:	2001c8b8 	.word	0x2001c8b8

0801c0bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801c0bc:	b580      	push	{r7, lr}
 801c0be:	b088      	sub	sp, #32
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]
 801c0c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801c0ce:	69bb      	ldr	r3, [r7, #24]
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d103      	bne.n	801c0dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801c0d4:	f06f 0303 	mvn.w	r3, #3
 801c0d8:	61fb      	str	r3, [r7, #28]
 801c0da:	e04b      	b.n	801c174 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c0dc:	f3ef 8305 	mrs	r3, IPSR
 801c0e0:	617b      	str	r3, [r7, #20]
  return(result);
 801c0e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d10f      	bne.n	801c108 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801c0e8:	f3ef 8310 	mrs	r3, PRIMASK
 801c0ec:	613b      	str	r3, [r7, #16]
  return(result);
 801c0ee:	693b      	ldr	r3, [r7, #16]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d109      	bne.n	801c108 <osSemaphoreAcquire+0x4c>
 801c0f4:	4b22      	ldr	r3, [pc, #136]	@ (801c180 <osSemaphoreAcquire+0xc4>)
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	2b02      	cmp	r3, #2
 801c0fa:	d128      	bne.n	801c14e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801c0fc:	f3ef 8311 	mrs	r3, BASEPRI
 801c100:	60fb      	str	r3, [r7, #12]
  return(result);
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d022      	beq.n	801c14e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801c108:	683b      	ldr	r3, [r7, #0]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d003      	beq.n	801c116 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801c10e:	f06f 0303 	mvn.w	r3, #3
 801c112:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801c114:	e02d      	b.n	801c172 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801c116:	2300      	movs	r3, #0
 801c118:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801c11a:	f107 0308 	add.w	r3, r7, #8
 801c11e:	461a      	mov	r2, r3
 801c120:	2100      	movs	r1, #0
 801c122:	69b8      	ldr	r0, [r7, #24]
 801c124:	f000 ff88 	bl	801d038 <xQueueReceiveFromISR>
 801c128:	4603      	mov	r3, r0
 801c12a:	2b01      	cmp	r3, #1
 801c12c:	d003      	beq.n	801c136 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801c12e:	f06f 0302 	mvn.w	r3, #2
 801c132:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801c134:	e01d      	b.n	801c172 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801c136:	68bb      	ldr	r3, [r7, #8]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d01a      	beq.n	801c172 <osSemaphoreAcquire+0xb6>
 801c13c:	4b11      	ldr	r3, [pc, #68]	@ (801c184 <osSemaphoreAcquire+0xc8>)
 801c13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c142:	601a      	str	r2, [r3, #0]
 801c144:	f3bf 8f4f 	dsb	sy
 801c148:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801c14c:	e011      	b.n	801c172 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801c14e:	6839      	ldr	r1, [r7, #0]
 801c150:	69b8      	ldr	r0, [r7, #24]
 801c152:	f000 fe61 	bl	801ce18 <xQueueSemaphoreTake>
 801c156:	4603      	mov	r3, r0
 801c158:	2b01      	cmp	r3, #1
 801c15a:	d00b      	beq.n	801c174 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801c15c:	683b      	ldr	r3, [r7, #0]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d003      	beq.n	801c16a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801c162:	f06f 0301 	mvn.w	r3, #1
 801c166:	61fb      	str	r3, [r7, #28]
 801c168:	e004      	b.n	801c174 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801c16a:	f06f 0302 	mvn.w	r3, #2
 801c16e:	61fb      	str	r3, [r7, #28]
 801c170:	e000      	b.n	801c174 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801c172:	bf00      	nop
      }
    }
  }

  return (stat);
 801c174:	69fb      	ldr	r3, [r7, #28]
}
 801c176:	4618      	mov	r0, r3
 801c178:	3720      	adds	r7, #32
 801c17a:	46bd      	mov	sp, r7
 801c17c:	bd80      	pop	{r7, pc}
 801c17e:	bf00      	nop
 801c180:	2001c8b8 	.word	0x2001c8b8
 801c184:	e000ed04 	.word	0xe000ed04

0801c188 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801c188:	b580      	push	{r7, lr}
 801c18a:	b088      	sub	sp, #32
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801c194:	2300      	movs	r3, #0
 801c196:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801c198:	69bb      	ldr	r3, [r7, #24]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d103      	bne.n	801c1a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801c19e:	f06f 0303 	mvn.w	r3, #3
 801c1a2:	61fb      	str	r3, [r7, #28]
 801c1a4:	e03e      	b.n	801c224 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c1a6:	f3ef 8305 	mrs	r3, IPSR
 801c1aa:	617b      	str	r3, [r7, #20]
  return(result);
 801c1ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d10f      	bne.n	801c1d2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801c1b2:	f3ef 8310 	mrs	r3, PRIMASK
 801c1b6:	613b      	str	r3, [r7, #16]
  return(result);
 801c1b8:	693b      	ldr	r3, [r7, #16]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d109      	bne.n	801c1d2 <osSemaphoreRelease+0x4a>
 801c1be:	4b1c      	ldr	r3, [pc, #112]	@ (801c230 <osSemaphoreRelease+0xa8>)
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	2b02      	cmp	r3, #2
 801c1c4:	d120      	bne.n	801c208 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801c1c6:	f3ef 8311 	mrs	r3, BASEPRI
 801c1ca:	60fb      	str	r3, [r7, #12]
  return(result);
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	d01a      	beq.n	801c208 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801c1d6:	f107 0308 	add.w	r3, r7, #8
 801c1da:	4619      	mov	r1, r3
 801c1dc:	69b8      	ldr	r0, [r7, #24]
 801c1de:	f000 fca8 	bl	801cb32 <xQueueGiveFromISR>
 801c1e2:	4603      	mov	r3, r0
 801c1e4:	2b01      	cmp	r3, #1
 801c1e6:	d003      	beq.n	801c1f0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801c1e8:	f06f 0302 	mvn.w	r3, #2
 801c1ec:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801c1ee:	e018      	b.n	801c222 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801c1f0:	68bb      	ldr	r3, [r7, #8]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d015      	beq.n	801c222 <osSemaphoreRelease+0x9a>
 801c1f6:	4b0f      	ldr	r3, [pc, #60]	@ (801c234 <osSemaphoreRelease+0xac>)
 801c1f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c1fc:	601a      	str	r2, [r3, #0]
 801c1fe:	f3bf 8f4f 	dsb	sy
 801c202:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801c206:	e00c      	b.n	801c222 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801c208:	2300      	movs	r3, #0
 801c20a:	2200      	movs	r2, #0
 801c20c:	2100      	movs	r1, #0
 801c20e:	69b8      	ldr	r0, [r7, #24]
 801c210:	f000 faf2 	bl	801c7f8 <xQueueGenericSend>
 801c214:	4603      	mov	r3, r0
 801c216:	2b01      	cmp	r3, #1
 801c218:	d004      	beq.n	801c224 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801c21a:	f06f 0302 	mvn.w	r3, #2
 801c21e:	61fb      	str	r3, [r7, #28]
 801c220:	e000      	b.n	801c224 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801c222:	bf00      	nop
    }
  }

  return (stat);
 801c224:	69fb      	ldr	r3, [r7, #28]
}
 801c226:	4618      	mov	r0, r3
 801c228:	3720      	adds	r7, #32
 801c22a:	46bd      	mov	sp, r7
 801c22c:	bd80      	pop	{r7, pc}
 801c22e:	bf00      	nop
 801c230:	2001c8b8 	.word	0x2001c8b8
 801c234:	e000ed04 	.word	0xe000ed04

0801c238 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801c238:	b580      	push	{r7, lr}
 801c23a:	b088      	sub	sp, #32
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c244:	f3ef 8305 	mrs	r3, IPSR
 801c248:	617b      	str	r3, [r7, #20]
  return(result);
 801c24a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d10f      	bne.n	801c270 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801c250:	f3ef 8310 	mrs	r3, PRIMASK
 801c254:	613b      	str	r3, [r7, #16]
  return(result);
 801c256:	693b      	ldr	r3, [r7, #16]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d109      	bne.n	801c270 <osSemaphoreDelete+0x38>
 801c25c:	4b10      	ldr	r3, [pc, #64]	@ (801c2a0 <osSemaphoreDelete+0x68>)
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	2b02      	cmp	r3, #2
 801c262:	d109      	bne.n	801c278 <osSemaphoreDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801c264:	f3ef 8311 	mrs	r3, BASEPRI
 801c268:	60fb      	str	r3, [r7, #12]
  return(result);
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d003      	beq.n	801c278 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 801c270:	f06f 0305 	mvn.w	r3, #5
 801c274:	61fb      	str	r3, [r7, #28]
 801c276:	e00e      	b.n	801c296 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801c278:	69bb      	ldr	r3, [r7, #24]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d103      	bne.n	801c286 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 801c27e:	f06f 0303 	mvn.w	r3, #3
 801c282:	61fb      	str	r3, [r7, #28]
 801c284:	e007      	b.n	801c296 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801c286:	69b8      	ldr	r0, [r7, #24]
 801c288:	f001 f8ce 	bl	801d428 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801c28c:	2300      	movs	r3, #0
 801c28e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 801c290:	69b8      	ldr	r0, [r7, #24]
 801c292:	f000 ff53 	bl	801d13c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801c296:	69fb      	ldr	r3, [r7, #28]
}
 801c298:	4618      	mov	r0, r3
 801c29a:	3720      	adds	r7, #32
 801c29c:	46bd      	mov	sp, r7
 801c29e:	bd80      	pop	{r7, pc}
 801c2a0:	2001c8b8 	.word	0x2001c8b8

0801c2a4 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 801c2a4:	b480      	push	{r7}
 801c2a6:	b083      	sub	sp, #12
 801c2a8:	af00      	add	r7, sp, #0
 801c2aa:	6078      	str	r0, [r7, #4]
 801c2ac:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 801c2ae:	bf00      	nop
 801c2b0:	370c      	adds	r7, #12
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b8:	4770      	bx	lr
	...

0801c2bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801c2bc:	b480      	push	{r7}
 801c2be:	b085      	sub	sp, #20
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	60f8      	str	r0, [r7, #12]
 801c2c4:	60b9      	str	r1, [r7, #8]
 801c2c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	4a07      	ldr	r2, [pc, #28]	@ (801c2e8 <vApplicationGetIdleTaskMemory+0x2c>)
 801c2cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	4a06      	ldr	r2, [pc, #24]	@ (801c2ec <vApplicationGetIdleTaskMemory+0x30>)
 801c2d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	2280      	movs	r2, #128	@ 0x80
 801c2d8:	601a      	str	r2, [r3, #0]
}
 801c2da:	bf00      	nop
 801c2dc:	3714      	adds	r7, #20
 801c2de:	46bd      	mov	sp, r7
 801c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e4:	4770      	bx	lr
 801c2e6:	bf00      	nop
 801c2e8:	2001c8bc 	.word	0x2001c8bc
 801c2ec:	2001c918 	.word	0x2001c918

0801c2f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801c2f0:	b480      	push	{r7}
 801c2f2:	b085      	sub	sp, #20
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	60f8      	str	r0, [r7, #12]
 801c2f8:	60b9      	str	r1, [r7, #8]
 801c2fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	4a07      	ldr	r2, [pc, #28]	@ (801c31c <vApplicationGetTimerTaskMemory+0x2c>)
 801c300:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801c302:	68bb      	ldr	r3, [r7, #8]
 801c304:	4a06      	ldr	r2, [pc, #24]	@ (801c320 <vApplicationGetTimerTaskMemory+0x30>)
 801c306:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c30e:	601a      	str	r2, [r3, #0]
}
 801c310:	bf00      	nop
 801c312:	3714      	adds	r7, #20
 801c314:	46bd      	mov	sp, r7
 801c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c31a:	4770      	bx	lr
 801c31c:	2001cb18 	.word	0x2001cb18
 801c320:	2001cb74 	.word	0x2001cb74

0801c324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801c324:	b480      	push	{r7}
 801c326:	b083      	sub	sp, #12
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	f103 0208 	add.w	r2, r3, #8
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	f04f 32ff 	mov.w	r2, #4294967295
 801c33c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	f103 0208 	add.w	r2, r3, #8
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	f103 0208 	add.w	r2, r3, #8
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	2200      	movs	r2, #0
 801c356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801c358:	bf00      	nop
 801c35a:	370c      	adds	r7, #12
 801c35c:	46bd      	mov	sp, r7
 801c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c362:	4770      	bx	lr

0801c364 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801c364:	b480      	push	{r7}
 801c366:	b083      	sub	sp, #12
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	2200      	movs	r2, #0
 801c370:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801c372:	bf00      	nop
 801c374:	370c      	adds	r7, #12
 801c376:	46bd      	mov	sp, r7
 801c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37c:	4770      	bx	lr

0801c37e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801c37e:	b480      	push	{r7}
 801c380:	b085      	sub	sp, #20
 801c382:	af00      	add	r7, sp, #0
 801c384:	6078      	str	r0, [r7, #4]
 801c386:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	685b      	ldr	r3, [r3, #4]
 801c38c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	68fa      	ldr	r2, [r7, #12]
 801c392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	689a      	ldr	r2, [r3, #8]
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	689b      	ldr	r3, [r3, #8]
 801c3a0:	683a      	ldr	r2, [r7, #0]
 801c3a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	683a      	ldr	r2, [r7, #0]
 801c3a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801c3aa:	683b      	ldr	r3, [r7, #0]
 801c3ac:	687a      	ldr	r2, [r7, #4]
 801c3ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	1c5a      	adds	r2, r3, #1
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	601a      	str	r2, [r3, #0]
}
 801c3ba:	bf00      	nop
 801c3bc:	3714      	adds	r7, #20
 801c3be:	46bd      	mov	sp, r7
 801c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3c4:	4770      	bx	lr

0801c3c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801c3c6:	b480      	push	{r7}
 801c3c8:	b085      	sub	sp, #20
 801c3ca:	af00      	add	r7, sp, #0
 801c3cc:	6078      	str	r0, [r7, #4]
 801c3ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801c3d0:	683b      	ldr	r3, [r7, #0]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801c3d6:	68bb      	ldr	r3, [r7, #8]
 801c3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3dc:	d103      	bne.n	801c3e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	691b      	ldr	r3, [r3, #16]
 801c3e2:	60fb      	str	r3, [r7, #12]
 801c3e4:	e00c      	b.n	801c400 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	3308      	adds	r3, #8
 801c3ea:	60fb      	str	r3, [r7, #12]
 801c3ec:	e002      	b.n	801c3f4 <vListInsert+0x2e>
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	685b      	ldr	r3, [r3, #4]
 801c3f2:	60fb      	str	r3, [r7, #12]
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	685b      	ldr	r3, [r3, #4]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	68ba      	ldr	r2, [r7, #8]
 801c3fc:	429a      	cmp	r2, r3
 801c3fe:	d2f6      	bcs.n	801c3ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	685a      	ldr	r2, [r3, #4]
 801c404:	683b      	ldr	r3, [r7, #0]
 801c406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801c408:	683b      	ldr	r3, [r7, #0]
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	683a      	ldr	r2, [r7, #0]
 801c40e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	68fa      	ldr	r2, [r7, #12]
 801c414:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	683a      	ldr	r2, [r7, #0]
 801c41a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801c41c:	683b      	ldr	r3, [r7, #0]
 801c41e:	687a      	ldr	r2, [r7, #4]
 801c420:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	1c5a      	adds	r2, r3, #1
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	601a      	str	r2, [r3, #0]
}
 801c42c:	bf00      	nop
 801c42e:	3714      	adds	r7, #20
 801c430:	46bd      	mov	sp, r7
 801c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c436:	4770      	bx	lr

0801c438 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801c438:	b480      	push	{r7}
 801c43a:	b085      	sub	sp, #20
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	691b      	ldr	r3, [r3, #16]
 801c444:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	685b      	ldr	r3, [r3, #4]
 801c44a:	687a      	ldr	r2, [r7, #4]
 801c44c:	6892      	ldr	r2, [r2, #8]
 801c44e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	689b      	ldr	r3, [r3, #8]
 801c454:	687a      	ldr	r2, [r7, #4]
 801c456:	6852      	ldr	r2, [r2, #4]
 801c458:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	685b      	ldr	r3, [r3, #4]
 801c45e:	687a      	ldr	r2, [r7, #4]
 801c460:	429a      	cmp	r2, r3
 801c462:	d103      	bne.n	801c46c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	689a      	ldr	r2, [r3, #8]
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	2200      	movs	r2, #0
 801c470:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	1e5a      	subs	r2, r3, #1
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	681b      	ldr	r3, [r3, #0]
}
 801c480:	4618      	mov	r0, r3
 801c482:	3714      	adds	r7, #20
 801c484:	46bd      	mov	sp, r7
 801c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c48a:	4770      	bx	lr

0801c48c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b084      	sub	sp, #16
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
 801c494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d10b      	bne.n	801c4b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801c4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c4a4:	f383 8811 	msr	BASEPRI, r3
 801c4a8:	f3bf 8f6f 	isb	sy
 801c4ac:	f3bf 8f4f 	dsb	sy
 801c4b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801c4b2:	bf00      	nop
 801c4b4:	bf00      	nop
 801c4b6:	e7fd      	b.n	801c4b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801c4b8:	f002 fc8e 	bl	801edd8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	681a      	ldr	r2, [r3, #0]
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c4c4:	68f9      	ldr	r1, [r7, #12]
 801c4c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801c4c8:	fb01 f303 	mul.w	r3, r1, r3
 801c4cc:	441a      	add	r2, r3
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2200      	movs	r2, #0
 801c4d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	681a      	ldr	r2, [r3, #0]
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	681a      	ldr	r2, [r3, #0]
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c4e8:	3b01      	subs	r3, #1
 801c4ea:	68f9      	ldr	r1, [r7, #12]
 801c4ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801c4ee:	fb01 f303 	mul.w	r3, r1, r3
 801c4f2:	441a      	add	r2, r3
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	22ff      	movs	r2, #255	@ 0xff
 801c4fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	22ff      	movs	r2, #255	@ 0xff
 801c504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801c508:	683b      	ldr	r3, [r7, #0]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d114      	bne.n	801c538 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	691b      	ldr	r3, [r3, #16]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d01a      	beq.n	801c54c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	3310      	adds	r3, #16
 801c51a:	4618      	mov	r0, r3
 801c51c:	f001 fc58 	bl	801ddd0 <xTaskRemoveFromEventList>
 801c520:	4603      	mov	r3, r0
 801c522:	2b00      	cmp	r3, #0
 801c524:	d012      	beq.n	801c54c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801c526:	4b0d      	ldr	r3, [pc, #52]	@ (801c55c <xQueueGenericReset+0xd0>)
 801c528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c52c:	601a      	str	r2, [r3, #0]
 801c52e:	f3bf 8f4f 	dsb	sy
 801c532:	f3bf 8f6f 	isb	sy
 801c536:	e009      	b.n	801c54c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	3310      	adds	r3, #16
 801c53c:	4618      	mov	r0, r3
 801c53e:	f7ff fef1 	bl	801c324 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	3324      	adds	r3, #36	@ 0x24
 801c546:	4618      	mov	r0, r3
 801c548:	f7ff feec 	bl	801c324 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801c54c:	f002 fc76 	bl	801ee3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801c550:	2301      	movs	r3, #1
}
 801c552:	4618      	mov	r0, r3
 801c554:	3710      	adds	r7, #16
 801c556:	46bd      	mov	sp, r7
 801c558:	bd80      	pop	{r7, pc}
 801c55a:	bf00      	nop
 801c55c:	e000ed04 	.word	0xe000ed04

0801c560 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801c560:	b580      	push	{r7, lr}
 801c562:	b08e      	sub	sp, #56	@ 0x38
 801c564:	af02      	add	r7, sp, #8
 801c566:	60f8      	str	r0, [r7, #12]
 801c568:	60b9      	str	r1, [r7, #8]
 801c56a:	607a      	str	r2, [r7, #4]
 801c56c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	2b00      	cmp	r3, #0
 801c572:	d10b      	bne.n	801c58c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801c574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c578:	f383 8811 	msr	BASEPRI, r3
 801c57c:	f3bf 8f6f 	isb	sy
 801c580:	f3bf 8f4f 	dsb	sy
 801c584:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801c586:	bf00      	nop
 801c588:	bf00      	nop
 801c58a:	e7fd      	b.n	801c588 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d10b      	bne.n	801c5aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801c592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c596:	f383 8811 	msr	BASEPRI, r3
 801c59a:	f3bf 8f6f 	isb	sy
 801c59e:	f3bf 8f4f 	dsb	sy
 801c5a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801c5a4:	bf00      	nop
 801c5a6:	bf00      	nop
 801c5a8:	e7fd      	b.n	801c5a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d002      	beq.n	801c5b6 <xQueueGenericCreateStatic+0x56>
 801c5b0:	68bb      	ldr	r3, [r7, #8]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d001      	beq.n	801c5ba <xQueueGenericCreateStatic+0x5a>
 801c5b6:	2301      	movs	r3, #1
 801c5b8:	e000      	b.n	801c5bc <xQueueGenericCreateStatic+0x5c>
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d10b      	bne.n	801c5d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801c5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c5c4:	f383 8811 	msr	BASEPRI, r3
 801c5c8:	f3bf 8f6f 	isb	sy
 801c5cc:	f3bf 8f4f 	dsb	sy
 801c5d0:	623b      	str	r3, [r7, #32]
}
 801c5d2:	bf00      	nop
 801c5d4:	bf00      	nop
 801c5d6:	e7fd      	b.n	801c5d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d102      	bne.n	801c5e4 <xQueueGenericCreateStatic+0x84>
 801c5de:	68bb      	ldr	r3, [r7, #8]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d101      	bne.n	801c5e8 <xQueueGenericCreateStatic+0x88>
 801c5e4:	2301      	movs	r3, #1
 801c5e6:	e000      	b.n	801c5ea <xQueueGenericCreateStatic+0x8a>
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d10b      	bne.n	801c606 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c5f2:	f383 8811 	msr	BASEPRI, r3
 801c5f6:	f3bf 8f6f 	isb	sy
 801c5fa:	f3bf 8f4f 	dsb	sy
 801c5fe:	61fb      	str	r3, [r7, #28]
}
 801c600:	bf00      	nop
 801c602:	bf00      	nop
 801c604:	e7fd      	b.n	801c602 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801c606:	2350      	movs	r3, #80	@ 0x50
 801c608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801c60a:	697b      	ldr	r3, [r7, #20]
 801c60c:	2b50      	cmp	r3, #80	@ 0x50
 801c60e:	d00b      	beq.n	801c628 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c614:	f383 8811 	msr	BASEPRI, r3
 801c618:	f3bf 8f6f 	isb	sy
 801c61c:	f3bf 8f4f 	dsb	sy
 801c620:	61bb      	str	r3, [r7, #24]
}
 801c622:	bf00      	nop
 801c624:	bf00      	nop
 801c626:	e7fd      	b.n	801c624 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801c628:	683b      	ldr	r3, [r7, #0]
 801c62a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801c62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d00d      	beq.n	801c64e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801c632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c634:	2201      	movs	r2, #1
 801c636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801c63a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801c63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c640:	9300      	str	r3, [sp, #0]
 801c642:	4613      	mov	r3, r2
 801c644:	687a      	ldr	r2, [r7, #4]
 801c646:	68b9      	ldr	r1, [r7, #8]
 801c648:	68f8      	ldr	r0, [r7, #12]
 801c64a:	f000 f844 	bl	801c6d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801c64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801c650:	4618      	mov	r0, r3
 801c652:	3730      	adds	r7, #48	@ 0x30
 801c654:	46bd      	mov	sp, r7
 801c656:	bd80      	pop	{r7, pc}

0801c658 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801c658:	b580      	push	{r7, lr}
 801c65a:	b08a      	sub	sp, #40	@ 0x28
 801c65c:	af02      	add	r7, sp, #8
 801c65e:	60f8      	str	r0, [r7, #12]
 801c660:	60b9      	str	r1, [r7, #8]
 801c662:	4613      	mov	r3, r2
 801c664:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d10b      	bne.n	801c684 <xQueueGenericCreate+0x2c>
	__asm volatile
 801c66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c670:	f383 8811 	msr	BASEPRI, r3
 801c674:	f3bf 8f6f 	isb	sy
 801c678:	f3bf 8f4f 	dsb	sy
 801c67c:	613b      	str	r3, [r7, #16]
}
 801c67e:	bf00      	nop
 801c680:	bf00      	nop
 801c682:	e7fd      	b.n	801c680 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d102      	bne.n	801c690 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801c68a:	2300      	movs	r3, #0
 801c68c:	61fb      	str	r3, [r7, #28]
 801c68e:	e004      	b.n	801c69a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	68ba      	ldr	r2, [r7, #8]
 801c694:	fb02 f303 	mul.w	r3, r2, r3
 801c698:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801c69a:	69fb      	ldr	r3, [r7, #28]
 801c69c:	3350      	adds	r3, #80	@ 0x50
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f002 fd4c 	bl	801f13c <pvPortMalloc>
 801c6a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801c6a6:	69bb      	ldr	r3, [r7, #24]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d00f      	beq.n	801c6cc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801c6ac:	69bb      	ldr	r3, [r7, #24]
 801c6ae:	3350      	adds	r3, #80	@ 0x50
 801c6b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801c6b2:	69bb      	ldr	r3, [r7, #24]
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801c6ba:	79fa      	ldrb	r2, [r7, #7]
 801c6bc:	69bb      	ldr	r3, [r7, #24]
 801c6be:	9300      	str	r3, [sp, #0]
 801c6c0:	4613      	mov	r3, r2
 801c6c2:	697a      	ldr	r2, [r7, #20]
 801c6c4:	68b9      	ldr	r1, [r7, #8]
 801c6c6:	68f8      	ldr	r0, [r7, #12]
 801c6c8:	f000 f805 	bl	801c6d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801c6cc:	69bb      	ldr	r3, [r7, #24]
	}
 801c6ce:	4618      	mov	r0, r3
 801c6d0:	3720      	adds	r7, #32
 801c6d2:	46bd      	mov	sp, r7
 801c6d4:	bd80      	pop	{r7, pc}

0801c6d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801c6d6:	b580      	push	{r7, lr}
 801c6d8:	b084      	sub	sp, #16
 801c6da:	af00      	add	r7, sp, #0
 801c6dc:	60f8      	str	r0, [r7, #12]
 801c6de:	60b9      	str	r1, [r7, #8]
 801c6e0:	607a      	str	r2, [r7, #4]
 801c6e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801c6e4:	68bb      	ldr	r3, [r7, #8]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d103      	bne.n	801c6f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801c6ea:	69bb      	ldr	r3, [r7, #24]
 801c6ec:	69ba      	ldr	r2, [r7, #24]
 801c6ee:	601a      	str	r2, [r3, #0]
 801c6f0:	e002      	b.n	801c6f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801c6f2:	69bb      	ldr	r3, [r7, #24]
 801c6f4:	687a      	ldr	r2, [r7, #4]
 801c6f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801c6f8:	69bb      	ldr	r3, [r7, #24]
 801c6fa:	68fa      	ldr	r2, [r7, #12]
 801c6fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801c6fe:	69bb      	ldr	r3, [r7, #24]
 801c700:	68ba      	ldr	r2, [r7, #8]
 801c702:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801c704:	2101      	movs	r1, #1
 801c706:	69b8      	ldr	r0, [r7, #24]
 801c708:	f7ff fec0 	bl	801c48c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801c70c:	69bb      	ldr	r3, [r7, #24]
 801c70e:	78fa      	ldrb	r2, [r7, #3]
 801c710:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801c714:	bf00      	nop
 801c716:	3710      	adds	r7, #16
 801c718:	46bd      	mov	sp, r7
 801c71a:	bd80      	pop	{r7, pc}

0801c71c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801c71c:	b580      	push	{r7, lr}
 801c71e:	b08a      	sub	sp, #40	@ 0x28
 801c720:	af02      	add	r7, sp, #8
 801c722:	60f8      	str	r0, [r7, #12]
 801c724:	60b9      	str	r1, [r7, #8]
 801c726:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d10b      	bne.n	801c746 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 801c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c732:	f383 8811 	msr	BASEPRI, r3
 801c736:	f3bf 8f6f 	isb	sy
 801c73a:	f3bf 8f4f 	dsb	sy
 801c73e:	61bb      	str	r3, [r7, #24]
}
 801c740:	bf00      	nop
 801c742:	bf00      	nop
 801c744:	e7fd      	b.n	801c742 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801c746:	68ba      	ldr	r2, [r7, #8]
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	429a      	cmp	r2, r3
 801c74c:	d90b      	bls.n	801c766 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 801c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c752:	f383 8811 	msr	BASEPRI, r3
 801c756:	f3bf 8f6f 	isb	sy
 801c75a:	f3bf 8f4f 	dsb	sy
 801c75e:	617b      	str	r3, [r7, #20]
}
 801c760:	bf00      	nop
 801c762:	bf00      	nop
 801c764:	e7fd      	b.n	801c762 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801c766:	2302      	movs	r3, #2
 801c768:	9300      	str	r3, [sp, #0]
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	2200      	movs	r2, #0
 801c76e:	2100      	movs	r1, #0
 801c770:	68f8      	ldr	r0, [r7, #12]
 801c772:	f7ff fef5 	bl	801c560 <xQueueGenericCreateStatic>
 801c776:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801c778:	69fb      	ldr	r3, [r7, #28]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d002      	beq.n	801c784 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801c77e:	69fb      	ldr	r3, [r7, #28]
 801c780:	68ba      	ldr	r2, [r7, #8]
 801c782:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801c784:	69fb      	ldr	r3, [r7, #28]
	}
 801c786:	4618      	mov	r0, r3
 801c788:	3720      	adds	r7, #32
 801c78a:	46bd      	mov	sp, r7
 801c78c:	bd80      	pop	{r7, pc}

0801c78e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801c78e:	b580      	push	{r7, lr}
 801c790:	b086      	sub	sp, #24
 801c792:	af00      	add	r7, sp, #0
 801c794:	6078      	str	r0, [r7, #4]
 801c796:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d10b      	bne.n	801c7b6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 801c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7a2:	f383 8811 	msr	BASEPRI, r3
 801c7a6:	f3bf 8f6f 	isb	sy
 801c7aa:	f3bf 8f4f 	dsb	sy
 801c7ae:	613b      	str	r3, [r7, #16]
}
 801c7b0:	bf00      	nop
 801c7b2:	bf00      	nop
 801c7b4:	e7fd      	b.n	801c7b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801c7b6:	683a      	ldr	r2, [r7, #0]
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	429a      	cmp	r2, r3
 801c7bc:	d90b      	bls.n	801c7d6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 801c7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7c2:	f383 8811 	msr	BASEPRI, r3
 801c7c6:	f3bf 8f6f 	isb	sy
 801c7ca:	f3bf 8f4f 	dsb	sy
 801c7ce:	60fb      	str	r3, [r7, #12]
}
 801c7d0:	bf00      	nop
 801c7d2:	bf00      	nop
 801c7d4:	e7fd      	b.n	801c7d2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801c7d6:	2202      	movs	r2, #2
 801c7d8:	2100      	movs	r1, #0
 801c7da:	6878      	ldr	r0, [r7, #4]
 801c7dc:	f7ff ff3c 	bl	801c658 <xQueueGenericCreate>
 801c7e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801c7e2:	697b      	ldr	r3, [r7, #20]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d002      	beq.n	801c7ee <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801c7e8:	697b      	ldr	r3, [r7, #20]
 801c7ea:	683a      	ldr	r2, [r7, #0]
 801c7ec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801c7ee:	697b      	ldr	r3, [r7, #20]
	}
 801c7f0:	4618      	mov	r0, r3
 801c7f2:	3718      	adds	r7, #24
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	bd80      	pop	{r7, pc}

0801c7f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b08e      	sub	sp, #56	@ 0x38
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	60f8      	str	r0, [r7, #12]
 801c800:	60b9      	str	r1, [r7, #8]
 801c802:	607a      	str	r2, [r7, #4]
 801c804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801c806:	2300      	movs	r3, #0
 801c808:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c810:	2b00      	cmp	r3, #0
 801c812:	d10b      	bne.n	801c82c <xQueueGenericSend+0x34>
	__asm volatile
 801c814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c818:	f383 8811 	msr	BASEPRI, r3
 801c81c:	f3bf 8f6f 	isb	sy
 801c820:	f3bf 8f4f 	dsb	sy
 801c824:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801c826:	bf00      	nop
 801c828:	bf00      	nop
 801c82a:	e7fd      	b.n	801c828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d103      	bne.n	801c83a <xQueueGenericSend+0x42>
 801c832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c836:	2b00      	cmp	r3, #0
 801c838:	d101      	bne.n	801c83e <xQueueGenericSend+0x46>
 801c83a:	2301      	movs	r3, #1
 801c83c:	e000      	b.n	801c840 <xQueueGenericSend+0x48>
 801c83e:	2300      	movs	r3, #0
 801c840:	2b00      	cmp	r3, #0
 801c842:	d10b      	bne.n	801c85c <xQueueGenericSend+0x64>
	__asm volatile
 801c844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c848:	f383 8811 	msr	BASEPRI, r3
 801c84c:	f3bf 8f6f 	isb	sy
 801c850:	f3bf 8f4f 	dsb	sy
 801c854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801c856:	bf00      	nop
 801c858:	bf00      	nop
 801c85a:	e7fd      	b.n	801c858 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801c85c:	683b      	ldr	r3, [r7, #0]
 801c85e:	2b02      	cmp	r3, #2
 801c860:	d103      	bne.n	801c86a <xQueueGenericSend+0x72>
 801c862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c866:	2b01      	cmp	r3, #1
 801c868:	d101      	bne.n	801c86e <xQueueGenericSend+0x76>
 801c86a:	2301      	movs	r3, #1
 801c86c:	e000      	b.n	801c870 <xQueueGenericSend+0x78>
 801c86e:	2300      	movs	r3, #0
 801c870:	2b00      	cmp	r3, #0
 801c872:	d10b      	bne.n	801c88c <xQueueGenericSend+0x94>
	__asm volatile
 801c874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c878:	f383 8811 	msr	BASEPRI, r3
 801c87c:	f3bf 8f6f 	isb	sy
 801c880:	f3bf 8f4f 	dsb	sy
 801c884:	623b      	str	r3, [r7, #32]
}
 801c886:	bf00      	nop
 801c888:	bf00      	nop
 801c88a:	e7fd      	b.n	801c888 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801c88c:	f001 fc66 	bl	801e15c <xTaskGetSchedulerState>
 801c890:	4603      	mov	r3, r0
 801c892:	2b00      	cmp	r3, #0
 801c894:	d102      	bne.n	801c89c <xQueueGenericSend+0xa4>
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d101      	bne.n	801c8a0 <xQueueGenericSend+0xa8>
 801c89c:	2301      	movs	r3, #1
 801c89e:	e000      	b.n	801c8a2 <xQueueGenericSend+0xaa>
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d10b      	bne.n	801c8be <xQueueGenericSend+0xc6>
	__asm volatile
 801c8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c8aa:	f383 8811 	msr	BASEPRI, r3
 801c8ae:	f3bf 8f6f 	isb	sy
 801c8b2:	f3bf 8f4f 	dsb	sy
 801c8b6:	61fb      	str	r3, [r7, #28]
}
 801c8b8:	bf00      	nop
 801c8ba:	bf00      	nop
 801c8bc:	e7fd      	b.n	801c8ba <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801c8be:	f002 fa8b 	bl	801edd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c8ca:	429a      	cmp	r2, r3
 801c8cc:	d302      	bcc.n	801c8d4 <xQueueGenericSend+0xdc>
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	2b02      	cmp	r3, #2
 801c8d2:	d129      	bne.n	801c928 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801c8d4:	683a      	ldr	r2, [r7, #0]
 801c8d6:	68b9      	ldr	r1, [r7, #8]
 801c8d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c8da:	f000 fc6b 	bl	801d1b4 <prvCopyDataToQueue>
 801c8de:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d010      	beq.n	801c90a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8ea:	3324      	adds	r3, #36	@ 0x24
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	f001 fa6f 	bl	801ddd0 <xTaskRemoveFromEventList>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d013      	beq.n	801c920 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801c8f8:	4b3f      	ldr	r3, [pc, #252]	@ (801c9f8 <xQueueGenericSend+0x200>)
 801c8fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c8fe:	601a      	str	r2, [r3, #0]
 801c900:	f3bf 8f4f 	dsb	sy
 801c904:	f3bf 8f6f 	isb	sy
 801c908:	e00a      	b.n	801c920 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801c90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d007      	beq.n	801c920 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801c910:	4b39      	ldr	r3, [pc, #228]	@ (801c9f8 <xQueueGenericSend+0x200>)
 801c912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c916:	601a      	str	r2, [r3, #0]
 801c918:	f3bf 8f4f 	dsb	sy
 801c91c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801c920:	f002 fa8c 	bl	801ee3c <vPortExitCritical>
				return pdPASS;
 801c924:	2301      	movs	r3, #1
 801c926:	e063      	b.n	801c9f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d103      	bne.n	801c936 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801c92e:	f002 fa85 	bl	801ee3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801c932:	2300      	movs	r3, #0
 801c934:	e05c      	b.n	801c9f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801c936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d106      	bne.n	801c94a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801c93c:	f107 0314 	add.w	r3, r7, #20
 801c940:	4618      	mov	r0, r3
 801c942:	f001 faa9 	bl	801de98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801c946:	2301      	movs	r3, #1
 801c948:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801c94a:	f002 fa77 	bl	801ee3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801c94e:	f001 f803 	bl	801d958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801c952:	f002 fa41 	bl	801edd8 <vPortEnterCritical>
 801c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801c95c:	b25b      	sxtb	r3, r3
 801c95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c962:	d103      	bne.n	801c96c <xQueueGenericSend+0x174>
 801c964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c966:	2200      	movs	r2, #0
 801c968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801c96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c96e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801c972:	b25b      	sxtb	r3, r3
 801c974:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c978:	d103      	bne.n	801c982 <xQueueGenericSend+0x18a>
 801c97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c97c:	2200      	movs	r2, #0
 801c97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801c982:	f002 fa5b 	bl	801ee3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801c986:	1d3a      	adds	r2, r7, #4
 801c988:	f107 0314 	add.w	r3, r7, #20
 801c98c:	4611      	mov	r1, r2
 801c98e:	4618      	mov	r0, r3
 801c990:	f001 fa98 	bl	801dec4 <xTaskCheckForTimeOut>
 801c994:	4603      	mov	r3, r0
 801c996:	2b00      	cmp	r3, #0
 801c998:	d124      	bne.n	801c9e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801c99a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c99c:	f000 fd02 	bl	801d3a4 <prvIsQueueFull>
 801c9a0:	4603      	mov	r3, r0
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d018      	beq.n	801c9d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801c9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9a8:	3310      	adds	r3, #16
 801c9aa:	687a      	ldr	r2, [r7, #4]
 801c9ac:	4611      	mov	r1, r2
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	f001 f9bc 	bl	801dd2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801c9b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c9b6:	f000 fc8d 	bl	801d2d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801c9ba:	f000 ffdb 	bl	801d974 <xTaskResumeAll>
 801c9be:	4603      	mov	r3, r0
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	f47f af7c 	bne.w	801c8be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801c9c6:	4b0c      	ldr	r3, [pc, #48]	@ (801c9f8 <xQueueGenericSend+0x200>)
 801c9c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c9cc:	601a      	str	r2, [r3, #0]
 801c9ce:	f3bf 8f4f 	dsb	sy
 801c9d2:	f3bf 8f6f 	isb	sy
 801c9d6:	e772      	b.n	801c8be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801c9d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c9da:	f000 fc7b 	bl	801d2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801c9de:	f000 ffc9 	bl	801d974 <xTaskResumeAll>
 801c9e2:	e76c      	b.n	801c8be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801c9e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c9e6:	f000 fc75 	bl	801d2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801c9ea:	f000 ffc3 	bl	801d974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801c9ee:	2300      	movs	r3, #0
		}
	}
}
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	3738      	adds	r7, #56	@ 0x38
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd80      	pop	{r7, pc}
 801c9f8:	e000ed04 	.word	0xe000ed04

0801c9fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b08e      	sub	sp, #56	@ 0x38
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	60f8      	str	r0, [r7, #12]
 801ca04:	60b9      	str	r1, [r7, #8]
 801ca06:	607a      	str	r2, [r7, #4]
 801ca08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d10b      	bne.n	801ca2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801ca14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ca18:	f383 8811 	msr	BASEPRI, r3
 801ca1c:	f3bf 8f6f 	isb	sy
 801ca20:	f3bf 8f4f 	dsb	sy
 801ca24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801ca26:	bf00      	nop
 801ca28:	bf00      	nop
 801ca2a:	e7fd      	b.n	801ca28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ca2c:	68bb      	ldr	r3, [r7, #8]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d103      	bne.n	801ca3a <xQueueGenericSendFromISR+0x3e>
 801ca32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d101      	bne.n	801ca3e <xQueueGenericSendFromISR+0x42>
 801ca3a:	2301      	movs	r3, #1
 801ca3c:	e000      	b.n	801ca40 <xQueueGenericSendFromISR+0x44>
 801ca3e:	2300      	movs	r3, #0
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d10b      	bne.n	801ca5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801ca44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ca48:	f383 8811 	msr	BASEPRI, r3
 801ca4c:	f3bf 8f6f 	isb	sy
 801ca50:	f3bf 8f4f 	dsb	sy
 801ca54:	623b      	str	r3, [r7, #32]
}
 801ca56:	bf00      	nop
 801ca58:	bf00      	nop
 801ca5a:	e7fd      	b.n	801ca58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ca5c:	683b      	ldr	r3, [r7, #0]
 801ca5e:	2b02      	cmp	r3, #2
 801ca60:	d103      	bne.n	801ca6a <xQueueGenericSendFromISR+0x6e>
 801ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ca66:	2b01      	cmp	r3, #1
 801ca68:	d101      	bne.n	801ca6e <xQueueGenericSendFromISR+0x72>
 801ca6a:	2301      	movs	r3, #1
 801ca6c:	e000      	b.n	801ca70 <xQueueGenericSendFromISR+0x74>
 801ca6e:	2300      	movs	r3, #0
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d10b      	bne.n	801ca8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801ca74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ca78:	f383 8811 	msr	BASEPRI, r3
 801ca7c:	f3bf 8f6f 	isb	sy
 801ca80:	f3bf 8f4f 	dsb	sy
 801ca84:	61fb      	str	r3, [r7, #28]
}
 801ca86:	bf00      	nop
 801ca88:	bf00      	nop
 801ca8a:	e7fd      	b.n	801ca88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ca8c:	f002 fa84 	bl	801ef98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801ca90:	f3ef 8211 	mrs	r2, BASEPRI
 801ca94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ca98:	f383 8811 	msr	BASEPRI, r3
 801ca9c:	f3bf 8f6f 	isb	sy
 801caa0:	f3bf 8f4f 	dsb	sy
 801caa4:	61ba      	str	r2, [r7, #24]
 801caa6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801caa8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801caaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801caac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801caae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cab4:	429a      	cmp	r2, r3
 801cab6:	d302      	bcc.n	801cabe <xQueueGenericSendFromISR+0xc2>
 801cab8:	683b      	ldr	r3, [r7, #0]
 801caba:	2b02      	cmp	r3, #2
 801cabc:	d12c      	bne.n	801cb18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801cabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801cac8:	683a      	ldr	r2, [r7, #0]
 801caca:	68b9      	ldr	r1, [r7, #8]
 801cacc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cace:	f000 fb71 	bl	801d1b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801cad2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801cad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cada:	d112      	bne.n	801cb02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801cadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d016      	beq.n	801cb12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801cae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cae6:	3324      	adds	r3, #36	@ 0x24
 801cae8:	4618      	mov	r0, r3
 801caea:	f001 f971 	bl	801ddd0 <xTaskRemoveFromEventList>
 801caee:	4603      	mov	r3, r0
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d00e      	beq.n	801cb12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d00b      	beq.n	801cb12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	2201      	movs	r2, #1
 801cafe:	601a      	str	r2, [r3, #0]
 801cb00:	e007      	b.n	801cb12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801cb02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801cb06:	3301      	adds	r3, #1
 801cb08:	b2db      	uxtb	r3, r3
 801cb0a:	b25a      	sxtb	r2, r3
 801cb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801cb12:	2301      	movs	r3, #1
 801cb14:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801cb16:	e001      	b.n	801cb1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801cb18:	2300      	movs	r3, #0
 801cb1a:	637b      	str	r3, [r7, #52]	@ 0x34
 801cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801cb20:	693b      	ldr	r3, [r7, #16]
 801cb22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801cb26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801cb28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801cb2a:	4618      	mov	r0, r3
 801cb2c:	3738      	adds	r7, #56	@ 0x38
 801cb2e:	46bd      	mov	sp, r7
 801cb30:	bd80      	pop	{r7, pc}

0801cb32 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801cb32:	b580      	push	{r7, lr}
 801cb34:	b08e      	sub	sp, #56	@ 0x38
 801cb36:	af00      	add	r7, sp, #0
 801cb38:	6078      	str	r0, [r7, #4]
 801cb3a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801cb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d10b      	bne.n	801cb5e <xQueueGiveFromISR+0x2c>
	__asm volatile
 801cb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cb4a:	f383 8811 	msr	BASEPRI, r3
 801cb4e:	f3bf 8f6f 	isb	sy
 801cb52:	f3bf 8f4f 	dsb	sy
 801cb56:	623b      	str	r3, [r7, #32]
}
 801cb58:	bf00      	nop
 801cb5a:	bf00      	nop
 801cb5c:	e7fd      	b.n	801cb5a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801cb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d00b      	beq.n	801cb7e <xQueueGiveFromISR+0x4c>
	__asm volatile
 801cb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cb6a:	f383 8811 	msr	BASEPRI, r3
 801cb6e:	f3bf 8f6f 	isb	sy
 801cb72:	f3bf 8f4f 	dsb	sy
 801cb76:	61fb      	str	r3, [r7, #28]
}
 801cb78:	bf00      	nop
 801cb7a:	bf00      	nop
 801cb7c:	e7fd      	b.n	801cb7a <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 801cb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d103      	bne.n	801cb8e <xQueueGiveFromISR+0x5c>
 801cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb88:	685b      	ldr	r3, [r3, #4]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d101      	bne.n	801cb92 <xQueueGiveFromISR+0x60>
 801cb8e:	2301      	movs	r3, #1
 801cb90:	e000      	b.n	801cb94 <xQueueGiveFromISR+0x62>
 801cb92:	2300      	movs	r3, #0
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d10b      	bne.n	801cbb0 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801cb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cb9c:	f383 8811 	msr	BASEPRI, r3
 801cba0:	f3bf 8f6f 	isb	sy
 801cba4:	f3bf 8f4f 	dsb	sy
 801cba8:	61bb      	str	r3, [r7, #24]
}
 801cbaa:	bf00      	nop
 801cbac:	bf00      	nop
 801cbae:	e7fd      	b.n	801cbac <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801cbb0:	f002 f9f2 	bl	801ef98 <vPortValidateInterruptPriority>
	__asm volatile
 801cbb4:	f3ef 8211 	mrs	r2, BASEPRI
 801cbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cbbc:	f383 8811 	msr	BASEPRI, r3
 801cbc0:	f3bf 8f6f 	isb	sy
 801cbc4:	f3bf 8f4f 	dsb	sy
 801cbc8:	617a      	str	r2, [r7, #20]
 801cbca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801cbcc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801cbce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801cbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cbd4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cbda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cbdc:	429a      	cmp	r2, r3
 801cbde:	d22b      	bcs.n	801cc38 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801cbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbec:	1c5a      	adds	r2, r3, #1
 801cbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbf0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801cbf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbfa:	d112      	bne.n	801cc22 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801cbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d016      	beq.n	801cc32 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801cc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc06:	3324      	adds	r3, #36	@ 0x24
 801cc08:	4618      	mov	r0, r3
 801cc0a:	f001 f8e1 	bl	801ddd0 <xTaskRemoveFromEventList>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d00e      	beq.n	801cc32 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801cc14:	683b      	ldr	r3, [r7, #0]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d00b      	beq.n	801cc32 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801cc1a:	683b      	ldr	r3, [r7, #0]
 801cc1c:	2201      	movs	r2, #1
 801cc1e:	601a      	str	r2, [r3, #0]
 801cc20:	e007      	b.n	801cc32 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801cc22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc26:	3301      	adds	r3, #1
 801cc28:	b2db      	uxtb	r3, r3
 801cc2a:	b25a      	sxtb	r2, r3
 801cc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801cc32:	2301      	movs	r3, #1
 801cc34:	637b      	str	r3, [r7, #52]	@ 0x34
 801cc36:	e001      	b.n	801cc3c <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801cc38:	2300      	movs	r3, #0
 801cc3a:	637b      	str	r3, [r7, #52]	@ 0x34
 801cc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc3e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	f383 8811 	msr	BASEPRI, r3
}
 801cc46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801cc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	3738      	adds	r7, #56	@ 0x38
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	bd80      	pop	{r7, pc}
	...

0801cc54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b08c      	sub	sp, #48	@ 0x30
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	60f8      	str	r0, [r7, #12]
 801cc5c:	60b9      	str	r1, [r7, #8]
 801cc5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801cc60:	2300      	movs	r3, #0
 801cc62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801cc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d10b      	bne.n	801cc86 <xQueueReceive+0x32>
	__asm volatile
 801cc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cc72:	f383 8811 	msr	BASEPRI, r3
 801cc76:	f3bf 8f6f 	isb	sy
 801cc7a:	f3bf 8f4f 	dsb	sy
 801cc7e:	623b      	str	r3, [r7, #32]
}
 801cc80:	bf00      	nop
 801cc82:	bf00      	nop
 801cc84:	e7fd      	b.n	801cc82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801cc86:	68bb      	ldr	r3, [r7, #8]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d103      	bne.n	801cc94 <xQueueReceive+0x40>
 801cc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d101      	bne.n	801cc98 <xQueueReceive+0x44>
 801cc94:	2301      	movs	r3, #1
 801cc96:	e000      	b.n	801cc9a <xQueueReceive+0x46>
 801cc98:	2300      	movs	r3, #0
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d10b      	bne.n	801ccb6 <xQueueReceive+0x62>
	__asm volatile
 801cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cca2:	f383 8811 	msr	BASEPRI, r3
 801cca6:	f3bf 8f6f 	isb	sy
 801ccaa:	f3bf 8f4f 	dsb	sy
 801ccae:	61fb      	str	r3, [r7, #28]
}
 801ccb0:	bf00      	nop
 801ccb2:	bf00      	nop
 801ccb4:	e7fd      	b.n	801ccb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ccb6:	f001 fa51 	bl	801e15c <xTaskGetSchedulerState>
 801ccba:	4603      	mov	r3, r0
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d102      	bne.n	801ccc6 <xQueueReceive+0x72>
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d101      	bne.n	801ccca <xQueueReceive+0x76>
 801ccc6:	2301      	movs	r3, #1
 801ccc8:	e000      	b.n	801cccc <xQueueReceive+0x78>
 801ccca:	2300      	movs	r3, #0
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d10b      	bne.n	801cce8 <xQueueReceive+0x94>
	__asm volatile
 801ccd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ccd4:	f383 8811 	msr	BASEPRI, r3
 801ccd8:	f3bf 8f6f 	isb	sy
 801ccdc:	f3bf 8f4f 	dsb	sy
 801cce0:	61bb      	str	r3, [r7, #24]
}
 801cce2:	bf00      	nop
 801cce4:	bf00      	nop
 801cce6:	e7fd      	b.n	801cce4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801cce8:	f002 f876 	bl	801edd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ccec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ccf0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d01f      	beq.n	801cd38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801ccf8:	68b9      	ldr	r1, [r7, #8]
 801ccfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ccfc:	f000 fac4 	bl	801d288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801cd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd02:	1e5a      	subs	r2, r3, #1
 801cd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd0a:	691b      	ldr	r3, [r3, #16]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d00f      	beq.n	801cd30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801cd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd12:	3310      	adds	r3, #16
 801cd14:	4618      	mov	r0, r3
 801cd16:	f001 f85b 	bl	801ddd0 <xTaskRemoveFromEventList>
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d007      	beq.n	801cd30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801cd20:	4b3c      	ldr	r3, [pc, #240]	@ (801ce14 <xQueueReceive+0x1c0>)
 801cd22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cd26:	601a      	str	r2, [r3, #0]
 801cd28:	f3bf 8f4f 	dsb	sy
 801cd2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801cd30:	f002 f884 	bl	801ee3c <vPortExitCritical>
				return pdPASS;
 801cd34:	2301      	movs	r3, #1
 801cd36:	e069      	b.n	801ce0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d103      	bne.n	801cd46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801cd3e:	f002 f87d 	bl	801ee3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801cd42:	2300      	movs	r3, #0
 801cd44:	e062      	b.n	801ce0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801cd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d106      	bne.n	801cd5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801cd4c:	f107 0310 	add.w	r3, r7, #16
 801cd50:	4618      	mov	r0, r3
 801cd52:	f001 f8a1 	bl	801de98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801cd56:	2301      	movs	r3, #1
 801cd58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801cd5a:	f002 f86f 	bl	801ee3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801cd5e:	f000 fdfb 	bl	801d958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801cd62:	f002 f839 	bl	801edd8 <vPortEnterCritical>
 801cd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801cd6c:	b25b      	sxtb	r3, r3
 801cd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd72:	d103      	bne.n	801cd7c <xQueueReceive+0x128>
 801cd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd76:	2200      	movs	r2, #0
 801cd78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801cd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cd82:	b25b      	sxtb	r3, r3
 801cd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd88:	d103      	bne.n	801cd92 <xQueueReceive+0x13e>
 801cd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801cd92:	f002 f853 	bl	801ee3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801cd96:	1d3a      	adds	r2, r7, #4
 801cd98:	f107 0310 	add.w	r3, r7, #16
 801cd9c:	4611      	mov	r1, r2
 801cd9e:	4618      	mov	r0, r3
 801cda0:	f001 f890 	bl	801dec4 <xTaskCheckForTimeOut>
 801cda4:	4603      	mov	r3, r0
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d123      	bne.n	801cdf2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cdaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cdac:	f000 fae4 	bl	801d378 <prvIsQueueEmpty>
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d017      	beq.n	801cde6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801cdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cdb8:	3324      	adds	r3, #36	@ 0x24
 801cdba:	687a      	ldr	r2, [r7, #4]
 801cdbc:	4611      	mov	r1, r2
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f000 ffb4 	bl	801dd2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801cdc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cdc6:	f000 fa85 	bl	801d2d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801cdca:	f000 fdd3 	bl	801d974 <xTaskResumeAll>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d189      	bne.n	801cce8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801cdd4:	4b0f      	ldr	r3, [pc, #60]	@ (801ce14 <xQueueReceive+0x1c0>)
 801cdd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cdda:	601a      	str	r2, [r3, #0]
 801cddc:	f3bf 8f4f 	dsb	sy
 801cde0:	f3bf 8f6f 	isb	sy
 801cde4:	e780      	b.n	801cce8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801cde6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cde8:	f000 fa74 	bl	801d2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801cdec:	f000 fdc2 	bl	801d974 <xTaskResumeAll>
 801cdf0:	e77a      	b.n	801cce8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801cdf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cdf4:	f000 fa6e 	bl	801d2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801cdf8:	f000 fdbc 	bl	801d974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cdfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cdfe:	f000 fabb 	bl	801d378 <prvIsQueueEmpty>
 801ce02:	4603      	mov	r3, r0
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	f43f af6f 	beq.w	801cce8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801ce0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801ce0c:	4618      	mov	r0, r3
 801ce0e:	3730      	adds	r7, #48	@ 0x30
 801ce10:	46bd      	mov	sp, r7
 801ce12:	bd80      	pop	{r7, pc}
 801ce14:	e000ed04 	.word	0xe000ed04

0801ce18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b08e      	sub	sp, #56	@ 0x38
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	6078      	str	r0, [r7, #4]
 801ce20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801ce22:	2300      	movs	r3, #0
 801ce24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801ce2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d10b      	bne.n	801ce4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 801ce34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ce38:	f383 8811 	msr	BASEPRI, r3
 801ce3c:	f3bf 8f6f 	isb	sy
 801ce40:	f3bf 8f4f 	dsb	sy
 801ce44:	623b      	str	r3, [r7, #32]
}
 801ce46:	bf00      	nop
 801ce48:	bf00      	nop
 801ce4a:	e7fd      	b.n	801ce48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801ce4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d00b      	beq.n	801ce6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 801ce54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ce58:	f383 8811 	msr	BASEPRI, r3
 801ce5c:	f3bf 8f6f 	isb	sy
 801ce60:	f3bf 8f4f 	dsb	sy
 801ce64:	61fb      	str	r3, [r7, #28]
}
 801ce66:	bf00      	nop
 801ce68:	bf00      	nop
 801ce6a:	e7fd      	b.n	801ce68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ce6c:	f001 f976 	bl	801e15c <xTaskGetSchedulerState>
 801ce70:	4603      	mov	r3, r0
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d102      	bne.n	801ce7c <xQueueSemaphoreTake+0x64>
 801ce76:	683b      	ldr	r3, [r7, #0]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d101      	bne.n	801ce80 <xQueueSemaphoreTake+0x68>
 801ce7c:	2301      	movs	r3, #1
 801ce7e:	e000      	b.n	801ce82 <xQueueSemaphoreTake+0x6a>
 801ce80:	2300      	movs	r3, #0
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d10b      	bne.n	801ce9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 801ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ce8a:	f383 8811 	msr	BASEPRI, r3
 801ce8e:	f3bf 8f6f 	isb	sy
 801ce92:	f3bf 8f4f 	dsb	sy
 801ce96:	61bb      	str	r3, [r7, #24]
}
 801ce98:	bf00      	nop
 801ce9a:	bf00      	nop
 801ce9c:	e7fd      	b.n	801ce9a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801ce9e:	f001 ff9b 	bl	801edd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801cea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cea6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801cea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d024      	beq.n	801cef8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801ceae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ceb0:	1e5a      	subs	r2, r3, #1
 801ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ceb4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ceb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d104      	bne.n	801cec8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801cebe:	f001 fad1 	bl	801e464 <pvTaskIncrementMutexHeldCount>
 801cec2:	4602      	mov	r2, r0
 801cec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cec6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801cec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ceca:	691b      	ldr	r3, [r3, #16]
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d00f      	beq.n	801cef0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ced0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ced2:	3310      	adds	r3, #16
 801ced4:	4618      	mov	r0, r3
 801ced6:	f000 ff7b 	bl	801ddd0 <xTaskRemoveFromEventList>
 801ceda:	4603      	mov	r3, r0
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d007      	beq.n	801cef0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801cee0:	4b54      	ldr	r3, [pc, #336]	@ (801d034 <xQueueSemaphoreTake+0x21c>)
 801cee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cee6:	601a      	str	r2, [r3, #0]
 801cee8:	f3bf 8f4f 	dsb	sy
 801ceec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801cef0:	f001 ffa4 	bl	801ee3c <vPortExitCritical>
				return pdPASS;
 801cef4:	2301      	movs	r3, #1
 801cef6:	e098      	b.n	801d02a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801cef8:	683b      	ldr	r3, [r7, #0]
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d112      	bne.n	801cf24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d00b      	beq.n	801cf1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 801cf04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cf08:	f383 8811 	msr	BASEPRI, r3
 801cf0c:	f3bf 8f6f 	isb	sy
 801cf10:	f3bf 8f4f 	dsb	sy
 801cf14:	617b      	str	r3, [r7, #20]
}
 801cf16:	bf00      	nop
 801cf18:	bf00      	nop
 801cf1a:	e7fd      	b.n	801cf18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801cf1c:	f001 ff8e 	bl	801ee3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801cf20:	2300      	movs	r3, #0
 801cf22:	e082      	b.n	801d02a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801cf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d106      	bne.n	801cf38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801cf2a:	f107 030c 	add.w	r3, r7, #12
 801cf2e:	4618      	mov	r0, r3
 801cf30:	f000 ffb2 	bl	801de98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801cf34:	2301      	movs	r3, #1
 801cf36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801cf38:	f001 ff80 	bl	801ee3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801cf3c:	f000 fd0c 	bl	801d958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801cf40:	f001 ff4a 	bl	801edd8 <vPortEnterCritical>
 801cf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801cf4a:	b25b      	sxtb	r3, r3
 801cf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf50:	d103      	bne.n	801cf5a <xQueueSemaphoreTake+0x142>
 801cf52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf54:	2200      	movs	r2, #0
 801cf56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801cf5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cf60:	b25b      	sxtb	r3, r3
 801cf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf66:	d103      	bne.n	801cf70 <xQueueSemaphoreTake+0x158>
 801cf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf6a:	2200      	movs	r2, #0
 801cf6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801cf70:	f001 ff64 	bl	801ee3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801cf74:	463a      	mov	r2, r7
 801cf76:	f107 030c 	add.w	r3, r7, #12
 801cf7a:	4611      	mov	r1, r2
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	f000 ffa1 	bl	801dec4 <xTaskCheckForTimeOut>
 801cf82:	4603      	mov	r3, r0
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d132      	bne.n	801cfee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cf88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cf8a:	f000 f9f5 	bl	801d378 <prvIsQueueEmpty>
 801cf8e:	4603      	mov	r3, r0
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d026      	beq.n	801cfe2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801cf94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d109      	bne.n	801cfb0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801cf9c:	f001 ff1c 	bl	801edd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 801cfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfa2:	685b      	ldr	r3, [r3, #4]
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	f001 f8f7 	bl	801e198 <xTaskPriorityInherit>
 801cfaa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801cfac:	f001 ff46 	bl	801ee3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801cfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfb2:	3324      	adds	r3, #36	@ 0x24
 801cfb4:	683a      	ldr	r2, [r7, #0]
 801cfb6:	4611      	mov	r1, r2
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f000 feb7 	bl	801dd2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801cfbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cfc0:	f000 f988 	bl	801d2d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801cfc4:	f000 fcd6 	bl	801d974 <xTaskResumeAll>
 801cfc8:	4603      	mov	r3, r0
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	f47f af67 	bne.w	801ce9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801cfd0:	4b18      	ldr	r3, [pc, #96]	@ (801d034 <xQueueSemaphoreTake+0x21c>)
 801cfd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cfd6:	601a      	str	r2, [r3, #0]
 801cfd8:	f3bf 8f4f 	dsb	sy
 801cfdc:	f3bf 8f6f 	isb	sy
 801cfe0:	e75d      	b.n	801ce9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801cfe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cfe4:	f000 f976 	bl	801d2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801cfe8:	f000 fcc4 	bl	801d974 <xTaskResumeAll>
 801cfec:	e757      	b.n	801ce9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801cfee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cff0:	f000 f970 	bl	801d2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801cff4:	f000 fcbe 	bl	801d974 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cffa:	f000 f9bd 	bl	801d378 <prvIsQueueEmpty>
 801cffe:	4603      	mov	r3, r0
 801d000:	2b00      	cmp	r3, #0
 801d002:	f43f af4c 	beq.w	801ce9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801d006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d00d      	beq.n	801d028 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801d00c:	f001 fee4 	bl	801edd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801d010:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d012:	f000 f8b7 	bl	801d184 <prvGetDisinheritPriorityAfterTimeout>
 801d016:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801d018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d01a:	685b      	ldr	r3, [r3, #4]
 801d01c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d01e:	4618      	mov	r0, r3
 801d020:	f001 f998 	bl	801e354 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801d024:	f001 ff0a 	bl	801ee3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801d028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801d02a:	4618      	mov	r0, r3
 801d02c:	3738      	adds	r7, #56	@ 0x38
 801d02e:	46bd      	mov	sp, r7
 801d030:	bd80      	pop	{r7, pc}
 801d032:	bf00      	nop
 801d034:	e000ed04 	.word	0xe000ed04

0801d038 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801d038:	b580      	push	{r7, lr}
 801d03a:	b08e      	sub	sp, #56	@ 0x38
 801d03c:	af00      	add	r7, sp, #0
 801d03e:	60f8      	str	r0, [r7, #12]
 801d040:	60b9      	str	r1, [r7, #8]
 801d042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801d048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d10b      	bne.n	801d066 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801d04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d052:	f383 8811 	msr	BASEPRI, r3
 801d056:	f3bf 8f6f 	isb	sy
 801d05a:	f3bf 8f4f 	dsb	sy
 801d05e:	623b      	str	r3, [r7, #32]
}
 801d060:	bf00      	nop
 801d062:	bf00      	nop
 801d064:	e7fd      	b.n	801d062 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801d066:	68bb      	ldr	r3, [r7, #8]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d103      	bne.n	801d074 <xQueueReceiveFromISR+0x3c>
 801d06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d070:	2b00      	cmp	r3, #0
 801d072:	d101      	bne.n	801d078 <xQueueReceiveFromISR+0x40>
 801d074:	2301      	movs	r3, #1
 801d076:	e000      	b.n	801d07a <xQueueReceiveFromISR+0x42>
 801d078:	2300      	movs	r3, #0
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d10b      	bne.n	801d096 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801d07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d082:	f383 8811 	msr	BASEPRI, r3
 801d086:	f3bf 8f6f 	isb	sy
 801d08a:	f3bf 8f4f 	dsb	sy
 801d08e:	61fb      	str	r3, [r7, #28]
}
 801d090:	bf00      	nop
 801d092:	bf00      	nop
 801d094:	e7fd      	b.n	801d092 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801d096:	f001 ff7f 	bl	801ef98 <vPortValidateInterruptPriority>
	__asm volatile
 801d09a:	f3ef 8211 	mrs	r2, BASEPRI
 801d09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d0a2:	f383 8811 	msr	BASEPRI, r3
 801d0a6:	f3bf 8f6f 	isb	sy
 801d0aa:	f3bf 8f4f 	dsb	sy
 801d0ae:	61ba      	str	r2, [r7, #24]
 801d0b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801d0b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801d0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d0ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801d0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d02f      	beq.n	801d122 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801d0c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801d0cc:	68b9      	ldr	r1, [r7, #8]
 801d0ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d0d0:	f000 f8da 	bl	801d288 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801d0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0d6:	1e5a      	subs	r2, r3, #1
 801d0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801d0dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0e4:	d112      	bne.n	801d10c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0e8:	691b      	ldr	r3, [r3, #16]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d016      	beq.n	801d11c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0f0:	3310      	adds	r3, #16
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	f000 fe6c 	bl	801ddd0 <xTaskRemoveFromEventList>
 801d0f8:	4603      	mov	r3, r0
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d00e      	beq.n	801d11c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d00b      	beq.n	801d11c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	2201      	movs	r2, #1
 801d108:	601a      	str	r2, [r3, #0]
 801d10a:	e007      	b.n	801d11c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801d10c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d110:	3301      	adds	r3, #1
 801d112:	b2db      	uxtb	r3, r3
 801d114:	b25a      	sxtb	r2, r3
 801d116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801d11c:	2301      	movs	r3, #1
 801d11e:	637b      	str	r3, [r7, #52]	@ 0x34
 801d120:	e001      	b.n	801d126 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801d122:	2300      	movs	r3, #0
 801d124:	637b      	str	r3, [r7, #52]	@ 0x34
 801d126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d128:	613b      	str	r3, [r7, #16]
	__asm volatile
 801d12a:	693b      	ldr	r3, [r7, #16]
 801d12c:	f383 8811 	msr	BASEPRI, r3
}
 801d130:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801d132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801d134:	4618      	mov	r0, r3
 801d136:	3738      	adds	r7, #56	@ 0x38
 801d138:	46bd      	mov	sp, r7
 801d13a:	bd80      	pop	{r7, pc}

0801d13c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b084      	sub	sp, #16
 801d140:	af00      	add	r7, sp, #0
 801d142:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d10b      	bne.n	801d166 <vQueueDelete+0x2a>
	__asm volatile
 801d14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d152:	f383 8811 	msr	BASEPRI, r3
 801d156:	f3bf 8f6f 	isb	sy
 801d15a:	f3bf 8f4f 	dsb	sy
 801d15e:	60bb      	str	r3, [r7, #8]
}
 801d160:	bf00      	nop
 801d162:	bf00      	nop
 801d164:	e7fd      	b.n	801d162 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801d166:	68f8      	ldr	r0, [r7, #12]
 801d168:	f000 f95e 	bl	801d428 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801d172:	2b00      	cmp	r3, #0
 801d174:	d102      	bne.n	801d17c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801d176:	68f8      	ldr	r0, [r7, #12]
 801d178:	f001 ffee 	bl	801f158 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801d17c:	bf00      	nop
 801d17e:	3710      	adds	r7, #16
 801d180:	46bd      	mov	sp, r7
 801d182:	bd80      	pop	{r7, pc}

0801d184 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801d184:	b480      	push	{r7}
 801d186:	b085      	sub	sp, #20
 801d188:	af00      	add	r7, sp, #0
 801d18a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d190:	2b00      	cmp	r3, #0
 801d192:	d006      	beq.n	801d1a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801d19e:	60fb      	str	r3, [r7, #12]
 801d1a0:	e001      	b.n	801d1a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801d1a6:	68fb      	ldr	r3, [r7, #12]
	}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3714      	adds	r7, #20
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1b2:	4770      	bx	lr

0801d1b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801d1b4:	b580      	push	{r7, lr}
 801d1b6:	b086      	sub	sp, #24
 801d1b8:	af00      	add	r7, sp, #0
 801d1ba:	60f8      	str	r0, [r7, #12]
 801d1bc:	60b9      	str	r1, [r7, #8]
 801d1be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d1c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d10d      	bne.n	801d1ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d14d      	bne.n	801d276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	685b      	ldr	r3, [r3, #4]
 801d1de:	4618      	mov	r0, r3
 801d1e0:	f001 f848 	bl	801e274 <xTaskPriorityDisinherit>
 801d1e4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	605a      	str	r2, [r3, #4]
 801d1ec:	e043      	b.n	801d276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d119      	bne.n	801d228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	6898      	ldr	r0, [r3, #8]
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d1fc:	461a      	mov	r2, r3
 801d1fe:	68b9      	ldr	r1, [r7, #8]
 801d200:	f009 f945 	bl	802648e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	689a      	ldr	r2, [r3, #8]
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d20c:	441a      	add	r2, r3
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	689a      	ldr	r2, [r3, #8]
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	685b      	ldr	r3, [r3, #4]
 801d21a:	429a      	cmp	r2, r3
 801d21c:	d32b      	bcc.n	801d276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	681a      	ldr	r2, [r3, #0]
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	609a      	str	r2, [r3, #8]
 801d226:	e026      	b.n	801d276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	68d8      	ldr	r0, [r3, #12]
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d230:	461a      	mov	r2, r3
 801d232:	68b9      	ldr	r1, [r7, #8]
 801d234:	f009 f92b 	bl	802648e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	68da      	ldr	r2, [r3, #12]
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d240:	425b      	negs	r3, r3
 801d242:	441a      	add	r2, r3
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	68da      	ldr	r2, [r3, #12]
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	429a      	cmp	r2, r3
 801d252:	d207      	bcs.n	801d264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	685a      	ldr	r2, [r3, #4]
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d25c:	425b      	negs	r3, r3
 801d25e:	441a      	add	r2, r3
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	2b02      	cmp	r3, #2
 801d268:	d105      	bne.n	801d276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801d26a:	693b      	ldr	r3, [r7, #16]
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d002      	beq.n	801d276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801d270:	693b      	ldr	r3, [r7, #16]
 801d272:	3b01      	subs	r3, #1
 801d274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d276:	693b      	ldr	r3, [r7, #16]
 801d278:	1c5a      	adds	r2, r3, #1
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801d27e:	697b      	ldr	r3, [r7, #20]
}
 801d280:	4618      	mov	r0, r3
 801d282:	3718      	adds	r7, #24
 801d284:	46bd      	mov	sp, r7
 801d286:	bd80      	pop	{r7, pc}

0801d288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b082      	sub	sp, #8
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]
 801d290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d296:	2b00      	cmp	r3, #0
 801d298:	d018      	beq.n	801d2cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	68da      	ldr	r2, [r3, #12]
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d2a2:	441a      	add	r2, r3
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	68da      	ldr	r2, [r3, #12]
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	685b      	ldr	r3, [r3, #4]
 801d2b0:	429a      	cmp	r2, r3
 801d2b2:	d303      	bcc.n	801d2bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	681a      	ldr	r2, [r3, #0]
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	68d9      	ldr	r1, [r3, #12]
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d2c4:	461a      	mov	r2, r3
 801d2c6:	6838      	ldr	r0, [r7, #0]
 801d2c8:	f009 f8e1 	bl	802648e <memcpy>
	}
}
 801d2cc:	bf00      	nop
 801d2ce:	3708      	adds	r7, #8
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}

0801d2d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b084      	sub	sp, #16
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801d2dc:	f001 fd7c 	bl	801edd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d2e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d2e8:	e011      	b.n	801d30e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d012      	beq.n	801d318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	3324      	adds	r3, #36	@ 0x24
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f000 fd6a 	bl	801ddd0 <xTaskRemoveFromEventList>
 801d2fc:	4603      	mov	r3, r0
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d001      	beq.n	801d306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801d302:	f000 fe43 	bl	801df8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801d306:	7bfb      	ldrb	r3, [r7, #15]
 801d308:	3b01      	subs	r3, #1
 801d30a:	b2db      	uxtb	r3, r3
 801d30c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d312:	2b00      	cmp	r3, #0
 801d314:	dce9      	bgt.n	801d2ea <prvUnlockQueue+0x16>
 801d316:	e000      	b.n	801d31a <prvUnlockQueue+0x46>
					break;
 801d318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	22ff      	movs	r2, #255	@ 0xff
 801d31e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801d322:	f001 fd8b 	bl	801ee3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801d326:	f001 fd57 	bl	801edd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801d330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d332:	e011      	b.n	801d358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	691b      	ldr	r3, [r3, #16]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d012      	beq.n	801d362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	3310      	adds	r3, #16
 801d340:	4618      	mov	r0, r3
 801d342:	f000 fd45 	bl	801ddd0 <xTaskRemoveFromEventList>
 801d346:	4603      	mov	r3, r0
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d001      	beq.n	801d350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801d34c:	f000 fe1e 	bl	801df8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801d350:	7bbb      	ldrb	r3, [r7, #14]
 801d352:	3b01      	subs	r3, #1
 801d354:	b2db      	uxtb	r3, r3
 801d356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	dce9      	bgt.n	801d334 <prvUnlockQueue+0x60>
 801d360:	e000      	b.n	801d364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801d362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	22ff      	movs	r2, #255	@ 0xff
 801d368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801d36c:	f001 fd66 	bl	801ee3c <vPortExitCritical>
}
 801d370:	bf00      	nop
 801d372:	3710      	adds	r7, #16
 801d374:	46bd      	mov	sp, r7
 801d376:	bd80      	pop	{r7, pc}

0801d378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801d378:	b580      	push	{r7, lr}
 801d37a:	b084      	sub	sp, #16
 801d37c:	af00      	add	r7, sp, #0
 801d37e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801d380:	f001 fd2a 	bl	801edd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d102      	bne.n	801d392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801d38c:	2301      	movs	r3, #1
 801d38e:	60fb      	str	r3, [r7, #12]
 801d390:	e001      	b.n	801d396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801d392:	2300      	movs	r3, #0
 801d394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801d396:	f001 fd51 	bl	801ee3c <vPortExitCritical>

	return xReturn;
 801d39a:	68fb      	ldr	r3, [r7, #12]
}
 801d39c:	4618      	mov	r0, r3
 801d39e:	3710      	adds	r7, #16
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	bd80      	pop	{r7, pc}

0801d3a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b084      	sub	sp, #16
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801d3ac:	f001 fd14 	bl	801edd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d3b8:	429a      	cmp	r2, r3
 801d3ba:	d102      	bne.n	801d3c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801d3bc:	2301      	movs	r3, #1
 801d3be:	60fb      	str	r3, [r7, #12]
 801d3c0:	e001      	b.n	801d3c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801d3c2:	2300      	movs	r3, #0
 801d3c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801d3c6:	f001 fd39 	bl	801ee3c <vPortExitCritical>

	return xReturn;
 801d3ca:	68fb      	ldr	r3, [r7, #12]
}
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	3710      	adds	r7, #16
 801d3d0:	46bd      	mov	sp, r7
 801d3d2:	bd80      	pop	{r7, pc}

0801d3d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801d3d4:	b480      	push	{r7}
 801d3d6:	b085      	sub	sp, #20
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	6078      	str	r0, [r7, #4]
 801d3dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d3de:	2300      	movs	r3, #0
 801d3e0:	60fb      	str	r3, [r7, #12]
 801d3e2:	e014      	b.n	801d40e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801d3e4:	4a0f      	ldr	r2, [pc, #60]	@ (801d424 <vQueueAddToRegistry+0x50>)
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d10b      	bne.n	801d408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801d3f0:	490c      	ldr	r1, [pc, #48]	@ (801d424 <vQueueAddToRegistry+0x50>)
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	683a      	ldr	r2, [r7, #0]
 801d3f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801d3fa:	4a0a      	ldr	r2, [pc, #40]	@ (801d424 <vQueueAddToRegistry+0x50>)
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	00db      	lsls	r3, r3, #3
 801d400:	4413      	add	r3, r2
 801d402:	687a      	ldr	r2, [r7, #4]
 801d404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801d406:	e006      	b.n	801d416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	3301      	adds	r3, #1
 801d40c:	60fb      	str	r3, [r7, #12]
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	2b07      	cmp	r3, #7
 801d412:	d9e7      	bls.n	801d3e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801d414:	bf00      	nop
 801d416:	bf00      	nop
 801d418:	3714      	adds	r7, #20
 801d41a:	46bd      	mov	sp, r7
 801d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d420:	4770      	bx	lr
 801d422:	bf00      	nop
 801d424:	2001cf74 	.word	0x2001cf74

0801d428 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801d428:	b480      	push	{r7}
 801d42a:	b085      	sub	sp, #20
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d430:	2300      	movs	r3, #0
 801d432:	60fb      	str	r3, [r7, #12]
 801d434:	e016      	b.n	801d464 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801d436:	4a10      	ldr	r2, [pc, #64]	@ (801d478 <vQueueUnregisterQueue+0x50>)
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	00db      	lsls	r3, r3, #3
 801d43c:	4413      	add	r3, r2
 801d43e:	685b      	ldr	r3, [r3, #4]
 801d440:	687a      	ldr	r2, [r7, #4]
 801d442:	429a      	cmp	r2, r3
 801d444:	d10b      	bne.n	801d45e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801d446:	4a0c      	ldr	r2, [pc, #48]	@ (801d478 <vQueueUnregisterQueue+0x50>)
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	2100      	movs	r1, #0
 801d44c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801d450:	4a09      	ldr	r2, [pc, #36]	@ (801d478 <vQueueUnregisterQueue+0x50>)
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	00db      	lsls	r3, r3, #3
 801d456:	4413      	add	r3, r2
 801d458:	2200      	movs	r2, #0
 801d45a:	605a      	str	r2, [r3, #4]
				break;
 801d45c:	e006      	b.n	801d46c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	3301      	adds	r3, #1
 801d462:	60fb      	str	r3, [r7, #12]
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	2b07      	cmp	r3, #7
 801d468:	d9e5      	bls.n	801d436 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801d46a:	bf00      	nop
 801d46c:	bf00      	nop
 801d46e:	3714      	adds	r7, #20
 801d470:	46bd      	mov	sp, r7
 801d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d476:	4770      	bx	lr
 801d478:	2001cf74 	.word	0x2001cf74

0801d47c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b086      	sub	sp, #24
 801d480:	af00      	add	r7, sp, #0
 801d482:	60f8      	str	r0, [r7, #12]
 801d484:	60b9      	str	r1, [r7, #8]
 801d486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801d48c:	f001 fca4 	bl	801edd8 <vPortEnterCritical>
 801d490:	697b      	ldr	r3, [r7, #20]
 801d492:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801d496:	b25b      	sxtb	r3, r3
 801d498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d49c:	d103      	bne.n	801d4a6 <vQueueWaitForMessageRestricted+0x2a>
 801d49e:	697b      	ldr	r3, [r7, #20]
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801d4a6:	697b      	ldr	r3, [r7, #20]
 801d4a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d4ac:	b25b      	sxtb	r3, r3
 801d4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4b2:	d103      	bne.n	801d4bc <vQueueWaitForMessageRestricted+0x40>
 801d4b4:	697b      	ldr	r3, [r7, #20]
 801d4b6:	2200      	movs	r2, #0
 801d4b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801d4bc:	f001 fcbe 	bl	801ee3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801d4c0:	697b      	ldr	r3, [r7, #20]
 801d4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d106      	bne.n	801d4d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801d4c8:	697b      	ldr	r3, [r7, #20]
 801d4ca:	3324      	adds	r3, #36	@ 0x24
 801d4cc:	687a      	ldr	r2, [r7, #4]
 801d4ce:	68b9      	ldr	r1, [r7, #8]
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	f000 fc51 	bl	801dd78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801d4d6:	6978      	ldr	r0, [r7, #20]
 801d4d8:	f7ff fefc 	bl	801d2d4 <prvUnlockQueue>
	}
 801d4dc:	bf00      	nop
 801d4de:	3718      	adds	r7, #24
 801d4e0:	46bd      	mov	sp, r7
 801d4e2:	bd80      	pop	{r7, pc}

0801d4e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801d4e4:	b580      	push	{r7, lr}
 801d4e6:	b08e      	sub	sp, #56	@ 0x38
 801d4e8:	af04      	add	r7, sp, #16
 801d4ea:	60f8      	str	r0, [r7, #12]
 801d4ec:	60b9      	str	r1, [r7, #8]
 801d4ee:	607a      	str	r2, [r7, #4]
 801d4f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801d4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d10b      	bne.n	801d510 <xTaskCreateStatic+0x2c>
	__asm volatile
 801d4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d4fc:	f383 8811 	msr	BASEPRI, r3
 801d500:	f3bf 8f6f 	isb	sy
 801d504:	f3bf 8f4f 	dsb	sy
 801d508:	623b      	str	r3, [r7, #32]
}
 801d50a:	bf00      	nop
 801d50c:	bf00      	nop
 801d50e:	e7fd      	b.n	801d50c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d512:	2b00      	cmp	r3, #0
 801d514:	d10b      	bne.n	801d52e <xTaskCreateStatic+0x4a>
	__asm volatile
 801d516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d51a:	f383 8811 	msr	BASEPRI, r3
 801d51e:	f3bf 8f6f 	isb	sy
 801d522:	f3bf 8f4f 	dsb	sy
 801d526:	61fb      	str	r3, [r7, #28]
}
 801d528:	bf00      	nop
 801d52a:	bf00      	nop
 801d52c:	e7fd      	b.n	801d52a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801d52e:	235c      	movs	r3, #92	@ 0x5c
 801d530:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801d532:	693b      	ldr	r3, [r7, #16]
 801d534:	2b5c      	cmp	r3, #92	@ 0x5c
 801d536:	d00b      	beq.n	801d550 <xTaskCreateStatic+0x6c>
	__asm volatile
 801d538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d53c:	f383 8811 	msr	BASEPRI, r3
 801d540:	f3bf 8f6f 	isb	sy
 801d544:	f3bf 8f4f 	dsb	sy
 801d548:	61bb      	str	r3, [r7, #24]
}
 801d54a:	bf00      	nop
 801d54c:	bf00      	nop
 801d54e:	e7fd      	b.n	801d54c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801d550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d552:	2b00      	cmp	r3, #0
 801d554:	d01e      	beq.n	801d594 <xTaskCreateStatic+0xb0>
 801d556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d01b      	beq.n	801d594 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801d55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d55e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801d560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d562:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d564:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d568:	2202      	movs	r2, #2
 801d56a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801d56e:	2300      	movs	r3, #0
 801d570:	9303      	str	r3, [sp, #12]
 801d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d574:	9302      	str	r3, [sp, #8]
 801d576:	f107 0314 	add.w	r3, r7, #20
 801d57a:	9301      	str	r3, [sp, #4]
 801d57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d57e:	9300      	str	r3, [sp, #0]
 801d580:	683b      	ldr	r3, [r7, #0]
 801d582:	687a      	ldr	r2, [r7, #4]
 801d584:	68b9      	ldr	r1, [r7, #8]
 801d586:	68f8      	ldr	r0, [r7, #12]
 801d588:	f000 f850 	bl	801d62c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d58c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d58e:	f000 f8d5 	bl	801d73c <prvAddNewTaskToReadyList>
 801d592:	e001      	b.n	801d598 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 801d594:	2300      	movs	r3, #0
 801d596:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801d598:	697b      	ldr	r3, [r7, #20]
	}
 801d59a:	4618      	mov	r0, r3
 801d59c:	3728      	adds	r7, #40	@ 0x28
 801d59e:	46bd      	mov	sp, r7
 801d5a0:	bd80      	pop	{r7, pc}

0801d5a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801d5a2:	b580      	push	{r7, lr}
 801d5a4:	b08c      	sub	sp, #48	@ 0x30
 801d5a6:	af04      	add	r7, sp, #16
 801d5a8:	60f8      	str	r0, [r7, #12]
 801d5aa:	60b9      	str	r1, [r7, #8]
 801d5ac:	603b      	str	r3, [r7, #0]
 801d5ae:	4613      	mov	r3, r2
 801d5b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d5b2:	88fb      	ldrh	r3, [r7, #6]
 801d5b4:	009b      	lsls	r3, r3, #2
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	f001 fdc0 	bl	801f13c <pvPortMalloc>
 801d5bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801d5be:	697b      	ldr	r3, [r7, #20]
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	d00e      	beq.n	801d5e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801d5c4:	205c      	movs	r0, #92	@ 0x5c
 801d5c6:	f001 fdb9 	bl	801f13c <pvPortMalloc>
 801d5ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801d5cc:	69fb      	ldr	r3, [r7, #28]
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d003      	beq.n	801d5da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801d5d2:	69fb      	ldr	r3, [r7, #28]
 801d5d4:	697a      	ldr	r2, [r7, #20]
 801d5d6:	631a      	str	r2, [r3, #48]	@ 0x30
 801d5d8:	e005      	b.n	801d5e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801d5da:	6978      	ldr	r0, [r7, #20]
 801d5dc:	f001 fdbc 	bl	801f158 <vPortFree>
 801d5e0:	e001      	b.n	801d5e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801d5e6:	69fb      	ldr	r3, [r7, #28]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d017      	beq.n	801d61c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801d5ec:	69fb      	ldr	r3, [r7, #28]
 801d5ee:	2200      	movs	r2, #0
 801d5f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801d5f4:	88fa      	ldrh	r2, [r7, #6]
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	9303      	str	r3, [sp, #12]
 801d5fa:	69fb      	ldr	r3, [r7, #28]
 801d5fc:	9302      	str	r3, [sp, #8]
 801d5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d600:	9301      	str	r3, [sp, #4]
 801d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d604:	9300      	str	r3, [sp, #0]
 801d606:	683b      	ldr	r3, [r7, #0]
 801d608:	68b9      	ldr	r1, [r7, #8]
 801d60a:	68f8      	ldr	r0, [r7, #12]
 801d60c:	f000 f80e 	bl	801d62c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d610:	69f8      	ldr	r0, [r7, #28]
 801d612:	f000 f893 	bl	801d73c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801d616:	2301      	movs	r3, #1
 801d618:	61bb      	str	r3, [r7, #24]
 801d61a:	e002      	b.n	801d622 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801d61c:	f04f 33ff 	mov.w	r3, #4294967295
 801d620:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801d622:	69bb      	ldr	r3, [r7, #24]
	}
 801d624:	4618      	mov	r0, r3
 801d626:	3720      	adds	r7, #32
 801d628:	46bd      	mov	sp, r7
 801d62a:	bd80      	pop	{r7, pc}

0801d62c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b088      	sub	sp, #32
 801d630:	af00      	add	r7, sp, #0
 801d632:	60f8      	str	r0, [r7, #12]
 801d634:	60b9      	str	r1, [r7, #8]
 801d636:	607a      	str	r2, [r7, #4]
 801d638:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801d63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d63c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	009b      	lsls	r3, r3, #2
 801d642:	461a      	mov	r2, r3
 801d644:	21a5      	movs	r1, #165	@ 0xa5
 801d646:	f008 fdeb 	bl	8026220 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801d64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d64c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801d654:	3b01      	subs	r3, #1
 801d656:	009b      	lsls	r3, r3, #2
 801d658:	4413      	add	r3, r2
 801d65a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801d65c:	69bb      	ldr	r3, [r7, #24]
 801d65e:	f023 0307 	bic.w	r3, r3, #7
 801d662:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801d664:	69bb      	ldr	r3, [r7, #24]
 801d666:	f003 0307 	and.w	r3, r3, #7
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d00b      	beq.n	801d686 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801d66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d672:	f383 8811 	msr	BASEPRI, r3
 801d676:	f3bf 8f6f 	isb	sy
 801d67a:	f3bf 8f4f 	dsb	sy
 801d67e:	617b      	str	r3, [r7, #20]
}
 801d680:	bf00      	nop
 801d682:	bf00      	nop
 801d684:	e7fd      	b.n	801d682 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d686:	2300      	movs	r3, #0
 801d688:	61fb      	str	r3, [r7, #28]
 801d68a:	e012      	b.n	801d6b2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801d68c:	68ba      	ldr	r2, [r7, #8]
 801d68e:	69fb      	ldr	r3, [r7, #28]
 801d690:	4413      	add	r3, r2
 801d692:	7819      	ldrb	r1, [r3, #0]
 801d694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d696:	69fb      	ldr	r3, [r7, #28]
 801d698:	4413      	add	r3, r2
 801d69a:	3334      	adds	r3, #52	@ 0x34
 801d69c:	460a      	mov	r2, r1
 801d69e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801d6a0:	68ba      	ldr	r2, [r7, #8]
 801d6a2:	69fb      	ldr	r3, [r7, #28]
 801d6a4:	4413      	add	r3, r2
 801d6a6:	781b      	ldrb	r3, [r3, #0]
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d006      	beq.n	801d6ba <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d6ac:	69fb      	ldr	r3, [r7, #28]
 801d6ae:	3301      	adds	r3, #1
 801d6b0:	61fb      	str	r3, [r7, #28]
 801d6b2:	69fb      	ldr	r3, [r7, #28]
 801d6b4:	2b0f      	cmp	r3, #15
 801d6b6:	d9e9      	bls.n	801d68c <prvInitialiseNewTask+0x60>
 801d6b8:	e000      	b.n	801d6bc <prvInitialiseNewTask+0x90>
		{
			break;
 801d6ba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801d6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6be:	2200      	movs	r2, #0
 801d6c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801d6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6c6:	2b37      	cmp	r3, #55	@ 0x37
 801d6c8:	d901      	bls.n	801d6ce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801d6ca:	2337      	movs	r3, #55	@ 0x37
 801d6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801d6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d6d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801d6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d6d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801d6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6dc:	2200      	movs	r2, #0
 801d6de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801d6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6e2:	3304      	adds	r3, #4
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f7fe fe3d 	bl	801c364 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801d6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6ec:	3318      	adds	r3, #24
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	f7fe fe38 	bl	801c364 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801d6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d6f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801d700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d702:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801d704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d708:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d70c:	2200      	movs	r2, #0
 801d70e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801d710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d712:	2200      	movs	r2, #0
 801d714:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801d718:	683a      	ldr	r2, [r7, #0]
 801d71a:	68f9      	ldr	r1, [r7, #12]
 801d71c:	69b8      	ldr	r0, [r7, #24]
 801d71e:	f001 fa29 	bl	801eb74 <pxPortInitialiseStack>
 801d722:	4602      	mov	r2, r0
 801d724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d726:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d002      	beq.n	801d734 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801d72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d732:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d734:	bf00      	nop
 801d736:	3720      	adds	r7, #32
 801d738:	46bd      	mov	sp, r7
 801d73a:	bd80      	pop	{r7, pc}

0801d73c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801d73c:	b580      	push	{r7, lr}
 801d73e:	b082      	sub	sp, #8
 801d740:	af00      	add	r7, sp, #0
 801d742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801d744:	f001 fb48 	bl	801edd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801d748:	4b2d      	ldr	r3, [pc, #180]	@ (801d800 <prvAddNewTaskToReadyList+0xc4>)
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	3301      	adds	r3, #1
 801d74e:	4a2c      	ldr	r2, [pc, #176]	@ (801d800 <prvAddNewTaskToReadyList+0xc4>)
 801d750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801d752:	4b2c      	ldr	r3, [pc, #176]	@ (801d804 <prvAddNewTaskToReadyList+0xc8>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	2b00      	cmp	r3, #0
 801d758:	d109      	bne.n	801d76e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801d75a:	4a2a      	ldr	r2, [pc, #168]	@ (801d804 <prvAddNewTaskToReadyList+0xc8>)
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801d760:	4b27      	ldr	r3, [pc, #156]	@ (801d800 <prvAddNewTaskToReadyList+0xc4>)
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	2b01      	cmp	r3, #1
 801d766:	d110      	bne.n	801d78a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801d768:	f000 fc34 	bl	801dfd4 <prvInitialiseTaskLists>
 801d76c:	e00d      	b.n	801d78a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801d76e:	4b26      	ldr	r3, [pc, #152]	@ (801d808 <prvAddNewTaskToReadyList+0xcc>)
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	2b00      	cmp	r3, #0
 801d774:	d109      	bne.n	801d78a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801d776:	4b23      	ldr	r3, [pc, #140]	@ (801d804 <prvAddNewTaskToReadyList+0xc8>)
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d780:	429a      	cmp	r2, r3
 801d782:	d802      	bhi.n	801d78a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801d784:	4a1f      	ldr	r2, [pc, #124]	@ (801d804 <prvAddNewTaskToReadyList+0xc8>)
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801d78a:	4b20      	ldr	r3, [pc, #128]	@ (801d80c <prvAddNewTaskToReadyList+0xd0>)
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	3301      	adds	r3, #1
 801d790:	4a1e      	ldr	r2, [pc, #120]	@ (801d80c <prvAddNewTaskToReadyList+0xd0>)
 801d792:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801d794:	4b1d      	ldr	r3, [pc, #116]	@ (801d80c <prvAddNewTaskToReadyList+0xd0>)
 801d796:	681a      	ldr	r2, [r3, #0]
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d7a0:	4b1b      	ldr	r3, [pc, #108]	@ (801d810 <prvAddNewTaskToReadyList+0xd4>)
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	d903      	bls.n	801d7b0 <prvAddNewTaskToReadyList+0x74>
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7ac:	4a18      	ldr	r2, [pc, #96]	@ (801d810 <prvAddNewTaskToReadyList+0xd4>)
 801d7ae:	6013      	str	r3, [r2, #0]
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d7b4:	4613      	mov	r3, r2
 801d7b6:	009b      	lsls	r3, r3, #2
 801d7b8:	4413      	add	r3, r2
 801d7ba:	009b      	lsls	r3, r3, #2
 801d7bc:	4a15      	ldr	r2, [pc, #84]	@ (801d814 <prvAddNewTaskToReadyList+0xd8>)
 801d7be:	441a      	add	r2, r3
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	3304      	adds	r3, #4
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	4610      	mov	r0, r2
 801d7c8:	f7fe fdd9 	bl	801c37e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801d7cc:	f001 fb36 	bl	801ee3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801d7d0:	4b0d      	ldr	r3, [pc, #52]	@ (801d808 <prvAddNewTaskToReadyList+0xcc>)
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d00e      	beq.n	801d7f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801d7d8:	4b0a      	ldr	r3, [pc, #40]	@ (801d804 <prvAddNewTaskToReadyList+0xc8>)
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7e2:	429a      	cmp	r2, r3
 801d7e4:	d207      	bcs.n	801d7f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801d7e6:	4b0c      	ldr	r3, [pc, #48]	@ (801d818 <prvAddNewTaskToReadyList+0xdc>)
 801d7e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d7ec:	601a      	str	r2, [r3, #0]
 801d7ee:	f3bf 8f4f 	dsb	sy
 801d7f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d7f6:	bf00      	nop
 801d7f8:	3708      	adds	r7, #8
 801d7fa:	46bd      	mov	sp, r7
 801d7fc:	bd80      	pop	{r7, pc}
 801d7fe:	bf00      	nop
 801d800:	2001d488 	.word	0x2001d488
 801d804:	2001cfb4 	.word	0x2001cfb4
 801d808:	2001d494 	.word	0x2001d494
 801d80c:	2001d4a4 	.word	0x2001d4a4
 801d810:	2001d490 	.word	0x2001d490
 801d814:	2001cfb8 	.word	0x2001cfb8
 801d818:	e000ed04 	.word	0xe000ed04

0801d81c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801d81c:	b580      	push	{r7, lr}
 801d81e:	b084      	sub	sp, #16
 801d820:	af00      	add	r7, sp, #0
 801d822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801d824:	2300      	movs	r3, #0
 801d826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d018      	beq.n	801d860 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801d82e:	4b14      	ldr	r3, [pc, #80]	@ (801d880 <vTaskDelay+0x64>)
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	2b00      	cmp	r3, #0
 801d834:	d00b      	beq.n	801d84e <vTaskDelay+0x32>
	__asm volatile
 801d836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d83a:	f383 8811 	msr	BASEPRI, r3
 801d83e:	f3bf 8f6f 	isb	sy
 801d842:	f3bf 8f4f 	dsb	sy
 801d846:	60bb      	str	r3, [r7, #8]
}
 801d848:	bf00      	nop
 801d84a:	bf00      	nop
 801d84c:	e7fd      	b.n	801d84a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801d84e:	f000 f883 	bl	801d958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801d852:	2100      	movs	r1, #0
 801d854:	6878      	ldr	r0, [r7, #4]
 801d856:	f000 fe19 	bl	801e48c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801d85a:	f000 f88b 	bl	801d974 <xTaskResumeAll>
 801d85e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	2b00      	cmp	r3, #0
 801d864:	d107      	bne.n	801d876 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801d866:	4b07      	ldr	r3, [pc, #28]	@ (801d884 <vTaskDelay+0x68>)
 801d868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d86c:	601a      	str	r2, [r3, #0]
 801d86e:	f3bf 8f4f 	dsb	sy
 801d872:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801d876:	bf00      	nop
 801d878:	3710      	adds	r7, #16
 801d87a:	46bd      	mov	sp, r7
 801d87c:	bd80      	pop	{r7, pc}
 801d87e:	bf00      	nop
 801d880:	2001d4b0 	.word	0x2001d4b0
 801d884:	e000ed04 	.word	0xe000ed04

0801d888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b08a      	sub	sp, #40	@ 0x28
 801d88c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801d88e:	2300      	movs	r3, #0
 801d890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801d892:	2300      	movs	r3, #0
 801d894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801d896:	463a      	mov	r2, r7
 801d898:	1d39      	adds	r1, r7, #4
 801d89a:	f107 0308 	add.w	r3, r7, #8
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7fe fd0c 	bl	801c2bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801d8a4:	6839      	ldr	r1, [r7, #0]
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	68ba      	ldr	r2, [r7, #8]
 801d8aa:	9202      	str	r2, [sp, #8]
 801d8ac:	9301      	str	r3, [sp, #4]
 801d8ae:	2300      	movs	r3, #0
 801d8b0:	9300      	str	r3, [sp, #0]
 801d8b2:	2300      	movs	r3, #0
 801d8b4:	460a      	mov	r2, r1
 801d8b6:	4922      	ldr	r1, [pc, #136]	@ (801d940 <vTaskStartScheduler+0xb8>)
 801d8b8:	4822      	ldr	r0, [pc, #136]	@ (801d944 <vTaskStartScheduler+0xbc>)
 801d8ba:	f7ff fe13 	bl	801d4e4 <xTaskCreateStatic>
 801d8be:	4603      	mov	r3, r0
 801d8c0:	4a21      	ldr	r2, [pc, #132]	@ (801d948 <vTaskStartScheduler+0xc0>)
 801d8c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801d8c4:	4b20      	ldr	r3, [pc, #128]	@ (801d948 <vTaskStartScheduler+0xc0>)
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d002      	beq.n	801d8d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801d8cc:	2301      	movs	r3, #1
 801d8ce:	617b      	str	r3, [r7, #20]
 801d8d0:	e001      	b.n	801d8d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801d8d2:	2300      	movs	r3, #0
 801d8d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801d8d6:	697b      	ldr	r3, [r7, #20]
 801d8d8:	2b01      	cmp	r3, #1
 801d8da:	d102      	bne.n	801d8e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801d8dc:	f000 fe2a 	bl	801e534 <xTimerCreateTimerTask>
 801d8e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	2b01      	cmp	r3, #1
 801d8e6:	d116      	bne.n	801d916 <vTaskStartScheduler+0x8e>
	__asm volatile
 801d8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d8ec:	f383 8811 	msr	BASEPRI, r3
 801d8f0:	f3bf 8f6f 	isb	sy
 801d8f4:	f3bf 8f4f 	dsb	sy
 801d8f8:	613b      	str	r3, [r7, #16]
}
 801d8fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801d8fc:	4b13      	ldr	r3, [pc, #76]	@ (801d94c <vTaskStartScheduler+0xc4>)
 801d8fe:	f04f 32ff 	mov.w	r2, #4294967295
 801d902:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801d904:	4b12      	ldr	r3, [pc, #72]	@ (801d950 <vTaskStartScheduler+0xc8>)
 801d906:	2201      	movs	r2, #1
 801d908:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801d90a:	4b12      	ldr	r3, [pc, #72]	@ (801d954 <vTaskStartScheduler+0xcc>)
 801d90c:	2200      	movs	r2, #0
 801d90e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801d910:	f001 f9be 	bl	801ec90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801d914:	e00f      	b.n	801d936 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801d916:	697b      	ldr	r3, [r7, #20]
 801d918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d91c:	d10b      	bne.n	801d936 <vTaskStartScheduler+0xae>
	__asm volatile
 801d91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d922:	f383 8811 	msr	BASEPRI, r3
 801d926:	f3bf 8f6f 	isb	sy
 801d92a:	f3bf 8f4f 	dsb	sy
 801d92e:	60fb      	str	r3, [r7, #12]
}
 801d930:	bf00      	nop
 801d932:	bf00      	nop
 801d934:	e7fd      	b.n	801d932 <vTaskStartScheduler+0xaa>
}
 801d936:	bf00      	nop
 801d938:	3718      	adds	r7, #24
 801d93a:	46bd      	mov	sp, r7
 801d93c:	bd80      	pop	{r7, pc}
 801d93e:	bf00      	nop
 801d940:	08027510 	.word	0x08027510
 801d944:	0801dfa5 	.word	0x0801dfa5
 801d948:	2001d4ac 	.word	0x2001d4ac
 801d94c:	2001d4a8 	.word	0x2001d4a8
 801d950:	2001d494 	.word	0x2001d494
 801d954:	2001d48c 	.word	0x2001d48c

0801d958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801d958:	b480      	push	{r7}
 801d95a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801d95c:	4b04      	ldr	r3, [pc, #16]	@ (801d970 <vTaskSuspendAll+0x18>)
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	3301      	adds	r3, #1
 801d962:	4a03      	ldr	r2, [pc, #12]	@ (801d970 <vTaskSuspendAll+0x18>)
 801d964:	6013      	str	r3, [r2, #0]
}
 801d966:	bf00      	nop
 801d968:	46bd      	mov	sp, r7
 801d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d96e:	4770      	bx	lr
 801d970:	2001d4b0 	.word	0x2001d4b0

0801d974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801d974:	b580      	push	{r7, lr}
 801d976:	b084      	sub	sp, #16
 801d978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801d97a:	2300      	movs	r3, #0
 801d97c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801d97e:	2300      	movs	r3, #0
 801d980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801d982:	4b42      	ldr	r3, [pc, #264]	@ (801da8c <xTaskResumeAll+0x118>)
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	2b00      	cmp	r3, #0
 801d988:	d10b      	bne.n	801d9a2 <xTaskResumeAll+0x2e>
	__asm volatile
 801d98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801d98e:	f383 8811 	msr	BASEPRI, r3
 801d992:	f3bf 8f6f 	isb	sy
 801d996:	f3bf 8f4f 	dsb	sy
 801d99a:	603b      	str	r3, [r7, #0]
}
 801d99c:	bf00      	nop
 801d99e:	bf00      	nop
 801d9a0:	e7fd      	b.n	801d99e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801d9a2:	f001 fa19 	bl	801edd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801d9a6:	4b39      	ldr	r3, [pc, #228]	@ (801da8c <xTaskResumeAll+0x118>)
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	3b01      	subs	r3, #1
 801d9ac:	4a37      	ldr	r2, [pc, #220]	@ (801da8c <xTaskResumeAll+0x118>)
 801d9ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d9b0:	4b36      	ldr	r3, [pc, #216]	@ (801da8c <xTaskResumeAll+0x118>)
 801d9b2:	681b      	ldr	r3, [r3, #0]
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d162      	bne.n	801da7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801d9b8:	4b35      	ldr	r3, [pc, #212]	@ (801da90 <xTaskResumeAll+0x11c>)
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d05e      	beq.n	801da7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801d9c0:	e02f      	b.n	801da22 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801d9c2:	4b34      	ldr	r3, [pc, #208]	@ (801da94 <xTaskResumeAll+0x120>)
 801d9c4:	68db      	ldr	r3, [r3, #12]
 801d9c6:	68db      	ldr	r3, [r3, #12]
 801d9c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	3318      	adds	r3, #24
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f7fe fd32 	bl	801c438 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	3304      	adds	r3, #4
 801d9d8:	4618      	mov	r0, r3
 801d9da:	f7fe fd2d 	bl	801c438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d9e2:	4b2d      	ldr	r3, [pc, #180]	@ (801da98 <xTaskResumeAll+0x124>)
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	429a      	cmp	r2, r3
 801d9e8:	d903      	bls.n	801d9f2 <xTaskResumeAll+0x7e>
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9ee:	4a2a      	ldr	r2, [pc, #168]	@ (801da98 <xTaskResumeAll+0x124>)
 801d9f0:	6013      	str	r3, [r2, #0]
 801d9f2:	68fb      	ldr	r3, [r7, #12]
 801d9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d9f6:	4613      	mov	r3, r2
 801d9f8:	009b      	lsls	r3, r3, #2
 801d9fa:	4413      	add	r3, r2
 801d9fc:	009b      	lsls	r3, r3, #2
 801d9fe:	4a27      	ldr	r2, [pc, #156]	@ (801da9c <xTaskResumeAll+0x128>)
 801da00:	441a      	add	r2, r3
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	3304      	adds	r3, #4
 801da06:	4619      	mov	r1, r3
 801da08:	4610      	mov	r0, r2
 801da0a:	f7fe fcb8 	bl	801c37e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801da12:	4b23      	ldr	r3, [pc, #140]	@ (801daa0 <xTaskResumeAll+0x12c>)
 801da14:	681b      	ldr	r3, [r3, #0]
 801da16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da18:	429a      	cmp	r2, r3
 801da1a:	d302      	bcc.n	801da22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801da1c:	4b21      	ldr	r3, [pc, #132]	@ (801daa4 <xTaskResumeAll+0x130>)
 801da1e:	2201      	movs	r2, #1
 801da20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801da22:	4b1c      	ldr	r3, [pc, #112]	@ (801da94 <xTaskResumeAll+0x120>)
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	2b00      	cmp	r3, #0
 801da28:	d1cb      	bne.n	801d9c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d001      	beq.n	801da34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801da30:	f000 fb6e 	bl	801e110 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801da34:	4b1c      	ldr	r3, [pc, #112]	@ (801daa8 <xTaskResumeAll+0x134>)
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d010      	beq.n	801da62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801da40:	f000 f846 	bl	801dad0 <xTaskIncrementTick>
 801da44:	4603      	mov	r3, r0
 801da46:	2b00      	cmp	r3, #0
 801da48:	d002      	beq.n	801da50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801da4a:	4b16      	ldr	r3, [pc, #88]	@ (801daa4 <xTaskResumeAll+0x130>)
 801da4c:	2201      	movs	r2, #1
 801da4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	3b01      	subs	r3, #1
 801da54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d1f1      	bne.n	801da40 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801da5c:	4b12      	ldr	r3, [pc, #72]	@ (801daa8 <xTaskResumeAll+0x134>)
 801da5e:	2200      	movs	r2, #0
 801da60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801da62:	4b10      	ldr	r3, [pc, #64]	@ (801daa4 <xTaskResumeAll+0x130>)
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	2b00      	cmp	r3, #0
 801da68:	d009      	beq.n	801da7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801da6a:	2301      	movs	r3, #1
 801da6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801da6e:	4b0f      	ldr	r3, [pc, #60]	@ (801daac <xTaskResumeAll+0x138>)
 801da70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801da74:	601a      	str	r2, [r3, #0]
 801da76:	f3bf 8f4f 	dsb	sy
 801da7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801da7e:	f001 f9dd 	bl	801ee3c <vPortExitCritical>

	return xAlreadyYielded;
 801da82:	68bb      	ldr	r3, [r7, #8]
}
 801da84:	4618      	mov	r0, r3
 801da86:	3710      	adds	r7, #16
 801da88:	46bd      	mov	sp, r7
 801da8a:	bd80      	pop	{r7, pc}
 801da8c:	2001d4b0 	.word	0x2001d4b0
 801da90:	2001d488 	.word	0x2001d488
 801da94:	2001d448 	.word	0x2001d448
 801da98:	2001d490 	.word	0x2001d490
 801da9c:	2001cfb8 	.word	0x2001cfb8
 801daa0:	2001cfb4 	.word	0x2001cfb4
 801daa4:	2001d49c 	.word	0x2001d49c
 801daa8:	2001d498 	.word	0x2001d498
 801daac:	e000ed04 	.word	0xe000ed04

0801dab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801dab0:	b480      	push	{r7}
 801dab2:	b083      	sub	sp, #12
 801dab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801dab6:	4b05      	ldr	r3, [pc, #20]	@ (801dacc <xTaskGetTickCount+0x1c>)
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801dabc:	687b      	ldr	r3, [r7, #4]
}
 801dabe:	4618      	mov	r0, r3
 801dac0:	370c      	adds	r7, #12
 801dac2:	46bd      	mov	sp, r7
 801dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac8:	4770      	bx	lr
 801daca:	bf00      	nop
 801dacc:	2001d48c 	.word	0x2001d48c

0801dad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801dad0:	b580      	push	{r7, lr}
 801dad2:	b086      	sub	sp, #24
 801dad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801dad6:	2300      	movs	r3, #0
 801dad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801dada:	4b52      	ldr	r3, [pc, #328]	@ (801dc24 <xTaskIncrementTick+0x154>)
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	f040 808f 	bne.w	801dc02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801dae4:	4b50      	ldr	r3, [pc, #320]	@ (801dc28 <xTaskIncrementTick+0x158>)
 801dae6:	681b      	ldr	r3, [r3, #0]
 801dae8:	3301      	adds	r3, #1
 801daea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801daec:	4a4e      	ldr	r2, [pc, #312]	@ (801dc28 <xTaskIncrementTick+0x158>)
 801daee:	693b      	ldr	r3, [r7, #16]
 801daf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801daf2:	693b      	ldr	r3, [r7, #16]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d121      	bne.n	801db3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801daf8:	4b4c      	ldr	r3, [pc, #304]	@ (801dc2c <xTaskIncrementTick+0x15c>)
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d00b      	beq.n	801db1a <xTaskIncrementTick+0x4a>
	__asm volatile
 801db02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801db06:	f383 8811 	msr	BASEPRI, r3
 801db0a:	f3bf 8f6f 	isb	sy
 801db0e:	f3bf 8f4f 	dsb	sy
 801db12:	603b      	str	r3, [r7, #0]
}
 801db14:	bf00      	nop
 801db16:	bf00      	nop
 801db18:	e7fd      	b.n	801db16 <xTaskIncrementTick+0x46>
 801db1a:	4b44      	ldr	r3, [pc, #272]	@ (801dc2c <xTaskIncrementTick+0x15c>)
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	60fb      	str	r3, [r7, #12]
 801db20:	4b43      	ldr	r3, [pc, #268]	@ (801dc30 <xTaskIncrementTick+0x160>)
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	4a41      	ldr	r2, [pc, #260]	@ (801dc2c <xTaskIncrementTick+0x15c>)
 801db26:	6013      	str	r3, [r2, #0]
 801db28:	4a41      	ldr	r2, [pc, #260]	@ (801dc30 <xTaskIncrementTick+0x160>)
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	6013      	str	r3, [r2, #0]
 801db2e:	4b41      	ldr	r3, [pc, #260]	@ (801dc34 <xTaskIncrementTick+0x164>)
 801db30:	681b      	ldr	r3, [r3, #0]
 801db32:	3301      	adds	r3, #1
 801db34:	4a3f      	ldr	r2, [pc, #252]	@ (801dc34 <xTaskIncrementTick+0x164>)
 801db36:	6013      	str	r3, [r2, #0]
 801db38:	f000 faea 	bl	801e110 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801db3c:	4b3e      	ldr	r3, [pc, #248]	@ (801dc38 <xTaskIncrementTick+0x168>)
 801db3e:	681b      	ldr	r3, [r3, #0]
 801db40:	693a      	ldr	r2, [r7, #16]
 801db42:	429a      	cmp	r2, r3
 801db44:	d34e      	bcc.n	801dbe4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801db46:	4b39      	ldr	r3, [pc, #228]	@ (801dc2c <xTaskIncrementTick+0x15c>)
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d101      	bne.n	801db54 <xTaskIncrementTick+0x84>
 801db50:	2301      	movs	r3, #1
 801db52:	e000      	b.n	801db56 <xTaskIncrementTick+0x86>
 801db54:	2300      	movs	r3, #0
 801db56:	2b00      	cmp	r3, #0
 801db58:	d004      	beq.n	801db64 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801db5a:	4b37      	ldr	r3, [pc, #220]	@ (801dc38 <xTaskIncrementTick+0x168>)
 801db5c:	f04f 32ff 	mov.w	r2, #4294967295
 801db60:	601a      	str	r2, [r3, #0]
					break;
 801db62:	e03f      	b.n	801dbe4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801db64:	4b31      	ldr	r3, [pc, #196]	@ (801dc2c <xTaskIncrementTick+0x15c>)
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	68db      	ldr	r3, [r3, #12]
 801db6a:	68db      	ldr	r3, [r3, #12]
 801db6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801db6e:	68bb      	ldr	r3, [r7, #8]
 801db70:	685b      	ldr	r3, [r3, #4]
 801db72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801db74:	693a      	ldr	r2, [r7, #16]
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	429a      	cmp	r2, r3
 801db7a:	d203      	bcs.n	801db84 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801db7c:	4a2e      	ldr	r2, [pc, #184]	@ (801dc38 <xTaskIncrementTick+0x168>)
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	6013      	str	r3, [r2, #0]
						break;
 801db82:	e02f      	b.n	801dbe4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801db84:	68bb      	ldr	r3, [r7, #8]
 801db86:	3304      	adds	r3, #4
 801db88:	4618      	mov	r0, r3
 801db8a:	f7fe fc55 	bl	801c438 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801db8e:	68bb      	ldr	r3, [r7, #8]
 801db90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db92:	2b00      	cmp	r3, #0
 801db94:	d004      	beq.n	801dba0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801db96:	68bb      	ldr	r3, [r7, #8]
 801db98:	3318      	adds	r3, #24
 801db9a:	4618      	mov	r0, r3
 801db9c:	f7fe fc4c 	bl	801c438 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801dba0:	68bb      	ldr	r3, [r7, #8]
 801dba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dba4:	4b25      	ldr	r3, [pc, #148]	@ (801dc3c <xTaskIncrementTick+0x16c>)
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	429a      	cmp	r2, r3
 801dbaa:	d903      	bls.n	801dbb4 <xTaskIncrementTick+0xe4>
 801dbac:	68bb      	ldr	r3, [r7, #8]
 801dbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbb0:	4a22      	ldr	r2, [pc, #136]	@ (801dc3c <xTaskIncrementTick+0x16c>)
 801dbb2:	6013      	str	r3, [r2, #0]
 801dbb4:	68bb      	ldr	r3, [r7, #8]
 801dbb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dbb8:	4613      	mov	r3, r2
 801dbba:	009b      	lsls	r3, r3, #2
 801dbbc:	4413      	add	r3, r2
 801dbbe:	009b      	lsls	r3, r3, #2
 801dbc0:	4a1f      	ldr	r2, [pc, #124]	@ (801dc40 <xTaskIncrementTick+0x170>)
 801dbc2:	441a      	add	r2, r3
 801dbc4:	68bb      	ldr	r3, [r7, #8]
 801dbc6:	3304      	adds	r3, #4
 801dbc8:	4619      	mov	r1, r3
 801dbca:	4610      	mov	r0, r2
 801dbcc:	f7fe fbd7 	bl	801c37e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801dbd0:	68bb      	ldr	r3, [r7, #8]
 801dbd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dbd4:	4b1b      	ldr	r3, [pc, #108]	@ (801dc44 <xTaskIncrementTick+0x174>)
 801dbd6:	681b      	ldr	r3, [r3, #0]
 801dbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbda:	429a      	cmp	r2, r3
 801dbdc:	d3b3      	bcc.n	801db46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801dbde:	2301      	movs	r3, #1
 801dbe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801dbe2:	e7b0      	b.n	801db46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801dbe4:	4b17      	ldr	r3, [pc, #92]	@ (801dc44 <xTaskIncrementTick+0x174>)
 801dbe6:	681b      	ldr	r3, [r3, #0]
 801dbe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dbea:	4915      	ldr	r1, [pc, #84]	@ (801dc40 <xTaskIncrementTick+0x170>)
 801dbec:	4613      	mov	r3, r2
 801dbee:	009b      	lsls	r3, r3, #2
 801dbf0:	4413      	add	r3, r2
 801dbf2:	009b      	lsls	r3, r3, #2
 801dbf4:	440b      	add	r3, r1
 801dbf6:	681b      	ldr	r3, [r3, #0]
 801dbf8:	2b01      	cmp	r3, #1
 801dbfa:	d907      	bls.n	801dc0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801dbfc:	2301      	movs	r3, #1
 801dbfe:	617b      	str	r3, [r7, #20]
 801dc00:	e004      	b.n	801dc0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801dc02:	4b11      	ldr	r3, [pc, #68]	@ (801dc48 <xTaskIncrementTick+0x178>)
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	3301      	adds	r3, #1
 801dc08:	4a0f      	ldr	r2, [pc, #60]	@ (801dc48 <xTaskIncrementTick+0x178>)
 801dc0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801dc0c:	4b0f      	ldr	r3, [pc, #60]	@ (801dc4c <xTaskIncrementTick+0x17c>)
 801dc0e:	681b      	ldr	r3, [r3, #0]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d001      	beq.n	801dc18 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 801dc14:	2301      	movs	r3, #1
 801dc16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801dc18:	697b      	ldr	r3, [r7, #20]
}
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	3718      	adds	r7, #24
 801dc1e:	46bd      	mov	sp, r7
 801dc20:	bd80      	pop	{r7, pc}
 801dc22:	bf00      	nop
 801dc24:	2001d4b0 	.word	0x2001d4b0
 801dc28:	2001d48c 	.word	0x2001d48c
 801dc2c:	2001d440 	.word	0x2001d440
 801dc30:	2001d444 	.word	0x2001d444
 801dc34:	2001d4a0 	.word	0x2001d4a0
 801dc38:	2001d4a8 	.word	0x2001d4a8
 801dc3c:	2001d490 	.word	0x2001d490
 801dc40:	2001cfb8 	.word	0x2001cfb8
 801dc44:	2001cfb4 	.word	0x2001cfb4
 801dc48:	2001d498 	.word	0x2001d498
 801dc4c:	2001d49c 	.word	0x2001d49c

0801dc50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b084      	sub	sp, #16
 801dc54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801dc56:	4b30      	ldr	r3, [pc, #192]	@ (801dd18 <vTaskSwitchContext+0xc8>)
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d003      	beq.n	801dc66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801dc5e:	4b2f      	ldr	r3, [pc, #188]	@ (801dd1c <vTaskSwitchContext+0xcc>)
 801dc60:	2201      	movs	r2, #1
 801dc62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801dc64:	e053      	b.n	801dd0e <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 801dc66:	4b2d      	ldr	r3, [pc, #180]	@ (801dd1c <vTaskSwitchContext+0xcc>)
 801dc68:	2200      	movs	r2, #0
 801dc6a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801dc6c:	4b2c      	ldr	r3, [pc, #176]	@ (801dd20 <vTaskSwitchContext+0xd0>)
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	681a      	ldr	r2, [r3, #0]
 801dc72:	4b2b      	ldr	r3, [pc, #172]	@ (801dd20 <vTaskSwitchContext+0xd0>)
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc78:	429a      	cmp	r2, r3
 801dc7a:	d808      	bhi.n	801dc8e <vTaskSwitchContext+0x3e>
 801dc7c:	4b28      	ldr	r3, [pc, #160]	@ (801dd20 <vTaskSwitchContext+0xd0>)
 801dc7e:	681a      	ldr	r2, [r3, #0]
 801dc80:	4b27      	ldr	r3, [pc, #156]	@ (801dd20 <vTaskSwitchContext+0xd0>)
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	3334      	adds	r3, #52	@ 0x34
 801dc86:	4619      	mov	r1, r3
 801dc88:	4610      	mov	r0, r2
 801dc8a:	f7fe fb0b 	bl	801c2a4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801dc8e:	4b25      	ldr	r3, [pc, #148]	@ (801dd24 <vTaskSwitchContext+0xd4>)
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	60fb      	str	r3, [r7, #12]
 801dc94:	e011      	b.n	801dcba <vTaskSwitchContext+0x6a>
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d10b      	bne.n	801dcb4 <vTaskSwitchContext+0x64>
	__asm volatile
 801dc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801dca0:	f383 8811 	msr	BASEPRI, r3
 801dca4:	f3bf 8f6f 	isb	sy
 801dca8:	f3bf 8f4f 	dsb	sy
 801dcac:	607b      	str	r3, [r7, #4]
}
 801dcae:	bf00      	nop
 801dcb0:	bf00      	nop
 801dcb2:	e7fd      	b.n	801dcb0 <vTaskSwitchContext+0x60>
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	3b01      	subs	r3, #1
 801dcb8:	60fb      	str	r3, [r7, #12]
 801dcba:	491b      	ldr	r1, [pc, #108]	@ (801dd28 <vTaskSwitchContext+0xd8>)
 801dcbc:	68fa      	ldr	r2, [r7, #12]
 801dcbe:	4613      	mov	r3, r2
 801dcc0:	009b      	lsls	r3, r3, #2
 801dcc2:	4413      	add	r3, r2
 801dcc4:	009b      	lsls	r3, r3, #2
 801dcc6:	440b      	add	r3, r1
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d0e3      	beq.n	801dc96 <vTaskSwitchContext+0x46>
 801dcce:	68fa      	ldr	r2, [r7, #12]
 801dcd0:	4613      	mov	r3, r2
 801dcd2:	009b      	lsls	r3, r3, #2
 801dcd4:	4413      	add	r3, r2
 801dcd6:	009b      	lsls	r3, r3, #2
 801dcd8:	4a13      	ldr	r2, [pc, #76]	@ (801dd28 <vTaskSwitchContext+0xd8>)
 801dcda:	4413      	add	r3, r2
 801dcdc:	60bb      	str	r3, [r7, #8]
 801dcde:	68bb      	ldr	r3, [r7, #8]
 801dce0:	685b      	ldr	r3, [r3, #4]
 801dce2:	685a      	ldr	r2, [r3, #4]
 801dce4:	68bb      	ldr	r3, [r7, #8]
 801dce6:	605a      	str	r2, [r3, #4]
 801dce8:	68bb      	ldr	r3, [r7, #8]
 801dcea:	685a      	ldr	r2, [r3, #4]
 801dcec:	68bb      	ldr	r3, [r7, #8]
 801dcee:	3308      	adds	r3, #8
 801dcf0:	429a      	cmp	r2, r3
 801dcf2:	d104      	bne.n	801dcfe <vTaskSwitchContext+0xae>
 801dcf4:	68bb      	ldr	r3, [r7, #8]
 801dcf6:	685b      	ldr	r3, [r3, #4]
 801dcf8:	685a      	ldr	r2, [r3, #4]
 801dcfa:	68bb      	ldr	r3, [r7, #8]
 801dcfc:	605a      	str	r2, [r3, #4]
 801dcfe:	68bb      	ldr	r3, [r7, #8]
 801dd00:	685b      	ldr	r3, [r3, #4]
 801dd02:	68db      	ldr	r3, [r3, #12]
 801dd04:	4a06      	ldr	r2, [pc, #24]	@ (801dd20 <vTaskSwitchContext+0xd0>)
 801dd06:	6013      	str	r3, [r2, #0]
 801dd08:	4a06      	ldr	r2, [pc, #24]	@ (801dd24 <vTaskSwitchContext+0xd4>)
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	6013      	str	r3, [r2, #0]
}
 801dd0e:	bf00      	nop
 801dd10:	3710      	adds	r7, #16
 801dd12:	46bd      	mov	sp, r7
 801dd14:	bd80      	pop	{r7, pc}
 801dd16:	bf00      	nop
 801dd18:	2001d4b0 	.word	0x2001d4b0
 801dd1c:	2001d49c 	.word	0x2001d49c
 801dd20:	2001cfb4 	.word	0x2001cfb4
 801dd24:	2001d490 	.word	0x2001d490
 801dd28:	2001cfb8 	.word	0x2001cfb8

0801dd2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801dd2c:	b580      	push	{r7, lr}
 801dd2e:	b084      	sub	sp, #16
 801dd30:	af00      	add	r7, sp, #0
 801dd32:	6078      	str	r0, [r7, #4]
 801dd34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d10b      	bne.n	801dd54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801dd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801dd40:	f383 8811 	msr	BASEPRI, r3
 801dd44:	f3bf 8f6f 	isb	sy
 801dd48:	f3bf 8f4f 	dsb	sy
 801dd4c:	60fb      	str	r3, [r7, #12]
}
 801dd4e:	bf00      	nop
 801dd50:	bf00      	nop
 801dd52:	e7fd      	b.n	801dd50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801dd54:	4b07      	ldr	r3, [pc, #28]	@ (801dd74 <vTaskPlaceOnEventList+0x48>)
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	3318      	adds	r3, #24
 801dd5a:	4619      	mov	r1, r3
 801dd5c:	6878      	ldr	r0, [r7, #4]
 801dd5e:	f7fe fb32 	bl	801c3c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801dd62:	2101      	movs	r1, #1
 801dd64:	6838      	ldr	r0, [r7, #0]
 801dd66:	f000 fb91 	bl	801e48c <prvAddCurrentTaskToDelayedList>
}
 801dd6a:	bf00      	nop
 801dd6c:	3710      	adds	r7, #16
 801dd6e:	46bd      	mov	sp, r7
 801dd70:	bd80      	pop	{r7, pc}
 801dd72:	bf00      	nop
 801dd74:	2001cfb4 	.word	0x2001cfb4

0801dd78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	b086      	sub	sp, #24
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	60f8      	str	r0, [r7, #12]
 801dd80:	60b9      	str	r1, [r7, #8]
 801dd82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d10b      	bne.n	801dda2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801dd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801dd8e:	f383 8811 	msr	BASEPRI, r3
 801dd92:	f3bf 8f6f 	isb	sy
 801dd96:	f3bf 8f4f 	dsb	sy
 801dd9a:	617b      	str	r3, [r7, #20]
}
 801dd9c:	bf00      	nop
 801dd9e:	bf00      	nop
 801dda0:	e7fd      	b.n	801dd9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801dda2:	4b0a      	ldr	r3, [pc, #40]	@ (801ddcc <vTaskPlaceOnEventListRestricted+0x54>)
 801dda4:	681b      	ldr	r3, [r3, #0]
 801dda6:	3318      	adds	r3, #24
 801dda8:	4619      	mov	r1, r3
 801ddaa:	68f8      	ldr	r0, [r7, #12]
 801ddac:	f7fe fae7 	bl	801c37e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d002      	beq.n	801ddbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801ddb6:	f04f 33ff 	mov.w	r3, #4294967295
 801ddba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801ddbc:	6879      	ldr	r1, [r7, #4]
 801ddbe:	68b8      	ldr	r0, [r7, #8]
 801ddc0:	f000 fb64 	bl	801e48c <prvAddCurrentTaskToDelayedList>
	}
 801ddc4:	bf00      	nop
 801ddc6:	3718      	adds	r7, #24
 801ddc8:	46bd      	mov	sp, r7
 801ddca:	bd80      	pop	{r7, pc}
 801ddcc:	2001cfb4 	.word	0x2001cfb4

0801ddd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801ddd0:	b580      	push	{r7, lr}
 801ddd2:	b086      	sub	sp, #24
 801ddd4:	af00      	add	r7, sp, #0
 801ddd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	68db      	ldr	r3, [r3, #12]
 801dddc:	68db      	ldr	r3, [r3, #12]
 801ddde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801dde0:	693b      	ldr	r3, [r7, #16]
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d10b      	bne.n	801ddfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801dde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ddea:	f383 8811 	msr	BASEPRI, r3
 801ddee:	f3bf 8f6f 	isb	sy
 801ddf2:	f3bf 8f4f 	dsb	sy
 801ddf6:	60fb      	str	r3, [r7, #12]
}
 801ddf8:	bf00      	nop
 801ddfa:	bf00      	nop
 801ddfc:	e7fd      	b.n	801ddfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801ddfe:	693b      	ldr	r3, [r7, #16]
 801de00:	3318      	adds	r3, #24
 801de02:	4618      	mov	r0, r3
 801de04:	f7fe fb18 	bl	801c438 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801de08:	4b1d      	ldr	r3, [pc, #116]	@ (801de80 <xTaskRemoveFromEventList+0xb0>)
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d11d      	bne.n	801de4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801de10:	693b      	ldr	r3, [r7, #16]
 801de12:	3304      	adds	r3, #4
 801de14:	4618      	mov	r0, r3
 801de16:	f7fe fb0f 	bl	801c438 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801de1a:	693b      	ldr	r3, [r7, #16]
 801de1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801de1e:	4b19      	ldr	r3, [pc, #100]	@ (801de84 <xTaskRemoveFromEventList+0xb4>)
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	429a      	cmp	r2, r3
 801de24:	d903      	bls.n	801de2e <xTaskRemoveFromEventList+0x5e>
 801de26:	693b      	ldr	r3, [r7, #16]
 801de28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de2a:	4a16      	ldr	r2, [pc, #88]	@ (801de84 <xTaskRemoveFromEventList+0xb4>)
 801de2c:	6013      	str	r3, [r2, #0]
 801de2e:	693b      	ldr	r3, [r7, #16]
 801de30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801de32:	4613      	mov	r3, r2
 801de34:	009b      	lsls	r3, r3, #2
 801de36:	4413      	add	r3, r2
 801de38:	009b      	lsls	r3, r3, #2
 801de3a:	4a13      	ldr	r2, [pc, #76]	@ (801de88 <xTaskRemoveFromEventList+0xb8>)
 801de3c:	441a      	add	r2, r3
 801de3e:	693b      	ldr	r3, [r7, #16]
 801de40:	3304      	adds	r3, #4
 801de42:	4619      	mov	r1, r3
 801de44:	4610      	mov	r0, r2
 801de46:	f7fe fa9a 	bl	801c37e <vListInsertEnd>
 801de4a:	e005      	b.n	801de58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801de4c:	693b      	ldr	r3, [r7, #16]
 801de4e:	3318      	adds	r3, #24
 801de50:	4619      	mov	r1, r3
 801de52:	480e      	ldr	r0, [pc, #56]	@ (801de8c <xTaskRemoveFromEventList+0xbc>)
 801de54:	f7fe fa93 	bl	801c37e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801de58:	693b      	ldr	r3, [r7, #16]
 801de5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801de5c:	4b0c      	ldr	r3, [pc, #48]	@ (801de90 <xTaskRemoveFromEventList+0xc0>)
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de62:	429a      	cmp	r2, r3
 801de64:	d905      	bls.n	801de72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801de66:	2301      	movs	r3, #1
 801de68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801de6a:	4b0a      	ldr	r3, [pc, #40]	@ (801de94 <xTaskRemoveFromEventList+0xc4>)
 801de6c:	2201      	movs	r2, #1
 801de6e:	601a      	str	r2, [r3, #0]
 801de70:	e001      	b.n	801de76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801de72:	2300      	movs	r3, #0
 801de74:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 801de76:	697b      	ldr	r3, [r7, #20]
}
 801de78:	4618      	mov	r0, r3
 801de7a:	3718      	adds	r7, #24
 801de7c:	46bd      	mov	sp, r7
 801de7e:	bd80      	pop	{r7, pc}
 801de80:	2001d4b0 	.word	0x2001d4b0
 801de84:	2001d490 	.word	0x2001d490
 801de88:	2001cfb8 	.word	0x2001cfb8
 801de8c:	2001d448 	.word	0x2001d448
 801de90:	2001cfb4 	.word	0x2001cfb4
 801de94:	2001d49c 	.word	0x2001d49c

0801de98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801de98:	b480      	push	{r7}
 801de9a:	b083      	sub	sp, #12
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801dea0:	4b06      	ldr	r3, [pc, #24]	@ (801debc <vTaskInternalSetTimeOutState+0x24>)
 801dea2:	681a      	ldr	r2, [r3, #0]
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801dea8:	4b05      	ldr	r3, [pc, #20]	@ (801dec0 <vTaskInternalSetTimeOutState+0x28>)
 801deaa:	681a      	ldr	r2, [r3, #0]
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	605a      	str	r2, [r3, #4]
}
 801deb0:	bf00      	nop
 801deb2:	370c      	adds	r7, #12
 801deb4:	46bd      	mov	sp, r7
 801deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deba:	4770      	bx	lr
 801debc:	2001d4a0 	.word	0x2001d4a0
 801dec0:	2001d48c 	.word	0x2001d48c

0801dec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801dec4:	b580      	push	{r7, lr}
 801dec6:	b088      	sub	sp, #32
 801dec8:	af00      	add	r7, sp, #0
 801deca:	6078      	str	r0, [r7, #4]
 801decc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d10b      	bne.n	801deec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801ded4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ded8:	f383 8811 	msr	BASEPRI, r3
 801dedc:	f3bf 8f6f 	isb	sy
 801dee0:	f3bf 8f4f 	dsb	sy
 801dee4:	613b      	str	r3, [r7, #16]
}
 801dee6:	bf00      	nop
 801dee8:	bf00      	nop
 801deea:	e7fd      	b.n	801dee8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801deec:	683b      	ldr	r3, [r7, #0]
 801deee:	2b00      	cmp	r3, #0
 801def0:	d10b      	bne.n	801df0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801def2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801def6:	f383 8811 	msr	BASEPRI, r3
 801defa:	f3bf 8f6f 	isb	sy
 801defe:	f3bf 8f4f 	dsb	sy
 801df02:	60fb      	str	r3, [r7, #12]
}
 801df04:	bf00      	nop
 801df06:	bf00      	nop
 801df08:	e7fd      	b.n	801df06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801df0a:	f000 ff65 	bl	801edd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801df0e:	4b1d      	ldr	r3, [pc, #116]	@ (801df84 <xTaskCheckForTimeOut+0xc0>)
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	685b      	ldr	r3, [r3, #4]
 801df18:	69ba      	ldr	r2, [r7, #24]
 801df1a:	1ad3      	subs	r3, r2, r3
 801df1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801df1e:	683b      	ldr	r3, [r7, #0]
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	f1b3 3fff 	cmp.w	r3, #4294967295
 801df26:	d102      	bne.n	801df2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801df28:	2300      	movs	r3, #0
 801df2a:	61fb      	str	r3, [r7, #28]
 801df2c:	e023      	b.n	801df76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	681a      	ldr	r2, [r3, #0]
 801df32:	4b15      	ldr	r3, [pc, #84]	@ (801df88 <xTaskCheckForTimeOut+0xc4>)
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	429a      	cmp	r2, r3
 801df38:	d007      	beq.n	801df4a <xTaskCheckForTimeOut+0x86>
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	685b      	ldr	r3, [r3, #4]
 801df3e:	69ba      	ldr	r2, [r7, #24]
 801df40:	429a      	cmp	r2, r3
 801df42:	d302      	bcc.n	801df4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801df44:	2301      	movs	r3, #1
 801df46:	61fb      	str	r3, [r7, #28]
 801df48:	e015      	b.n	801df76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801df4a:	683b      	ldr	r3, [r7, #0]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	697a      	ldr	r2, [r7, #20]
 801df50:	429a      	cmp	r2, r3
 801df52:	d20b      	bcs.n	801df6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801df54:	683b      	ldr	r3, [r7, #0]
 801df56:	681a      	ldr	r2, [r3, #0]
 801df58:	697b      	ldr	r3, [r7, #20]
 801df5a:	1ad2      	subs	r2, r2, r3
 801df5c:	683b      	ldr	r3, [r7, #0]
 801df5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801df60:	6878      	ldr	r0, [r7, #4]
 801df62:	f7ff ff99 	bl	801de98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801df66:	2300      	movs	r3, #0
 801df68:	61fb      	str	r3, [r7, #28]
 801df6a:	e004      	b.n	801df76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801df6c:	683b      	ldr	r3, [r7, #0]
 801df6e:	2200      	movs	r2, #0
 801df70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801df72:	2301      	movs	r3, #1
 801df74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801df76:	f000 ff61 	bl	801ee3c <vPortExitCritical>

	return xReturn;
 801df7a:	69fb      	ldr	r3, [r7, #28]
}
 801df7c:	4618      	mov	r0, r3
 801df7e:	3720      	adds	r7, #32
 801df80:	46bd      	mov	sp, r7
 801df82:	bd80      	pop	{r7, pc}
 801df84:	2001d48c 	.word	0x2001d48c
 801df88:	2001d4a0 	.word	0x2001d4a0

0801df8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801df8c:	b480      	push	{r7}
 801df8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801df90:	4b03      	ldr	r3, [pc, #12]	@ (801dfa0 <vTaskMissedYield+0x14>)
 801df92:	2201      	movs	r2, #1
 801df94:	601a      	str	r2, [r3, #0]
}
 801df96:	bf00      	nop
 801df98:	46bd      	mov	sp, r7
 801df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df9e:	4770      	bx	lr
 801dfa0:	2001d49c 	.word	0x2001d49c

0801dfa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801dfa4:	b580      	push	{r7, lr}
 801dfa6:	b082      	sub	sp, #8
 801dfa8:	af00      	add	r7, sp, #0
 801dfaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801dfac:	f000 f852 	bl	801e054 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801dfb0:	4b06      	ldr	r3, [pc, #24]	@ (801dfcc <prvIdleTask+0x28>)
 801dfb2:	681b      	ldr	r3, [r3, #0]
 801dfb4:	2b01      	cmp	r3, #1
 801dfb6:	d9f9      	bls.n	801dfac <prvIdleTask+0x8>
			{
				taskYIELD();
 801dfb8:	4b05      	ldr	r3, [pc, #20]	@ (801dfd0 <prvIdleTask+0x2c>)
 801dfba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801dfbe:	601a      	str	r2, [r3, #0]
 801dfc0:	f3bf 8f4f 	dsb	sy
 801dfc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801dfc8:	e7f0      	b.n	801dfac <prvIdleTask+0x8>
 801dfca:	bf00      	nop
 801dfcc:	2001cfb8 	.word	0x2001cfb8
 801dfd0:	e000ed04 	.word	0xe000ed04

0801dfd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b082      	sub	sp, #8
 801dfd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801dfda:	2300      	movs	r3, #0
 801dfdc:	607b      	str	r3, [r7, #4]
 801dfde:	e00c      	b.n	801dffa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801dfe0:	687a      	ldr	r2, [r7, #4]
 801dfe2:	4613      	mov	r3, r2
 801dfe4:	009b      	lsls	r3, r3, #2
 801dfe6:	4413      	add	r3, r2
 801dfe8:	009b      	lsls	r3, r3, #2
 801dfea:	4a12      	ldr	r2, [pc, #72]	@ (801e034 <prvInitialiseTaskLists+0x60>)
 801dfec:	4413      	add	r3, r2
 801dfee:	4618      	mov	r0, r3
 801dff0:	f7fe f998 	bl	801c324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	3301      	adds	r3, #1
 801dff8:	607b      	str	r3, [r7, #4]
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	2b37      	cmp	r3, #55	@ 0x37
 801dffe:	d9ef      	bls.n	801dfe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801e000:	480d      	ldr	r0, [pc, #52]	@ (801e038 <prvInitialiseTaskLists+0x64>)
 801e002:	f7fe f98f 	bl	801c324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801e006:	480d      	ldr	r0, [pc, #52]	@ (801e03c <prvInitialiseTaskLists+0x68>)
 801e008:	f7fe f98c 	bl	801c324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801e00c:	480c      	ldr	r0, [pc, #48]	@ (801e040 <prvInitialiseTaskLists+0x6c>)
 801e00e:	f7fe f989 	bl	801c324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801e012:	480c      	ldr	r0, [pc, #48]	@ (801e044 <prvInitialiseTaskLists+0x70>)
 801e014:	f7fe f986 	bl	801c324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801e018:	480b      	ldr	r0, [pc, #44]	@ (801e048 <prvInitialiseTaskLists+0x74>)
 801e01a:	f7fe f983 	bl	801c324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801e01e:	4b0b      	ldr	r3, [pc, #44]	@ (801e04c <prvInitialiseTaskLists+0x78>)
 801e020:	4a05      	ldr	r2, [pc, #20]	@ (801e038 <prvInitialiseTaskLists+0x64>)
 801e022:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801e024:	4b0a      	ldr	r3, [pc, #40]	@ (801e050 <prvInitialiseTaskLists+0x7c>)
 801e026:	4a05      	ldr	r2, [pc, #20]	@ (801e03c <prvInitialiseTaskLists+0x68>)
 801e028:	601a      	str	r2, [r3, #0]
}
 801e02a:	bf00      	nop
 801e02c:	3708      	adds	r7, #8
 801e02e:	46bd      	mov	sp, r7
 801e030:	bd80      	pop	{r7, pc}
 801e032:	bf00      	nop
 801e034:	2001cfb8 	.word	0x2001cfb8
 801e038:	2001d418 	.word	0x2001d418
 801e03c:	2001d42c 	.word	0x2001d42c
 801e040:	2001d448 	.word	0x2001d448
 801e044:	2001d45c 	.word	0x2001d45c
 801e048:	2001d474 	.word	0x2001d474
 801e04c:	2001d440 	.word	0x2001d440
 801e050:	2001d444 	.word	0x2001d444

0801e054 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801e054:	b580      	push	{r7, lr}
 801e056:	b082      	sub	sp, #8
 801e058:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801e05a:	e019      	b.n	801e090 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801e05c:	f000 febc 	bl	801edd8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801e060:	4b10      	ldr	r3, [pc, #64]	@ (801e0a4 <prvCheckTasksWaitingTermination+0x50>)
 801e062:	68db      	ldr	r3, [r3, #12]
 801e064:	68db      	ldr	r3, [r3, #12]
 801e066:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	3304      	adds	r3, #4
 801e06c:	4618      	mov	r0, r3
 801e06e:	f7fe f9e3 	bl	801c438 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801e072:	4b0d      	ldr	r3, [pc, #52]	@ (801e0a8 <prvCheckTasksWaitingTermination+0x54>)
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	3b01      	subs	r3, #1
 801e078:	4a0b      	ldr	r2, [pc, #44]	@ (801e0a8 <prvCheckTasksWaitingTermination+0x54>)
 801e07a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801e07c:	4b0b      	ldr	r3, [pc, #44]	@ (801e0ac <prvCheckTasksWaitingTermination+0x58>)
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	3b01      	subs	r3, #1
 801e082:	4a0a      	ldr	r2, [pc, #40]	@ (801e0ac <prvCheckTasksWaitingTermination+0x58>)
 801e084:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801e086:	f000 fed9 	bl	801ee3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801e08a:	6878      	ldr	r0, [r7, #4]
 801e08c:	f000 f810 	bl	801e0b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801e090:	4b06      	ldr	r3, [pc, #24]	@ (801e0ac <prvCheckTasksWaitingTermination+0x58>)
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d1e1      	bne.n	801e05c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801e098:	bf00      	nop
 801e09a:	bf00      	nop
 801e09c:	3708      	adds	r7, #8
 801e09e:	46bd      	mov	sp, r7
 801e0a0:	bd80      	pop	{r7, pc}
 801e0a2:	bf00      	nop
 801e0a4:	2001d45c 	.word	0x2001d45c
 801e0a8:	2001d488 	.word	0x2001d488
 801e0ac:	2001d470 	.word	0x2001d470

0801e0b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801e0b0:	b580      	push	{r7, lr}
 801e0b2:	b084      	sub	sp, #16
 801e0b4:	af00      	add	r7, sp, #0
 801e0b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d108      	bne.n	801e0d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	f001 f846 	bl	801f158 <vPortFree>
				vPortFree( pxTCB );
 801e0cc:	6878      	ldr	r0, [r7, #4]
 801e0ce:	f001 f843 	bl	801f158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801e0d2:	e019      	b.n	801e108 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801e0da:	2b01      	cmp	r3, #1
 801e0dc:	d103      	bne.n	801e0e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801e0de:	6878      	ldr	r0, [r7, #4]
 801e0e0:	f001 f83a 	bl	801f158 <vPortFree>
	}
 801e0e4:	e010      	b.n	801e108 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801e0ec:	2b02      	cmp	r3, #2
 801e0ee:	d00b      	beq.n	801e108 <prvDeleteTCB+0x58>
	__asm volatile
 801e0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e0f4:	f383 8811 	msr	BASEPRI, r3
 801e0f8:	f3bf 8f6f 	isb	sy
 801e0fc:	f3bf 8f4f 	dsb	sy
 801e100:	60fb      	str	r3, [r7, #12]
}
 801e102:	bf00      	nop
 801e104:	bf00      	nop
 801e106:	e7fd      	b.n	801e104 <prvDeleteTCB+0x54>
	}
 801e108:	bf00      	nop
 801e10a:	3710      	adds	r7, #16
 801e10c:	46bd      	mov	sp, r7
 801e10e:	bd80      	pop	{r7, pc}

0801e110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801e110:	b480      	push	{r7}
 801e112:	b083      	sub	sp, #12
 801e114:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801e116:	4b0f      	ldr	r3, [pc, #60]	@ (801e154 <prvResetNextTaskUnblockTime+0x44>)
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d101      	bne.n	801e124 <prvResetNextTaskUnblockTime+0x14>
 801e120:	2301      	movs	r3, #1
 801e122:	e000      	b.n	801e126 <prvResetNextTaskUnblockTime+0x16>
 801e124:	2300      	movs	r3, #0
 801e126:	2b00      	cmp	r3, #0
 801e128:	d004      	beq.n	801e134 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801e12a:	4b0b      	ldr	r3, [pc, #44]	@ (801e158 <prvResetNextTaskUnblockTime+0x48>)
 801e12c:	f04f 32ff 	mov.w	r2, #4294967295
 801e130:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801e132:	e008      	b.n	801e146 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801e134:	4b07      	ldr	r3, [pc, #28]	@ (801e154 <prvResetNextTaskUnblockTime+0x44>)
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	68db      	ldr	r3, [r3, #12]
 801e13a:	68db      	ldr	r3, [r3, #12]
 801e13c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	685b      	ldr	r3, [r3, #4]
 801e142:	4a05      	ldr	r2, [pc, #20]	@ (801e158 <prvResetNextTaskUnblockTime+0x48>)
 801e144:	6013      	str	r3, [r2, #0]
}
 801e146:	bf00      	nop
 801e148:	370c      	adds	r7, #12
 801e14a:	46bd      	mov	sp, r7
 801e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e150:	4770      	bx	lr
 801e152:	bf00      	nop
 801e154:	2001d440 	.word	0x2001d440
 801e158:	2001d4a8 	.word	0x2001d4a8

0801e15c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801e15c:	b480      	push	{r7}
 801e15e:	b083      	sub	sp, #12
 801e160:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801e162:	4b0b      	ldr	r3, [pc, #44]	@ (801e190 <xTaskGetSchedulerState+0x34>)
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	2b00      	cmp	r3, #0
 801e168:	d102      	bne.n	801e170 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801e16a:	2301      	movs	r3, #1
 801e16c:	607b      	str	r3, [r7, #4]
 801e16e:	e008      	b.n	801e182 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801e170:	4b08      	ldr	r3, [pc, #32]	@ (801e194 <xTaskGetSchedulerState+0x38>)
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	2b00      	cmp	r3, #0
 801e176:	d102      	bne.n	801e17e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801e178:	2302      	movs	r3, #2
 801e17a:	607b      	str	r3, [r7, #4]
 801e17c:	e001      	b.n	801e182 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801e17e:	2300      	movs	r3, #0
 801e180:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801e182:	687b      	ldr	r3, [r7, #4]
	}
 801e184:	4618      	mov	r0, r3
 801e186:	370c      	adds	r7, #12
 801e188:	46bd      	mov	sp, r7
 801e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e18e:	4770      	bx	lr
 801e190:	2001d494 	.word	0x2001d494
 801e194:	2001d4b0 	.word	0x2001d4b0

0801e198 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801e198:	b580      	push	{r7, lr}
 801e19a:	b084      	sub	sp, #16
 801e19c:	af00      	add	r7, sp, #0
 801e19e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d056      	beq.n	801e25c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801e1ae:	68bb      	ldr	r3, [r7, #8]
 801e1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e1b2:	4b2d      	ldr	r3, [pc, #180]	@ (801e268 <xTaskPriorityInherit+0xd0>)
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1b8:	429a      	cmp	r2, r3
 801e1ba:	d246      	bcs.n	801e24a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801e1bc:	68bb      	ldr	r3, [r7, #8]
 801e1be:	699b      	ldr	r3, [r3, #24]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	db06      	blt.n	801e1d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e1c4:	4b28      	ldr	r3, [pc, #160]	@ (801e268 <xTaskPriorityInherit+0xd0>)
 801e1c6:	681b      	ldr	r3, [r3, #0]
 801e1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801e1ce:	68bb      	ldr	r3, [r7, #8]
 801e1d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801e1d2:	68bb      	ldr	r3, [r7, #8]
 801e1d4:	6959      	ldr	r1, [r3, #20]
 801e1d6:	68bb      	ldr	r3, [r7, #8]
 801e1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e1da:	4613      	mov	r3, r2
 801e1dc:	009b      	lsls	r3, r3, #2
 801e1de:	4413      	add	r3, r2
 801e1e0:	009b      	lsls	r3, r3, #2
 801e1e2:	4a22      	ldr	r2, [pc, #136]	@ (801e26c <xTaskPriorityInherit+0xd4>)
 801e1e4:	4413      	add	r3, r2
 801e1e6:	4299      	cmp	r1, r3
 801e1e8:	d101      	bne.n	801e1ee <xTaskPriorityInherit+0x56>
 801e1ea:	2301      	movs	r3, #1
 801e1ec:	e000      	b.n	801e1f0 <xTaskPriorityInherit+0x58>
 801e1ee:	2300      	movs	r3, #0
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	d022      	beq.n	801e23a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e1f4:	68bb      	ldr	r3, [r7, #8]
 801e1f6:	3304      	adds	r3, #4
 801e1f8:	4618      	mov	r0, r3
 801e1fa:	f7fe f91d 	bl	801c438 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801e1fe:	4b1a      	ldr	r3, [pc, #104]	@ (801e268 <xTaskPriorityInherit+0xd0>)
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e204:	68bb      	ldr	r3, [r7, #8]
 801e206:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801e208:	68bb      	ldr	r3, [r7, #8]
 801e20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e20c:	4b18      	ldr	r3, [pc, #96]	@ (801e270 <xTaskPriorityInherit+0xd8>)
 801e20e:	681b      	ldr	r3, [r3, #0]
 801e210:	429a      	cmp	r2, r3
 801e212:	d903      	bls.n	801e21c <xTaskPriorityInherit+0x84>
 801e214:	68bb      	ldr	r3, [r7, #8]
 801e216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e218:	4a15      	ldr	r2, [pc, #84]	@ (801e270 <xTaskPriorityInherit+0xd8>)
 801e21a:	6013      	str	r3, [r2, #0]
 801e21c:	68bb      	ldr	r3, [r7, #8]
 801e21e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e220:	4613      	mov	r3, r2
 801e222:	009b      	lsls	r3, r3, #2
 801e224:	4413      	add	r3, r2
 801e226:	009b      	lsls	r3, r3, #2
 801e228:	4a10      	ldr	r2, [pc, #64]	@ (801e26c <xTaskPriorityInherit+0xd4>)
 801e22a:	441a      	add	r2, r3
 801e22c:	68bb      	ldr	r3, [r7, #8]
 801e22e:	3304      	adds	r3, #4
 801e230:	4619      	mov	r1, r3
 801e232:	4610      	mov	r0, r2
 801e234:	f7fe f8a3 	bl	801c37e <vListInsertEnd>
 801e238:	e004      	b.n	801e244 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801e23a:	4b0b      	ldr	r3, [pc, #44]	@ (801e268 <xTaskPriorityInherit+0xd0>)
 801e23c:	681b      	ldr	r3, [r3, #0]
 801e23e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e240:	68bb      	ldr	r3, [r7, #8]
 801e242:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801e244:	2301      	movs	r3, #1
 801e246:	60fb      	str	r3, [r7, #12]
 801e248:	e008      	b.n	801e25c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801e24a:	68bb      	ldr	r3, [r7, #8]
 801e24c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e24e:	4b06      	ldr	r3, [pc, #24]	@ (801e268 <xTaskPriorityInherit+0xd0>)
 801e250:	681b      	ldr	r3, [r3, #0]
 801e252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e254:	429a      	cmp	r2, r3
 801e256:	d201      	bcs.n	801e25c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801e258:	2301      	movs	r3, #1
 801e25a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801e25c:	68fb      	ldr	r3, [r7, #12]
	}
 801e25e:	4618      	mov	r0, r3
 801e260:	3710      	adds	r7, #16
 801e262:	46bd      	mov	sp, r7
 801e264:	bd80      	pop	{r7, pc}
 801e266:	bf00      	nop
 801e268:	2001cfb4 	.word	0x2001cfb4
 801e26c:	2001cfb8 	.word	0x2001cfb8
 801e270:	2001d490 	.word	0x2001d490

0801e274 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801e274:	b580      	push	{r7, lr}
 801e276:	b086      	sub	sp, #24
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801e280:	2300      	movs	r3, #0
 801e282:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	2b00      	cmp	r3, #0
 801e288:	d058      	beq.n	801e33c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801e28a:	4b2f      	ldr	r3, [pc, #188]	@ (801e348 <xTaskPriorityDisinherit+0xd4>)
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	693a      	ldr	r2, [r7, #16]
 801e290:	429a      	cmp	r2, r3
 801e292:	d00b      	beq.n	801e2ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801e294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e298:	f383 8811 	msr	BASEPRI, r3
 801e29c:	f3bf 8f6f 	isb	sy
 801e2a0:	f3bf 8f4f 	dsb	sy
 801e2a4:	60fb      	str	r3, [r7, #12]
}
 801e2a6:	bf00      	nop
 801e2a8:	bf00      	nop
 801e2aa:	e7fd      	b.n	801e2a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801e2ac:	693b      	ldr	r3, [r7, #16]
 801e2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d10b      	bne.n	801e2cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801e2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e2b8:	f383 8811 	msr	BASEPRI, r3
 801e2bc:	f3bf 8f6f 	isb	sy
 801e2c0:	f3bf 8f4f 	dsb	sy
 801e2c4:	60bb      	str	r3, [r7, #8]
}
 801e2c6:	bf00      	nop
 801e2c8:	bf00      	nop
 801e2ca:	e7fd      	b.n	801e2c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801e2cc:	693b      	ldr	r3, [r7, #16]
 801e2ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e2d0:	1e5a      	subs	r2, r3, #1
 801e2d2:	693b      	ldr	r3, [r7, #16]
 801e2d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801e2d6:	693b      	ldr	r3, [r7, #16]
 801e2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e2da:	693b      	ldr	r3, [r7, #16]
 801e2dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2de:	429a      	cmp	r2, r3
 801e2e0:	d02c      	beq.n	801e33c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801e2e2:	693b      	ldr	r3, [r7, #16]
 801e2e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d128      	bne.n	801e33c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e2ea:	693b      	ldr	r3, [r7, #16]
 801e2ec:	3304      	adds	r3, #4
 801e2ee:	4618      	mov	r0, r3
 801e2f0:	f7fe f8a2 	bl	801c438 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801e2f4:	693b      	ldr	r3, [r7, #16]
 801e2f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e2f8:	693b      	ldr	r3, [r7, #16]
 801e2fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e2fc:	693b      	ldr	r3, [r7, #16]
 801e2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e300:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801e304:	693b      	ldr	r3, [r7, #16]
 801e306:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801e308:	693b      	ldr	r3, [r7, #16]
 801e30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e30c:	4b0f      	ldr	r3, [pc, #60]	@ (801e34c <xTaskPriorityDisinherit+0xd8>)
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	429a      	cmp	r2, r3
 801e312:	d903      	bls.n	801e31c <xTaskPriorityDisinherit+0xa8>
 801e314:	693b      	ldr	r3, [r7, #16]
 801e316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e318:	4a0c      	ldr	r2, [pc, #48]	@ (801e34c <xTaskPriorityDisinherit+0xd8>)
 801e31a:	6013      	str	r3, [r2, #0]
 801e31c:	693b      	ldr	r3, [r7, #16]
 801e31e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e320:	4613      	mov	r3, r2
 801e322:	009b      	lsls	r3, r3, #2
 801e324:	4413      	add	r3, r2
 801e326:	009b      	lsls	r3, r3, #2
 801e328:	4a09      	ldr	r2, [pc, #36]	@ (801e350 <xTaskPriorityDisinherit+0xdc>)
 801e32a:	441a      	add	r2, r3
 801e32c:	693b      	ldr	r3, [r7, #16]
 801e32e:	3304      	adds	r3, #4
 801e330:	4619      	mov	r1, r3
 801e332:	4610      	mov	r0, r2
 801e334:	f7fe f823 	bl	801c37e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801e338:	2301      	movs	r3, #1
 801e33a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801e33c:	697b      	ldr	r3, [r7, #20]
	}
 801e33e:	4618      	mov	r0, r3
 801e340:	3718      	adds	r7, #24
 801e342:	46bd      	mov	sp, r7
 801e344:	bd80      	pop	{r7, pc}
 801e346:	bf00      	nop
 801e348:	2001cfb4 	.word	0x2001cfb4
 801e34c:	2001d490 	.word	0x2001d490
 801e350:	2001cfb8 	.word	0x2001cfb8

0801e354 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801e354:	b580      	push	{r7, lr}
 801e356:	b088      	sub	sp, #32
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
 801e35c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801e362:	2301      	movs	r3, #1
 801e364:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d071      	beq.n	801e450 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801e36c:	69bb      	ldr	r3, [r7, #24]
 801e36e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e370:	2b00      	cmp	r3, #0
 801e372:	d10b      	bne.n	801e38c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801e374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e378:	f383 8811 	msr	BASEPRI, r3
 801e37c:	f3bf 8f6f 	isb	sy
 801e380:	f3bf 8f4f 	dsb	sy
 801e384:	60fb      	str	r3, [r7, #12]
}
 801e386:	bf00      	nop
 801e388:	bf00      	nop
 801e38a:	e7fd      	b.n	801e388 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801e38c:	69bb      	ldr	r3, [r7, #24]
 801e38e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e390:	683a      	ldr	r2, [r7, #0]
 801e392:	429a      	cmp	r2, r3
 801e394:	d902      	bls.n	801e39c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801e396:	683b      	ldr	r3, [r7, #0]
 801e398:	61fb      	str	r3, [r7, #28]
 801e39a:	e002      	b.n	801e3a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801e39c:	69bb      	ldr	r3, [r7, #24]
 801e39e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801e3a2:	69bb      	ldr	r3, [r7, #24]
 801e3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3a6:	69fa      	ldr	r2, [r7, #28]
 801e3a8:	429a      	cmp	r2, r3
 801e3aa:	d051      	beq.n	801e450 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801e3ac:	69bb      	ldr	r3, [r7, #24]
 801e3ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e3b0:	697a      	ldr	r2, [r7, #20]
 801e3b2:	429a      	cmp	r2, r3
 801e3b4:	d14c      	bne.n	801e450 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801e3b6:	4b28      	ldr	r3, [pc, #160]	@ (801e458 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	69ba      	ldr	r2, [r7, #24]
 801e3bc:	429a      	cmp	r2, r3
 801e3be:	d10b      	bne.n	801e3d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801e3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e3c4:	f383 8811 	msr	BASEPRI, r3
 801e3c8:	f3bf 8f6f 	isb	sy
 801e3cc:	f3bf 8f4f 	dsb	sy
 801e3d0:	60bb      	str	r3, [r7, #8]
}
 801e3d2:	bf00      	nop
 801e3d4:	bf00      	nop
 801e3d6:	e7fd      	b.n	801e3d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801e3d8:	69bb      	ldr	r3, [r7, #24]
 801e3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801e3de:	69bb      	ldr	r3, [r7, #24]
 801e3e0:	69fa      	ldr	r2, [r7, #28]
 801e3e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801e3e4:	69bb      	ldr	r3, [r7, #24]
 801e3e6:	699b      	ldr	r3, [r3, #24]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	db04      	blt.n	801e3f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e3ec:	69fb      	ldr	r3, [r7, #28]
 801e3ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801e3f2:	69bb      	ldr	r3, [r7, #24]
 801e3f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801e3f6:	69bb      	ldr	r3, [r7, #24]
 801e3f8:	6959      	ldr	r1, [r3, #20]
 801e3fa:	693a      	ldr	r2, [r7, #16]
 801e3fc:	4613      	mov	r3, r2
 801e3fe:	009b      	lsls	r3, r3, #2
 801e400:	4413      	add	r3, r2
 801e402:	009b      	lsls	r3, r3, #2
 801e404:	4a15      	ldr	r2, [pc, #84]	@ (801e45c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801e406:	4413      	add	r3, r2
 801e408:	4299      	cmp	r1, r3
 801e40a:	d101      	bne.n	801e410 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 801e40c:	2301      	movs	r3, #1
 801e40e:	e000      	b.n	801e412 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 801e410:	2300      	movs	r3, #0
 801e412:	2b00      	cmp	r3, #0
 801e414:	d01c      	beq.n	801e450 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e416:	69bb      	ldr	r3, [r7, #24]
 801e418:	3304      	adds	r3, #4
 801e41a:	4618      	mov	r0, r3
 801e41c:	f7fe f80c 	bl	801c438 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801e420:	69bb      	ldr	r3, [r7, #24]
 801e422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e424:	4b0e      	ldr	r3, [pc, #56]	@ (801e460 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	429a      	cmp	r2, r3
 801e42a:	d903      	bls.n	801e434 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 801e42c:	69bb      	ldr	r3, [r7, #24]
 801e42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e430:	4a0b      	ldr	r2, [pc, #44]	@ (801e460 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801e432:	6013      	str	r3, [r2, #0]
 801e434:	69bb      	ldr	r3, [r7, #24]
 801e436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e438:	4613      	mov	r3, r2
 801e43a:	009b      	lsls	r3, r3, #2
 801e43c:	4413      	add	r3, r2
 801e43e:	009b      	lsls	r3, r3, #2
 801e440:	4a06      	ldr	r2, [pc, #24]	@ (801e45c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801e442:	441a      	add	r2, r3
 801e444:	69bb      	ldr	r3, [r7, #24]
 801e446:	3304      	adds	r3, #4
 801e448:	4619      	mov	r1, r3
 801e44a:	4610      	mov	r0, r2
 801e44c:	f7fd ff97 	bl	801c37e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801e450:	bf00      	nop
 801e452:	3720      	adds	r7, #32
 801e454:	46bd      	mov	sp, r7
 801e456:	bd80      	pop	{r7, pc}
 801e458:	2001cfb4 	.word	0x2001cfb4
 801e45c:	2001cfb8 	.word	0x2001cfb8
 801e460:	2001d490 	.word	0x2001d490

0801e464 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801e464:	b480      	push	{r7}
 801e466:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801e468:	4b07      	ldr	r3, [pc, #28]	@ (801e488 <pvTaskIncrementMutexHeldCount+0x24>)
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d004      	beq.n	801e47a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801e470:	4b05      	ldr	r3, [pc, #20]	@ (801e488 <pvTaskIncrementMutexHeldCount+0x24>)
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e476:	3201      	adds	r2, #1
 801e478:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801e47a:	4b03      	ldr	r3, [pc, #12]	@ (801e488 <pvTaskIncrementMutexHeldCount+0x24>)
 801e47c:	681b      	ldr	r3, [r3, #0]
	}
 801e47e:	4618      	mov	r0, r3
 801e480:	46bd      	mov	sp, r7
 801e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e486:	4770      	bx	lr
 801e488:	2001cfb4 	.word	0x2001cfb4

0801e48c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801e48c:	b580      	push	{r7, lr}
 801e48e:	b084      	sub	sp, #16
 801e490:	af00      	add	r7, sp, #0
 801e492:	6078      	str	r0, [r7, #4]
 801e494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801e496:	4b21      	ldr	r3, [pc, #132]	@ (801e51c <prvAddCurrentTaskToDelayedList+0x90>)
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e49c:	4b20      	ldr	r3, [pc, #128]	@ (801e520 <prvAddCurrentTaskToDelayedList+0x94>)
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	3304      	adds	r3, #4
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	f7fd ffc8 	bl	801c438 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e4ae:	d10a      	bne.n	801e4c6 <prvAddCurrentTaskToDelayedList+0x3a>
 801e4b0:	683b      	ldr	r3, [r7, #0]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d007      	beq.n	801e4c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e4b6:	4b1a      	ldr	r3, [pc, #104]	@ (801e520 <prvAddCurrentTaskToDelayedList+0x94>)
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	3304      	adds	r3, #4
 801e4bc:	4619      	mov	r1, r3
 801e4be:	4819      	ldr	r0, [pc, #100]	@ (801e524 <prvAddCurrentTaskToDelayedList+0x98>)
 801e4c0:	f7fd ff5d 	bl	801c37e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801e4c4:	e026      	b.n	801e514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801e4c6:	68fa      	ldr	r2, [r7, #12]
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	4413      	add	r3, r2
 801e4cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801e4ce:	4b14      	ldr	r3, [pc, #80]	@ (801e520 <prvAddCurrentTaskToDelayedList+0x94>)
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	68ba      	ldr	r2, [r7, #8]
 801e4d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801e4d6:	68ba      	ldr	r2, [r7, #8]
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	429a      	cmp	r2, r3
 801e4dc:	d209      	bcs.n	801e4f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e4de:	4b12      	ldr	r3, [pc, #72]	@ (801e528 <prvAddCurrentTaskToDelayedList+0x9c>)
 801e4e0:	681a      	ldr	r2, [r3, #0]
 801e4e2:	4b0f      	ldr	r3, [pc, #60]	@ (801e520 <prvAddCurrentTaskToDelayedList+0x94>)
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	3304      	adds	r3, #4
 801e4e8:	4619      	mov	r1, r3
 801e4ea:	4610      	mov	r0, r2
 801e4ec:	f7fd ff6b 	bl	801c3c6 <vListInsert>
}
 801e4f0:	e010      	b.n	801e514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e4f2:	4b0e      	ldr	r3, [pc, #56]	@ (801e52c <prvAddCurrentTaskToDelayedList+0xa0>)
 801e4f4:	681a      	ldr	r2, [r3, #0]
 801e4f6:	4b0a      	ldr	r3, [pc, #40]	@ (801e520 <prvAddCurrentTaskToDelayedList+0x94>)
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	3304      	adds	r3, #4
 801e4fc:	4619      	mov	r1, r3
 801e4fe:	4610      	mov	r0, r2
 801e500:	f7fd ff61 	bl	801c3c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801e504:	4b0a      	ldr	r3, [pc, #40]	@ (801e530 <prvAddCurrentTaskToDelayedList+0xa4>)
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	68ba      	ldr	r2, [r7, #8]
 801e50a:	429a      	cmp	r2, r3
 801e50c:	d202      	bcs.n	801e514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801e50e:	4a08      	ldr	r2, [pc, #32]	@ (801e530 <prvAddCurrentTaskToDelayedList+0xa4>)
 801e510:	68bb      	ldr	r3, [r7, #8]
 801e512:	6013      	str	r3, [r2, #0]
}
 801e514:	bf00      	nop
 801e516:	3710      	adds	r7, #16
 801e518:	46bd      	mov	sp, r7
 801e51a:	bd80      	pop	{r7, pc}
 801e51c:	2001d48c 	.word	0x2001d48c
 801e520:	2001cfb4 	.word	0x2001cfb4
 801e524:	2001d474 	.word	0x2001d474
 801e528:	2001d444 	.word	0x2001d444
 801e52c:	2001d440 	.word	0x2001d440
 801e530:	2001d4a8 	.word	0x2001d4a8

0801e534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801e534:	b580      	push	{r7, lr}
 801e536:	b08a      	sub	sp, #40	@ 0x28
 801e538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801e53a:	2300      	movs	r3, #0
 801e53c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801e53e:	f000 fad9 	bl	801eaf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801e542:	4b1d      	ldr	r3, [pc, #116]	@ (801e5b8 <xTimerCreateTimerTask+0x84>)
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	2b00      	cmp	r3, #0
 801e548:	d021      	beq.n	801e58e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801e54a:	2300      	movs	r3, #0
 801e54c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801e54e:	2300      	movs	r3, #0
 801e550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801e552:	1d3a      	adds	r2, r7, #4
 801e554:	f107 0108 	add.w	r1, r7, #8
 801e558:	f107 030c 	add.w	r3, r7, #12
 801e55c:	4618      	mov	r0, r3
 801e55e:	f7fd fec7 	bl	801c2f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801e562:	6879      	ldr	r1, [r7, #4]
 801e564:	68bb      	ldr	r3, [r7, #8]
 801e566:	68fa      	ldr	r2, [r7, #12]
 801e568:	9202      	str	r2, [sp, #8]
 801e56a:	9301      	str	r3, [sp, #4]
 801e56c:	2302      	movs	r3, #2
 801e56e:	9300      	str	r3, [sp, #0]
 801e570:	2300      	movs	r3, #0
 801e572:	460a      	mov	r2, r1
 801e574:	4911      	ldr	r1, [pc, #68]	@ (801e5bc <xTimerCreateTimerTask+0x88>)
 801e576:	4812      	ldr	r0, [pc, #72]	@ (801e5c0 <xTimerCreateTimerTask+0x8c>)
 801e578:	f7fe ffb4 	bl	801d4e4 <xTaskCreateStatic>
 801e57c:	4603      	mov	r3, r0
 801e57e:	4a11      	ldr	r2, [pc, #68]	@ (801e5c4 <xTimerCreateTimerTask+0x90>)
 801e580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801e582:	4b10      	ldr	r3, [pc, #64]	@ (801e5c4 <xTimerCreateTimerTask+0x90>)
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	2b00      	cmp	r3, #0
 801e588:	d001      	beq.n	801e58e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801e58a:	2301      	movs	r3, #1
 801e58c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801e58e:	697b      	ldr	r3, [r7, #20]
 801e590:	2b00      	cmp	r3, #0
 801e592:	d10b      	bne.n	801e5ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 801e594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e598:	f383 8811 	msr	BASEPRI, r3
 801e59c:	f3bf 8f6f 	isb	sy
 801e5a0:	f3bf 8f4f 	dsb	sy
 801e5a4:	613b      	str	r3, [r7, #16]
}
 801e5a6:	bf00      	nop
 801e5a8:	bf00      	nop
 801e5aa:	e7fd      	b.n	801e5a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801e5ac:	697b      	ldr	r3, [r7, #20]
}
 801e5ae:	4618      	mov	r0, r3
 801e5b0:	3718      	adds	r7, #24
 801e5b2:	46bd      	mov	sp, r7
 801e5b4:	bd80      	pop	{r7, pc}
 801e5b6:	bf00      	nop
 801e5b8:	2001d4e4 	.word	0x2001d4e4
 801e5bc:	08027518 	.word	0x08027518
 801e5c0:	0801e6e9 	.word	0x0801e6e9
 801e5c4:	2001d4e8 	.word	0x2001d4e8

0801e5c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801e5c8:	b580      	push	{r7, lr}
 801e5ca:	b08a      	sub	sp, #40	@ 0x28
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	60f8      	str	r0, [r7, #12]
 801e5d0:	60b9      	str	r1, [r7, #8]
 801e5d2:	607a      	str	r2, [r7, #4]
 801e5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d10b      	bne.n	801e5f8 <xTimerGenericCommand+0x30>
	__asm volatile
 801e5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e5e4:	f383 8811 	msr	BASEPRI, r3
 801e5e8:	f3bf 8f6f 	isb	sy
 801e5ec:	f3bf 8f4f 	dsb	sy
 801e5f0:	623b      	str	r3, [r7, #32]
}
 801e5f2:	bf00      	nop
 801e5f4:	bf00      	nop
 801e5f6:	e7fd      	b.n	801e5f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801e5f8:	4b19      	ldr	r3, [pc, #100]	@ (801e660 <xTimerGenericCommand+0x98>)
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d02a      	beq.n	801e656 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801e600:	68bb      	ldr	r3, [r7, #8]
 801e602:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801e60c:	68bb      	ldr	r3, [r7, #8]
 801e60e:	2b05      	cmp	r3, #5
 801e610:	dc18      	bgt.n	801e644 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801e612:	f7ff fda3 	bl	801e15c <xTaskGetSchedulerState>
 801e616:	4603      	mov	r3, r0
 801e618:	2b02      	cmp	r3, #2
 801e61a:	d109      	bne.n	801e630 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801e61c:	4b10      	ldr	r3, [pc, #64]	@ (801e660 <xTimerGenericCommand+0x98>)
 801e61e:	6818      	ldr	r0, [r3, #0]
 801e620:	f107 0110 	add.w	r1, r7, #16
 801e624:	2300      	movs	r3, #0
 801e626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e628:	f7fe f8e6 	bl	801c7f8 <xQueueGenericSend>
 801e62c:	6278      	str	r0, [r7, #36]	@ 0x24
 801e62e:	e012      	b.n	801e656 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801e630:	4b0b      	ldr	r3, [pc, #44]	@ (801e660 <xTimerGenericCommand+0x98>)
 801e632:	6818      	ldr	r0, [r3, #0]
 801e634:	f107 0110 	add.w	r1, r7, #16
 801e638:	2300      	movs	r3, #0
 801e63a:	2200      	movs	r2, #0
 801e63c:	f7fe f8dc 	bl	801c7f8 <xQueueGenericSend>
 801e640:	6278      	str	r0, [r7, #36]	@ 0x24
 801e642:	e008      	b.n	801e656 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801e644:	4b06      	ldr	r3, [pc, #24]	@ (801e660 <xTimerGenericCommand+0x98>)
 801e646:	6818      	ldr	r0, [r3, #0]
 801e648:	f107 0110 	add.w	r1, r7, #16
 801e64c:	2300      	movs	r3, #0
 801e64e:	683a      	ldr	r2, [r7, #0]
 801e650:	f7fe f9d4 	bl	801c9fc <xQueueGenericSendFromISR>
 801e654:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801e656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801e658:	4618      	mov	r0, r3
 801e65a:	3728      	adds	r7, #40	@ 0x28
 801e65c:	46bd      	mov	sp, r7
 801e65e:	bd80      	pop	{r7, pc}
 801e660:	2001d4e4 	.word	0x2001d4e4

0801e664 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801e664:	b580      	push	{r7, lr}
 801e666:	b088      	sub	sp, #32
 801e668:	af02      	add	r7, sp, #8
 801e66a:	6078      	str	r0, [r7, #4]
 801e66c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e66e:	4b1d      	ldr	r3, [pc, #116]	@ (801e6e4 <prvProcessExpiredTimer+0x80>)
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	68db      	ldr	r3, [r3, #12]
 801e674:	68db      	ldr	r3, [r3, #12]
 801e676:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e678:	697b      	ldr	r3, [r7, #20]
 801e67a:	3304      	adds	r3, #4
 801e67c:	4618      	mov	r0, r3
 801e67e:	f7fd fedb 	bl	801c438 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801e682:	697b      	ldr	r3, [r7, #20]
 801e684:	69db      	ldr	r3, [r3, #28]
 801e686:	2b01      	cmp	r3, #1
 801e688:	d123      	bne.n	801e6d2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801e68a:	697b      	ldr	r3, [r7, #20]
 801e68c:	699a      	ldr	r2, [r3, #24]
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	18d1      	adds	r1, r2, r3
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	683a      	ldr	r2, [r7, #0]
 801e696:	6978      	ldr	r0, [r7, #20]
 801e698:	f000 f8cc 	bl	801e834 <prvInsertTimerInActiveList>
 801e69c:	4603      	mov	r3, r0
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d017      	beq.n	801e6d2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	9300      	str	r3, [sp, #0]
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	687a      	ldr	r2, [r7, #4]
 801e6aa:	2100      	movs	r1, #0
 801e6ac:	6978      	ldr	r0, [r7, #20]
 801e6ae:	f7ff ff8b 	bl	801e5c8 <xTimerGenericCommand>
 801e6b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801e6b4:	693b      	ldr	r3, [r7, #16]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d10b      	bne.n	801e6d2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 801e6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e6be:	f383 8811 	msr	BASEPRI, r3
 801e6c2:	f3bf 8f6f 	isb	sy
 801e6c6:	f3bf 8f4f 	dsb	sy
 801e6ca:	60fb      	str	r3, [r7, #12]
}
 801e6cc:	bf00      	nop
 801e6ce:	bf00      	nop
 801e6d0:	e7fd      	b.n	801e6ce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e6d2:	697b      	ldr	r3, [r7, #20]
 801e6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6d6:	6978      	ldr	r0, [r7, #20]
 801e6d8:	4798      	blx	r3
}
 801e6da:	bf00      	nop
 801e6dc:	3718      	adds	r7, #24
 801e6de:	46bd      	mov	sp, r7
 801e6e0:	bd80      	pop	{r7, pc}
 801e6e2:	bf00      	nop
 801e6e4:	2001d4dc 	.word	0x2001d4dc

0801e6e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 801e6e8:	b580      	push	{r7, lr}
 801e6ea:	b084      	sub	sp, #16
 801e6ec:	af00      	add	r7, sp, #0
 801e6ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e6f0:	f107 0308 	add.w	r3, r7, #8
 801e6f4:	4618      	mov	r0, r3
 801e6f6:	f000 f859 	bl	801e7ac <prvGetNextExpireTime>
 801e6fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801e6fc:	68bb      	ldr	r3, [r7, #8]
 801e6fe:	4619      	mov	r1, r3
 801e700:	68f8      	ldr	r0, [r7, #12]
 801e702:	f000 f805 	bl	801e710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801e706:	f000 f8d7 	bl	801e8b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e70a:	bf00      	nop
 801e70c:	e7f0      	b.n	801e6f0 <prvTimerTask+0x8>
	...

0801e710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801e710:	b580      	push	{r7, lr}
 801e712:	b084      	sub	sp, #16
 801e714:	af00      	add	r7, sp, #0
 801e716:	6078      	str	r0, [r7, #4]
 801e718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801e71a:	f7ff f91d 	bl	801d958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e71e:	f107 0308 	add.w	r3, r7, #8
 801e722:	4618      	mov	r0, r3
 801e724:	f000 f866 	bl	801e7f4 <prvSampleTimeNow>
 801e728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801e72a:	68bb      	ldr	r3, [r7, #8]
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d130      	bne.n	801e792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801e730:	683b      	ldr	r3, [r7, #0]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d10a      	bne.n	801e74c <prvProcessTimerOrBlockTask+0x3c>
 801e736:	687a      	ldr	r2, [r7, #4]
 801e738:	68fb      	ldr	r3, [r7, #12]
 801e73a:	429a      	cmp	r2, r3
 801e73c:	d806      	bhi.n	801e74c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801e73e:	f7ff f919 	bl	801d974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801e742:	68f9      	ldr	r1, [r7, #12]
 801e744:	6878      	ldr	r0, [r7, #4]
 801e746:	f7ff ff8d 	bl	801e664 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801e74a:	e024      	b.n	801e796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801e74c:	683b      	ldr	r3, [r7, #0]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d008      	beq.n	801e764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801e752:	4b13      	ldr	r3, [pc, #76]	@ (801e7a0 <prvProcessTimerOrBlockTask+0x90>)
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	2b00      	cmp	r3, #0
 801e75a:	bf0c      	ite	eq
 801e75c:	2301      	moveq	r3, #1
 801e75e:	2300      	movne	r3, #0
 801e760:	b2db      	uxtb	r3, r3
 801e762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801e764:	4b0f      	ldr	r3, [pc, #60]	@ (801e7a4 <prvProcessTimerOrBlockTask+0x94>)
 801e766:	6818      	ldr	r0, [r3, #0]
 801e768:	687a      	ldr	r2, [r7, #4]
 801e76a:	68fb      	ldr	r3, [r7, #12]
 801e76c:	1ad3      	subs	r3, r2, r3
 801e76e:	683a      	ldr	r2, [r7, #0]
 801e770:	4619      	mov	r1, r3
 801e772:	f7fe fe83 	bl	801d47c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801e776:	f7ff f8fd 	bl	801d974 <xTaskResumeAll>
 801e77a:	4603      	mov	r3, r0
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d10a      	bne.n	801e796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801e780:	4b09      	ldr	r3, [pc, #36]	@ (801e7a8 <prvProcessTimerOrBlockTask+0x98>)
 801e782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801e786:	601a      	str	r2, [r3, #0]
 801e788:	f3bf 8f4f 	dsb	sy
 801e78c:	f3bf 8f6f 	isb	sy
}
 801e790:	e001      	b.n	801e796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801e792:	f7ff f8ef 	bl	801d974 <xTaskResumeAll>
}
 801e796:	bf00      	nop
 801e798:	3710      	adds	r7, #16
 801e79a:	46bd      	mov	sp, r7
 801e79c:	bd80      	pop	{r7, pc}
 801e79e:	bf00      	nop
 801e7a0:	2001d4e0 	.word	0x2001d4e0
 801e7a4:	2001d4e4 	.word	0x2001d4e4
 801e7a8:	e000ed04 	.word	0xe000ed04

0801e7ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801e7ac:	b480      	push	{r7}
 801e7ae:	b085      	sub	sp, #20
 801e7b0:	af00      	add	r7, sp, #0
 801e7b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801e7b4:	4b0e      	ldr	r3, [pc, #56]	@ (801e7f0 <prvGetNextExpireTime+0x44>)
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	681b      	ldr	r3, [r3, #0]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	bf0c      	ite	eq
 801e7be:	2301      	moveq	r3, #1
 801e7c0:	2300      	movne	r3, #0
 801e7c2:	b2db      	uxtb	r3, r3
 801e7c4:	461a      	mov	r2, r3
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d105      	bne.n	801e7de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e7d2:	4b07      	ldr	r3, [pc, #28]	@ (801e7f0 <prvGetNextExpireTime+0x44>)
 801e7d4:	681b      	ldr	r3, [r3, #0]
 801e7d6:	68db      	ldr	r3, [r3, #12]
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	60fb      	str	r3, [r7, #12]
 801e7dc:	e001      	b.n	801e7e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801e7de:	2300      	movs	r3, #0
 801e7e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801e7e2:	68fb      	ldr	r3, [r7, #12]
}
 801e7e4:	4618      	mov	r0, r3
 801e7e6:	3714      	adds	r7, #20
 801e7e8:	46bd      	mov	sp, r7
 801e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ee:	4770      	bx	lr
 801e7f0:	2001d4dc 	.word	0x2001d4dc

0801e7f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801e7f4:	b580      	push	{r7, lr}
 801e7f6:	b084      	sub	sp, #16
 801e7f8:	af00      	add	r7, sp, #0
 801e7fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801e7fc:	f7ff f958 	bl	801dab0 <xTaskGetTickCount>
 801e800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801e802:	4b0b      	ldr	r3, [pc, #44]	@ (801e830 <prvSampleTimeNow+0x3c>)
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	68fa      	ldr	r2, [r7, #12]
 801e808:	429a      	cmp	r2, r3
 801e80a:	d205      	bcs.n	801e818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801e80c:	f000 f910 	bl	801ea30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	2201      	movs	r2, #1
 801e814:	601a      	str	r2, [r3, #0]
 801e816:	e002      	b.n	801e81e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	2200      	movs	r2, #0
 801e81c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801e81e:	4a04      	ldr	r2, [pc, #16]	@ (801e830 <prvSampleTimeNow+0x3c>)
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801e824:	68fb      	ldr	r3, [r7, #12]
}
 801e826:	4618      	mov	r0, r3
 801e828:	3710      	adds	r7, #16
 801e82a:	46bd      	mov	sp, r7
 801e82c:	bd80      	pop	{r7, pc}
 801e82e:	bf00      	nop
 801e830:	2001d4ec 	.word	0x2001d4ec

0801e834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801e834:	b580      	push	{r7, lr}
 801e836:	b086      	sub	sp, #24
 801e838:	af00      	add	r7, sp, #0
 801e83a:	60f8      	str	r0, [r7, #12]
 801e83c:	60b9      	str	r1, [r7, #8]
 801e83e:	607a      	str	r2, [r7, #4]
 801e840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801e842:	2300      	movs	r3, #0
 801e844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801e846:	68fb      	ldr	r3, [r7, #12]
 801e848:	68ba      	ldr	r2, [r7, #8]
 801e84a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	68fa      	ldr	r2, [r7, #12]
 801e850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801e852:	68ba      	ldr	r2, [r7, #8]
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	429a      	cmp	r2, r3
 801e858:	d812      	bhi.n	801e880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e85a:	687a      	ldr	r2, [r7, #4]
 801e85c:	683b      	ldr	r3, [r7, #0]
 801e85e:	1ad2      	subs	r2, r2, r3
 801e860:	68fb      	ldr	r3, [r7, #12]
 801e862:	699b      	ldr	r3, [r3, #24]
 801e864:	429a      	cmp	r2, r3
 801e866:	d302      	bcc.n	801e86e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801e868:	2301      	movs	r3, #1
 801e86a:	617b      	str	r3, [r7, #20]
 801e86c:	e01b      	b.n	801e8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801e86e:	4b10      	ldr	r3, [pc, #64]	@ (801e8b0 <prvInsertTimerInActiveList+0x7c>)
 801e870:	681a      	ldr	r2, [r3, #0]
 801e872:	68fb      	ldr	r3, [r7, #12]
 801e874:	3304      	adds	r3, #4
 801e876:	4619      	mov	r1, r3
 801e878:	4610      	mov	r0, r2
 801e87a:	f7fd fda4 	bl	801c3c6 <vListInsert>
 801e87e:	e012      	b.n	801e8a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801e880:	687a      	ldr	r2, [r7, #4]
 801e882:	683b      	ldr	r3, [r7, #0]
 801e884:	429a      	cmp	r2, r3
 801e886:	d206      	bcs.n	801e896 <prvInsertTimerInActiveList+0x62>
 801e888:	68ba      	ldr	r2, [r7, #8]
 801e88a:	683b      	ldr	r3, [r7, #0]
 801e88c:	429a      	cmp	r2, r3
 801e88e:	d302      	bcc.n	801e896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801e890:	2301      	movs	r3, #1
 801e892:	617b      	str	r3, [r7, #20]
 801e894:	e007      	b.n	801e8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e896:	4b07      	ldr	r3, [pc, #28]	@ (801e8b4 <prvInsertTimerInActiveList+0x80>)
 801e898:	681a      	ldr	r2, [r3, #0]
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	3304      	adds	r3, #4
 801e89e:	4619      	mov	r1, r3
 801e8a0:	4610      	mov	r0, r2
 801e8a2:	f7fd fd90 	bl	801c3c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801e8a6:	697b      	ldr	r3, [r7, #20]
}
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	3718      	adds	r7, #24
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	bd80      	pop	{r7, pc}
 801e8b0:	2001d4e0 	.word	0x2001d4e0
 801e8b4:	2001d4dc 	.word	0x2001d4dc

0801e8b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801e8b8:	b580      	push	{r7, lr}
 801e8ba:	b08e      	sub	sp, #56	@ 0x38
 801e8bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e8be:	e0a5      	b.n	801ea0c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	2b00      	cmp	r3, #0
 801e8c4:	da19      	bge.n	801e8fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801e8c6:	1d3b      	adds	r3, r7, #4
 801e8c8:	3304      	adds	r3, #4
 801e8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801e8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d10b      	bne.n	801e8ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 801e8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e8d6:	f383 8811 	msr	BASEPRI, r3
 801e8da:	f3bf 8f6f 	isb	sy
 801e8de:	f3bf 8f4f 	dsb	sy
 801e8e2:	61fb      	str	r3, [r7, #28]
}
 801e8e4:	bf00      	nop
 801e8e6:	bf00      	nop
 801e8e8:	e7fd      	b.n	801e8e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801e8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e8f0:	6850      	ldr	r0, [r2, #4]
 801e8f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e8f4:	6892      	ldr	r2, [r2, #8]
 801e8f6:	4611      	mov	r1, r2
 801e8f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	f2c0 8085 	blt.w	801ea0c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801e902:	68fb      	ldr	r3, [r7, #12]
 801e904:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801e906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e908:	695b      	ldr	r3, [r3, #20]
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d004      	beq.n	801e918 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e910:	3304      	adds	r3, #4
 801e912:	4618      	mov	r0, r3
 801e914:	f7fd fd90 	bl	801c438 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e918:	463b      	mov	r3, r7
 801e91a:	4618      	mov	r0, r3
 801e91c:	f7ff ff6a 	bl	801e7f4 <prvSampleTimeNow>
 801e920:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	2b09      	cmp	r3, #9
 801e926:	d86c      	bhi.n	801ea02 <prvProcessReceivedCommands+0x14a>
 801e928:	a201      	add	r2, pc, #4	@ (adr r2, 801e930 <prvProcessReceivedCommands+0x78>)
 801e92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e92e:	bf00      	nop
 801e930:	0801e959 	.word	0x0801e959
 801e934:	0801e959 	.word	0x0801e959
 801e938:	0801e959 	.word	0x0801e959
 801e93c:	0801ea03 	.word	0x0801ea03
 801e940:	0801e9b7 	.word	0x0801e9b7
 801e944:	0801e9f1 	.word	0x0801e9f1
 801e948:	0801e959 	.word	0x0801e959
 801e94c:	0801e959 	.word	0x0801e959
 801e950:	0801ea03 	.word	0x0801ea03
 801e954:	0801e9b7 	.word	0x0801e9b7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801e958:	68ba      	ldr	r2, [r7, #8]
 801e95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e95c:	699b      	ldr	r3, [r3, #24]
 801e95e:	18d1      	adds	r1, r2, r3
 801e960:	68bb      	ldr	r3, [r7, #8]
 801e962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e966:	f7ff ff65 	bl	801e834 <prvInsertTimerInActiveList>
 801e96a:	4603      	mov	r3, r0
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d04a      	beq.n	801ea06 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e976:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801e978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e97a:	69db      	ldr	r3, [r3, #28]
 801e97c:	2b01      	cmp	r3, #1
 801e97e:	d142      	bne.n	801ea06 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801e980:	68ba      	ldr	r2, [r7, #8]
 801e982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e984:	699b      	ldr	r3, [r3, #24]
 801e986:	441a      	add	r2, r3
 801e988:	2300      	movs	r3, #0
 801e98a:	9300      	str	r3, [sp, #0]
 801e98c:	2300      	movs	r3, #0
 801e98e:	2100      	movs	r1, #0
 801e990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e992:	f7ff fe19 	bl	801e5c8 <xTimerGenericCommand>
 801e996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801e998:	6a3b      	ldr	r3, [r7, #32]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d133      	bne.n	801ea06 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 801e99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e9a2:	f383 8811 	msr	BASEPRI, r3
 801e9a6:	f3bf 8f6f 	isb	sy
 801e9aa:	f3bf 8f4f 	dsb	sy
 801e9ae:	61bb      	str	r3, [r7, #24]
}
 801e9b0:	bf00      	nop
 801e9b2:	bf00      	nop
 801e9b4:	e7fd      	b.n	801e9b2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801e9b6:	68ba      	ldr	r2, [r7, #8]
 801e9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801e9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9be:	699b      	ldr	r3, [r3, #24]
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d10b      	bne.n	801e9dc <prvProcessReceivedCommands+0x124>
	__asm volatile
 801e9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801e9c8:	f383 8811 	msr	BASEPRI, r3
 801e9cc:	f3bf 8f6f 	isb	sy
 801e9d0:	f3bf 8f4f 	dsb	sy
 801e9d4:	617b      	str	r3, [r7, #20]
}
 801e9d6:	bf00      	nop
 801e9d8:	bf00      	nop
 801e9da:	e7fd      	b.n	801e9d8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801e9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9de:	699a      	ldr	r2, [r3, #24]
 801e9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9e2:	18d1      	adds	r1, r2, r3
 801e9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e9e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e9ea:	f7ff ff23 	bl	801e834 <prvInsertTimerInActiveList>
					break;
 801e9ee:	e00d      	b.n	801ea0c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801e9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	d107      	bne.n	801ea0a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 801e9fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e9fc:	f000 fbac 	bl	801f158 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801ea00:	e003      	b.n	801ea0a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 801ea02:	bf00      	nop
 801ea04:	e002      	b.n	801ea0c <prvProcessReceivedCommands+0x154>
					break;
 801ea06:	bf00      	nop
 801ea08:	e000      	b.n	801ea0c <prvProcessReceivedCommands+0x154>
					break;
 801ea0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ea0c:	4b07      	ldr	r3, [pc, #28]	@ (801ea2c <prvProcessReceivedCommands+0x174>)
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	1d39      	adds	r1, r7, #4
 801ea12:	2200      	movs	r2, #0
 801ea14:	4618      	mov	r0, r3
 801ea16:	f7fe f91d 	bl	801cc54 <xQueueReceive>
 801ea1a:	4603      	mov	r3, r0
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	f47f af4f 	bne.w	801e8c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801ea22:	bf00      	nop
 801ea24:	bf00      	nop
 801ea26:	3730      	adds	r7, #48	@ 0x30
 801ea28:	46bd      	mov	sp, r7
 801ea2a:	bd80      	pop	{r7, pc}
 801ea2c:	2001d4e4 	.word	0x2001d4e4

0801ea30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ea30:	b580      	push	{r7, lr}
 801ea32:	b088      	sub	sp, #32
 801ea34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ea36:	e046      	b.n	801eac6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ea38:	4b2c      	ldr	r3, [pc, #176]	@ (801eaec <prvSwitchTimerLists+0xbc>)
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	68db      	ldr	r3, [r3, #12]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ea42:	4b2a      	ldr	r3, [pc, #168]	@ (801eaec <prvSwitchTimerLists+0xbc>)
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	68db      	ldr	r3, [r3, #12]
 801ea48:	68db      	ldr	r3, [r3, #12]
 801ea4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	3304      	adds	r3, #4
 801ea50:	4618      	mov	r0, r3
 801ea52:	f7fd fcf1 	bl	801c438 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ea5a:	68f8      	ldr	r0, [r7, #12]
 801ea5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801ea5e:	68fb      	ldr	r3, [r7, #12]
 801ea60:	69db      	ldr	r3, [r3, #28]
 801ea62:	2b01      	cmp	r3, #1
 801ea64:	d12f      	bne.n	801eac6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801ea66:	68fb      	ldr	r3, [r7, #12]
 801ea68:	699b      	ldr	r3, [r3, #24]
 801ea6a:	693a      	ldr	r2, [r7, #16]
 801ea6c:	4413      	add	r3, r2
 801ea6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ea70:	68ba      	ldr	r2, [r7, #8]
 801ea72:	693b      	ldr	r3, [r7, #16]
 801ea74:	429a      	cmp	r2, r3
 801ea76:	d90e      	bls.n	801ea96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801ea78:	68fb      	ldr	r3, [r7, #12]
 801ea7a:	68ba      	ldr	r2, [r7, #8]
 801ea7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ea7e:	68fb      	ldr	r3, [r7, #12]
 801ea80:	68fa      	ldr	r2, [r7, #12]
 801ea82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ea84:	4b19      	ldr	r3, [pc, #100]	@ (801eaec <prvSwitchTimerLists+0xbc>)
 801ea86:	681a      	ldr	r2, [r3, #0]
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	3304      	adds	r3, #4
 801ea8c:	4619      	mov	r1, r3
 801ea8e:	4610      	mov	r0, r2
 801ea90:	f7fd fc99 	bl	801c3c6 <vListInsert>
 801ea94:	e017      	b.n	801eac6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801ea96:	2300      	movs	r3, #0
 801ea98:	9300      	str	r3, [sp, #0]
 801ea9a:	2300      	movs	r3, #0
 801ea9c:	693a      	ldr	r2, [r7, #16]
 801ea9e:	2100      	movs	r1, #0
 801eaa0:	68f8      	ldr	r0, [r7, #12]
 801eaa2:	f7ff fd91 	bl	801e5c8 <xTimerGenericCommand>
 801eaa6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d10b      	bne.n	801eac6 <prvSwitchTimerLists+0x96>
	__asm volatile
 801eaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801eab2:	f383 8811 	msr	BASEPRI, r3
 801eab6:	f3bf 8f6f 	isb	sy
 801eaba:	f3bf 8f4f 	dsb	sy
 801eabe:	603b      	str	r3, [r7, #0]
}
 801eac0:	bf00      	nop
 801eac2:	bf00      	nop
 801eac4:	e7fd      	b.n	801eac2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801eac6:	4b09      	ldr	r3, [pc, #36]	@ (801eaec <prvSwitchTimerLists+0xbc>)
 801eac8:	681b      	ldr	r3, [r3, #0]
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	2b00      	cmp	r3, #0
 801eace:	d1b3      	bne.n	801ea38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801ead0:	4b06      	ldr	r3, [pc, #24]	@ (801eaec <prvSwitchTimerLists+0xbc>)
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801ead6:	4b06      	ldr	r3, [pc, #24]	@ (801eaf0 <prvSwitchTimerLists+0xc0>)
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	4a04      	ldr	r2, [pc, #16]	@ (801eaec <prvSwitchTimerLists+0xbc>)
 801eadc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801eade:	4a04      	ldr	r2, [pc, #16]	@ (801eaf0 <prvSwitchTimerLists+0xc0>)
 801eae0:	697b      	ldr	r3, [r7, #20]
 801eae2:	6013      	str	r3, [r2, #0]
}
 801eae4:	bf00      	nop
 801eae6:	3718      	adds	r7, #24
 801eae8:	46bd      	mov	sp, r7
 801eaea:	bd80      	pop	{r7, pc}
 801eaec:	2001d4dc 	.word	0x2001d4dc
 801eaf0:	2001d4e0 	.word	0x2001d4e0

0801eaf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801eaf4:	b580      	push	{r7, lr}
 801eaf6:	b082      	sub	sp, #8
 801eaf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801eafa:	f000 f96d 	bl	801edd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801eafe:	4b15      	ldr	r3, [pc, #84]	@ (801eb54 <prvCheckForValidListAndQueue+0x60>)
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d120      	bne.n	801eb48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801eb06:	4814      	ldr	r0, [pc, #80]	@ (801eb58 <prvCheckForValidListAndQueue+0x64>)
 801eb08:	f7fd fc0c 	bl	801c324 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801eb0c:	4813      	ldr	r0, [pc, #76]	@ (801eb5c <prvCheckForValidListAndQueue+0x68>)
 801eb0e:	f7fd fc09 	bl	801c324 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801eb12:	4b13      	ldr	r3, [pc, #76]	@ (801eb60 <prvCheckForValidListAndQueue+0x6c>)
 801eb14:	4a10      	ldr	r2, [pc, #64]	@ (801eb58 <prvCheckForValidListAndQueue+0x64>)
 801eb16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801eb18:	4b12      	ldr	r3, [pc, #72]	@ (801eb64 <prvCheckForValidListAndQueue+0x70>)
 801eb1a:	4a10      	ldr	r2, [pc, #64]	@ (801eb5c <prvCheckForValidListAndQueue+0x68>)
 801eb1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801eb1e:	2300      	movs	r3, #0
 801eb20:	9300      	str	r3, [sp, #0]
 801eb22:	4b11      	ldr	r3, [pc, #68]	@ (801eb68 <prvCheckForValidListAndQueue+0x74>)
 801eb24:	4a11      	ldr	r2, [pc, #68]	@ (801eb6c <prvCheckForValidListAndQueue+0x78>)
 801eb26:	2110      	movs	r1, #16
 801eb28:	200a      	movs	r0, #10
 801eb2a:	f7fd fd19 	bl	801c560 <xQueueGenericCreateStatic>
 801eb2e:	4603      	mov	r3, r0
 801eb30:	4a08      	ldr	r2, [pc, #32]	@ (801eb54 <prvCheckForValidListAndQueue+0x60>)
 801eb32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801eb34:	4b07      	ldr	r3, [pc, #28]	@ (801eb54 <prvCheckForValidListAndQueue+0x60>)
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d005      	beq.n	801eb48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801eb3c:	4b05      	ldr	r3, [pc, #20]	@ (801eb54 <prvCheckForValidListAndQueue+0x60>)
 801eb3e:	681b      	ldr	r3, [r3, #0]
 801eb40:	490b      	ldr	r1, [pc, #44]	@ (801eb70 <prvCheckForValidListAndQueue+0x7c>)
 801eb42:	4618      	mov	r0, r3
 801eb44:	f7fe fc46 	bl	801d3d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801eb48:	f000 f978 	bl	801ee3c <vPortExitCritical>
}
 801eb4c:	bf00      	nop
 801eb4e:	46bd      	mov	sp, r7
 801eb50:	bd80      	pop	{r7, pc}
 801eb52:	bf00      	nop
 801eb54:	2001d4e4 	.word	0x2001d4e4
 801eb58:	2001d4b4 	.word	0x2001d4b4
 801eb5c:	2001d4c8 	.word	0x2001d4c8
 801eb60:	2001d4dc 	.word	0x2001d4dc
 801eb64:	2001d4e0 	.word	0x2001d4e0
 801eb68:	2001d590 	.word	0x2001d590
 801eb6c:	2001d4f0 	.word	0x2001d4f0
 801eb70:	08027520 	.word	0x08027520

0801eb74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801eb74:	b480      	push	{r7}
 801eb76:	b085      	sub	sp, #20
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	60f8      	str	r0, [r7, #12]
 801eb7c:	60b9      	str	r1, [r7, #8]
 801eb7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	3b04      	subs	r3, #4
 801eb84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801eb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	3b04      	subs	r3, #4
 801eb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801eb94:	68bb      	ldr	r3, [r7, #8]
 801eb96:	f023 0201 	bic.w	r2, r3, #1
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801eb9e:	68fb      	ldr	r3, [r7, #12]
 801eba0:	3b04      	subs	r3, #4
 801eba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801eba4:	4a0c      	ldr	r2, [pc, #48]	@ (801ebd8 <pxPortInitialiseStack+0x64>)
 801eba6:	68fb      	ldr	r3, [r7, #12]
 801eba8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	3b14      	subs	r3, #20
 801ebae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801ebb0:	687a      	ldr	r2, [r7, #4]
 801ebb2:	68fb      	ldr	r3, [r7, #12]
 801ebb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	3b04      	subs	r3, #4
 801ebba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801ebbc:	68fb      	ldr	r3, [r7, #12]
 801ebbe:	f06f 0202 	mvn.w	r2, #2
 801ebc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801ebc4:	68fb      	ldr	r3, [r7, #12]
 801ebc6:	3b20      	subs	r3, #32
 801ebc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801ebca:	68fb      	ldr	r3, [r7, #12]
}
 801ebcc:	4618      	mov	r0, r3
 801ebce:	3714      	adds	r7, #20
 801ebd0:	46bd      	mov	sp, r7
 801ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebd6:	4770      	bx	lr
 801ebd8:	0801ebdd 	.word	0x0801ebdd

0801ebdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ebdc:	b480      	push	{r7}
 801ebde:	b085      	sub	sp, #20
 801ebe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801ebe6:	4b13      	ldr	r3, [pc, #76]	@ (801ec34 <prvTaskExitError+0x58>)
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebee:	d00b      	beq.n	801ec08 <prvTaskExitError+0x2c>
	__asm volatile
 801ebf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ebf4:	f383 8811 	msr	BASEPRI, r3
 801ebf8:	f3bf 8f6f 	isb	sy
 801ebfc:	f3bf 8f4f 	dsb	sy
 801ec00:	60fb      	str	r3, [r7, #12]
}
 801ec02:	bf00      	nop
 801ec04:	bf00      	nop
 801ec06:	e7fd      	b.n	801ec04 <prvTaskExitError+0x28>
	__asm volatile
 801ec08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ec0c:	f383 8811 	msr	BASEPRI, r3
 801ec10:	f3bf 8f6f 	isb	sy
 801ec14:	f3bf 8f4f 	dsb	sy
 801ec18:	60bb      	str	r3, [r7, #8]
}
 801ec1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801ec1c:	bf00      	nop
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d0fc      	beq.n	801ec1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801ec24:	bf00      	nop
 801ec26:	bf00      	nop
 801ec28:	3714      	adds	r7, #20
 801ec2a:	46bd      	mov	sp, r7
 801ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec30:	4770      	bx	lr
 801ec32:	bf00      	nop
 801ec34:	200002b0 	.word	0x200002b0
	...

0801ec40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801ec40:	4b07      	ldr	r3, [pc, #28]	@ (801ec60 <pxCurrentTCBConst2>)
 801ec42:	6819      	ldr	r1, [r3, #0]
 801ec44:	6808      	ldr	r0, [r1, #0]
 801ec46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec4a:	f380 8809 	msr	PSP, r0
 801ec4e:	f3bf 8f6f 	isb	sy
 801ec52:	f04f 0000 	mov.w	r0, #0
 801ec56:	f380 8811 	msr	BASEPRI, r0
 801ec5a:	4770      	bx	lr
 801ec5c:	f3af 8000 	nop.w

0801ec60 <pxCurrentTCBConst2>:
 801ec60:	2001cfb4 	.word	0x2001cfb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801ec64:	bf00      	nop
 801ec66:	bf00      	nop

0801ec68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801ec68:	4808      	ldr	r0, [pc, #32]	@ (801ec8c <prvPortStartFirstTask+0x24>)
 801ec6a:	6800      	ldr	r0, [r0, #0]
 801ec6c:	6800      	ldr	r0, [r0, #0]
 801ec6e:	f380 8808 	msr	MSP, r0
 801ec72:	f04f 0000 	mov.w	r0, #0
 801ec76:	f380 8814 	msr	CONTROL, r0
 801ec7a:	b662      	cpsie	i
 801ec7c:	b661      	cpsie	f
 801ec7e:	f3bf 8f4f 	dsb	sy
 801ec82:	f3bf 8f6f 	isb	sy
 801ec86:	df00      	svc	0
 801ec88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801ec8a:	bf00      	nop
 801ec8c:	e000ed08 	.word	0xe000ed08

0801ec90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ec90:	b580      	push	{r7, lr}
 801ec92:	b086      	sub	sp, #24
 801ec94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ec96:	4b47      	ldr	r3, [pc, #284]	@ (801edb4 <xPortStartScheduler+0x124>)
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	4a47      	ldr	r2, [pc, #284]	@ (801edb8 <xPortStartScheduler+0x128>)
 801ec9c:	4293      	cmp	r3, r2
 801ec9e:	d10b      	bne.n	801ecb8 <xPortStartScheduler+0x28>
	__asm volatile
 801eca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801eca4:	f383 8811 	msr	BASEPRI, r3
 801eca8:	f3bf 8f6f 	isb	sy
 801ecac:	f3bf 8f4f 	dsb	sy
 801ecb0:	613b      	str	r3, [r7, #16]
}
 801ecb2:	bf00      	nop
 801ecb4:	bf00      	nop
 801ecb6:	e7fd      	b.n	801ecb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ecb8:	4b3e      	ldr	r3, [pc, #248]	@ (801edb4 <xPortStartScheduler+0x124>)
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	4a3f      	ldr	r2, [pc, #252]	@ (801edbc <xPortStartScheduler+0x12c>)
 801ecbe:	4293      	cmp	r3, r2
 801ecc0:	d10b      	bne.n	801ecda <xPortStartScheduler+0x4a>
	__asm volatile
 801ecc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ecc6:	f383 8811 	msr	BASEPRI, r3
 801ecca:	f3bf 8f6f 	isb	sy
 801ecce:	f3bf 8f4f 	dsb	sy
 801ecd2:	60fb      	str	r3, [r7, #12]
}
 801ecd4:	bf00      	nop
 801ecd6:	bf00      	nop
 801ecd8:	e7fd      	b.n	801ecd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801ecda:	4b39      	ldr	r3, [pc, #228]	@ (801edc0 <xPortStartScheduler+0x130>)
 801ecdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801ecde:	697b      	ldr	r3, [r7, #20]
 801ece0:	781b      	ldrb	r3, [r3, #0]
 801ece2:	b2db      	uxtb	r3, r3
 801ece4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801ece6:	697b      	ldr	r3, [r7, #20]
 801ece8:	22ff      	movs	r2, #255	@ 0xff
 801ecea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801ecec:	697b      	ldr	r3, [r7, #20]
 801ecee:	781b      	ldrb	r3, [r3, #0]
 801ecf0:	b2db      	uxtb	r3, r3
 801ecf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801ecf4:	78fb      	ldrb	r3, [r7, #3]
 801ecf6:	b2db      	uxtb	r3, r3
 801ecf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801ecfc:	b2da      	uxtb	r2, r3
 801ecfe:	4b31      	ldr	r3, [pc, #196]	@ (801edc4 <xPortStartScheduler+0x134>)
 801ed00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ed02:	4b31      	ldr	r3, [pc, #196]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed04:	2207      	movs	r2, #7
 801ed06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ed08:	e009      	b.n	801ed1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801ed0a:	4b2f      	ldr	r3, [pc, #188]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	3b01      	subs	r3, #1
 801ed10:	4a2d      	ldr	r2, [pc, #180]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801ed14:	78fb      	ldrb	r3, [r7, #3]
 801ed16:	b2db      	uxtb	r3, r3
 801ed18:	005b      	lsls	r3, r3, #1
 801ed1a:	b2db      	uxtb	r3, r3
 801ed1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ed1e:	78fb      	ldrb	r3, [r7, #3]
 801ed20:	b2db      	uxtb	r3, r3
 801ed22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ed26:	2b80      	cmp	r3, #128	@ 0x80
 801ed28:	d0ef      	beq.n	801ed0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801ed2a:	4b27      	ldr	r3, [pc, #156]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	f1c3 0307 	rsb	r3, r3, #7
 801ed32:	2b04      	cmp	r3, #4
 801ed34:	d00b      	beq.n	801ed4e <xPortStartScheduler+0xbe>
	__asm volatile
 801ed36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ed3a:	f383 8811 	msr	BASEPRI, r3
 801ed3e:	f3bf 8f6f 	isb	sy
 801ed42:	f3bf 8f4f 	dsb	sy
 801ed46:	60bb      	str	r3, [r7, #8]
}
 801ed48:	bf00      	nop
 801ed4a:	bf00      	nop
 801ed4c:	e7fd      	b.n	801ed4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801ed4e:	4b1e      	ldr	r3, [pc, #120]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	021b      	lsls	r3, r3, #8
 801ed54:	4a1c      	ldr	r2, [pc, #112]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801ed58:	4b1b      	ldr	r3, [pc, #108]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed5a:	681b      	ldr	r3, [r3, #0]
 801ed5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ed60:	4a19      	ldr	r2, [pc, #100]	@ (801edc8 <xPortStartScheduler+0x138>)
 801ed62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	b2da      	uxtb	r2, r3
 801ed68:	697b      	ldr	r3, [r7, #20]
 801ed6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801ed6c:	4b17      	ldr	r3, [pc, #92]	@ (801edcc <xPortStartScheduler+0x13c>)
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	4a16      	ldr	r2, [pc, #88]	@ (801edcc <xPortStartScheduler+0x13c>)
 801ed72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801ed76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801ed78:	4b14      	ldr	r3, [pc, #80]	@ (801edcc <xPortStartScheduler+0x13c>)
 801ed7a:	681b      	ldr	r3, [r3, #0]
 801ed7c:	4a13      	ldr	r2, [pc, #76]	@ (801edcc <xPortStartScheduler+0x13c>)
 801ed7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801ed82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801ed84:	f000 f8da 	bl	801ef3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801ed88:	4b11      	ldr	r3, [pc, #68]	@ (801edd0 <xPortStartScheduler+0x140>)
 801ed8a:	2200      	movs	r2, #0
 801ed8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801ed8e:	f000 f8f9 	bl	801ef84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801ed92:	4b10      	ldr	r3, [pc, #64]	@ (801edd4 <xPortStartScheduler+0x144>)
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	4a0f      	ldr	r2, [pc, #60]	@ (801edd4 <xPortStartScheduler+0x144>)
 801ed98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801ed9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801ed9e:	f7ff ff63 	bl	801ec68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801eda2:	f7fe ff55 	bl	801dc50 <vTaskSwitchContext>
	prvTaskExitError();
 801eda6:	f7ff ff19 	bl	801ebdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801edaa:	2300      	movs	r3, #0
}
 801edac:	4618      	mov	r0, r3
 801edae:	3718      	adds	r7, #24
 801edb0:	46bd      	mov	sp, r7
 801edb2:	bd80      	pop	{r7, pc}
 801edb4:	e000ed00 	.word	0xe000ed00
 801edb8:	410fc271 	.word	0x410fc271
 801edbc:	410fc270 	.word	0x410fc270
 801edc0:	e000e400 	.word	0xe000e400
 801edc4:	2001d5e0 	.word	0x2001d5e0
 801edc8:	2001d5e4 	.word	0x2001d5e4
 801edcc:	e000ed20 	.word	0xe000ed20
 801edd0:	200002b0 	.word	0x200002b0
 801edd4:	e000ef34 	.word	0xe000ef34

0801edd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801edd8:	b480      	push	{r7}
 801edda:	b083      	sub	sp, #12
 801eddc:	af00      	add	r7, sp, #0
	__asm volatile
 801edde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ede2:	f383 8811 	msr	BASEPRI, r3
 801ede6:	f3bf 8f6f 	isb	sy
 801edea:	f3bf 8f4f 	dsb	sy
 801edee:	607b      	str	r3, [r7, #4]
}
 801edf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801edf2:	4b10      	ldr	r3, [pc, #64]	@ (801ee34 <vPortEnterCritical+0x5c>)
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	3301      	adds	r3, #1
 801edf8:	4a0e      	ldr	r2, [pc, #56]	@ (801ee34 <vPortEnterCritical+0x5c>)
 801edfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801edfc:	4b0d      	ldr	r3, [pc, #52]	@ (801ee34 <vPortEnterCritical+0x5c>)
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	2b01      	cmp	r3, #1
 801ee02:	d110      	bne.n	801ee26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801ee04:	4b0c      	ldr	r3, [pc, #48]	@ (801ee38 <vPortEnterCritical+0x60>)
 801ee06:	681b      	ldr	r3, [r3, #0]
 801ee08:	b2db      	uxtb	r3, r3
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	d00b      	beq.n	801ee26 <vPortEnterCritical+0x4e>
	__asm volatile
 801ee0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ee12:	f383 8811 	msr	BASEPRI, r3
 801ee16:	f3bf 8f6f 	isb	sy
 801ee1a:	f3bf 8f4f 	dsb	sy
 801ee1e:	603b      	str	r3, [r7, #0]
}
 801ee20:	bf00      	nop
 801ee22:	bf00      	nop
 801ee24:	e7fd      	b.n	801ee22 <vPortEnterCritical+0x4a>
	}
}
 801ee26:	bf00      	nop
 801ee28:	370c      	adds	r7, #12
 801ee2a:	46bd      	mov	sp, r7
 801ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee30:	4770      	bx	lr
 801ee32:	bf00      	nop
 801ee34:	200002b0 	.word	0x200002b0
 801ee38:	e000ed04 	.word	0xe000ed04

0801ee3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801ee3c:	b480      	push	{r7}
 801ee3e:	b083      	sub	sp, #12
 801ee40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801ee42:	4b12      	ldr	r3, [pc, #72]	@ (801ee8c <vPortExitCritical+0x50>)
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d10b      	bne.n	801ee62 <vPortExitCritical+0x26>
	__asm volatile
 801ee4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ee4e:	f383 8811 	msr	BASEPRI, r3
 801ee52:	f3bf 8f6f 	isb	sy
 801ee56:	f3bf 8f4f 	dsb	sy
 801ee5a:	607b      	str	r3, [r7, #4]
}
 801ee5c:	bf00      	nop
 801ee5e:	bf00      	nop
 801ee60:	e7fd      	b.n	801ee5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801ee62:	4b0a      	ldr	r3, [pc, #40]	@ (801ee8c <vPortExitCritical+0x50>)
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	3b01      	subs	r3, #1
 801ee68:	4a08      	ldr	r2, [pc, #32]	@ (801ee8c <vPortExitCritical+0x50>)
 801ee6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801ee6c:	4b07      	ldr	r3, [pc, #28]	@ (801ee8c <vPortExitCritical+0x50>)
 801ee6e:	681b      	ldr	r3, [r3, #0]
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d105      	bne.n	801ee80 <vPortExitCritical+0x44>
 801ee74:	2300      	movs	r3, #0
 801ee76:	603b      	str	r3, [r7, #0]
	__asm volatile
 801ee78:	683b      	ldr	r3, [r7, #0]
 801ee7a:	f383 8811 	msr	BASEPRI, r3
}
 801ee7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801ee80:	bf00      	nop
 801ee82:	370c      	adds	r7, #12
 801ee84:	46bd      	mov	sp, r7
 801ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee8a:	4770      	bx	lr
 801ee8c:	200002b0 	.word	0x200002b0

0801ee90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801ee90:	f3ef 8009 	mrs	r0, PSP
 801ee94:	f3bf 8f6f 	isb	sy
 801ee98:	4b15      	ldr	r3, [pc, #84]	@ (801eef0 <pxCurrentTCBConst>)
 801ee9a:	681a      	ldr	r2, [r3, #0]
 801ee9c:	f01e 0f10 	tst.w	lr, #16
 801eea0:	bf08      	it	eq
 801eea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801eea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeaa:	6010      	str	r0, [r2, #0]
 801eeac:	e92d 0009 	stmdb	sp!, {r0, r3}
 801eeb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801eeb4:	f380 8811 	msr	BASEPRI, r0
 801eeb8:	f3bf 8f4f 	dsb	sy
 801eebc:	f3bf 8f6f 	isb	sy
 801eec0:	f7fe fec6 	bl	801dc50 <vTaskSwitchContext>
 801eec4:	f04f 0000 	mov.w	r0, #0
 801eec8:	f380 8811 	msr	BASEPRI, r0
 801eecc:	bc09      	pop	{r0, r3}
 801eece:	6819      	ldr	r1, [r3, #0]
 801eed0:	6808      	ldr	r0, [r1, #0]
 801eed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eed6:	f01e 0f10 	tst.w	lr, #16
 801eeda:	bf08      	it	eq
 801eedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801eee0:	f380 8809 	msr	PSP, r0
 801eee4:	f3bf 8f6f 	isb	sy
 801eee8:	4770      	bx	lr
 801eeea:	bf00      	nop
 801eeec:	f3af 8000 	nop.w

0801eef0 <pxCurrentTCBConst>:
 801eef0:	2001cfb4 	.word	0x2001cfb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801eef4:	bf00      	nop
 801eef6:	bf00      	nop

0801eef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801eef8:	b580      	push	{r7, lr}
 801eefa:	b082      	sub	sp, #8
 801eefc:	af00      	add	r7, sp, #0
	__asm volatile
 801eefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ef02:	f383 8811 	msr	BASEPRI, r3
 801ef06:	f3bf 8f6f 	isb	sy
 801ef0a:	f3bf 8f4f 	dsb	sy
 801ef0e:	607b      	str	r3, [r7, #4]
}
 801ef10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801ef12:	f7fe fddd 	bl	801dad0 <xTaskIncrementTick>
 801ef16:	4603      	mov	r3, r0
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d003      	beq.n	801ef24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801ef1c:	4b06      	ldr	r3, [pc, #24]	@ (801ef38 <SysTick_Handler+0x40>)
 801ef1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ef22:	601a      	str	r2, [r3, #0]
 801ef24:	2300      	movs	r3, #0
 801ef26:	603b      	str	r3, [r7, #0]
	__asm volatile
 801ef28:	683b      	ldr	r3, [r7, #0]
 801ef2a:	f383 8811 	msr	BASEPRI, r3
}
 801ef2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801ef30:	bf00      	nop
 801ef32:	3708      	adds	r7, #8
 801ef34:	46bd      	mov	sp, r7
 801ef36:	bd80      	pop	{r7, pc}
 801ef38:	e000ed04 	.word	0xe000ed04

0801ef3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801ef3c:	b480      	push	{r7}
 801ef3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801ef40:	4b0b      	ldr	r3, [pc, #44]	@ (801ef70 <vPortSetupTimerInterrupt+0x34>)
 801ef42:	2200      	movs	r2, #0
 801ef44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801ef46:	4b0b      	ldr	r3, [pc, #44]	@ (801ef74 <vPortSetupTimerInterrupt+0x38>)
 801ef48:	2200      	movs	r2, #0
 801ef4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ef4c:	4b0a      	ldr	r3, [pc, #40]	@ (801ef78 <vPortSetupTimerInterrupt+0x3c>)
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	4a0a      	ldr	r2, [pc, #40]	@ (801ef7c <vPortSetupTimerInterrupt+0x40>)
 801ef52:	fba2 2303 	umull	r2, r3, r2, r3
 801ef56:	099b      	lsrs	r3, r3, #6
 801ef58:	4a09      	ldr	r2, [pc, #36]	@ (801ef80 <vPortSetupTimerInterrupt+0x44>)
 801ef5a:	3b01      	subs	r3, #1
 801ef5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ef5e:	4b04      	ldr	r3, [pc, #16]	@ (801ef70 <vPortSetupTimerInterrupt+0x34>)
 801ef60:	2207      	movs	r2, #7
 801ef62:	601a      	str	r2, [r3, #0]
}
 801ef64:	bf00      	nop
 801ef66:	46bd      	mov	sp, r7
 801ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef6c:	4770      	bx	lr
 801ef6e:	bf00      	nop
 801ef70:	e000e010 	.word	0xe000e010
 801ef74:	e000e018 	.word	0xe000e018
 801ef78:	20000290 	.word	0x20000290
 801ef7c:	10624dd3 	.word	0x10624dd3
 801ef80:	e000e014 	.word	0xe000e014

0801ef84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ef84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801ef94 <vPortEnableVFP+0x10>
 801ef88:	6801      	ldr	r1, [r0, #0]
 801ef8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801ef8e:	6001      	str	r1, [r0, #0]
 801ef90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ef92:	bf00      	nop
 801ef94:	e000ed88 	.word	0xe000ed88

0801ef98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ef98:	b480      	push	{r7}
 801ef9a:	b085      	sub	sp, #20
 801ef9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ef9e:	f3ef 8305 	mrs	r3, IPSR
 801efa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801efa4:	68fb      	ldr	r3, [r7, #12]
 801efa6:	2b0f      	cmp	r3, #15
 801efa8:	d915      	bls.n	801efd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801efaa:	4a18      	ldr	r2, [pc, #96]	@ (801f00c <vPortValidateInterruptPriority+0x74>)
 801efac:	68fb      	ldr	r3, [r7, #12]
 801efae:	4413      	add	r3, r2
 801efb0:	781b      	ldrb	r3, [r3, #0]
 801efb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801efb4:	4b16      	ldr	r3, [pc, #88]	@ (801f010 <vPortValidateInterruptPriority+0x78>)
 801efb6:	781b      	ldrb	r3, [r3, #0]
 801efb8:	7afa      	ldrb	r2, [r7, #11]
 801efba:	429a      	cmp	r2, r3
 801efbc:	d20b      	bcs.n	801efd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801efbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801efc2:	f383 8811 	msr	BASEPRI, r3
 801efc6:	f3bf 8f6f 	isb	sy
 801efca:	f3bf 8f4f 	dsb	sy
 801efce:	607b      	str	r3, [r7, #4]
}
 801efd0:	bf00      	nop
 801efd2:	bf00      	nop
 801efd4:	e7fd      	b.n	801efd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801efd6:	4b0f      	ldr	r3, [pc, #60]	@ (801f014 <vPortValidateInterruptPriority+0x7c>)
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801efde:	4b0e      	ldr	r3, [pc, #56]	@ (801f018 <vPortValidateInterruptPriority+0x80>)
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	429a      	cmp	r2, r3
 801efe4:	d90b      	bls.n	801effe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801efe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801efea:	f383 8811 	msr	BASEPRI, r3
 801efee:	f3bf 8f6f 	isb	sy
 801eff2:	f3bf 8f4f 	dsb	sy
 801eff6:	603b      	str	r3, [r7, #0]
}
 801eff8:	bf00      	nop
 801effa:	bf00      	nop
 801effc:	e7fd      	b.n	801effa <vPortValidateInterruptPriority+0x62>
	}
 801effe:	bf00      	nop
 801f000:	3714      	adds	r7, #20
 801f002:	46bd      	mov	sp, r7
 801f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f008:	4770      	bx	lr
 801f00a:	bf00      	nop
 801f00c:	e000e3f0 	.word	0xe000e3f0
 801f010:	2001d5e0 	.word	0x2001d5e0
 801f014:	e000ed0c 	.word	0xe000ed0c
 801f018:	2001d5e4 	.word	0x2001d5e4

0801f01c <_sbrk_r>:

// Use of vTaskSuspendAll() in _sbrk_r() is normally redundant, as newlib malloc family routines call
// __malloc_lock before calling _sbrk_r(). Note vTaskSuspendAll/xTaskResumeAll support nesting.

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 801f01c:	b580      	push	{r7, lr}
 801f01e:	b084      	sub	sp, #16
 801f020:	af00      	add	r7, sp, #0
 801f022:	6078      	str	r0, [r7, #4]
 801f024:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 801f026:	4b24      	ldr	r3, [pc, #144]	@ (801f0b8 <_sbrk_r+0x9c>)
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d10e      	bne.n	801f04c <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 801f02e:	4a23      	ldr	r2, [pc, #140]	@ (801f0bc <_sbrk_r+0xa0>)
 801f030:	4b23      	ldr	r3, [pc, #140]	@ (801f0c0 <_sbrk_r+0xa4>)
 801f032:	1ad3      	subs	r3, r2, r3
 801f034:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 801f038:	4a22      	ldr	r2, [pc, #136]	@ (801f0c4 <_sbrk_r+0xa8>)
 801f03a:	6013      	str	r3, [r2, #0]
 801f03c:	4a1f      	ldr	r2, [pc, #124]	@ (801f0bc <_sbrk_r+0xa0>)
 801f03e:	4b20      	ldr	r3, [pc, #128]	@ (801f0c0 <_sbrk_r+0xa4>)
 801f040:	1ad3      	subs	r3, r2, r3
 801f042:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 801f046:	461a      	mov	r2, r3
 801f048:	4b1b      	ldr	r3, [pc, #108]	@ (801f0b8 <_sbrk_r+0x9c>)
 801f04a:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 801f04c:	f7ff f886 	bl	801e15c <xTaskGetSchedulerState>
 801f050:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 801f052:	2b01      	cmp	r3, #1
 801f054:	d101      	bne.n	801f05a <_sbrk_r+0x3e>
 801f056:	466b      	mov	r3, sp
 801f058:	e000      	b.n	801f05c <_sbrk_r+0x40>
 801f05a:	4b1b      	ldr	r3, [pc, #108]	@ (801f0c8 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 801f05c:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 801f05e:	f7fe fc7b 	bl	801d958 <vTaskSuspendAll>
    if (currentHeapEnd + incr > limit) {
 801f062:	4b1a      	ldr	r3, [pc, #104]	@ (801f0cc <_sbrk_r+0xb0>)
 801f064:	681a      	ldr	r2, [r3, #0]
 801f066:	683b      	ldr	r3, [r7, #0]
 801f068:	4413      	add	r3, r2
 801f06a:	68fa      	ldr	r2, [r7, #12]
 801f06c:	429a      	cmp	r2, r3
 801f06e:	d207      	bcs.n	801f080 <_sbrk_r+0x64>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	220c      	movs	r2, #12
 801f074:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 801f076:	f7fe fc7d 	bl	801d974 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 801f07a:	f04f 33ff 	mov.w	r3, #4294967295
 801f07e:	e017      	b.n	801f0b0 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    char *previousHeapEnd = currentHeapEnd;
 801f080:	4b12      	ldr	r3, [pc, #72]	@ (801f0cc <_sbrk_r+0xb0>)
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	60bb      	str	r3, [r7, #8]
    currentHeapEnd += incr;
 801f086:	4b11      	ldr	r3, [pc, #68]	@ (801f0cc <_sbrk_r+0xb0>)
 801f088:	681a      	ldr	r2, [r3, #0]
 801f08a:	683b      	ldr	r3, [r7, #0]
 801f08c:	4413      	add	r3, r2
 801f08e:	4a0f      	ldr	r2, [pc, #60]	@ (801f0cc <_sbrk_r+0xb0>)
 801f090:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 801f092:	4b0c      	ldr	r3, [pc, #48]	@ (801f0c4 <_sbrk_r+0xa8>)
 801f094:	681a      	ldr	r2, [r3, #0]
 801f096:	683b      	ldr	r3, [r7, #0]
 801f098:	1ad3      	subs	r3, r2, r3
 801f09a:	4a0a      	ldr	r2, [pc, #40]	@ (801f0c4 <_sbrk_r+0xa8>)
 801f09c:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 801f09e:	4b0c      	ldr	r3, [pc, #48]	@ (801f0d0 <_sbrk_r+0xb4>)
 801f0a0:	681a      	ldr	r2, [r3, #0]
 801f0a2:	683b      	ldr	r3, [r7, #0]
 801f0a4:	4413      	add	r3, r2
 801f0a6:	4a0a      	ldr	r2, [pc, #40]	@ (801f0d0 <_sbrk_r+0xb4>)
 801f0a8:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 801f0aa:	f7fe fc63 	bl	801d974 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 801f0ae:	68bb      	ldr	r3, [r7, #8]
}
 801f0b0:	4618      	mov	r0, r3
 801f0b2:	3710      	adds	r7, #16
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	bd80      	pop	{r7, pc}
 801f0b8:	2001d5ec 	.word	0x2001d5ec
 801f0bc:	200a0000 	.word	0x200a0000
 801f0c0:	2001f6e0 	.word	0x2001f6e0
 801f0c4:	2001d5e8 	.word	0x2001d5e8
 801f0c8:	2009fe00 	.word	0x2009fe00
 801f0cc:	200002b4 	.word	0x200002b4
 801f0d0:	2001d5f0 	.word	0x2001d5f0

0801f0d4 <__malloc_lock>:
//k char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)   {
 801f0d4:	b580      	push	{r7, lr}
 801f0d6:	b086      	sub	sp, #24
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801f0dc:	f3ef 8305 	mrs	r3, IPSR
 801f0e0:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 801f0e2:	693b      	ldr	r3, [r7, #16]
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d102      	bne.n	801f0ee <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	60fb      	str	r3, [r7, #12]
 801f0ec:	e001      	b.n	801f0f2 <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 801f0ee:	2301      	movs	r3, #1
 801f0f0:	60fb      	str	r3, [r7, #12]
	return xReturn;
 801f0f2:	68fb      	ldr	r3, [r7, #12]
  (void)(r);
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	bf14      	ite	ne
 801f0f8:	2301      	movne	r3, #1
 801f0fa:	2300      	moveq	r3, #0
 801f0fc:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 801f0fe:	7dfb      	ldrb	r3, [r7, #23]
 801f100:	2b00      	cmp	r3, #0
 801f102:	d00b      	beq.n	801f11c <__malloc_lock+0x48>
	__asm volatile
 801f104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f108:	f383 8811 	msr	BASEPRI, r3
 801f10c:	f3bf 8f6f 	isb	sy
 801f110:	f3bf 8f4f 	dsb	sy
 801f114:	60bb      	str	r3, [r7, #8]
}
 801f116:	bf00      	nop
 801f118:	bf00      	nop
 801f11a:	e7fd      	b.n	801f118 <__malloc_lock+0x44>
  vTaskSuspendAll();
 801f11c:	f7fe fc1c 	bl	801d958 <vTaskSuspendAll>
  #endif
};
 801f120:	bf00      	nop
 801f122:	3718      	adds	r7, #24
 801f124:	46bd      	mov	sp, r7
 801f126:	bd80      	pop	{r7, pc}

0801f128 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r) {
 801f128:	b580      	push	{r7, lr}
 801f12a:	b082      	sub	sp, #8
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	6078      	str	r0, [r7, #4]
  (void)(r);
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
  (void)xTaskResumeAll();
 801f130:	f7fe fc20 	bl	801d974 <xTaskResumeAll>
  #endif
};
 801f134:	bf00      	nop
 801f136:	3708      	adds	r7, #8
 801f138:	46bd      	mov	sp, r7
 801f13a:	bd80      	pop	{r7, pc}

0801f13c <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 801f13c:	b580      	push	{r7, lr}
 801f13e:	b084      	sub	sp, #16
 801f140:	af00      	add	r7, sp, #0
 801f142:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 801f144:	6878      	ldr	r0, [r7, #4]
 801f146:	f006 f959 	bl	80253fc <malloc>
 801f14a:	4603      	mov	r3, r0
 801f14c:	60fb      	str	r3, [r7, #12]
    return p;
 801f14e:	68fb      	ldr	r3, [r7, #12]
}
 801f150:	4618      	mov	r0, r3
 801f152:	3710      	adds	r7, #16
 801f154:	46bd      	mov	sp, r7
 801f156:	bd80      	pop	{r7, pc}

0801f158 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 801f158:	b580      	push	{r7, lr}
 801f15a:	b082      	sub	sp, #8
 801f15c:	af00      	add	r7, sp, #0
 801f15e:	6078      	str	r0, [r7, #4]
    free(pv);
 801f160:	6878      	ldr	r0, [r7, #4]
 801f162:	f006 f953 	bl	802540c <free>
};
 801f166:	bf00      	nop
 801f168:	3708      	adds	r7, #8
 801f16a:	46bd      	mov	sp, r7
 801f16c:	bd80      	pop	{r7, pc}
	...

0801f170 <skipleading>:
  return 0;
}
#endif /* PORTABLE_STRNICMP */

static TCHAR *skipleading(const TCHAR *str)
{
 801f170:	b580      	push	{r7, lr}
 801f172:	b082      	sub	sp, #8
 801f174:	af00      	add	r7, sp, #0
 801f176:	6078      	str	r0, [r7, #4]
  assert(str != NULL);
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d108      	bne.n	801f190 <skipleading+0x20>
 801f17e:	4b0b      	ldr	r3, [pc, #44]	@ (801f1ac <skipleading+0x3c>)
 801f180:	4a0b      	ldr	r2, [pc, #44]	@ (801f1b0 <skipleading+0x40>)
 801f182:	2176      	movs	r1, #118	@ 0x76
 801f184:	480b      	ldr	r0, [pc, #44]	@ (801f1b4 <skipleading+0x44>)
 801f186:	f006 f8fd 	bl	8025384 <__assert_func>
  while (*str != '\0' && *str <= ' ')
    str++;
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	3301      	adds	r3, #1
 801f18e:	607b      	str	r3, [r7, #4]
  while (*str != '\0' && *str <= ' ')
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	781b      	ldrb	r3, [r3, #0]
 801f194:	2b00      	cmp	r3, #0
 801f196:	d003      	beq.n	801f1a0 <skipleading+0x30>
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	781b      	ldrb	r3, [r3, #0]
 801f19c:	2b20      	cmp	r3, #32
 801f19e:	d9f4      	bls.n	801f18a <skipleading+0x1a>
  return (TCHAR *)str;
 801f1a0:	687b      	ldr	r3, [r7, #4]
}
 801f1a2:	4618      	mov	r0, r3
 801f1a4:	3708      	adds	r7, #8
 801f1a6:	46bd      	mov	sp, r7
 801f1a8:	bd80      	pop	{r7, pc}
 801f1aa:	bf00      	nop
 801f1ac:	08027528 	.word	0x08027528
 801f1b0:	0802be00 	.word	0x0802be00
 801f1b4:	08027534 	.word	0x08027534

0801f1b8 <skiptrailing>:

static TCHAR *skiptrailing(const TCHAR *str, const TCHAR *base)
{
 801f1b8:	b580      	push	{r7, lr}
 801f1ba:	b082      	sub	sp, #8
 801f1bc:	af00      	add	r7, sp, #0
 801f1be:	6078      	str	r0, [r7, #4]
 801f1c0:	6039      	str	r1, [r7, #0]
  assert(str != NULL);
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d105      	bne.n	801f1d4 <skiptrailing+0x1c>
 801f1c8:	4b0f      	ldr	r3, [pc, #60]	@ (801f208 <skiptrailing+0x50>)
 801f1ca:	4a10      	ldr	r2, [pc, #64]	@ (801f20c <skiptrailing+0x54>)
 801f1cc:	217e      	movs	r1, #126	@ 0x7e
 801f1ce:	4810      	ldr	r0, [pc, #64]	@ (801f210 <skiptrailing+0x58>)
 801f1d0:	f006 f8d8 	bl	8025384 <__assert_func>
  assert(base != NULL);
 801f1d4:	683b      	ldr	r3, [r7, #0]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d108      	bne.n	801f1ec <skiptrailing+0x34>
 801f1da:	4b0e      	ldr	r3, [pc, #56]	@ (801f214 <skiptrailing+0x5c>)
 801f1dc:	4a0b      	ldr	r2, [pc, #44]	@ (801f20c <skiptrailing+0x54>)
 801f1de:	217f      	movs	r1, #127	@ 0x7f
 801f1e0:	480b      	ldr	r0, [pc, #44]	@ (801f210 <skiptrailing+0x58>)
 801f1e2:	f006 f8cf 	bl	8025384 <__assert_func>
  while (str > base && *(str-1) <= ' ')
    str--;
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	3b01      	subs	r3, #1
 801f1ea:	607b      	str	r3, [r7, #4]
  while (str > base && *(str-1) <= ' ')
 801f1ec:	687a      	ldr	r2, [r7, #4]
 801f1ee:	683b      	ldr	r3, [r7, #0]
 801f1f0:	429a      	cmp	r2, r3
 801f1f2:	d904      	bls.n	801f1fe <skiptrailing+0x46>
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	3b01      	subs	r3, #1
 801f1f8:	781b      	ldrb	r3, [r3, #0]
 801f1fa:	2b20      	cmp	r3, #32
 801f1fc:	d9f3      	bls.n	801f1e6 <skiptrailing+0x2e>
  return (TCHAR *)str;
 801f1fe:	687b      	ldr	r3, [r7, #4]
}
 801f200:	4618      	mov	r0, r3
 801f202:	3708      	adds	r7, #8
 801f204:	46bd      	mov	sp, r7
 801f206:	bd80      	pop	{r7, pc}
 801f208:	08027528 	.word	0x08027528
 801f20c:	0802be0c 	.word	0x0802be0c
 801f210:	08027534 	.word	0x08027534
 801f214:	08027548 	.word	0x08027548

0801f218 <striptrailing>:

static TCHAR *striptrailing(TCHAR *str)
{
 801f218:	b580      	push	{r7, lr}
 801f21a:	b084      	sub	sp, #16
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	6078      	str	r0, [r7, #4]
  TCHAR *ptr = skiptrailing(_tcschr(str, '\0'), str);
 801f220:	6878      	ldr	r0, [r7, #4]
 801f222:	f7e1 f83f 	bl	80002a4 <strlen>
 801f226:	4603      	mov	r3, r0
 801f228:	461a      	mov	r2, r3
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	4413      	add	r3, r2
 801f22e:	6879      	ldr	r1, [r7, #4]
 801f230:	4618      	mov	r0, r3
 801f232:	f7ff ffc1 	bl	801f1b8 <skiptrailing>
 801f236:	60f8      	str	r0, [r7, #12]
  assert(ptr != NULL);
 801f238:	68fb      	ldr	r3, [r7, #12]
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	d105      	bne.n	801f24a <striptrailing+0x32>
 801f23e:	4b07      	ldr	r3, [pc, #28]	@ (801f25c <striptrailing+0x44>)
 801f240:	4a07      	ldr	r2, [pc, #28]	@ (801f260 <striptrailing+0x48>)
 801f242:	2188      	movs	r1, #136	@ 0x88
 801f244:	4807      	ldr	r0, [pc, #28]	@ (801f264 <striptrailing+0x4c>)
 801f246:	f006 f89d 	bl	8025384 <__assert_func>
  *ptr = '\0';
 801f24a:	68fb      	ldr	r3, [r7, #12]
 801f24c:	2200      	movs	r2, #0
 801f24e:	701a      	strb	r2, [r3, #0]
  return str;
 801f250:	687b      	ldr	r3, [r7, #4]
}
 801f252:	4618      	mov	r0, r3
 801f254:	3710      	adds	r7, #16
 801f256:	46bd      	mov	sp, r7
 801f258:	bd80      	pop	{r7, pc}
 801f25a:	bf00      	nop
 801f25c:	08027558 	.word	0x08027558
 801f260:	0802be1c 	.word	0x0802be1c
 801f264:	08027534 	.word	0x08027534

0801f268 <save_strncpy>:

static TCHAR *save_strncpy(TCHAR *dest, const TCHAR *source, size_t maxlen, enum quote_option option)
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b086      	sub	sp, #24
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	60f8      	str	r0, [r7, #12]
 801f270:	60b9      	str	r1, [r7, #8]
 801f272:	607a      	str	r2, [r7, #4]
 801f274:	70fb      	strb	r3, [r7, #3]
  size_t d, s;

  assert(maxlen>0);
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d105      	bne.n	801f288 <save_strncpy+0x20>
 801f27c:	4b6e      	ldr	r3, [pc, #440]	@ (801f438 <save_strncpy+0x1d0>)
 801f27e:	4a6f      	ldr	r2, [pc, #444]	@ (801f43c <save_strncpy+0x1d4>)
 801f280:	2191      	movs	r1, #145	@ 0x91
 801f282:	486f      	ldr	r0, [pc, #444]	@ (801f440 <save_strncpy+0x1d8>)
 801f284:	f006 f87e 	bl	8025384 <__assert_func>
  assert(dest <= source || dest >= source + maxlen);
 801f288:	68fa      	ldr	r2, [r7, #12]
 801f28a:	68bb      	ldr	r3, [r7, #8]
 801f28c:	429a      	cmp	r2, r3
 801f28e:	d90b      	bls.n	801f2a8 <save_strncpy+0x40>
 801f290:	68ba      	ldr	r2, [r7, #8]
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	4413      	add	r3, r2
 801f296:	68fa      	ldr	r2, [r7, #12]
 801f298:	429a      	cmp	r2, r3
 801f29a:	d205      	bcs.n	801f2a8 <save_strncpy+0x40>
 801f29c:	4b69      	ldr	r3, [pc, #420]	@ (801f444 <save_strncpy+0x1dc>)
 801f29e:	4a67      	ldr	r2, [pc, #412]	@ (801f43c <save_strncpy+0x1d4>)
 801f2a0:	2192      	movs	r1, #146	@ 0x92
 801f2a2:	4867      	ldr	r0, [pc, #412]	@ (801f440 <save_strncpy+0x1d8>)
 801f2a4:	f006 f86e 	bl	8025384 <__assert_func>
  if (option == QUOTE_ENQUOTE && maxlen < 3)
 801f2a8:	78fb      	ldrb	r3, [r7, #3]
 801f2aa:	2b01      	cmp	r3, #1
 801f2ac:	d104      	bne.n	801f2b8 <save_strncpy+0x50>
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	2b02      	cmp	r3, #2
 801f2b2:	d801      	bhi.n	801f2b8 <save_strncpy+0x50>
    option = QUOTE_NONE;  /* cannot store two quotes and a terminating zero in less than 3 characters */
 801f2b4:	2300      	movs	r3, #0
 801f2b6:	70fb      	strb	r3, [r7, #3]

  switch (option) {
 801f2b8:	78fb      	ldrb	r3, [r7, #3]
 801f2ba:	2b02      	cmp	r3, #2
 801f2bc:	d076      	beq.n	801f3ac <save_strncpy+0x144>
 801f2be:	2b02      	cmp	r3, #2
 801f2c0:	f300 80ae 	bgt.w	801f420 <save_strncpy+0x1b8>
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	d002      	beq.n	801f2ce <save_strncpy+0x66>
 801f2c8:	2b01      	cmp	r3, #1
 801f2ca:	d029      	beq.n	801f320 <save_strncpy+0xb8>
 801f2cc:	e0a8      	b.n	801f420 <save_strncpy+0x1b8>
  case QUOTE_NONE:
    for (d = 0; d < maxlen - 1 && source[d] != '\0'; d++)
 801f2ce:	2300      	movs	r3, #0
 801f2d0:	617b      	str	r3, [r7, #20]
 801f2d2:	e00a      	b.n	801f2ea <save_strncpy+0x82>
      dest[d] = source[d];
 801f2d4:	68ba      	ldr	r2, [r7, #8]
 801f2d6:	697b      	ldr	r3, [r7, #20]
 801f2d8:	441a      	add	r2, r3
 801f2da:	68f9      	ldr	r1, [r7, #12]
 801f2dc:	697b      	ldr	r3, [r7, #20]
 801f2de:	440b      	add	r3, r1
 801f2e0:	7812      	ldrb	r2, [r2, #0]
 801f2e2:	701a      	strb	r2, [r3, #0]
    for (d = 0; d < maxlen - 1 && source[d] != '\0'; d++)
 801f2e4:	697b      	ldr	r3, [r7, #20]
 801f2e6:	3301      	adds	r3, #1
 801f2e8:	617b      	str	r3, [r7, #20]
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	3b01      	subs	r3, #1
 801f2ee:	697a      	ldr	r2, [r7, #20]
 801f2f0:	429a      	cmp	r2, r3
 801f2f2:	d205      	bcs.n	801f300 <save_strncpy+0x98>
 801f2f4:	68ba      	ldr	r2, [r7, #8]
 801f2f6:	697b      	ldr	r3, [r7, #20]
 801f2f8:	4413      	add	r3, r2
 801f2fa:	781b      	ldrb	r3, [r3, #0]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d1e9      	bne.n	801f2d4 <save_strncpy+0x6c>
    assert(d < maxlen);
 801f300:	697a      	ldr	r2, [r7, #20]
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	429a      	cmp	r2, r3
 801f306:	d305      	bcc.n	801f314 <save_strncpy+0xac>
 801f308:	4b4f      	ldr	r3, [pc, #316]	@ (801f448 <save_strncpy+0x1e0>)
 801f30a:	4a4c      	ldr	r2, [pc, #304]	@ (801f43c <save_strncpy+0x1d4>)
 801f30c:	219a      	movs	r1, #154	@ 0x9a
 801f30e:	484c      	ldr	r0, [pc, #304]	@ (801f440 <save_strncpy+0x1d8>)
 801f310:	f006 f838 	bl	8025384 <__assert_func>
    dest[d] = '\0';
 801f314:	68fa      	ldr	r2, [r7, #12]
 801f316:	697b      	ldr	r3, [r7, #20]
 801f318:	4413      	add	r3, r2
 801f31a:	2200      	movs	r2, #0
 801f31c:	701a      	strb	r2, [r3, #0]
    break;
 801f31e:	e085      	b.n	801f42c <save_strncpy+0x1c4>
  case QUOTE_ENQUOTE:
    d = 0;
 801f320:	2300      	movs	r3, #0
 801f322:	617b      	str	r3, [r7, #20]
    dest[d++] = '"';
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	1c5a      	adds	r2, r3, #1
 801f328:	617a      	str	r2, [r7, #20]
 801f32a:	68fa      	ldr	r2, [r7, #12]
 801f32c:	4413      	add	r3, r2
 801f32e:	2222      	movs	r2, #34	@ 0x22
 801f330:	701a      	strb	r2, [r3, #0]
    for (s = 0; source[s] != '\0' && d < maxlen - 2; s++, d++) {
 801f332:	2300      	movs	r3, #0
 801f334:	613b      	str	r3, [r7, #16]
 801f336:	e01f      	b.n	801f378 <save_strncpy+0x110>
      if (source[s] == '"') {
 801f338:	68ba      	ldr	r2, [r7, #8]
 801f33a:	693b      	ldr	r3, [r7, #16]
 801f33c:	4413      	add	r3, r2
 801f33e:	781b      	ldrb	r3, [r3, #0]
 801f340:	2b22      	cmp	r3, #34	@ 0x22
 801f342:	d10b      	bne.n	801f35c <save_strncpy+0xf4>
        if (d >= maxlen - 3)
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	3b03      	subs	r3, #3
 801f348:	697a      	ldr	r2, [r7, #20]
 801f34a:	429a      	cmp	r2, r3
 801f34c:	d220      	bcs.n	801f390 <save_strncpy+0x128>
          break;  /* no space to store the escape character plus the one that follows it */
        dest[d++] = '\\';
 801f34e:	697b      	ldr	r3, [r7, #20]
 801f350:	1c5a      	adds	r2, r3, #1
 801f352:	617a      	str	r2, [r7, #20]
 801f354:	68fa      	ldr	r2, [r7, #12]
 801f356:	4413      	add	r3, r2
 801f358:	225c      	movs	r2, #92	@ 0x5c
 801f35a:	701a      	strb	r2, [r3, #0]
      } /* if */
      dest[d] = source[s];
 801f35c:	68ba      	ldr	r2, [r7, #8]
 801f35e:	693b      	ldr	r3, [r7, #16]
 801f360:	441a      	add	r2, r3
 801f362:	68f9      	ldr	r1, [r7, #12]
 801f364:	697b      	ldr	r3, [r7, #20]
 801f366:	440b      	add	r3, r1
 801f368:	7812      	ldrb	r2, [r2, #0]
 801f36a:	701a      	strb	r2, [r3, #0]
    for (s = 0; source[s] != '\0' && d < maxlen - 2; s++, d++) {
 801f36c:	693b      	ldr	r3, [r7, #16]
 801f36e:	3301      	adds	r3, #1
 801f370:	613b      	str	r3, [r7, #16]
 801f372:	697b      	ldr	r3, [r7, #20]
 801f374:	3301      	adds	r3, #1
 801f376:	617b      	str	r3, [r7, #20]
 801f378:	68ba      	ldr	r2, [r7, #8]
 801f37a:	693b      	ldr	r3, [r7, #16]
 801f37c:	4413      	add	r3, r2
 801f37e:	781b      	ldrb	r3, [r3, #0]
 801f380:	2b00      	cmp	r3, #0
 801f382:	d006      	beq.n	801f392 <save_strncpy+0x12a>
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	3b02      	subs	r3, #2
 801f388:	697a      	ldr	r2, [r7, #20]
 801f38a:	429a      	cmp	r2, r3
 801f38c:	d3d4      	bcc.n	801f338 <save_strncpy+0xd0>
 801f38e:	e000      	b.n	801f392 <save_strncpy+0x12a>
          break;  /* no space to store the escape character plus the one that follows it */
 801f390:	bf00      	nop
    } /* for */
    dest[d++] = '"';
 801f392:	697b      	ldr	r3, [r7, #20]
 801f394:	1c5a      	adds	r2, r3, #1
 801f396:	617a      	str	r2, [r7, #20]
 801f398:	68fa      	ldr	r2, [r7, #12]
 801f39a:	4413      	add	r3, r2
 801f39c:	2222      	movs	r2, #34	@ 0x22
 801f39e:	701a      	strb	r2, [r3, #0]
    dest[d] = '\0';
 801f3a0:	68fa      	ldr	r2, [r7, #12]
 801f3a2:	697b      	ldr	r3, [r7, #20]
 801f3a4:	4413      	add	r3, r2
 801f3a6:	2200      	movs	r2, #0
 801f3a8:	701a      	strb	r2, [r3, #0]
    break;
 801f3aa:	e03f      	b.n	801f42c <save_strncpy+0x1c4>
  case QUOTE_DEQUOTE:
    for (d = s = 0; source[s] != '\0' && d < maxlen - 1; s++, d++) {
 801f3ac:	2300      	movs	r3, #0
 801f3ae:	613b      	str	r3, [r7, #16]
 801f3b0:	693b      	ldr	r3, [r7, #16]
 801f3b2:	617b      	str	r3, [r7, #20]
 801f3b4:	e023      	b.n	801f3fe <save_strncpy+0x196>
      if ((source[s] == '"' || source[s] == '\\') && source[s + 1] == '"')
 801f3b6:	68ba      	ldr	r2, [r7, #8]
 801f3b8:	693b      	ldr	r3, [r7, #16]
 801f3ba:	4413      	add	r3, r2
 801f3bc:	781b      	ldrb	r3, [r3, #0]
 801f3be:	2b22      	cmp	r3, #34	@ 0x22
 801f3c0:	d005      	beq.n	801f3ce <save_strncpy+0x166>
 801f3c2:	68ba      	ldr	r2, [r7, #8]
 801f3c4:	693b      	ldr	r3, [r7, #16]
 801f3c6:	4413      	add	r3, r2
 801f3c8:	781b      	ldrb	r3, [r3, #0]
 801f3ca:	2b5c      	cmp	r3, #92	@ 0x5c
 801f3cc:	d109      	bne.n	801f3e2 <save_strncpy+0x17a>
 801f3ce:	693b      	ldr	r3, [r7, #16]
 801f3d0:	3301      	adds	r3, #1
 801f3d2:	68ba      	ldr	r2, [r7, #8]
 801f3d4:	4413      	add	r3, r2
 801f3d6:	781b      	ldrb	r3, [r3, #0]
 801f3d8:	2b22      	cmp	r3, #34	@ 0x22
 801f3da:	d102      	bne.n	801f3e2 <save_strncpy+0x17a>
        s++;
 801f3dc:	693b      	ldr	r3, [r7, #16]
 801f3de:	3301      	adds	r3, #1
 801f3e0:	613b      	str	r3, [r7, #16]
      dest[d] = source[s];
 801f3e2:	68ba      	ldr	r2, [r7, #8]
 801f3e4:	693b      	ldr	r3, [r7, #16]
 801f3e6:	441a      	add	r2, r3
 801f3e8:	68f9      	ldr	r1, [r7, #12]
 801f3ea:	697b      	ldr	r3, [r7, #20]
 801f3ec:	440b      	add	r3, r1
 801f3ee:	7812      	ldrb	r2, [r2, #0]
 801f3f0:	701a      	strb	r2, [r3, #0]
    for (d = s = 0; source[s] != '\0' && d < maxlen - 1; s++, d++) {
 801f3f2:	693b      	ldr	r3, [r7, #16]
 801f3f4:	3301      	adds	r3, #1
 801f3f6:	613b      	str	r3, [r7, #16]
 801f3f8:	697b      	ldr	r3, [r7, #20]
 801f3fa:	3301      	adds	r3, #1
 801f3fc:	617b      	str	r3, [r7, #20]
 801f3fe:	68ba      	ldr	r2, [r7, #8]
 801f400:	693b      	ldr	r3, [r7, #16]
 801f402:	4413      	add	r3, r2
 801f404:	781b      	ldrb	r3, [r3, #0]
 801f406:	2b00      	cmp	r3, #0
 801f408:	d004      	beq.n	801f414 <save_strncpy+0x1ac>
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	3b01      	subs	r3, #1
 801f40e:	697a      	ldr	r2, [r7, #20]
 801f410:	429a      	cmp	r2, r3
 801f412:	d3d0      	bcc.n	801f3b6 <save_strncpy+0x14e>
    } /* for */
    dest[d] = '\0';
 801f414:	68fa      	ldr	r2, [r7, #12]
 801f416:	697b      	ldr	r3, [r7, #20]
 801f418:	4413      	add	r3, r2
 801f41a:	2200      	movs	r2, #0
 801f41c:	701a      	strb	r2, [r3, #0]
    break;
 801f41e:	e005      	b.n	801f42c <save_strncpy+0x1c4>
  default:
    assert(0);
 801f420:	4b0a      	ldr	r3, [pc, #40]	@ (801f44c <save_strncpy+0x1e4>)
 801f422:	4a06      	ldr	r2, [pc, #24]	@ (801f43c <save_strncpy+0x1d4>)
 801f424:	21b4      	movs	r1, #180	@ 0xb4
 801f426:	4806      	ldr	r0, [pc, #24]	@ (801f440 <save_strncpy+0x1d8>)
 801f428:	f005 ffac 	bl	8025384 <__assert_func>
  } /* switch */

  return dest;
 801f42c:	68fb      	ldr	r3, [r7, #12]
}
 801f42e:	4618      	mov	r0, r3
 801f430:	3718      	adds	r7, #24
 801f432:	46bd      	mov	sp, r7
 801f434:	bd80      	pop	{r7, pc}
 801f436:	bf00      	nop
 801f438:	08027564 	.word	0x08027564
 801f43c:	0802be2c 	.word	0x0802be2c
 801f440:	08027534 	.word	0x08027534
 801f444:	08027570 	.word	0x08027570
 801f448:	0802759c 	.word	0x0802759c
 801f44c:	080275a8 	.word	0x080275a8

0801f450 <cleanstring>:

static TCHAR *cleanstring(TCHAR *string, enum quote_option *quotes)
{
 801f450:	b580      	push	{r7, lr}
 801f452:	b084      	sub	sp, #16
 801f454:	af00      	add	r7, sp, #0
 801f456:	6078      	str	r0, [r7, #4]
 801f458:	6039      	str	r1, [r7, #0]
  int isstring;
  TCHAR *ep;

  assert(string != NULL);
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	d105      	bne.n	801f46c <cleanstring+0x1c>
 801f460:	4b44      	ldr	r3, [pc, #272]	@ (801f574 <cleanstring+0x124>)
 801f462:	4a45      	ldr	r2, [pc, #276]	@ (801f578 <cleanstring+0x128>)
 801f464:	21bf      	movs	r1, #191	@ 0xbf
 801f466:	4845      	ldr	r0, [pc, #276]	@ (801f57c <cleanstring+0x12c>)
 801f468:	f005 ff8c 	bl	8025384 <__assert_func>
  assert(quotes != NULL);
 801f46c:	683b      	ldr	r3, [r7, #0]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d105      	bne.n	801f47e <cleanstring+0x2e>
 801f472:	4b43      	ldr	r3, [pc, #268]	@ (801f580 <cleanstring+0x130>)
 801f474:	4a40      	ldr	r2, [pc, #256]	@ (801f578 <cleanstring+0x128>)
 801f476:	21c0      	movs	r1, #192	@ 0xc0
 801f478:	4840      	ldr	r0, [pc, #256]	@ (801f57c <cleanstring+0x12c>)
 801f47a:	f005 ff83 	bl	8025384 <__assert_func>

  /* Remove a trailing comment */
  isstring = 0;
 801f47e:	2300      	movs	r3, #0
 801f480:	60fb      	str	r3, [r7, #12]
  for (ep = string; *ep != '\0' && ((*ep != ';' && *ep != '#') || isstring); ep++) {
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	60bb      	str	r3, [r7, #8]
 801f486:	e023      	b.n	801f4d0 <cleanstring+0x80>
    if (*ep == '"') {
 801f488:	68bb      	ldr	r3, [r7, #8]
 801f48a:	781b      	ldrb	r3, [r3, #0]
 801f48c:	2b22      	cmp	r3, #34	@ 0x22
 801f48e:	d110      	bne.n	801f4b2 <cleanstring+0x62>
      if (*(ep + 1) == '"')
 801f490:	68bb      	ldr	r3, [r7, #8]
 801f492:	3301      	adds	r3, #1
 801f494:	781b      	ldrb	r3, [r3, #0]
 801f496:	2b22      	cmp	r3, #34	@ 0x22
 801f498:	d103      	bne.n	801f4a2 <cleanstring+0x52>
        ep++;                 /* skip "" (both quotes) */
 801f49a:	68bb      	ldr	r3, [r7, #8]
 801f49c:	3301      	adds	r3, #1
 801f49e:	60bb      	str	r3, [r7, #8]
 801f4a0:	e013      	b.n	801f4ca <cleanstring+0x7a>
      else
        isstring = !isstring; /* single quote, toggle isstring */
 801f4a2:	68fb      	ldr	r3, [r7, #12]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	bf0c      	ite	eq
 801f4a8:	2301      	moveq	r3, #1
 801f4aa:	2300      	movne	r3, #0
 801f4ac:	b2db      	uxtb	r3, r3
 801f4ae:	60fb      	str	r3, [r7, #12]
 801f4b0:	e00b      	b.n	801f4ca <cleanstring+0x7a>
    } else if (*ep == '\\' && *(ep + 1) == '"') {
 801f4b2:	68bb      	ldr	r3, [r7, #8]
 801f4b4:	781b      	ldrb	r3, [r3, #0]
 801f4b6:	2b5c      	cmp	r3, #92	@ 0x5c
 801f4b8:	d107      	bne.n	801f4ca <cleanstring+0x7a>
 801f4ba:	68bb      	ldr	r3, [r7, #8]
 801f4bc:	3301      	adds	r3, #1
 801f4be:	781b      	ldrb	r3, [r3, #0]
 801f4c0:	2b22      	cmp	r3, #34	@ 0x22
 801f4c2:	d102      	bne.n	801f4ca <cleanstring+0x7a>
      ep++;                   /* skip \" (both quotes */
 801f4c4:	68bb      	ldr	r3, [r7, #8]
 801f4c6:	3301      	adds	r3, #1
 801f4c8:	60bb      	str	r3, [r7, #8]
  for (ep = string; *ep != '\0' && ((*ep != ';' && *ep != '#') || isstring); ep++) {
 801f4ca:	68bb      	ldr	r3, [r7, #8]
 801f4cc:	3301      	adds	r3, #1
 801f4ce:	60bb      	str	r3, [r7, #8]
 801f4d0:	68bb      	ldr	r3, [r7, #8]
 801f4d2:	781b      	ldrb	r3, [r3, #0]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d00a      	beq.n	801f4ee <cleanstring+0x9e>
 801f4d8:	68bb      	ldr	r3, [r7, #8]
 801f4da:	781b      	ldrb	r3, [r3, #0]
 801f4dc:	2b3b      	cmp	r3, #59	@ 0x3b
 801f4de:	d003      	beq.n	801f4e8 <cleanstring+0x98>
 801f4e0:	68bb      	ldr	r3, [r7, #8]
 801f4e2:	781b      	ldrb	r3, [r3, #0]
 801f4e4:	2b23      	cmp	r3, #35	@ 0x23
 801f4e6:	d1cf      	bne.n	801f488 <cleanstring+0x38>
 801f4e8:	68fb      	ldr	r3, [r7, #12]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d1cc      	bne.n	801f488 <cleanstring+0x38>
    } /* if */
  } /* for */
  assert(ep != NULL && (*ep == '\0' || *ep == ';' || *ep == '#'));
 801f4ee:	68bb      	ldr	r3, [r7, #8]
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d00b      	beq.n	801f50c <cleanstring+0xbc>
 801f4f4:	68bb      	ldr	r3, [r7, #8]
 801f4f6:	781b      	ldrb	r3, [r3, #0]
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d00d      	beq.n	801f518 <cleanstring+0xc8>
 801f4fc:	68bb      	ldr	r3, [r7, #8]
 801f4fe:	781b      	ldrb	r3, [r3, #0]
 801f500:	2b3b      	cmp	r3, #59	@ 0x3b
 801f502:	d009      	beq.n	801f518 <cleanstring+0xc8>
 801f504:	68bb      	ldr	r3, [r7, #8]
 801f506:	781b      	ldrb	r3, [r3, #0]
 801f508:	2b23      	cmp	r3, #35	@ 0x23
 801f50a:	d005      	beq.n	801f518 <cleanstring+0xc8>
 801f50c:	4b1d      	ldr	r3, [pc, #116]	@ (801f584 <cleanstring+0x134>)
 801f50e:	4a1a      	ldr	r2, [pc, #104]	@ (801f578 <cleanstring+0x128>)
 801f510:	21ce      	movs	r1, #206	@ 0xce
 801f512:	481a      	ldr	r0, [pc, #104]	@ (801f57c <cleanstring+0x12c>)
 801f514:	f005 ff36 	bl	8025384 <__assert_func>
  *ep = '\0';                 /* terminate at a comment */
 801f518:	68bb      	ldr	r3, [r7, #8]
 801f51a:	2200      	movs	r2, #0
 801f51c:	701a      	strb	r2, [r3, #0]
  striptrailing(string);
 801f51e:	6878      	ldr	r0, [r7, #4]
 801f520:	f7ff fe7a 	bl	801f218 <striptrailing>
  /* Remove double quotes surrounding a value */
  *quotes = QUOTE_NONE;
 801f524:	683b      	ldr	r3, [r7, #0]
 801f526:	2200      	movs	r2, #0
 801f528:	701a      	strb	r2, [r3, #0]
  if (*string == '"' && (ep = _tcschr(string, '\0')) != NULL && *(ep - 1) == '"') {
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	781b      	ldrb	r3, [r3, #0]
 801f52e:	2b22      	cmp	r3, #34	@ 0x22
 801f530:	d11b      	bne.n	801f56a <cleanstring+0x11a>
 801f532:	6878      	ldr	r0, [r7, #4]
 801f534:	f7e0 feb6 	bl	80002a4 <strlen>
 801f538:	4603      	mov	r3, r0
 801f53a:	461a      	mov	r2, r3
 801f53c:	687b      	ldr	r3, [r7, #4]
 801f53e:	4413      	add	r3, r2
 801f540:	60bb      	str	r3, [r7, #8]
 801f542:	68bb      	ldr	r3, [r7, #8]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d010      	beq.n	801f56a <cleanstring+0x11a>
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	3b01      	subs	r3, #1
 801f54c:	781b      	ldrb	r3, [r3, #0]
 801f54e:	2b22      	cmp	r3, #34	@ 0x22
 801f550:	d10b      	bne.n	801f56a <cleanstring+0x11a>
    string++;
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	3301      	adds	r3, #1
 801f556:	607b      	str	r3, [r7, #4]
    *--ep = '\0';
 801f558:	68bb      	ldr	r3, [r7, #8]
 801f55a:	3b01      	subs	r3, #1
 801f55c:	60bb      	str	r3, [r7, #8]
 801f55e:	68bb      	ldr	r3, [r7, #8]
 801f560:	2200      	movs	r2, #0
 801f562:	701a      	strb	r2, [r3, #0]
    *quotes = QUOTE_DEQUOTE;  /* this is a string, so remove escaped characters */
 801f564:	683b      	ldr	r3, [r7, #0]
 801f566:	2202      	movs	r2, #2
 801f568:	701a      	strb	r2, [r3, #0]
  } /* if */
  return string;
 801f56a:	687b      	ldr	r3, [r7, #4]
}
 801f56c:	4618      	mov	r0, r3
 801f56e:	3710      	adds	r7, #16
 801f570:	46bd      	mov	sp, r7
 801f572:	bd80      	pop	{r7, pc}
 801f574:	080275ac 	.word	0x080275ac
 801f578:	0802be3c 	.word	0x0802be3c
 801f57c:	08027534 	.word	0x08027534
 801f580:	080275bc 	.word	0x080275bc
 801f584:	080275cc 	.word	0x080275cc

0801f588 <getkeystring>:

static int getkeystring(INI_FILETYPE *fp, const TCHAR *Section, const TCHAR *Key,
                        int idxSection, int idxKey, TCHAR *Buffer, int BufferSize)
{
 801f588:	b580      	push	{r7, lr}
 801f58a:	b09a      	sub	sp, #104	@ 0x68
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	60f8      	str	r0, [r7, #12]
 801f590:	60b9      	str	r1, [r7, #8]
 801f592:	607a      	str	r2, [r7, #4]
 801f594:	603b      	str	r3, [r7, #0]
  TCHAR *sp, *ep;
  int len, idx;
  enum quote_option quotes;
  TCHAR LocalBuffer[INI_BUFFERSIZE];

  assert(fp != NULL);
 801f596:	68fb      	ldr	r3, [r7, #12]
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d105      	bne.n	801f5a8 <getkeystring+0x20>
 801f59c:	4b93      	ldr	r3, [pc, #588]	@ (801f7ec <getkeystring+0x264>)
 801f59e:	4a94      	ldr	r2, [pc, #592]	@ (801f7f0 <getkeystring+0x268>)
 801f5a0:	21e3      	movs	r1, #227	@ 0xe3
 801f5a2:	4894      	ldr	r0, [pc, #592]	@ (801f7f4 <getkeystring+0x26c>)
 801f5a4:	f005 feee 	bl	8025384 <__assert_func>
  /* Move through file 1 line at a time until a section is matched or EOF. If
   * parameter Section is NULL, only look at keys above the first section. If
   * idxSection is postive, copy the relevant section name.
   */
  len = (Section != NULL) ? _tcslen(Section) : 0;
 801f5a8:	68bb      	ldr	r3, [r7, #8]
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d004      	beq.n	801f5b8 <getkeystring+0x30>
 801f5ae:	68b8      	ldr	r0, [r7, #8]
 801f5b0:	f7e0 fe78 	bl	80002a4 <strlen>
 801f5b4:	4603      	mov	r3, r0
 801f5b6:	e000      	b.n	801f5ba <getkeystring+0x32>
 801f5b8:	2300      	movs	r3, #0
 801f5ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (len > 0 || idxSection >= 0) {
 801f5bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	dc02      	bgt.n	801f5c8 <getkeystring+0x40>
 801f5c2:	683b      	ldr	r3, [r7, #0]
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	db60      	blt.n	801f68a <getkeystring+0x102>
    idx = -1;
 801f5c8:	f04f 33ff 	mov.w	r3, #4294967295
 801f5cc:	663b      	str	r3, [r7, #96]	@ 0x60
    do {
      if (!ini_read(LocalBuffer, INI_BUFFERSIZE, fp))
 801f5ce:	f107 0314 	add.w	r3, r7, #20
 801f5d2:	68fa      	ldr	r2, [r7, #12]
 801f5d4:	2140      	movs	r1, #64	@ 0x40
 801f5d6:	4618      	mov	r0, r3
 801f5d8:	f7fc fa19 	bl	801ba0e <f_gets>
 801f5dc:	4603      	mov	r3, r0
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d101      	bne.n	801f5e6 <getkeystring+0x5e>
        return 0;
 801f5e2:	2300      	movs	r3, #0
 801f5e4:	e125      	b.n	801f832 <getkeystring+0x2aa>
      sp = skipleading(LocalBuffer);
 801f5e6:	f107 0314 	add.w	r3, r7, #20
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	f7ff fdc0 	bl	801f170 <skipleading>
 801f5f0:	65b8      	str	r0, [r7, #88]	@ 0x58
      ep = _tcschr(sp, ']');
 801f5f2:	215d      	movs	r1, #93	@ 0x5d
 801f5f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801f5f6:	f006 fe2a 	bl	802624e <strchr>
 801f5fa:	6678      	str	r0, [r7, #100]	@ 0x64
    } while (*sp != '[' || ep == NULL || (((int)(ep-sp-1) != len || _tcsnicmp(sp+1,Section,len) != 0) && ++idx != idxSection));
 801f5fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f5fe:	781b      	ldrb	r3, [r3, #0]
 801f600:	2b5b      	cmp	r3, #91	@ 0x5b
 801f602:	d1e4      	bne.n	801f5ce <getkeystring+0x46>
 801f604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f606:	2b00      	cmp	r3, #0
 801f608:	d0e1      	beq.n	801f5ce <getkeystring+0x46>
 801f60a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801f60c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f60e:	1ad3      	subs	r3, r2, r3
 801f610:	3b01      	subs	r3, #1
 801f612:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801f614:	429a      	cmp	r2, r3
 801f616:	d109      	bne.n	801f62c <getkeystring+0xa4>
 801f618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f61a:	3301      	adds	r3, #1
 801f61c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801f61e:	68b9      	ldr	r1, [r7, #8]
 801f620:	4618      	mov	r0, r3
 801f622:	f006 fe21 	bl	8026268 <strncasecmp>
 801f626:	4603      	mov	r3, r0
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d006      	beq.n	801f63a <getkeystring+0xb2>
 801f62c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f62e:	3301      	adds	r3, #1
 801f630:	663b      	str	r3, [r7, #96]	@ 0x60
 801f632:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801f634:	683b      	ldr	r3, [r7, #0]
 801f636:	429a      	cmp	r2, r3
 801f638:	d1c9      	bne.n	801f5ce <getkeystring+0x46>
    if (idxSection >= 0) {
 801f63a:	683b      	ldr	r3, [r7, #0]
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	db24      	blt.n	801f68a <getkeystring+0x102>
      if (idx == idxSection) {
 801f640:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801f642:	683b      	ldr	r3, [r7, #0]
 801f644:	429a      	cmp	r2, r3
 801f646:	d11e      	bne.n	801f686 <getkeystring+0xfe>
        assert(ep != NULL);
 801f648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	d105      	bne.n	801f65a <getkeystring+0xd2>
 801f64e:	4b6a      	ldr	r3, [pc, #424]	@ (801f7f8 <getkeystring+0x270>)
 801f650:	4a67      	ldr	r2, [pc, #412]	@ (801f7f0 <getkeystring+0x268>)
 801f652:	21f3      	movs	r1, #243	@ 0xf3
 801f654:	4867      	ldr	r0, [pc, #412]	@ (801f7f4 <getkeystring+0x26c>)
 801f656:	f005 fe95 	bl	8025384 <__assert_func>
        assert(*ep == ']');
 801f65a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f65c:	781b      	ldrb	r3, [r3, #0]
 801f65e:	2b5d      	cmp	r3, #93	@ 0x5d
 801f660:	d005      	beq.n	801f66e <getkeystring+0xe6>
 801f662:	4b66      	ldr	r3, [pc, #408]	@ (801f7fc <getkeystring+0x274>)
 801f664:	4a62      	ldr	r2, [pc, #392]	@ (801f7f0 <getkeystring+0x268>)
 801f666:	21f4      	movs	r1, #244	@ 0xf4
 801f668:	4862      	ldr	r0, [pc, #392]	@ (801f7f4 <getkeystring+0x26c>)
 801f66a:	f005 fe8b 	bl	8025384 <__assert_func>
        *ep = '\0';
 801f66e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f670:	2200      	movs	r2, #0
 801f672:	701a      	strb	r2, [r3, #0]
        save_strncpy(Buffer, sp + 1, BufferSize, QUOTE_NONE);
 801f674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f676:	1c59      	adds	r1, r3, #1
 801f678:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f67a:	2300      	movs	r3, #0
 801f67c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801f67e:	f7ff fdf3 	bl	801f268 <save_strncpy>
        return 1;
 801f682:	2301      	movs	r3, #1
 801f684:	e0d5      	b.n	801f832 <getkeystring+0x2aa>
      } /* if */
      return 0; /* no more section found */
 801f686:	2300      	movs	r3, #0
 801f688:	e0d3      	b.n	801f832 <getkeystring+0x2aa>
  } /* if */

  /* Now that the section has been found, find the entry.
   * Stop searching upon leaving the section's area.
   */
  assert(Key != NULL || idxKey >= 0);
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d109      	bne.n	801f6a4 <getkeystring+0x11c>
 801f690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f692:	2b00      	cmp	r3, #0
 801f694:	da06      	bge.n	801f6a4 <getkeystring+0x11c>
 801f696:	4b5a      	ldr	r3, [pc, #360]	@ (801f800 <getkeystring+0x278>)
 801f698:	4a55      	ldr	r2, [pc, #340]	@ (801f7f0 <getkeystring+0x268>)
 801f69a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801f69e:	4855      	ldr	r0, [pc, #340]	@ (801f7f4 <getkeystring+0x26c>)
 801f6a0:	f005 fe70 	bl	8025384 <__assert_func>
  len = (Key != NULL) ? (int)_tcslen(Key) : 0;
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	d004      	beq.n	801f6b4 <getkeystring+0x12c>
 801f6aa:	6878      	ldr	r0, [r7, #4]
 801f6ac:	f7e0 fdfa 	bl	80002a4 <strlen>
 801f6b0:	4603      	mov	r3, r0
 801f6b2:	e000      	b.n	801f6b6 <getkeystring+0x12e>
 801f6b4:	2300      	movs	r3, #0
 801f6b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  idx = -1;
 801f6b8:	f04f 33ff 	mov.w	r3, #4294967295
 801f6bc:	663b      	str	r3, [r7, #96]	@ 0x60
  do {
    if (!ini_read(LocalBuffer,INI_BUFFERSIZE,fp) || *(sp = skipleading(LocalBuffer)) == '[')
 801f6be:	f107 0314 	add.w	r3, r7, #20
 801f6c2:	68fa      	ldr	r2, [r7, #12]
 801f6c4:	2140      	movs	r1, #64	@ 0x40
 801f6c6:	4618      	mov	r0, r3
 801f6c8:	f7fc f9a1 	bl	801ba0e <f_gets>
 801f6cc:	4603      	mov	r3, r0
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d009      	beq.n	801f6e6 <getkeystring+0x15e>
 801f6d2:	f107 0314 	add.w	r3, r7, #20
 801f6d6:	4618      	mov	r0, r3
 801f6d8:	f7ff fd4a 	bl	801f170 <skipleading>
 801f6dc:	65b8      	str	r0, [r7, #88]	@ 0x58
 801f6de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f6e0:	781b      	ldrb	r3, [r3, #0]
 801f6e2:	2b5b      	cmp	r3, #91	@ 0x5b
 801f6e4:	d101      	bne.n	801f6ea <getkeystring+0x162>
      return 0;
 801f6e6:	2300      	movs	r3, #0
 801f6e8:	e0a3      	b.n	801f832 <getkeystring+0x2aa>
    sp = skipleading(LocalBuffer);
 801f6ea:	f107 0314 	add.w	r3, r7, #20
 801f6ee:	4618      	mov	r0, r3
 801f6f0:	f7ff fd3e 	bl	801f170 <skipleading>
 801f6f4:	65b8      	str	r0, [r7, #88]	@ 0x58
    ep = _tcschr(sp, '='); /* Parse out the equal sign */
 801f6f6:	213d      	movs	r1, #61	@ 0x3d
 801f6f8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801f6fa:	f006 fda8 	bl	802624e <strchr>
 801f6fe:	6678      	str	r0, [r7, #100]	@ 0x64
    if (ep == NULL)
 801f700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f702:	2b00      	cmp	r3, #0
 801f704:	d104      	bne.n	801f710 <getkeystring+0x188>
      ep = _tcschr(sp, ':');
 801f706:	213a      	movs	r1, #58	@ 0x3a
 801f708:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801f70a:	f006 fda0 	bl	802624e <strchr>
 801f70e:	6678      	str	r0, [r7, #100]	@ 0x64
  } while (*sp == ';' || *sp == '#' || ep == NULL || (((int)(skiptrailing(ep,sp)-sp) != len || _tcsnicmp(sp,Key,len) != 0) && ++idx != idxKey));
 801f710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f712:	781b      	ldrb	r3, [r3, #0]
 801f714:	2b3b      	cmp	r3, #59	@ 0x3b
 801f716:	d0d2      	beq.n	801f6be <getkeystring+0x136>
 801f718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f71a:	781b      	ldrb	r3, [r3, #0]
 801f71c:	2b23      	cmp	r3, #35	@ 0x23
 801f71e:	d0ce      	beq.n	801f6be <getkeystring+0x136>
 801f720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f722:	2b00      	cmp	r3, #0
 801f724:	d0cb      	beq.n	801f6be <getkeystring+0x136>
 801f726:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801f728:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801f72a:	f7ff fd45 	bl	801f1b8 <skiptrailing>
 801f72e:	4602      	mov	r2, r0
 801f730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f732:	1ad3      	subs	r3, r2, r3
 801f734:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801f736:	429a      	cmp	r2, r3
 801f738:	d108      	bne.n	801f74c <getkeystring+0x1c4>
 801f73a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f73c:	461a      	mov	r2, r3
 801f73e:	6879      	ldr	r1, [r7, #4]
 801f740:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801f742:	f006 fd91 	bl	8026268 <strncasecmp>
 801f746:	4603      	mov	r3, r0
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d006      	beq.n	801f75a <getkeystring+0x1d2>
 801f74c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f74e:	3301      	adds	r3, #1
 801f750:	663b      	str	r3, [r7, #96]	@ 0x60
 801f752:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801f754:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f756:	429a      	cmp	r2, r3
 801f758:	d1b1      	bne.n	801f6be <getkeystring+0x136>
  if (idxKey >= 0) {
 801f75a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	db2c      	blt.n	801f7ba <getkeystring+0x232>
    if (idx == idxKey) {
 801f760:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801f762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f764:	429a      	cmp	r2, r3
 801f766:	d126      	bne.n	801f7b6 <getkeystring+0x22e>
      assert(ep != NULL);
 801f768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	d106      	bne.n	801f77c <getkeystring+0x1f4>
 801f76e:	4b22      	ldr	r3, [pc, #136]	@ (801f7f8 <getkeystring+0x270>)
 801f770:	4a1f      	ldr	r2, [pc, #124]	@ (801f7f0 <getkeystring+0x268>)
 801f772:	f240 110d 	movw	r1, #269	@ 0x10d
 801f776:	481f      	ldr	r0, [pc, #124]	@ (801f7f4 <getkeystring+0x26c>)
 801f778:	f005 fe04 	bl	8025384 <__assert_func>
      assert(*ep == '=' || *ep == ':');
 801f77c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f77e:	781b      	ldrb	r3, [r3, #0]
 801f780:	2b3d      	cmp	r3, #61	@ 0x3d
 801f782:	d00a      	beq.n	801f79a <getkeystring+0x212>
 801f784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f786:	781b      	ldrb	r3, [r3, #0]
 801f788:	2b3a      	cmp	r3, #58	@ 0x3a
 801f78a:	d006      	beq.n	801f79a <getkeystring+0x212>
 801f78c:	4b1d      	ldr	r3, [pc, #116]	@ (801f804 <getkeystring+0x27c>)
 801f78e:	4a18      	ldr	r2, [pc, #96]	@ (801f7f0 <getkeystring+0x268>)
 801f790:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 801f794:	4817      	ldr	r0, [pc, #92]	@ (801f7f4 <getkeystring+0x26c>)
 801f796:	f005 fdf5 	bl	8025384 <__assert_func>
      *ep = '\0';
 801f79a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f79c:	2200      	movs	r2, #0
 801f79e:	701a      	strb	r2, [r3, #0]
      striptrailing(sp);
 801f7a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801f7a2:	f7ff fd39 	bl	801f218 <striptrailing>
      save_strncpy(Buffer, sp, BufferSize, QUOTE_NONE);
 801f7a6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f7a8:	2300      	movs	r3, #0
 801f7aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801f7ac:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801f7ae:	f7ff fd5b 	bl	801f268 <save_strncpy>
      return 1;
 801f7b2:	2301      	movs	r3, #1
 801f7b4:	e03d      	b.n	801f832 <getkeystring+0x2aa>
    } /* if */
    return 0;   /* no more key found (in this section) */
 801f7b6:	2300      	movs	r3, #0
 801f7b8:	e03b      	b.n	801f832 <getkeystring+0x2aa>
  } /* if */

  /* Copy up to BufferSize chars to buffer */
  assert(ep != NULL);
 801f7ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	d106      	bne.n	801f7ce <getkeystring+0x246>
 801f7c0:	4b0d      	ldr	r3, [pc, #52]	@ (801f7f8 <getkeystring+0x270>)
 801f7c2:	4a0b      	ldr	r2, [pc, #44]	@ (801f7f0 <getkeystring+0x268>)
 801f7c4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801f7c8:	480a      	ldr	r0, [pc, #40]	@ (801f7f4 <getkeystring+0x26c>)
 801f7ca:	f005 fddb 	bl	8025384 <__assert_func>
  assert(*ep == '=' || *ep == ':');
 801f7ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7d0:	781b      	ldrb	r3, [r3, #0]
 801f7d2:	2b3d      	cmp	r3, #61	@ 0x3d
 801f7d4:	d018      	beq.n	801f808 <getkeystring+0x280>
 801f7d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7d8:	781b      	ldrb	r3, [r3, #0]
 801f7da:	2b3a      	cmp	r3, #58	@ 0x3a
 801f7dc:	d014      	beq.n	801f808 <getkeystring+0x280>
 801f7de:	4b09      	ldr	r3, [pc, #36]	@ (801f804 <getkeystring+0x27c>)
 801f7e0:	4a03      	ldr	r2, [pc, #12]	@ (801f7f0 <getkeystring+0x268>)
 801f7e2:	f240 1119 	movw	r1, #281	@ 0x119
 801f7e6:	4803      	ldr	r0, [pc, #12]	@ (801f7f4 <getkeystring+0x26c>)
 801f7e8:	f005 fdcc 	bl	8025384 <__assert_func>
 801f7ec:	08027604 	.word	0x08027604
 801f7f0:	0802be48 	.word	0x0802be48
 801f7f4:	08027534 	.word	0x08027534
 801f7f8:	08027610 	.word	0x08027610
 801f7fc:	0802761c 	.word	0x0802761c
 801f800:	08027628 	.word	0x08027628
 801f804:	08027644 	.word	0x08027644
  sp = skipleading(ep + 1);
 801f808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f80a:	3301      	adds	r3, #1
 801f80c:	4618      	mov	r0, r3
 801f80e:	f7ff fcaf 	bl	801f170 <skipleading>
 801f812:	65b8      	str	r0, [r7, #88]	@ 0x58
  sp = cleanstring(sp, &quotes);  /* Remove a trailing comment */
 801f814:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 801f818:	4619      	mov	r1, r3
 801f81a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801f81c:	f7ff fe18 	bl	801f450 <cleanstring>
 801f820:	65b8      	str	r0, [r7, #88]	@ 0x58
  save_strncpy(Buffer, sp, BufferSize, quotes);
 801f822:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f824:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801f828:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801f82a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801f82c:	f7ff fd1c 	bl	801f268 <save_strncpy>
  return 1;
 801f830:	2301      	movs	r3, #1
}
 801f832:	4618      	mov	r0, r3
 801f834:	3768      	adds	r7, #104	@ 0x68
 801f836:	46bd      	mov	sp, r7
 801f838:	bd80      	pop	{r7, pc}
 801f83a:	bf00      	nop

0801f83c <ini_gets>:
 *
 * \return            the number of characters copied into the supplied buffer
 */
int ini_gets(const TCHAR *Section, const TCHAR *Key, const TCHAR *DefValue,
             TCHAR *Buffer, int BufferSize, const TCHAR *Filename)
{
 801f83c:	b590      	push	{r4, r7, lr}
 801f83e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 801f842:	af04      	add	r7, sp, #16
 801f844:	f507 7412 	add.w	r4, r7, #584	@ 0x248
 801f848:	f5a4 740f 	sub.w	r4, r4, #572	@ 0x23c
 801f84c:	6020      	str	r0, [r4, #0]
 801f84e:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 801f852:	f5a0 7010 	sub.w	r0, r0, #576	@ 0x240
 801f856:	6001      	str	r1, [r0, #0]
 801f858:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 801f85c:	f5a1 7111 	sub.w	r1, r1, #580	@ 0x244
 801f860:	600a      	str	r2, [r1, #0]
 801f862:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 801f866:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 801f86a:	6013      	str	r3, [r2, #0]
  INI_FILETYPE fp;
  int ok = 0;
 801f86c:	2300      	movs	r3, #0
 801f86e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

  if (Buffer == NULL || BufferSize <= 0 || Key == NULL)
 801f872:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f876:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d00a      	beq.n	801f896 <ini_gets+0x5a>
 801f880:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801f884:	2b00      	cmp	r3, #0
 801f886:	dd06      	ble.n	801f896 <ini_gets+0x5a>
 801f888:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f88c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801f890:	681b      	ldr	r3, [r3, #0]
 801f892:	2b00      	cmp	r3, #0
 801f894:	d101      	bne.n	801f89a <ini_gets+0x5e>
    return 0;
 801f896:	2300      	movs	r3, #0
 801f898:	e048      	b.n	801f92c <ini_gets+0xf0>
  if (ini_openread(Filename, &fp)) {
 801f89a:	f107 0314 	add.w	r3, r7, #20
 801f89e:	2201      	movs	r2, #1
 801f8a0:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	f7fa fb1f 	bl	8019ee8 <f_open>
 801f8aa:	4603      	mov	r3, r0
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d122      	bne.n	801f8f6 <ini_gets+0xba>
    ok = getkeystring(&fp, Section, Key, -1, -1, Buffer, BufferSize);
 801f8b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f8b4:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 801f8b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f8bc:	f5a3 710f 	sub.w	r1, r3, #572	@ 0x23c
 801f8c0:	f107 0014 	add.w	r0, r7, #20
 801f8c4:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801f8c8:	9302      	str	r3, [sp, #8]
 801f8ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f8ce:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	9301      	str	r3, [sp, #4]
 801f8d6:	f04f 33ff 	mov.w	r3, #4294967295
 801f8da:	9300      	str	r3, [sp, #0]
 801f8dc:	f04f 33ff 	mov.w	r3, #4294967295
 801f8e0:	6812      	ldr	r2, [r2, #0]
 801f8e2:	6809      	ldr	r1, [r1, #0]
 801f8e4:	f7ff fe50 	bl	801f588 <getkeystring>
 801f8e8:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
    (void)ini_close(&fp);
 801f8ec:	f107 0314 	add.w	r3, r7, #20
 801f8f0:	4618      	mov	r0, r3
 801f8f2:	f7fb f855 	bl	801a9a0 <f_close>
  } /* if */
  if (!ok)
 801f8f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d10e      	bne.n	801f91c <ini_gets+0xe0>
    save_strncpy(Buffer, DefValue, BufferSize, QUOTE_NONE);
 801f8fe:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 801f902:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f906:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 801f90a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f90e:	f5a3 7012 	sub.w	r0, r3, #584	@ 0x248
 801f912:	2300      	movs	r3, #0
 801f914:	6809      	ldr	r1, [r1, #0]
 801f916:	6800      	ldr	r0, [r0, #0]
 801f918:	f7ff fca6 	bl	801f268 <save_strncpy>
  return _tcslen(Buffer);
 801f91c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 801f920:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801f924:	6818      	ldr	r0, [r3, #0]
 801f926:	f7e0 fcbd 	bl	80002a4 <strlen>
 801f92a:	4603      	mov	r3, r0
}
 801f92c:	4618      	mov	r0, r3
 801f92e:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 801f932:	46bd      	mov	sp, r7
 801f934:	bd90      	pop	{r4, r7, pc}
	...

0801f938 <ini_getl>:
 * \param Filename    the name of the .ini file to read from
 *
 * \return            the value located at Key
 */
long ini_getl(const TCHAR *Section, const TCHAR *Key, long DefValue, const TCHAR *Filename)
{
 801f938:	b580      	push	{r7, lr}
 801f93a:	b098      	sub	sp, #96	@ 0x60
 801f93c:	af02      	add	r7, sp, #8
 801f93e:	60f8      	str	r0, [r7, #12]
 801f940:	60b9      	str	r1, [r7, #8]
 801f942:	607a      	str	r2, [r7, #4]
 801f944:	603b      	str	r3, [r7, #0]
  TCHAR LocalBuffer[64];
  int len = ini_gets(Section, Key, __T(""), LocalBuffer, sizearray(LocalBuffer), Filename);
 801f946:	f107 0210 	add.w	r2, r7, #16
 801f94a:	683b      	ldr	r3, [r7, #0]
 801f94c:	9301      	str	r3, [sp, #4]
 801f94e:	2340      	movs	r3, #64	@ 0x40
 801f950:	9300      	str	r3, [sp, #0]
 801f952:	4613      	mov	r3, r2
 801f954:	4a1b      	ldr	r2, [pc, #108]	@ (801f9c4 <ini_getl+0x8c>)
 801f956:	68b9      	ldr	r1, [r7, #8]
 801f958:	68f8      	ldr	r0, [r7, #12]
 801f95a:	f7ff ff6f 	bl	801f83c <ini_gets>
 801f95e:	6578      	str	r0, [r7, #84]	@ 0x54
  return (len == 0) ? DefValue
                    : ((len >= 2 && _totupper(LocalBuffer[1]) == 'X') ? _tcstol(LocalBuffer, NULL, 16)
 801f960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f962:	2b00      	cmp	r3, #0
 801f964:	d029      	beq.n	801f9ba <ini_getl+0x82>
                                                                      : _tcstol(LocalBuffer, NULL, 10));
 801f966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f968:	2b01      	cmp	r3, #1
 801f96a:	dd1d      	ble.n	801f9a8 <ini_getl+0x70>
                    : ((len >= 2 && _totupper(LocalBuffer[1]) == 'X') ? _tcstol(LocalBuffer, NULL, 16)
 801f96c:	7c7b      	ldrb	r3, [r7, #17]
 801f96e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 801f972:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801f976:	3301      	adds	r3, #1
 801f978:	4a13      	ldr	r2, [pc, #76]	@ (801f9c8 <ini_getl+0x90>)
 801f97a:	4413      	add	r3, r2
 801f97c:	781b      	ldrb	r3, [r3, #0]
 801f97e:	f003 0303 	and.w	r3, r3, #3
 801f982:	2b02      	cmp	r3, #2
 801f984:	d103      	bne.n	801f98e <ini_getl+0x56>
 801f986:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801f98a:	3b20      	subs	r3, #32
 801f98c:	e001      	b.n	801f992 <ini_getl+0x5a>
 801f98e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801f992:	2b58      	cmp	r3, #88	@ 0x58
 801f994:	d108      	bne.n	801f9a8 <ini_getl+0x70>
 801f996:	f107 0310 	add.w	r3, r7, #16
 801f99a:	2210      	movs	r2, #16
 801f99c:	2100      	movs	r1, #0
 801f99e:	4618      	mov	r0, r3
 801f9a0:	f005 fe58 	bl	8025654 <strtol>
 801f9a4:	4603      	mov	r3, r0
                                                                      : _tcstol(LocalBuffer, NULL, 10));
 801f9a6:	e009      	b.n	801f9bc <ini_getl+0x84>
 801f9a8:	f107 0310 	add.w	r3, r7, #16
 801f9ac:	220a      	movs	r2, #10
 801f9ae:	2100      	movs	r1, #0
 801f9b0:	4618      	mov	r0, r3
 801f9b2:	f005 fe4f 	bl	8025654 <strtol>
 801f9b6:	4603      	mov	r3, r0
 801f9b8:	e000      	b.n	801f9bc <ini_getl+0x84>
                    : ((len >= 2 && _totupper(LocalBuffer[1]) == 'X') ? _tcstol(LocalBuffer, NULL, 16)
 801f9ba:	687b      	ldr	r3, [r7, #4]
}
 801f9bc:	4618      	mov	r0, r3
 801f9be:	3758      	adds	r7, #88	@ 0x58
 801f9c0:	46bd      	mov	sp, r7
 801f9c2:	bd80      	pop	{r7, pc}
 801f9c4:	08027660 	.word	0x08027660
 801f9c8:	0802c3d0 	.word	0x0802c3d0

0801f9cc <ini_tempname>:
}
#endif /* INI_NOBROWSE */

#if ! defined INI_READONLY
static void ini_tempname(TCHAR *dest, const TCHAR *source, int maxlength)
{
 801f9cc:	b580      	push	{r7, lr}
 801f9ce:	b086      	sub	sp, #24
 801f9d0:	af00      	add	r7, sp, #0
 801f9d2:	60f8      	str	r0, [r7, #12]
 801f9d4:	60b9      	str	r1, [r7, #8]
 801f9d6:	607a      	str	r2, [r7, #4]
  TCHAR *p;

  save_strncpy(dest, source, maxlength, QUOTE_NONE);
 801f9d8:	687a      	ldr	r2, [r7, #4]
 801f9da:	2300      	movs	r3, #0
 801f9dc:	68b9      	ldr	r1, [r7, #8]
 801f9de:	68f8      	ldr	r0, [r7, #12]
 801f9e0:	f7ff fc42 	bl	801f268 <save_strncpy>
  p = _tcsrchr(dest, '\0');
 801f9e4:	68f8      	ldr	r0, [r7, #12]
 801f9e6:	f7e0 fc5d 	bl	80002a4 <strlen>
 801f9ea:	4603      	mov	r3, r0
 801f9ec:	461a      	mov	r2, r3
 801f9ee:	68fb      	ldr	r3, [r7, #12]
 801f9f0:	4413      	add	r3, r2
 801f9f2:	617b      	str	r3, [r7, #20]
  assert(p != NULL);
 801f9f4:	697b      	ldr	r3, [r7, #20]
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	d106      	bne.n	801fa08 <ini_tempname+0x3c>
 801f9fa:	4b07      	ldr	r3, [pc, #28]	@ (801fa18 <ini_tempname+0x4c>)
 801f9fc:	4a07      	ldr	r2, [pc, #28]	@ (801fa1c <ini_tempname+0x50>)
 801f9fe:	f240 2102 	movw	r1, #514	@ 0x202
 801fa02:	4807      	ldr	r0, [pc, #28]	@ (801fa20 <ini_tempname+0x54>)
 801fa04:	f005 fcbe 	bl	8025384 <__assert_func>
  *(p - 1) = '~';
 801fa08:	697b      	ldr	r3, [r7, #20]
 801fa0a:	3b01      	subs	r3, #1
 801fa0c:	227e      	movs	r2, #126	@ 0x7e
 801fa0e:	701a      	strb	r2, [r3, #0]
}
 801fa10:	bf00      	nop
 801fa12:	3718      	adds	r7, #24
 801fa14:	46bd      	mov	sp, r7
 801fa16:	bd80      	pop	{r7, pc}
 801fa18:	08027664 	.word	0x08027664
 801fa1c:	0802be58 	.word	0x0802be58
 801fa20:	08027534 	.word	0x08027534

0801fa24 <check_enquote>:

static enum quote_option check_enquote(const TCHAR *Value)
{
 801fa24:	b580      	push	{r7, lr}
 801fa26:	b084      	sub	sp, #16
 801fa28:	af00      	add	r7, sp, #0
 801fa2a:	6078      	str	r0, [r7, #4]
  const TCHAR *p;

  /* run through the value, if it has trailing spaces, or '"', ';' or '#'
   * characters, enquote it
   */
  assert(Value != NULL);
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d106      	bne.n	801fa40 <check_enquote+0x1c>
 801fa32:	4b19      	ldr	r3, [pc, #100]	@ (801fa98 <check_enquote+0x74>)
 801fa34:	4a19      	ldr	r2, [pc, #100]	@ (801fa9c <check_enquote+0x78>)
 801fa36:	f240 210d 	movw	r1, #525	@ 0x20d
 801fa3a:	4819      	ldr	r0, [pc, #100]	@ (801faa0 <check_enquote+0x7c>)
 801fa3c:	f005 fca2 	bl	8025384 <__assert_func>
  for (p = Value; *p != '\0' && *p != '"' && *p != ';' && *p != '#'; p++)
 801fa40:	687b      	ldr	r3, [r7, #4]
 801fa42:	60fb      	str	r3, [r7, #12]
 801fa44:	e002      	b.n	801fa4c <check_enquote+0x28>
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	3301      	adds	r3, #1
 801fa4a:	60fb      	str	r3, [r7, #12]
 801fa4c:	68fb      	ldr	r3, [r7, #12]
 801fa4e:	781b      	ldrb	r3, [r3, #0]
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	d00b      	beq.n	801fa6c <check_enquote+0x48>
 801fa54:	68fb      	ldr	r3, [r7, #12]
 801fa56:	781b      	ldrb	r3, [r3, #0]
 801fa58:	2b22      	cmp	r3, #34	@ 0x22
 801fa5a:	d007      	beq.n	801fa6c <check_enquote+0x48>
 801fa5c:	68fb      	ldr	r3, [r7, #12]
 801fa5e:	781b      	ldrb	r3, [r3, #0]
 801fa60:	2b3b      	cmp	r3, #59	@ 0x3b
 801fa62:	d003      	beq.n	801fa6c <check_enquote+0x48>
 801fa64:	68fb      	ldr	r3, [r7, #12]
 801fa66:	781b      	ldrb	r3, [r3, #0]
 801fa68:	2b23      	cmp	r3, #35	@ 0x23
 801fa6a:	d1ec      	bne.n	801fa46 <check_enquote+0x22>
    /* nothing */;
  return (*p != '\0' || (p > Value && *(p - 1) == ' ')) ? QUOTE_ENQUOTE : QUOTE_NONE;
 801fa6c:	68fb      	ldr	r3, [r7, #12]
 801fa6e:	781b      	ldrb	r3, [r3, #0]
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	d108      	bne.n	801fa86 <check_enquote+0x62>
 801fa74:	68fa      	ldr	r2, [r7, #12]
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	429a      	cmp	r2, r3
 801fa7a:	d906      	bls.n	801fa8a <check_enquote+0x66>
 801fa7c:	68fb      	ldr	r3, [r7, #12]
 801fa7e:	3b01      	subs	r3, #1
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	2b20      	cmp	r3, #32
 801fa84:	d101      	bne.n	801fa8a <check_enquote+0x66>
 801fa86:	2301      	movs	r3, #1
 801fa88:	e000      	b.n	801fa8c <check_enquote+0x68>
 801fa8a:	2300      	movs	r3, #0
 801fa8c:	b2db      	uxtb	r3, r3
}
 801fa8e:	4618      	mov	r0, r3
 801fa90:	3710      	adds	r7, #16
 801fa92:	46bd      	mov	sp, r7
 801fa94:	bd80      	pop	{r7, pc}
 801fa96:	bf00      	nop
 801fa98:	08027670 	.word	0x08027670
 801fa9c:	0802be68 	.word	0x0802be68
 801faa0:	08027534 	.word	0x08027534

0801faa4 <writesection>:

static void writesection(TCHAR *LocalBuffer, const TCHAR *Section, INI_FILETYPE *fp)
{
 801faa4:	b580      	push	{r7, lr}
 801faa6:	b086      	sub	sp, #24
 801faa8:	af00      	add	r7, sp, #0
 801faaa:	60f8      	str	r0, [r7, #12]
 801faac:	60b9      	str	r1, [r7, #8]
 801faae:	607a      	str	r2, [r7, #4]
  TCHAR *p;

  if (Section != NULL && _tcslen(Section) > 0) {
 801fab0:	68bb      	ldr	r3, [r7, #8]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d02e      	beq.n	801fb14 <writesection+0x70>
 801fab6:	68bb      	ldr	r3, [r7, #8]
 801fab8:	781b      	ldrb	r3, [r3, #0]
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d02a      	beq.n	801fb14 <writesection+0x70>
    LocalBuffer[0] = '[';
 801fabe:	68fb      	ldr	r3, [r7, #12]
 801fac0:	225b      	movs	r2, #91	@ 0x5b
 801fac2:	701a      	strb	r2, [r3, #0]
    save_strncpy(LocalBuffer + 1, Section, INI_BUFFERSIZE - 4, QUOTE_NONE);  /* -1 for '[', -1 for ']', -2 for '\r\n' */
 801fac4:	68fb      	ldr	r3, [r7, #12]
 801fac6:	1c58      	adds	r0, r3, #1
 801fac8:	2300      	movs	r3, #0
 801faca:	223c      	movs	r2, #60	@ 0x3c
 801facc:	68b9      	ldr	r1, [r7, #8]
 801face:	f7ff fbcb 	bl	801f268 <save_strncpy>
    p = _tcsrchr(LocalBuffer, '\0');
 801fad2:	68f8      	ldr	r0, [r7, #12]
 801fad4:	f7e0 fbe6 	bl	80002a4 <strlen>
 801fad8:	4603      	mov	r3, r0
 801fada:	461a      	mov	r2, r3
 801fadc:	68fb      	ldr	r3, [r7, #12]
 801fade:	4413      	add	r3, r2
 801fae0:	617b      	str	r3, [r7, #20]
    assert(p != NULL);
 801fae2:	697b      	ldr	r3, [r7, #20]
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	d106      	bne.n	801faf6 <writesection+0x52>
 801fae8:	4b0c      	ldr	r3, [pc, #48]	@ (801fb1c <writesection+0x78>)
 801faea:	4a0d      	ldr	r2, [pc, #52]	@ (801fb20 <writesection+0x7c>)
 801faec:	f240 211b 	movw	r1, #539	@ 0x21b
 801faf0:	480c      	ldr	r0, [pc, #48]	@ (801fb24 <writesection+0x80>)
 801faf2:	f005 fc47 	bl	8025384 <__assert_func>
    *p++ = ']';
 801faf6:	697b      	ldr	r3, [r7, #20]
 801faf8:	1c5a      	adds	r2, r3, #1
 801fafa:	617a      	str	r2, [r7, #20]
 801fafc:	225d      	movs	r2, #93	@ 0x5d
 801fafe:	701a      	strb	r2, [r3, #0]
    _tcscpy(p, INI_LINETERM); /* copy line terminator (typically "\n") */
 801fb00:	697b      	ldr	r3, [r7, #20]
 801fb02:	4909      	ldr	r1, [pc, #36]	@ (801fb28 <writesection+0x84>)
 801fb04:	461a      	mov	r2, r3
 801fb06:	460b      	mov	r3, r1
 801fb08:	881b      	ldrh	r3, [r3, #0]
 801fb0a:	8013      	strh	r3, [r2, #0]
    (void)ini_write(LocalBuffer, fp);
 801fb0c:	6879      	ldr	r1, [r7, #4]
 801fb0e:	68f8      	ldr	r0, [r7, #12]
 801fb10:	f7fc f832 	bl	801bb78 <f_puts>
  } /* if */
}
 801fb14:	bf00      	nop
 801fb16:	3718      	adds	r7, #24
 801fb18:	46bd      	mov	sp, r7
 801fb1a:	bd80      	pop	{r7, pc}
 801fb1c:	08027664 	.word	0x08027664
 801fb20:	0802be78 	.word	0x0802be78
 801fb24:	08027534 	.word	0x08027534
 801fb28:	08027680 	.word	0x08027680

0801fb2c <writekey>:

static void writekey(TCHAR *LocalBuffer, const TCHAR *Key, const TCHAR *Value, INI_FILETYPE *fp)
{
 801fb2c:	b580      	push	{r7, lr}
 801fb2e:	b086      	sub	sp, #24
 801fb30:	af00      	add	r7, sp, #0
 801fb32:	60f8      	str	r0, [r7, #12]
 801fb34:	60b9      	str	r1, [r7, #8]
 801fb36:	607a      	str	r2, [r7, #4]
 801fb38:	603b      	str	r3, [r7, #0]
  TCHAR *p;
  enum quote_option option = check_enquote(Value);
 801fb3a:	6878      	ldr	r0, [r7, #4]
 801fb3c:	f7ff ff72 	bl	801fa24 <check_enquote>
 801fb40:	4603      	mov	r3, r0
 801fb42:	75fb      	strb	r3, [r7, #23]
  save_strncpy(LocalBuffer, Key, INI_BUFFERSIZE - 3, QUOTE_NONE);  /* -1 for '=', -2 for '\r\n' */
 801fb44:	2300      	movs	r3, #0
 801fb46:	223d      	movs	r2, #61	@ 0x3d
 801fb48:	68b9      	ldr	r1, [r7, #8]
 801fb4a:	68f8      	ldr	r0, [r7, #12]
 801fb4c:	f7ff fb8c 	bl	801f268 <save_strncpy>
  p = _tcsrchr(LocalBuffer, '\0');
 801fb50:	68f8      	ldr	r0, [r7, #12]
 801fb52:	f7e0 fba7 	bl	80002a4 <strlen>
 801fb56:	4603      	mov	r3, r0
 801fb58:	461a      	mov	r2, r3
 801fb5a:	68fb      	ldr	r3, [r7, #12]
 801fb5c:	4413      	add	r3, r2
 801fb5e:	613b      	str	r3, [r7, #16]
  assert(p != NULL);
 801fb60:	693b      	ldr	r3, [r7, #16]
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d106      	bne.n	801fb74 <writekey+0x48>
 801fb66:	4b1b      	ldr	r3, [pc, #108]	@ (801fbd4 <writekey+0xa8>)
 801fb68:	4a1b      	ldr	r2, [pc, #108]	@ (801fbd8 <writekey+0xac>)
 801fb6a:	f44f 710a 	mov.w	r1, #552	@ 0x228
 801fb6e:	481b      	ldr	r0, [pc, #108]	@ (801fbdc <writekey+0xb0>)
 801fb70:	f005 fc08 	bl	8025384 <__assert_func>
  *p++ = '=';
 801fb74:	693b      	ldr	r3, [r7, #16]
 801fb76:	1c5a      	adds	r2, r3, #1
 801fb78:	613a      	str	r2, [r7, #16]
 801fb7a:	223d      	movs	r2, #61	@ 0x3d
 801fb7c:	701a      	strb	r2, [r3, #0]
  save_strncpy(p, Value, INI_BUFFERSIZE - (p - LocalBuffer) - 2, option); /* -2 for '\r\n' */
 801fb7e:	693a      	ldr	r2, [r7, #16]
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	1ad3      	subs	r3, r2, r3
 801fb84:	f1c3 033e 	rsb	r3, r3, #62	@ 0x3e
 801fb88:	461a      	mov	r2, r3
 801fb8a:	7dfb      	ldrb	r3, [r7, #23]
 801fb8c:	6879      	ldr	r1, [r7, #4]
 801fb8e:	6938      	ldr	r0, [r7, #16]
 801fb90:	f7ff fb6a 	bl	801f268 <save_strncpy>
  p = _tcsrchr(LocalBuffer, '\0');
 801fb94:	68f8      	ldr	r0, [r7, #12]
 801fb96:	f7e0 fb85 	bl	80002a4 <strlen>
 801fb9a:	4603      	mov	r3, r0
 801fb9c:	461a      	mov	r2, r3
 801fb9e:	68fb      	ldr	r3, [r7, #12]
 801fba0:	4413      	add	r3, r2
 801fba2:	613b      	str	r3, [r7, #16]
  assert(p != NULL);
 801fba4:	693b      	ldr	r3, [r7, #16]
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	d106      	bne.n	801fbb8 <writekey+0x8c>
 801fbaa:	4b0a      	ldr	r3, [pc, #40]	@ (801fbd4 <writekey+0xa8>)
 801fbac:	4a0a      	ldr	r2, [pc, #40]	@ (801fbd8 <writekey+0xac>)
 801fbae:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 801fbb2:	480a      	ldr	r0, [pc, #40]	@ (801fbdc <writekey+0xb0>)
 801fbb4:	f005 fbe6 	bl	8025384 <__assert_func>
  _tcscpy(p, INI_LINETERM); /* copy line terminator (typically "\n") */
 801fbb8:	693b      	ldr	r3, [r7, #16]
 801fbba:	4909      	ldr	r1, [pc, #36]	@ (801fbe0 <writekey+0xb4>)
 801fbbc:	461a      	mov	r2, r3
 801fbbe:	460b      	mov	r3, r1
 801fbc0:	881b      	ldrh	r3, [r3, #0]
 801fbc2:	8013      	strh	r3, [r2, #0]
  (void)ini_write(LocalBuffer, fp);
 801fbc4:	6839      	ldr	r1, [r7, #0]
 801fbc6:	68f8      	ldr	r0, [r7, #12]
 801fbc8:	f7fb ffd6 	bl	801bb78 <f_puts>
}
 801fbcc:	bf00      	nop
 801fbce:	3718      	adds	r7, #24
 801fbd0:	46bd      	mov	sp, r7
 801fbd2:	bd80      	pop	{r7, pc}
 801fbd4:	08027664 	.word	0x08027664
 801fbd8:	0802be88 	.word	0x0802be88
 801fbdc:	08027534 	.word	0x08027534
 801fbe0:	08027680 	.word	0x08027680

0801fbe4 <cache_accum>:

static int cache_accum(const TCHAR *string, int *size, int max)
{
 801fbe4:	b580      	push	{r7, lr}
 801fbe6:	b086      	sub	sp, #24
 801fbe8:	af00      	add	r7, sp, #0
 801fbea:	60f8      	str	r0, [r7, #12]
 801fbec:	60b9      	str	r1, [r7, #8]
 801fbee:	607a      	str	r2, [r7, #4]
  int len = _tcslen(string);
 801fbf0:	68f8      	ldr	r0, [r7, #12]
 801fbf2:	f7e0 fb57 	bl	80002a4 <strlen>
 801fbf6:	4603      	mov	r3, r0
 801fbf8:	617b      	str	r3, [r7, #20]
  if (*size + len >= max)
 801fbfa:	68bb      	ldr	r3, [r7, #8]
 801fbfc:	681a      	ldr	r2, [r3, #0]
 801fbfe:	697b      	ldr	r3, [r7, #20]
 801fc00:	4413      	add	r3, r2
 801fc02:	687a      	ldr	r2, [r7, #4]
 801fc04:	429a      	cmp	r2, r3
 801fc06:	dc01      	bgt.n	801fc0c <cache_accum+0x28>
    return 0;
 801fc08:	2300      	movs	r3, #0
 801fc0a:	e006      	b.n	801fc1a <cache_accum+0x36>
  *size += len;
 801fc0c:	68bb      	ldr	r3, [r7, #8]
 801fc0e:	681a      	ldr	r2, [r3, #0]
 801fc10:	697b      	ldr	r3, [r7, #20]
 801fc12:	441a      	add	r2, r3
 801fc14:	68bb      	ldr	r3, [r7, #8]
 801fc16:	601a      	str	r2, [r3, #0]
  return 1;
 801fc18:	2301      	movs	r3, #1
}
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	3718      	adds	r7, #24
 801fc1e:	46bd      	mov	sp, r7
 801fc20:	bd80      	pop	{r7, pc}
	...

0801fc24 <cache_flush>:

static int cache_flush(TCHAR *buffer, int *size,
                      INI_FILETYPE *rfp, INI_FILETYPE *wfp, INI_FILEPOS *mark)
{
 801fc24:	b580      	push	{r7, lr}
 801fc26:	b086      	sub	sp, #24
 801fc28:	af00      	add	r7, sp, #0
 801fc2a:	60f8      	str	r0, [r7, #12]
 801fc2c:	60b9      	str	r1, [r7, #8]
 801fc2e:	607a      	str	r2, [r7, #4]
 801fc30:	603b      	str	r3, [r7, #0]
  int pos = 0;
 801fc32:	2300      	movs	r3, #0
 801fc34:	617b      	str	r3, [r7, #20]

  (void)ini_seek(rfp, mark);
 801fc36:	6a3b      	ldr	r3, [r7, #32]
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	4619      	mov	r1, r3
 801fc3c:	6878      	ldr	r0, [r7, #4]
 801fc3e:	f7fb f826 	bl	801ac8e <f_lseek>
  assert(buffer != NULL);
 801fc42:	68fb      	ldr	r3, [r7, #12]
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	d106      	bne.n	801fc56 <cache_flush+0x32>
 801fc48:	4b2c      	ldr	r3, [pc, #176]	@ (801fcfc <cache_flush+0xd8>)
 801fc4a:	4a2d      	ldr	r2, [pc, #180]	@ (801fd00 <cache_flush+0xdc>)
 801fc4c:	f44f 7110 	mov.w	r1, #576	@ 0x240
 801fc50:	482c      	ldr	r0, [pc, #176]	@ (801fd04 <cache_flush+0xe0>)
 801fc52:	f005 fb97 	bl	8025384 <__assert_func>
  buffer[0] = '\0';
 801fc56:	68fb      	ldr	r3, [r7, #12]
 801fc58:	2200      	movs	r2, #0
 801fc5a:	701a      	strb	r2, [r3, #0]
  assert(size != NULL);
 801fc5c:	68bb      	ldr	r3, [r7, #8]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d126      	bne.n	801fcb0 <cache_flush+0x8c>
 801fc62:	4b29      	ldr	r3, [pc, #164]	@ (801fd08 <cache_flush+0xe4>)
 801fc64:	4a26      	ldr	r2, [pc, #152]	@ (801fd00 <cache_flush+0xdc>)
 801fc66:	f240 2142 	movw	r1, #578	@ 0x242
 801fc6a:	4826      	ldr	r0, [pc, #152]	@ (801fd04 <cache_flush+0xe0>)
 801fc6c:	f005 fb8a 	bl	8025384 <__assert_func>
  while (pos < *size) {
    (void)ini_read(buffer + pos, INI_BUFFERSIZE - pos, rfp);
 801fc70:	697b      	ldr	r3, [r7, #20]
 801fc72:	68fa      	ldr	r2, [r7, #12]
 801fc74:	18d0      	adds	r0, r2, r3
 801fc76:	697b      	ldr	r3, [r7, #20]
 801fc78:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801fc7c:	687a      	ldr	r2, [r7, #4]
 801fc7e:	4619      	mov	r1, r3
 801fc80:	f7fb fec5 	bl	801ba0e <f_gets>
    pos += _tcslen(buffer + pos);
 801fc84:	697b      	ldr	r3, [r7, #20]
 801fc86:	68fa      	ldr	r2, [r7, #12]
 801fc88:	4413      	add	r3, r2
 801fc8a:	4618      	mov	r0, r3
 801fc8c:	f7e0 fb0a 	bl	80002a4 <strlen>
 801fc90:	4602      	mov	r2, r0
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	4413      	add	r3, r2
 801fc96:	617b      	str	r3, [r7, #20]
    assert(pos <= *size);
 801fc98:	68bb      	ldr	r3, [r7, #8]
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	697a      	ldr	r2, [r7, #20]
 801fc9e:	429a      	cmp	r2, r3
 801fca0:	dd06      	ble.n	801fcb0 <cache_flush+0x8c>
 801fca2:	4b1a      	ldr	r3, [pc, #104]	@ (801fd0c <cache_flush+0xe8>)
 801fca4:	4a16      	ldr	r2, [pc, #88]	@ (801fd00 <cache_flush+0xdc>)
 801fca6:	f240 2146 	movw	r1, #582	@ 0x246
 801fcaa:	4816      	ldr	r0, [pc, #88]	@ (801fd04 <cache_flush+0xe0>)
 801fcac:	f005 fb6a 	bl	8025384 <__assert_func>
  while (pos < *size) {
 801fcb0:	68bb      	ldr	r3, [r7, #8]
 801fcb2:	681b      	ldr	r3, [r3, #0]
 801fcb4:	697a      	ldr	r2, [r7, #20]
 801fcb6:	429a      	cmp	r2, r3
 801fcb8:	dbda      	blt.n	801fc70 <cache_flush+0x4c>
  } /* while */
  if (buffer[0] != '\0')
 801fcba:	68fb      	ldr	r3, [r7, #12]
 801fcbc:	781b      	ldrb	r3, [r3, #0]
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	d003      	beq.n	801fcca <cache_flush+0xa6>
    (void)ini_write(buffer, wfp);
 801fcc2:	6839      	ldr	r1, [r7, #0]
 801fcc4:	68f8      	ldr	r0, [r7, #12]
 801fcc6:	f7fb ff57 	bl	801bb78 <f_puts>
  (void)ini_tell(rfp, mark);  /* update mark */
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	699a      	ldr	r2, [r3, #24]
 801fcce:	6a3b      	ldr	r3, [r7, #32]
 801fcd0:	601a      	str	r2, [r3, #0]
  *size = 0;
 801fcd2:	68bb      	ldr	r3, [r7, #8]
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	601a      	str	r2, [r3, #0]
  /* return whether the buffer ended with a line termination */
  return (_tcscmp(buffer + pos - _tcslen(INI_LINETERM), INI_LINETERM) == 0);
 801fcd8:	697b      	ldr	r3, [r7, #20]
 801fcda:	3b01      	subs	r3, #1
 801fcdc:	68fa      	ldr	r2, [r7, #12]
 801fcde:	4413      	add	r3, r2
 801fce0:	490b      	ldr	r1, [pc, #44]	@ (801fd10 <cache_flush+0xec>)
 801fce2:	4618      	mov	r0, r3
 801fce4:	f7e0 fad4 	bl	8000290 <strcmp>
 801fce8:	4603      	mov	r3, r0
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	bf0c      	ite	eq
 801fcee:	2301      	moveq	r3, #1
 801fcf0:	2300      	movne	r3, #0
 801fcf2:	b2db      	uxtb	r3, r3
}
 801fcf4:	4618      	mov	r0, r3
 801fcf6:	3718      	adds	r7, #24
 801fcf8:	46bd      	mov	sp, r7
 801fcfa:	bd80      	pop	{r7, pc}
 801fcfc:	08027684 	.word	0x08027684
 801fd00:	0802be94 	.word	0x0802be94
 801fd04:	08027534 	.word	0x08027534
 801fd08:	08027694 	.word	0x08027694
 801fd0c:	080276a4 	.word	0x080276a4
 801fd10:	08027680 	.word	0x08027680

0801fd14 <ini_rename>:

static int ini_rename(TCHAR *source, const TCHAR *dest)
{
 801fd14:	b580      	push	{r7, lr}
 801fd16:	b084      	sub	sp, #16
 801fd18:	af00      	add	r7, sp, #0
 801fd1a:	6078      	str	r0, [r7, #4]
 801fd1c:	6039      	str	r1, [r7, #0]
  /* Function f_rename() does not allow drive letters in the destination file */
  char *drive = strchr(dest, ':');
 801fd1e:	213a      	movs	r1, #58	@ 0x3a
 801fd20:	6838      	ldr	r0, [r7, #0]
 801fd22:	f006 fa94 	bl	802624e <strchr>
 801fd26:	60f8      	str	r0, [r7, #12]
  drive = (drive == NULL) ? dest : drive + 1;
 801fd28:	68fb      	ldr	r3, [r7, #12]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d002      	beq.n	801fd34 <ini_rename+0x20>
 801fd2e:	68fb      	ldr	r3, [r7, #12]
 801fd30:	3301      	adds	r3, #1
 801fd32:	e000      	b.n	801fd36 <ini_rename+0x22>
 801fd34:	683b      	ldr	r3, [r7, #0]
 801fd36:	60fb      	str	r3, [r7, #12]
  return (f_rename(source, drive) == FR_OK);
 801fd38:	68f9      	ldr	r1, [r7, #12]
 801fd3a:	6878      	ldr	r0, [r7, #4]
 801fd3c:	f7fb fd04 	bl	801b748 <f_rename>
 801fd40:	4603      	mov	r3, r0
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	bf0c      	ite	eq
 801fd46:	2301      	moveq	r3, #1
 801fd48:	2300      	movne	r3, #0
 801fd4a:	b2db      	uxtb	r3, r3
}
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	3710      	adds	r7, #16
 801fd50:	46bd      	mov	sp, r7
 801fd52:	bd80      	pop	{r7, pc}

0801fd54 <close_rename>:

static int close_rename(INI_FILETYPE *rfp, INI_FILETYPE *wfp, const TCHAR *filename, TCHAR *buffer)
{
 801fd54:	b580      	push	{r7, lr}
 801fd56:	b084      	sub	sp, #16
 801fd58:	af00      	add	r7, sp, #0
 801fd5a:	60f8      	str	r0, [r7, #12]
 801fd5c:	60b9      	str	r1, [r7, #8]
 801fd5e:	607a      	str	r2, [r7, #4]
 801fd60:	603b      	str	r3, [r7, #0]
  (void)ini_close(rfp);
 801fd62:	68f8      	ldr	r0, [r7, #12]
 801fd64:	f7fa fe1c 	bl	801a9a0 <f_close>
  (void)ini_close(wfp);
 801fd68:	68b8      	ldr	r0, [r7, #8]
 801fd6a:	f7fa fe19 	bl	801a9a0 <f_close>
  (void)ini_remove(filename);
 801fd6e:	6878      	ldr	r0, [r7, #4]
 801fd70:	f7fb fb07 	bl	801b382 <f_unlink>
  (void)ini_tempname(buffer, filename, INI_BUFFERSIZE);
 801fd74:	2240      	movs	r2, #64	@ 0x40
 801fd76:	6879      	ldr	r1, [r7, #4]
 801fd78:	6838      	ldr	r0, [r7, #0]
 801fd7a:	f7ff fe27 	bl	801f9cc <ini_tempname>
  (void)ini_rename(buffer, filename);
 801fd7e:	6879      	ldr	r1, [r7, #4]
 801fd80:	6838      	ldr	r0, [r7, #0]
 801fd82:	f7ff ffc7 	bl	801fd14 <ini_rename>
  return 1;
 801fd86:	2301      	movs	r3, #1
}
 801fd88:	4618      	mov	r0, r3
 801fd8a:	3710      	adds	r7, #16
 801fd8c:	46bd      	mov	sp, r7
 801fd8e:	bd80      	pop	{r7, pc}

0801fd90 <ini_puts>:
 * \param Filename    the name and full path of the .ini file to write to
 *
 * \return            1 if successful, otherwise 0
 */
int ini_puts(const TCHAR *Section, const TCHAR *Key, const TCHAR *Value, const TCHAR *Filename)
{
 801fd90:	b590      	push	{r4, r7, lr}
 801fd92:	f2ad 4de4 	subw	sp, sp, #1252	@ 0x4e4
 801fd96:	af04      	add	r7, sp, #16
 801fd98:	f507 649a 	add.w	r4, r7, #1232	@ 0x4d0
 801fd9c:	f2a4 44c4 	subw	r4, r4, #1220	@ 0x4c4
 801fda0:	6020      	str	r0, [r4, #0]
 801fda2:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 801fda6:	f5a0 6099 	sub.w	r0, r0, #1224	@ 0x4c8
 801fdaa:	6001      	str	r1, [r0, #0]
 801fdac:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 801fdb0:	f2a1 41cc 	subw	r1, r1, #1228	@ 0x4cc
 801fdb4:	600a      	str	r2, [r1, #0]
 801fdb6:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 801fdba:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 801fdbe:	6013      	str	r3, [r2, #0]
  INI_FILEPOS mark;
  TCHAR *sp, *ep;
  TCHAR LocalBuffer[INI_BUFFERSIZE];
  int len, match, flag, cachelen;

  assert(Filename != NULL);
 801fdc0:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fdc4:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 801fdc8:	681b      	ldr	r3, [r3, #0]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d106      	bne.n	801fddc <ini_puts+0x4c>
 801fdce:	4bbd      	ldr	r3, [pc, #756]	@ (80200c4 <ini_puts+0x334>)
 801fdd0:	4abd      	ldr	r2, [pc, #756]	@ (80200c8 <ini_puts+0x338>)
 801fdd2:	f240 2173 	movw	r1, #627	@ 0x273
 801fdd6:	48bd      	ldr	r0, [pc, #756]	@ (80200cc <ini_puts+0x33c>)
 801fdd8:	f005 fad4 	bl	8025384 <__assert_func>
  if (!ini_openread(Filename, &rfp)) {
 801fddc:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fde0:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 801fde4:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 801fde8:	2201      	movs	r2, #1
 801fdea:	6819      	ldr	r1, [r3, #0]
 801fdec:	f7fa f87c 	bl	8019ee8 <f_open>
 801fdf0:	4603      	mov	r3, r0
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d03e      	beq.n	801fe74 <ini_puts+0xe4>
    /* If the .ini file doesn't exist, make a new file */
    if (Key != NULL && Value != NULL) {
 801fdf6:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fdfa:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	2b00      	cmp	r3, #0
 801fe02:	d035      	beq.n	801fe70 <ini_puts+0xe0>
 801fe04:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fe08:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 801fe0c:	681b      	ldr	r3, [r3, #0]
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	d02e      	beq.n	801fe70 <ini_puts+0xe0>
      if (!ini_openwrite(Filename, &wfp))
 801fe12:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fe16:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 801fe1a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801fe1e:	220a      	movs	r2, #10
 801fe20:	6819      	ldr	r1, [r3, #0]
 801fe22:	f7fa f861 	bl	8019ee8 <f_open>
 801fe26:	4603      	mov	r3, r0
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d001      	beq.n	801fe30 <ini_puts+0xa0>
        return 0;
 801fe2c:	2300      	movs	r3, #0
 801fe2e:	e34a      	b.n	80204c6 <ini_puts+0x736>
      writesection(LocalBuffer, Section, &wfp);
 801fe30:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801fe34:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fe38:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801fe3c:	f107 0018 	add.w	r0, r7, #24
 801fe40:	6819      	ldr	r1, [r3, #0]
 801fe42:	f7ff fe2f 	bl	801faa4 <writesection>
      writekey(LocalBuffer, Key, Value, &wfp);
 801fe46:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801fe4a:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 801fe4e:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 801fe52:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 801fe56:	f5a1 6199 	sub.w	r1, r1, #1224	@ 0x4c8
 801fe5a:	f107 0018 	add.w	r0, r7, #24
 801fe5e:	6812      	ldr	r2, [r2, #0]
 801fe60:	6809      	ldr	r1, [r1, #0]
 801fe62:	f7ff fe63 	bl	801fb2c <writekey>
      (void)ini_close(&wfp);
 801fe66:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801fe6a:	4618      	mov	r0, r3
 801fe6c:	f7fa fd98 	bl	801a9a0 <f_close>
    } /* if */
    return 1;
 801fe70:	2301      	movs	r3, #1
 801fe72:	e328      	b.n	80204c6 <ini_puts+0x736>

  /* If parameters Key and Value are valid (so this is not an "erase" request)
   * and the setting already exists and it already has the correct value, do
   * nothing. This early bail-out avoids rewriting the INI file for no reason.
   */
  if (Key != NULL && Value != NULL) {
 801fe74:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fe78:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	d04d      	beq.n	801ff1e <ini_puts+0x18e>
 801fe82:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fe86:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d046      	beq.n	801ff1e <ini_puts+0x18e>
    (void)ini_tell(&rfp, &mark);
 801fe90:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fe94:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 801fe98:	699a      	ldr	r2, [r3, #24]
 801fe9a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fe9e:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 801fea2:	601a      	str	r2, [r3, #0]
    match = getkeystring(&rfp, Section, Key, -1, -1, LocalBuffer, sizearray(LocalBuffer));
 801fea4:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fea8:	f5a3 6299 	sub.w	r2, r3, #1224	@ 0x4c8
 801feac:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801feb0:	f2a3 41c4 	subw	r1, r3, #1220	@ 0x4c4
 801feb4:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 801feb8:	2340      	movs	r3, #64	@ 0x40
 801feba:	9302      	str	r3, [sp, #8]
 801febc:	f107 0318 	add.w	r3, r7, #24
 801fec0:	9301      	str	r3, [sp, #4]
 801fec2:	f04f 33ff 	mov.w	r3, #4294967295
 801fec6:	9300      	str	r3, [sp, #0]
 801fec8:	f04f 33ff 	mov.w	r3, #4294967295
 801fecc:	6812      	ldr	r2, [r2, #0]
 801fece:	6809      	ldr	r1, [r1, #0]
 801fed0:	f7ff fb5a 	bl	801f588 <getkeystring>
 801fed4:	f8c7 04c8 	str.w	r0, [r7, #1224]	@ 0x4c8
    if (match && _tcscmp(LocalBuffer,Value) == 0) {
 801fed8:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d013      	beq.n	801ff08 <ini_puts+0x178>
 801fee0:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801fee4:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 801fee8:	f107 0218 	add.w	r2, r7, #24
 801feec:	6819      	ldr	r1, [r3, #0]
 801feee:	4610      	mov	r0, r2
 801fef0:	f7e0 f9ce 	bl	8000290 <strcmp>
 801fef4:	4603      	mov	r3, r0
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d106      	bne.n	801ff08 <ini_puts+0x178>
      (void)ini_close(&rfp);
 801fefa:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 801fefe:	4618      	mov	r0, r3
 801ff00:	f7fa fd4e 	bl	801a9a0 <f_close>
      return 1;
 801ff04:	2301      	movs	r3, #1
 801ff06:	e2de      	b.n	80204c6 <ini_puts+0x736>
    } /* if */
    /* key not found, or different value -> proceed (but rewind the input file first) */
    (void)ini_seek(&rfp, &mark);
 801ff08:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ff0c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 801ff10:	681a      	ldr	r2, [r3, #0]
 801ff12:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 801ff16:	4611      	mov	r1, r2
 801ff18:	4618      	mov	r0, r3
 801ff1a:	f7fa feb8 	bl	801ac8e <f_lseek>
  } /* if */

  /* Get a temporary file name to copy to. Use the existing name, but with
   * the last character set to a '~'.
   */
  ini_tempname(LocalBuffer, Filename, INI_BUFFERSIZE);
 801ff1e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ff22:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 801ff26:	f107 0018 	add.w	r0, r7, #24
 801ff2a:	2240      	movs	r2, #64	@ 0x40
 801ff2c:	6819      	ldr	r1, [r3, #0]
 801ff2e:	f7ff fd4d 	bl	801f9cc <ini_tempname>
  if (!ini_openwrite(LocalBuffer, &wfp)) {
 801ff32:	f107 0118 	add.w	r1, r7, #24
 801ff36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801ff3a:	220a      	movs	r2, #10
 801ff3c:	4618      	mov	r0, r3
 801ff3e:	f7f9 ffd3 	bl	8019ee8 <f_open>
 801ff42:	4603      	mov	r3, r0
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d006      	beq.n	801ff56 <ini_puts+0x1c6>
    (void)ini_close(&rfp);
 801ff48:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 801ff4c:	4618      	mov	r0, r3
 801ff4e:	f7fa fd27 	bl	801a9a0 <f_close>
    return 0;
 801ff52:	2300      	movs	r3, #0
 801ff54:	e2b7      	b.n	80204c6 <ini_puts+0x736>
  } /* if */
  (void)ini_tell(&rfp, &mark);
 801ff56:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ff5a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 801ff5e:	699a      	ldr	r2, [r3, #24]
 801ff60:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ff64:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 801ff68:	601a      	str	r2, [r3, #0]
  cachelen = 0;
 801ff6a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ff6e:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 801ff72:	2200      	movs	r2, #0
 801ff74:	601a      	str	r2, [r3, #0]

  /* Move through the file one line at a time until a section is
   * matched or until EOF. Copy to temp file as it is read.
   */
  len = (Section != NULL) ? _tcslen(Section) : 0;
 801ff76:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ff7a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801ff7e:	681b      	ldr	r3, [r3, #0]
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	d008      	beq.n	801ff96 <ini_puts+0x206>
 801ff84:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ff88:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801ff8c:	6818      	ldr	r0, [r3, #0]
 801ff8e:	f7e0 f989 	bl	80002a4 <strlen>
 801ff92:	4603      	mov	r3, r0
 801ff94:	e000      	b.n	801ff98 <ini_puts+0x208>
 801ff96:	2300      	movs	r3, #0
 801ff98:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
  if (len > 0) {
 801ff9c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 801ffa0:	2b00      	cmp	r3, #0
 801ffa2:	f340 80d3 	ble.w	802014c <ini_puts+0x3bc>
    do {
      if (!ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp)) {
 801ffa6:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 801ffaa:	f107 0318 	add.w	r3, r7, #24
 801ffae:	2140      	movs	r1, #64	@ 0x40
 801ffb0:	4618      	mov	r0, r3
 801ffb2:	f7fb fd2c 	bl	801ba0e <f_gets>
 801ffb6:	4603      	mov	r3, r0
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d151      	bne.n	8020060 <ini_puts+0x2d0>
        /* Failed to find section, so add one to the end */
        flag = cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 801ffbc:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 801ffc0:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 801ffc4:	f107 0114 	add.w	r1, r7, #20
 801ffc8:	f107 0018 	add.w	r0, r7, #24
 801ffcc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ffd0:	9300      	str	r3, [sp, #0]
 801ffd2:	4623      	mov	r3, r4
 801ffd4:	f7ff fe26 	bl	801fc24 <cache_flush>
 801ffd8:	f8c7 04bc 	str.w	r0, [r7, #1212]	@ 0x4bc
        if (Key!=NULL && Value!=NULL) {
 801ffdc:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ffe0:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d02b      	beq.n	8020042 <ini_puts+0x2b2>
 801ffea:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 801ffee:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d024      	beq.n	8020042 <ini_puts+0x2b2>
          if (!flag)
 801fff8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	d105      	bne.n	802000c <ini_puts+0x27c>
            (void)ini_write(INI_LINETERM, &wfp);  /* force a new line behind the last line of the INI file */
 8020000:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8020004:	4619      	mov	r1, r3
 8020006:	4832      	ldr	r0, [pc, #200]	@ (80200d0 <ini_puts+0x340>)
 8020008:	f7fb fdb6 	bl	801bb78 <f_puts>
          writesection(LocalBuffer, Section, &wfp);
 802000c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8020010:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8020014:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8020018:	f107 0018 	add.w	r0, r7, #24
 802001c:	6819      	ldr	r1, [r3, #0]
 802001e:	f7ff fd41 	bl	801faa4 <writesection>
          writekey(LocalBuffer, Key, Value, &wfp);
 8020022:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8020026:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 802002a:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 802002e:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8020032:	f5a1 6199 	sub.w	r1, r1, #1224	@ 0x4c8
 8020036:	f107 0018 	add.w	r0, r7, #24
 802003a:	6812      	ldr	r2, [r2, #0]
 802003c:	6809      	ldr	r1, [r1, #0]
 802003e:	f7ff fd75 	bl	801fb2c <writekey>
        } /* if */
        return close_rename(&rfp, &wfp, Filename, LocalBuffer);  /* clean up and rename */
 8020042:	f107 0318 	add.w	r3, r7, #24
 8020046:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 802004a:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 802004e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8020052:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8020056:	6812      	ldr	r2, [r2, #0]
 8020058:	f7ff fe7c 	bl	801fd54 <close_rename>
 802005c:	4603      	mov	r3, r0
 802005e:	e232      	b.n	80204c6 <ini_puts+0x736>
      } /* if */
      /* Copy the line from source to dest, but not if this is the section that
       * we are looking for and this section must be removed
       */
      sp = skipleading(LocalBuffer);
 8020060:	f107 0318 	add.w	r3, r7, #24
 8020064:	4618      	mov	r0, r3
 8020066:	f7ff f883 	bl	801f170 <skipleading>
 802006a:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
      ep = _tcschr(sp, ']');
 802006e:	215d      	movs	r1, #93	@ 0x5d
 8020070:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 8020074:	f006 f8eb 	bl	802624e <strchr>
 8020078:	f8c7 04cc 	str.w	r0, [r7, #1228]	@ 0x4cc
      match = (*sp == '[' && ep != NULL && (int)(ep-sp-1) == len && _tcsnicmp(sp + 1,Section,len) == 0);
 802007c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8020080:	781b      	ldrb	r3, [r3, #0]
 8020082:	2b5b      	cmp	r3, #91	@ 0x5b
 8020084:	d126      	bne.n	80200d4 <ini_puts+0x344>
 8020086:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 802008a:	2b00      	cmp	r3, #0
 802008c:	d022      	beq.n	80200d4 <ini_puts+0x344>
 802008e:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8020092:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8020096:	1ad3      	subs	r3, r2, r3
 8020098:	3b01      	subs	r3, #1
 802009a:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 802009e:	429a      	cmp	r2, r3
 80200a0:	d118      	bne.n	80200d4 <ini_puts+0x344>
 80200a2:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80200a6:	1c58      	adds	r0, r3, #1
 80200a8:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 80200ac:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80200b0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80200b4:	6819      	ldr	r1, [r3, #0]
 80200b6:	f006 f8d7 	bl	8026268 <strncasecmp>
 80200ba:	4603      	mov	r3, r0
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d109      	bne.n	80200d4 <ini_puts+0x344>
 80200c0:	2301      	movs	r3, #1
 80200c2:	e008      	b.n	80200d6 <ini_puts+0x346>
 80200c4:	080276b4 	.word	0x080276b4
 80200c8:	0802bea0 	.word	0x0802bea0
 80200cc:	08027534 	.word	0x08027534
 80200d0:	08027680 	.word	0x08027680
 80200d4:	2300      	movs	r3, #0
 80200d6:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
      if (!match || Key != NULL) {
 80200da:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80200de:	2b00      	cmp	r3, #0
 80200e0:	d006      	beq.n	80200f0 <ini_puts+0x360>
 80200e2:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80200e6:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d028      	beq.n	8020142 <ini_puts+0x3b2>
        if (!cache_accum(LocalBuffer, &cachelen, INI_BUFFERSIZE)) {
 80200f0:	f107 0114 	add.w	r1, r7, #20
 80200f4:	f107 0318 	add.w	r3, r7, #24
 80200f8:	2240      	movs	r2, #64	@ 0x40
 80200fa:	4618      	mov	r0, r3
 80200fc:	f7ff fd72 	bl	801fbe4 <cache_accum>
 8020100:	4603      	mov	r3, r0
 8020102:	2b00      	cmp	r3, #0
 8020104:	d11d      	bne.n	8020142 <ini_puts+0x3b2>
          cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 8020106:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 802010a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 802010e:	f107 0114 	add.w	r1, r7, #20
 8020112:	f107 0018 	add.w	r0, r7, #24
 8020116:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802011a:	9300      	str	r3, [sp, #0]
 802011c:	4623      	mov	r3, r4
 802011e:	f7ff fd81 	bl	801fc24 <cache_flush>
          (void)ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp);
 8020122:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8020126:	f107 0318 	add.w	r3, r7, #24
 802012a:	2140      	movs	r1, #64	@ 0x40
 802012c:	4618      	mov	r0, r3
 802012e:	f7fb fc6e 	bl	801ba0e <f_gets>
          cache_accum(LocalBuffer, &cachelen, INI_BUFFERSIZE);
 8020132:	f107 0114 	add.w	r1, r7, #20
 8020136:	f107 0318 	add.w	r3, r7, #24
 802013a:	2240      	movs	r2, #64	@ 0x40
 802013c:	4618      	mov	r0, r3
 802013e:	f7ff fd51 	bl	801fbe4 <cache_accum>
        } /* if */
      } /* if */
    } while (!match);
 8020142:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8020146:	2b00      	cmp	r3, #0
 8020148:	f43f af2d 	beq.w	801ffa6 <ini_puts+0x216>
  } /* if */
  cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 802014c:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8020150:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8020154:	f107 0114 	add.w	r1, r7, #20
 8020158:	f107 0018 	add.w	r0, r7, #24
 802015c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8020160:	9300      	str	r3, [sp, #0]
 8020162:	4623      	mov	r3, r4
 8020164:	f7ff fd5e 	bl	801fc24 <cache_flush>
  /* when deleting a section, the section head that was just found has not been
   * copied to the output file, but because this line was not "accumulated" in
   * the cache, the position in the input file was reset to the point just
   * before the section; this must now be skipped (again)
   */
  if (Key == NULL) {
 8020168:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 802016c:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	2b00      	cmp	r3, #0
 8020174:	d111      	bne.n	802019a <ini_puts+0x40a>
    (void)ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp);
 8020176:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 802017a:	f107 0318 	add.w	r3, r7, #24
 802017e:	2140      	movs	r1, #64	@ 0x40
 8020180:	4618      	mov	r0, r3
 8020182:	f7fb fc44 	bl	801ba0e <f_gets>
    (void)ini_tell(&rfp, &mark);
 8020186:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 802018a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 802018e:	699a      	ldr	r2, [r3, #24]
 8020190:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8020194:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8020198:	601a      	str	r2, [r3, #0]

  /* Now that the section has been found, find the entry. Stop searching
   * upon leaving the section's area. Copy the file as it is read
   * and create an entry if one is not found.
   */
  len = (Key!=NULL) ? _tcslen(Key) : 0;
 802019a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 802019e:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d008      	beq.n	80201ba <ini_puts+0x42a>
 80201a8:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80201ac:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80201b0:	6818      	ldr	r0, [r3, #0]
 80201b2:	f7e0 f877 	bl	80002a4 <strlen>
 80201b6:	4603      	mov	r3, r0
 80201b8:	e000      	b.n	80201bc <ini_puts+0x42c>
 80201ba:	2300      	movs	r3, #0
 80201bc:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
  for( ;; ) {
    if (!ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp)) {
 80201c0:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80201c4:	f107 0318 	add.w	r3, r7, #24
 80201c8:	2140      	movs	r1, #64	@ 0x40
 80201ca:	4618      	mov	r0, r3
 80201cc:	f7fb fc1f 	bl	801ba0e <f_gets>
 80201d0:	4603      	mov	r3, r0
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d146      	bne.n	8020264 <ini_puts+0x4d4>
      /* EOF without an entry so make one */
      flag = cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 80201d6:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80201da:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80201de:	f107 0114 	add.w	r1, r7, #20
 80201e2:	f107 0018 	add.w	r0, r7, #24
 80201e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80201ea:	9300      	str	r3, [sp, #0]
 80201ec:	4623      	mov	r3, r4
 80201ee:	f7ff fd19 	bl	801fc24 <cache_flush>
 80201f2:	f8c7 04bc 	str.w	r0, [r7, #1212]	@ 0x4bc
      if (Key!=NULL && Value!=NULL) {
 80201f6:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80201fa:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	2b00      	cmp	r3, #0
 8020202:	d020      	beq.n	8020246 <ini_puts+0x4b6>
 8020204:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8020208:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	2b00      	cmp	r3, #0
 8020210:	d019      	beq.n	8020246 <ini_puts+0x4b6>
        if (!flag)
 8020212:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020216:	2b00      	cmp	r3, #0
 8020218:	d105      	bne.n	8020226 <ini_puts+0x496>
          (void)ini_write(INI_LINETERM, &wfp);  /* force a new line behind the last line of the INI file */
 802021a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802021e:	4619      	mov	r1, r3
 8020220:	48ab      	ldr	r0, [pc, #684]	@ (80204d0 <ini_puts+0x740>)
 8020222:	f7fb fca9 	bl	801bb78 <f_puts>
        writekey(LocalBuffer, Key, Value, &wfp);
 8020226:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802022a:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 802022e:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8020232:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8020236:	f5a1 6199 	sub.w	r1, r1, #1224	@ 0x4c8
 802023a:	f107 0018 	add.w	r0, r7, #24
 802023e:	6812      	ldr	r2, [r2, #0]
 8020240:	6809      	ldr	r1, [r1, #0]
 8020242:	f7ff fc73 	bl	801fb2c <writekey>
      } /* if */
      return close_rename(&rfp, &wfp, Filename, LocalBuffer);  /* clean up and rename */
 8020246:	f107 0318 	add.w	r3, r7, #24
 802024a:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 802024e:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8020252:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8020256:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 802025a:	6812      	ldr	r2, [r2, #0]
 802025c:	f7ff fd7a 	bl	801fd54 <close_rename>
 8020260:	4603      	mov	r3, r0
 8020262:	e130      	b.n	80204c6 <ini_puts+0x736>
    } /* if */
    sp = skipleading(LocalBuffer);
 8020264:	f107 0318 	add.w	r3, r7, #24
 8020268:	4618      	mov	r0, r3
 802026a:	f7fe ff81 	bl	801f170 <skipleading>
 802026e:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
    ep = _tcschr(sp, '='); /* Parse out the equal sign */
 8020272:	213d      	movs	r1, #61	@ 0x3d
 8020274:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 8020278:	f005 ffe9 	bl	802624e <strchr>
 802027c:	f8c7 04cc 	str.w	r0, [r7, #1228]	@ 0x4cc
    if (ep == NULL)
 8020280:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8020284:	2b00      	cmp	r3, #0
 8020286:	d106      	bne.n	8020296 <ini_puts+0x506>
      ep = _tcschr(sp, ':');
 8020288:	213a      	movs	r1, #58	@ 0x3a
 802028a:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 802028e:	f005 ffde 	bl	802624e <strchr>
 8020292:	f8c7 04cc 	str.w	r0, [r7, #1228]	@ 0x4cc
    match = (ep != NULL && (int)(skiptrailing(ep,sp)-sp) == len && _tcsnicmp(sp,Key,len) == 0);
 8020296:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 802029a:	2b00      	cmp	r3, #0
 802029c:	d01d      	beq.n	80202da <ini_puts+0x54a>
 802029e:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 80202a2:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	@ 0x4cc
 80202a6:	f7fe ff87 	bl	801f1b8 <skiptrailing>
 80202aa:	4602      	mov	r2, r0
 80202ac:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80202b0:	1ad3      	subs	r3, r2, r3
 80202b2:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 80202b6:	429a      	cmp	r2, r3
 80202b8:	d10f      	bne.n	80202da <ini_puts+0x54a>
 80202ba:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 80202be:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80202c2:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80202c6:	6819      	ldr	r1, [r3, #0]
 80202c8:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 80202cc:	f005 ffcc 	bl	8026268 <strncasecmp>
 80202d0:	4603      	mov	r3, r0
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d101      	bne.n	80202da <ini_puts+0x54a>
 80202d6:	2301      	movs	r3, #1
 80202d8:	e000      	b.n	80202dc <ini_puts+0x54c>
 80202da:	2300      	movs	r3, #0
 80202dc:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    if ((Key != NULL && match) || *sp == '[')
 80202e0:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80202e4:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	d003      	beq.n	80202f6 <ini_puts+0x566>
 80202ee:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d141      	bne.n	802037a <ini_puts+0x5ea>
 80202f6:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80202fa:	781b      	ldrb	r3, [r3, #0]
 80202fc:	2b5b      	cmp	r3, #91	@ 0x5b
 80202fe:	d03c      	beq.n	802037a <ini_puts+0x5ea>
      break;  /* found the key, or found a new section */
    /* copy other keys in the section */
    if (Key == NULL) {
 8020300:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8020304:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	2b00      	cmp	r3, #0
 802030c:	d10a      	bne.n	8020324 <ini_puts+0x594>
      (void)ini_tell(&rfp, &mark);  /* we are deleting the entire section, so update the read position */
 802030e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8020312:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8020316:	699a      	ldr	r2, [r3, #24]
 8020318:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 802031c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8020320:	601a      	str	r2, [r3, #0]
 8020322:	e74d      	b.n	80201c0 <ini_puts+0x430>
    } else {
      if (!cache_accum(LocalBuffer, &cachelen, INI_BUFFERSIZE)) {
 8020324:	f107 0114 	add.w	r1, r7, #20
 8020328:	f107 0318 	add.w	r3, r7, #24
 802032c:	2240      	movs	r2, #64	@ 0x40
 802032e:	4618      	mov	r0, r3
 8020330:	f7ff fc58 	bl	801fbe4 <cache_accum>
 8020334:	4603      	mov	r3, r0
 8020336:	2b00      	cmp	r3, #0
 8020338:	f47f af42 	bne.w	80201c0 <ini_puts+0x430>
        cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 802033c:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8020340:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8020344:	f107 0114 	add.w	r1, r7, #20
 8020348:	f107 0018 	add.w	r0, r7, #24
 802034c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8020350:	9300      	str	r3, [sp, #0]
 8020352:	4623      	mov	r3, r4
 8020354:	f7ff fc66 	bl	801fc24 <cache_flush>
        (void)ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp);
 8020358:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 802035c:	f107 0318 	add.w	r3, r7, #24
 8020360:	2140      	movs	r1, #64	@ 0x40
 8020362:	4618      	mov	r0, r3
 8020364:	f7fb fb53 	bl	801ba0e <f_gets>
        cache_accum(LocalBuffer, &cachelen, INI_BUFFERSIZE);
 8020368:	f107 0114 	add.w	r1, r7, #20
 802036c:	f107 0318 	add.w	r3, r7, #24
 8020370:	2240      	movs	r2, #64	@ 0x40
 8020372:	4618      	mov	r0, r3
 8020374:	f7ff fc36 	bl	801fbe4 <cache_accum>
    if (!ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp)) {
 8020378:	e722      	b.n	80201c0 <ini_puts+0x430>
  /* the key was found, or we just dropped on the next section (meaning that it
   * wasn't found); in both cases we need to write the key, but in the latter
   * case, we also need to write the line starting the new section after writing
   * the key
   */
  flag = (*sp == '[');
 802037a:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 802037e:	781b      	ldrb	r3, [r3, #0]
 8020380:	2b5b      	cmp	r3, #91	@ 0x5b
 8020382:	bf0c      	ite	eq
 8020384:	2301      	moveq	r3, #1
 8020386:	2300      	movne	r3, #0
 8020388:	b2db      	uxtb	r3, r3
 802038a:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
  cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 802038e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8020392:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8020396:	f107 0114 	add.w	r1, r7, #20
 802039a:	f107 0018 	add.w	r0, r7, #24
 802039e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80203a2:	9300      	str	r3, [sp, #0]
 80203a4:	4623      	mov	r3, r4
 80203a6:	f7ff fc3d 	bl	801fc24 <cache_flush>
  if (Key != NULL && Value != NULL)
 80203aa:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80203ae:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80203b2:	681b      	ldr	r3, [r3, #0]
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	d016      	beq.n	80203e6 <ini_puts+0x656>
 80203b8:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80203bc:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80203c0:	681b      	ldr	r3, [r3, #0]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d00f      	beq.n	80203e6 <ini_puts+0x656>
    writekey(LocalBuffer, Key, Value, &wfp);
 80203c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80203ca:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 80203ce:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80203d2:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 80203d6:	f5a1 6199 	sub.w	r1, r1, #1224	@ 0x4c8
 80203da:	f107 0018 	add.w	r0, r7, #24
 80203de:	6812      	ldr	r2, [r2, #0]
 80203e0:	6809      	ldr	r1, [r1, #0]
 80203e2:	f7ff fba3 	bl	801fb2c <writekey>
  /* cache_flush() reset the "read pointer" to the start of the line with the
   * previous key or the new section; read it again (because writekey() destroyed
   * the buffer)
   */
  (void)ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp);
 80203e6:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80203ea:	f107 0318 	add.w	r3, r7, #24
 80203ee:	2140      	movs	r1, #64	@ 0x40
 80203f0:	4618      	mov	r0, r3
 80203f2:	f7fb fb0c 	bl	801ba0e <f_gets>
  if (flag) {
 80203f6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80203fa:	2b00      	cmp	r3, #0
 80203fc:	d008      	beq.n	8020410 <ini_puts+0x680>
    /* the new section heading needs to be copied to the output file */
    cache_accum(LocalBuffer, &cachelen, INI_BUFFERSIZE);
 80203fe:	f107 0114 	add.w	r1, r7, #20
 8020402:	f107 0318 	add.w	r3, r7, #24
 8020406:	2240      	movs	r2, #64	@ 0x40
 8020408:	4618      	mov	r0, r3
 802040a:	f7ff fbeb 	bl	801fbe4 <cache_accum>
 802040e:	e033      	b.n	8020478 <ini_puts+0x6e8>
  } else {
    /* forget the old key line */
    (void)ini_tell(&rfp, &mark);
 8020410:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8020414:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8020418:	699a      	ldr	r2, [r3, #24]
 802041a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 802041e:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8020422:	601a      	str	r2, [r3, #0]
  } /* if */
  /* Copy the rest of the INI file */
  while (ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp)) {
 8020424:	e028      	b.n	8020478 <ini_puts+0x6e8>
    if (!cache_accum(LocalBuffer, &cachelen, INI_BUFFERSIZE)) {
 8020426:	f107 0114 	add.w	r1, r7, #20
 802042a:	f107 0318 	add.w	r3, r7, #24
 802042e:	2240      	movs	r2, #64	@ 0x40
 8020430:	4618      	mov	r0, r3
 8020432:	f7ff fbd7 	bl	801fbe4 <cache_accum>
 8020436:	4603      	mov	r3, r0
 8020438:	2b00      	cmp	r3, #0
 802043a:	d11d      	bne.n	8020478 <ini_puts+0x6e8>
      cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 802043c:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8020440:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8020444:	f107 0114 	add.w	r1, r7, #20
 8020448:	f107 0018 	add.w	r0, r7, #24
 802044c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8020450:	9300      	str	r3, [sp, #0]
 8020452:	4623      	mov	r3, r4
 8020454:	f7ff fbe6 	bl	801fc24 <cache_flush>
      (void)ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp);
 8020458:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 802045c:	f107 0318 	add.w	r3, r7, #24
 8020460:	2140      	movs	r1, #64	@ 0x40
 8020462:	4618      	mov	r0, r3
 8020464:	f7fb fad3 	bl	801ba0e <f_gets>
      cache_accum(LocalBuffer, &cachelen, INI_BUFFERSIZE);
 8020468:	f107 0114 	add.w	r1, r7, #20
 802046c:	f107 0318 	add.w	r3, r7, #24
 8020470:	2240      	movs	r2, #64	@ 0x40
 8020472:	4618      	mov	r0, r3
 8020474:	f7ff fbb6 	bl	801fbe4 <cache_accum>
  while (ini_read(LocalBuffer, INI_BUFFERSIZE, &rfp)) {
 8020478:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 802047c:	f107 0318 	add.w	r3, r7, #24
 8020480:	2140      	movs	r1, #64	@ 0x40
 8020482:	4618      	mov	r0, r3
 8020484:	f7fb fac3 	bl	801ba0e <f_gets>
 8020488:	4603      	mov	r3, r0
 802048a:	2b00      	cmp	r3, #0
 802048c:	d1cb      	bne.n	8020426 <ini_puts+0x696>
    } /* if */
  } /* while */
  cache_flush(LocalBuffer, &cachelen, &rfp, &wfp, &mark);
 802048e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8020492:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8020496:	f107 0114 	add.w	r1, r7, #20
 802049a:	f107 0018 	add.w	r0, r7, #24
 802049e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80204a2:	9300      	str	r3, [sp, #0]
 80204a4:	4623      	mov	r3, r4
 80204a6:	f7ff fbbd 	bl	801fc24 <cache_flush>
  return close_rename(&rfp, &wfp, Filename, LocalBuffer);  /* clean up and rename */
 80204aa:	f107 0318 	add.w	r3, r7, #24
 80204ae:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 80204b2:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 80204b6:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80204ba:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 80204be:	6812      	ldr	r2, [r2, #0]
 80204c0:	f7ff fc48 	bl	801fd54 <close_rename>
 80204c4:	4603      	mov	r3, r0
}
 80204c6:	4618      	mov	r0, r3
 80204c8:	f207 47d4 	addw	r7, r7, #1236	@ 0x4d4
 80204cc:	46bd      	mov	sp, r7
 80204ce:	bd90      	pop	{r4, r7, pc}
 80204d0:	08027680 	.word	0x08027680

080204d4 <strreverse>:

/* Ansi C "itoa" based on Kernighan & Ritchie's "Ansi C" book. */
#define ABS(v)  ((v) < 0 ? -(v) : (v))

static void strreverse(TCHAR *str)
{
 80204d4:	b580      	push	{r7, lr}
 80204d6:	b086      	sub	sp, #24
 80204d8:	af00      	add	r7, sp, #0
 80204da:	6078      	str	r0, [r7, #4]
  TCHAR t;
  int i, j;

  for (i = 0, j = _tcslen(str) - 1; i < j; i++, j--) {
 80204dc:	2300      	movs	r3, #0
 80204de:	617b      	str	r3, [r7, #20]
 80204e0:	6878      	ldr	r0, [r7, #4]
 80204e2:	f7df fedf 	bl	80002a4 <strlen>
 80204e6:	4603      	mov	r3, r0
 80204e8:	3b01      	subs	r3, #1
 80204ea:	613b      	str	r3, [r7, #16]
 80204ec:	e017      	b.n	802051e <strreverse+0x4a>
    t = str[i];
 80204ee:	697b      	ldr	r3, [r7, #20]
 80204f0:	687a      	ldr	r2, [r7, #4]
 80204f2:	4413      	add	r3, r2
 80204f4:	781b      	ldrb	r3, [r3, #0]
 80204f6:	73fb      	strb	r3, [r7, #15]
    str[i] = str[j];
 80204f8:	693b      	ldr	r3, [r7, #16]
 80204fa:	687a      	ldr	r2, [r7, #4]
 80204fc:	441a      	add	r2, r3
 80204fe:	697b      	ldr	r3, [r7, #20]
 8020500:	6879      	ldr	r1, [r7, #4]
 8020502:	440b      	add	r3, r1
 8020504:	7812      	ldrb	r2, [r2, #0]
 8020506:	701a      	strb	r2, [r3, #0]
    str[j] = t;
 8020508:	693b      	ldr	r3, [r7, #16]
 802050a:	687a      	ldr	r2, [r7, #4]
 802050c:	4413      	add	r3, r2
 802050e:	7bfa      	ldrb	r2, [r7, #15]
 8020510:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = _tcslen(str) - 1; i < j; i++, j--) {
 8020512:	697b      	ldr	r3, [r7, #20]
 8020514:	3301      	adds	r3, #1
 8020516:	617b      	str	r3, [r7, #20]
 8020518:	693b      	ldr	r3, [r7, #16]
 802051a:	3b01      	subs	r3, #1
 802051c:	613b      	str	r3, [r7, #16]
 802051e:	697a      	ldr	r2, [r7, #20]
 8020520:	693b      	ldr	r3, [r7, #16]
 8020522:	429a      	cmp	r2, r3
 8020524:	dbe3      	blt.n	80204ee <strreverse+0x1a>
  } /* for */
}
 8020526:	bf00      	nop
 8020528:	bf00      	nop
 802052a:	3718      	adds	r7, #24
 802052c:	46bd      	mov	sp, r7
 802052e:	bd80      	pop	{r7, pc}

08020530 <long2str>:

static void long2str(long value, TCHAR *str)
{
 8020530:	b580      	push	{r7, lr}
 8020532:	b086      	sub	sp, #24
 8020534:	af00      	add	r7, sp, #0
 8020536:	6078      	str	r0, [r7, #4]
 8020538:	6039      	str	r1, [r7, #0]
  int i = 0;
 802053a:	2300      	movs	r3, #0
 802053c:	617b      	str	r3, [r7, #20]
  long sign = value;
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	613b      	str	r3, [r7, #16]
  int n;

  /* generate digits in reverse order */
  do {
    n = (int)(value % 10);              /* get next lowest digit */
 8020542:	687a      	ldr	r2, [r7, #4]
 8020544:	4b20      	ldr	r3, [pc, #128]	@ (80205c8 <long2str+0x98>)
 8020546:	fb83 1302 	smull	r1, r3, r3, r2
 802054a:	1099      	asrs	r1, r3, #2
 802054c:	17d3      	asrs	r3, r2, #31
 802054e:	1ac9      	subs	r1, r1, r3
 8020550:	460b      	mov	r3, r1
 8020552:	009b      	lsls	r3, r3, #2
 8020554:	440b      	add	r3, r1
 8020556:	005b      	lsls	r3, r3, #1
 8020558:	1ad3      	subs	r3, r2, r3
 802055a:	60fb      	str	r3, [r7, #12]
    str[i++] = (TCHAR)(ABS(n) + '0');   /* handle case of negative digit */
 802055c:	68fb      	ldr	r3, [r7, #12]
 802055e:	2b00      	cmp	r3, #0
 8020560:	da05      	bge.n	802056e <long2str+0x3e>
 8020562:	68fb      	ldr	r3, [r7, #12]
 8020564:	b2db      	uxtb	r3, r3
 8020566:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
 802056a:	b2db      	uxtb	r3, r3
 802056c:	e003      	b.n	8020576 <long2str+0x46>
 802056e:	68fb      	ldr	r3, [r7, #12]
 8020570:	b2db      	uxtb	r3, r3
 8020572:	3330      	adds	r3, #48	@ 0x30
 8020574:	b2db      	uxtb	r3, r3
 8020576:	697a      	ldr	r2, [r7, #20]
 8020578:	1c51      	adds	r1, r2, #1
 802057a:	6179      	str	r1, [r7, #20]
 802057c:	4611      	mov	r1, r2
 802057e:	683a      	ldr	r2, [r7, #0]
 8020580:	440a      	add	r2, r1
 8020582:	7013      	strb	r3, [r2, #0]
  } while (value /= 10);                /* delete the lowest digit */
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	4a10      	ldr	r2, [pc, #64]	@ (80205c8 <long2str+0x98>)
 8020588:	fb82 1203 	smull	r1, r2, r2, r3
 802058c:	1092      	asrs	r2, r2, #2
 802058e:	17db      	asrs	r3, r3, #31
 8020590:	1ad3      	subs	r3, r2, r3
 8020592:	607b      	str	r3, [r7, #4]
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	2b00      	cmp	r3, #0
 8020598:	d1d3      	bne.n	8020542 <long2str+0x12>
  if (sign < 0)
 802059a:	693b      	ldr	r3, [r7, #16]
 802059c:	2b00      	cmp	r3, #0
 802059e:	da07      	bge.n	80205b0 <long2str+0x80>
    str[i++] = '-';
 80205a0:	697b      	ldr	r3, [r7, #20]
 80205a2:	1c5a      	adds	r2, r3, #1
 80205a4:	617a      	str	r2, [r7, #20]
 80205a6:	461a      	mov	r2, r3
 80205a8:	683b      	ldr	r3, [r7, #0]
 80205aa:	4413      	add	r3, r2
 80205ac:	222d      	movs	r2, #45	@ 0x2d
 80205ae:	701a      	strb	r2, [r3, #0]
  str[i] = '\0';
 80205b0:	697b      	ldr	r3, [r7, #20]
 80205b2:	683a      	ldr	r2, [r7, #0]
 80205b4:	4413      	add	r3, r2
 80205b6:	2200      	movs	r2, #0
 80205b8:	701a      	strb	r2, [r3, #0]

  strreverse(str);
 80205ba:	6838      	ldr	r0, [r7, #0]
 80205bc:	f7ff ff8a 	bl	80204d4 <strreverse>
}
 80205c0:	bf00      	nop
 80205c2:	3718      	adds	r7, #24
 80205c4:	46bd      	mov	sp, r7
 80205c6:	bd80      	pop	{r7, pc}
 80205c8:	66666667 	.word	0x66666667

080205cc <ini_putl>:
 * \param Filename    the name and full path of the .ini file to write to
 *
 * \return            1 if successful, otherwise 0
 */
int ini_putl(const TCHAR *Section, const TCHAR *Key, long Value, const TCHAR *Filename)
{
 80205cc:	b580      	push	{r7, lr}
 80205ce:	b08c      	sub	sp, #48	@ 0x30
 80205d0:	af00      	add	r7, sp, #0
 80205d2:	60f8      	str	r0, [r7, #12]
 80205d4:	60b9      	str	r1, [r7, #8]
 80205d6:	607a      	str	r2, [r7, #4]
 80205d8:	603b      	str	r3, [r7, #0]
  TCHAR LocalBuffer[32];
  long2str(Value, LocalBuffer);
 80205da:	f107 0310 	add.w	r3, r7, #16
 80205de:	4619      	mov	r1, r3
 80205e0:	6878      	ldr	r0, [r7, #4]
 80205e2:	f7ff ffa5 	bl	8020530 <long2str>
  return ini_puts(Section, Key, LocalBuffer, Filename);
 80205e6:	f107 0210 	add.w	r2, r7, #16
 80205ea:	683b      	ldr	r3, [r7, #0]
 80205ec:	68b9      	ldr	r1, [r7, #8]
 80205ee:	68f8      	ldr	r0, [r7, #12]
 80205f0:	f7ff fbce 	bl	801fd90 <ini_puts>
 80205f4:	4603      	mov	r3, r0
}
 80205f6:	4618      	mov	r0, r3
 80205f8:	3730      	adds	r7, #48	@ 0x30
 80205fa:	46bd      	mov	sp, r7
 80205fc:	bd80      	pop	{r7, pc}

080205fe <_ZN6Z_coreC1Ev>:

class Z_core
{
  public:
	/* Method section */
	Z_core( void ) :
 80205fe:	b480      	push	{r7}
 8020600:	b083      	sub	sp, #12
 8020602:	af00      	add	r7, sp, #0
 8020604:	6078      	str	r0, [r7, #4]
		obj_errs( 0L ) {}
 8020606:	687b      	ldr	r3, [r7, #4]
 8020608:	2200      	movs	r2, #0
 802060a:	601a      	str	r2, [r3, #0]
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	4618      	mov	r0, r3
 8020610:	370c      	adds	r7, #12
 8020612:	46bd      	mov	sp, r7
 8020614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020618:	4770      	bx	lr

0802061a <_ZNK6Z_core12get_obj_errsEv>:
	}

	/* Simple get methods */

	const Z_obj_err_t
	get_obj_errs() const
 802061a:	b480      	push	{r7}
 802061c:	b083      	sub	sp, #12
 802061e:	af00      	add	r7, sp, #0
 8020620:	6078      	str	r0, [r7, #4]
	{
		return ( obj_errs );
 8020622:	687b      	ldr	r3, [r7, #4]
 8020624:	681b      	ldr	r3, [r3, #0]
	}
 8020626:	4618      	mov	r0, r3
 8020628:	370c      	adds	r7, #12
 802062a:	46bd      	mov	sp, r7
 802062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020630:	4770      	bx	lr

08020632 <_Z13bits_to_bytesj>:
};

inline u_int
bits_to_bytes(
	u_int			ibits )
{
 8020632:	b480      	push	{r7}
 8020634:	b083      	sub	sp, #12
 8020636:	af00      	add	r7, sp, #0
 8020638:	6078      	str	r0, [r7, #4]
	return ( ibits == 0 ? 0 : ((ibits - 1)/BITS_IN_BYTE) + 1);
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	2b00      	cmp	r3, #0
 802063e:	d004      	beq.n	802064a <_Z13bits_to_bytesj+0x18>
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	3b01      	subs	r3, #1
 8020644:	08db      	lsrs	r3, r3, #3
 8020646:	3301      	adds	r3, #1
 8020648:	e000      	b.n	802064c <_Z13bits_to_bytesj+0x1a>
 802064a:	2300      	movs	r3, #0
}
 802064c:	4618      	mov	r0, r3
 802064e:	370c      	adds	r7, #12
 8020650:	46bd      	mov	sp, r7
 8020652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020656:	4770      	bx	lr

08020658 <_Z5dummyPKcS0_>:

static const char sccsid[]      = "@(#) $Workfile: BITS.CPP $$ $Revision: 15 $$";
static const char sccsid_h[]    = BITS_H_DECLARED;

// Func to eliminate bogus sccsid and sccsid_h declared but never used warning.
inline void dummy(const char *, const char *) {}
 8020658:	b480      	push	{r7}
 802065a:	b083      	sub	sp, #12
 802065c:	af00      	add	r7, sp, #0
 802065e:	6078      	str	r0, [r7, #4]
 8020660:	6039      	str	r1, [r7, #0]
 8020662:	bf00      	nop
 8020664:	370c      	adds	r7, #12
 8020666:	46bd      	mov	sp, r7
 8020668:	f85d 7b04 	ldr.w	r7, [sp], #4
 802066c:	4770      	bx	lr
	...

08020670 <_ZN4BitsC1Ej>:
 *		isize size BYTE arrary and then calls reset() to initialize
 *		things.
 */
/*--------------------------------------------------------------------------*/

Bits::Bits(
 8020670:	b580      	push	{r7, lr}
 8020672:	b082      	sub	sp, #8
 8020674:	af00      	add	r7, sp, #0
 8020676:	6078      	str	r0, [r7, #4]
 8020678:	6039      	str	r1, [r7, #0]
	u_int			isize )					// Size of bytes array.
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	4618      	mov	r0, r3
 802067e:	f7ff ffbe 	bl	80205fe <_ZN6Z_coreC1Ev>
{
	if ( (bytes = new BYTE[ isize ]) == (BYTE *)0 )
 8020682:	683b      	ldr	r3, [r7, #0]
 8020684:	4618      	mov	r0, r3
 8020686:	f004 fe59 	bl	802533c <_Znaj>
 802068a:	4603      	mov	r3, r0
 802068c:	461a      	mov	r2, r3
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	605a      	str	r2, [r3, #4]
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	685b      	ldr	r3, [r3, #4]
 8020696:	2b00      	cmp	r3, #0
 8020698:	bf0c      	ite	eq
 802069a:	2301      	moveq	r3, #1
 802069c:	2300      	movne	r3, #0
 802069e:	b2db      	uxtb	r3, r3
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	d005      	beq.n	80206b0 <_ZN4BitsC1Ej+0x40>
	{
		SET_ERROR( CONSTRUCTOR_OBJ_ERR );
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	f043 0201 	orr.w	r2, r3, #1
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	601a      	str	r2, [r3, #0]
	}

	last_byte	=	&bytes[ isize - 1];
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	685a      	ldr	r2, [r3, #4]
 80206b4:	683b      	ldr	r3, [r7, #0]
 80206b6:	3b01      	subs	r3, #1
 80206b8:	441a      	add	r2, r3
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	609a      	str	r2, [r3, #8]

	clr_in();
 80206be:	6878      	ldr	r0, [r7, #4]
 80206c0:	f000 f820 	bl	8020704 <_ZN4Bits6clr_inEv>

    // Eliminate bogus sccsid and sccsid_h declared but never used warning.
    dummy( sccsid, sccsid_h );
 80206c4:	4904      	ldr	r1, [pc, #16]	@ (80206d8 <_ZN4BitsC1Ej+0x68>)
 80206c6:	4805      	ldr	r0, [pc, #20]	@ (80206dc <_ZN4BitsC1Ej+0x6c>)
 80206c8:	f7ff ffc6 	bl	8020658 <_Z5dummyPKcS0_>
}
 80206cc:	687b      	ldr	r3, [r7, #4]
 80206ce:	4618      	mov	r0, r3
 80206d0:	3708      	adds	r7, #8
 80206d2:	46bd      	mov	sp, r7
 80206d4:	bd80      	pop	{r7, pc}
 80206d6:	bf00      	nop
 80206d8:	0802bedc 	.word	0x0802bedc
 80206dc:	0802beac 	.word	0x0802beac

080206e0 <_ZN4BitsD1Ev>:
 *
 *		~Bits() is the destructor for Bits.
 */
/*--------------------------------------------------------------------------*/

Bits::~Bits()
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b082      	sub	sp, #8
 80206e4:	af00      	add	r7, sp, #0
 80206e6:	6078      	str	r0, [r7, #4]
{
	delete [] bytes;
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	685b      	ldr	r3, [r3, #4]
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d004      	beq.n	80206fa <_ZN4BitsD1Ev+0x1a>
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	685b      	ldr	r3, [r3, #4]
 80206f4:	4618      	mov	r0, r3
 80206f6:	f004 fe1f 	bl	8025338 <_ZdaPv>
}
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	4618      	mov	r0, r3
 80206fe:	3708      	adds	r7, #8
 8020700:	46bd      	mov	sp, r7
 8020702:	bd80      	pop	{r7, pc}

08020704 <_ZN4Bits6clr_inEv>:
 */
/*--------------------------------------------------------------------------*/

Bits &
Bits::clr_in()
{
 8020704:	b580      	push	{r7, lr}
 8020706:	b082      	sub	sp, #8
 8020708:	af00      	add	r7, sp, #0
 802070a:	6078      	str	r0, [r7, #4]
	*bytes		=	0x00;
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	685b      	ldr	r3, [r3, #4]
 8020710:	2200      	movs	r2, #0
 8020712:	701a      	strb	r2, [r3, #0]
	in_byte		=	bytes;
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	685a      	ldr	r2, [r3, #4]
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	60da      	str	r2, [r3, #12]
	in_bit		=	MAX_BIT_POS;
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	2207      	movs	r2, #7
 8020720:	611a      	str	r2, [r3, #16]
	out_byte	=	bytes;
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	685a      	ldr	r2, [r3, #4]
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	615a      	str	r2, [r3, #20]
	check_byte	=	CHECK_INIT;
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	2200      	movs	r2, #0
 802072e:	761a      	strb	r2, [r3, #24]
	clr_flip();
 8020730:	6878      	ldr	r0, [r7, #4]
 8020732:	f000 f9dd 	bl	8020af0 <_ZN4Bits8clr_flipEv>
	CLEAR_WARN( WARN_ERR );
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	681b      	ldr	r3, [r3, #0]
 802073a:	b29a      	uxth	r2, r3
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	601a      	str	r2, [r3, #0]

	return ( *this );
 8020740:	687b      	ldr	r3, [r7, #4]
}
 8020742:	4618      	mov	r0, r3
 8020744:	3708      	adds	r7, #8
 8020746:	46bd      	mov	sp, r7
 8020748:	bd80      	pop	{r7, pc}
	...

0802074c <_ZN4Bits8put_byteEh>:
/*--------------------------------------------------------------------------*/

Bits &
Bits::put_byte(
	BYTE			ibyte )					// Byte to add.
{
 802074c:	b480      	push	{r7}
 802074e:	b085      	sub	sp, #20
 8020750:	af00      	add	r7, sp, #0
 8020752:	6078      	str	r0, [r7, #4]
 8020754:	460b      	mov	r3, r1
 8020756:	70fb      	strb	r3, [r7, #3]
	BYTE			tbyte;					// Temporary Byte.

	if ( in_byte > last_byte )
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	68da      	ldr	r2, [r3, #12]
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	689b      	ldr	r3, [r3, #8]
 8020760:	429a      	cmp	r2, r3
 8020762:	d907      	bls.n	8020774 <_ZN4Bits8put_byteEh+0x28>
	{
		SET_ERROR( RANGE_OBJ_WARN );
 8020764:	687b      	ldr	r3, [r7, #4]
 8020766:	681b      	ldr	r3, [r3, #0]
 8020768:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	601a      	str	r2, [r3, #0]
		return ( *this );
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	e048      	b.n	8020806 <_ZN4Bits8put_byteEh+0xba>
	}

	if ( in_bit	==	MAX_BIT_POS )			// At Byte boundary.
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	691b      	ldr	r3, [r3, #16]
 8020778:	2b07      	cmp	r3, #7
 802077a:	d107      	bne.n	802078c <_ZN4Bits8put_byteEh+0x40>
	{
		*in_byte++	=	ibyte;
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	68db      	ldr	r3, [r3, #12]
 8020780:	1c59      	adds	r1, r3, #1
 8020782:	687a      	ldr	r2, [r7, #4]
 8020784:	60d1      	str	r1, [r2, #12]
 8020786:	78fa      	ldrb	r2, [r7, #3]
 8020788:	701a      	strb	r2, [r3, #0]
 802078a:	e034      	b.n	80207f6 <_ZN4Bits8put_byteEh+0xaa>
	}
	else									// Between Byte boundarys.
	{
		*in_byte	&=	bit0_1st[ in_bit ];	// Clear out old bits.
 802078c:	687b      	ldr	r3, [r7, #4]
 802078e:	68db      	ldr	r3, [r3, #12]
 8020790:	7819      	ldrb	r1, [r3, #0]
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	691b      	ldr	r3, [r3, #16]
 8020796:	4a1f      	ldr	r2, [pc, #124]	@ (8020814 <_ZN4Bits8put_byteEh+0xc8>)
 8020798:	5cd2      	ldrb	r2, [r2, r3]
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	68db      	ldr	r3, [r3, #12]
 802079e:	400a      	ands	r2, r1
 80207a0:	b2d2      	uxtb	r2, r2
 80207a2:	701a      	strb	r2, [r3, #0]
		tbyte		=	ibyte >> (MAX_BIT_POS - in_bit);
 80207a4:	78fa      	ldrb	r2, [r7, #3]
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	691b      	ldr	r3, [r3, #16]
 80207aa:	f1c3 0307 	rsb	r3, r3, #7
 80207ae:	fa42 f303 	asr.w	r3, r2, r3
 80207b2:	73fb      	strb	r3, [r7, #15]
		*in_byte++	|=	tbyte;				// Load new bits.
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	68db      	ldr	r3, [r3, #12]
 80207b8:	1c59      	adds	r1, r3, #1
 80207ba:	687a      	ldr	r2, [r7, #4]
 80207bc:	60d1      	str	r1, [r2, #12]
 80207be:	7819      	ldrb	r1, [r3, #0]
 80207c0:	7bfa      	ldrb	r2, [r7, #15]
 80207c2:	430a      	orrs	r2, r1
 80207c4:	b2d2      	uxtb	r2, r2
 80207c6:	701a      	strb	r2, [r3, #0]

		if ( in_byte > last_byte )
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	68da      	ldr	r2, [r3, #12]
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	689b      	ldr	r3, [r3, #8]
 80207d0:	429a      	cmp	r2, r3
 80207d2:	d907      	bls.n	80207e4 <_ZN4Bits8put_byteEh+0x98>
		{
			SET_ERROR( RANGE_OBJ_WARN );
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	601a      	str	r2, [r3, #0]
			return ( *this );
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	e010      	b.n	8020806 <_ZN4Bits8put_byteEh+0xba>
		}
		else
		{
			*in_byte	=	ibyte << (in_bit + 1);
 80207e4:	78fa      	ldrb	r2, [r7, #3]
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	691b      	ldr	r3, [r3, #16]
 80207ea:	3301      	adds	r3, #1
 80207ec:	409a      	lsls	r2, r3
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	68db      	ldr	r3, [r3, #12]
 80207f2:	b2d2      	uxtb	r2, r2
 80207f4:	701a      	strb	r2, [r3, #0]
		}
	}

	check_byte	^=	ibyte;
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	7e1a      	ldrb	r2, [r3, #24]
 80207fa:	78fb      	ldrb	r3, [r7, #3]
 80207fc:	4053      	eors	r3, r2
 80207fe:	b2da      	uxtb	r2, r3
 8020800:	687b      	ldr	r3, [r7, #4]
 8020802:	761a      	strb	r2, [r3, #24]

	return ( *this );
 8020804:	687b      	ldr	r3, [r7, #4]
}
 8020806:	4618      	mov	r0, r3
 8020808:	3714      	adds	r7, #20
 802080a:	46bd      	mov	sp, r7
 802080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020810:	4770      	bx	lr
 8020812:	bf00      	nop
 8020814:	0802bf18 	.word	0x0802bf18

08020818 <_ZN4Bits6put_1sEj>:
/*--------------------------------------------------------------------------*/

Bits &
Bits::put_1s(
	u_int			count )					// Count of 1 bits to add.
{
 8020818:	b480      	push	{r7}
 802081a:	b083      	sub	sp, #12
 802081c:	af00      	add	r7, sp, #0
 802081e:	6078      	str	r0, [r7, #4]
 8020820:	6039      	str	r1, [r7, #0]
	/*
	 *	Fill in any bits in present Byte.
	 */
	*in_byte	|=	bit1_1st[ in_bit ];
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	68db      	ldr	r3, [r3, #12]
 8020826:	7819      	ldrb	r1, [r3, #0]
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	691b      	ldr	r3, [r3, #16]
 802082c:	4a31      	ldr	r2, [pc, #196]	@ (80208f4 <_ZN4Bits6put_1sEj+0xdc>)
 802082e:	5cd2      	ldrb	r2, [r2, r3]
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	68db      	ldr	r3, [r3, #12]
 8020834:	430a      	orrs	r2, r1
 8020836:	b2d2      	uxtb	r2, r2
 8020838:	701a      	strb	r2, [r3, #0]

	if ( count < (in_bit + 1) )				// We're done.
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	691b      	ldr	r3, [r3, #16]
 802083e:	3301      	adds	r3, #1
 8020840:	683a      	ldr	r2, [r7, #0]
 8020842:	429a      	cmp	r2, r3
 8020844:	d207      	bcs.n	8020856 <_ZN4Bits6put_1sEj+0x3e>
	{
		in_bit	-=	count;
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	691a      	ldr	r2, [r3, #16]
 802084a:	683b      	ldr	r3, [r7, #0]
 802084c:	1ad2      	subs	r2, r2, r3
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	611a      	str	r2, [r3, #16]
		return ( *this );
 8020852:	687b      	ldr	r3, [r7, #4]
 8020854:	e047      	b.n	80208e6 <_ZN4Bits6put_1sEj+0xce>
	}
	else									// More bits to do.
	{
		count	-=	in_bit + 1;
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	691b      	ldr	r3, [r3, #16]
 802085a:	683a      	ldr	r2, [r7, #0]
 802085c:	1ad3      	subs	r3, r2, r3
 802085e:	3b01      	subs	r3, #1
 8020860:	603b      	str	r3, [r7, #0]
		in_bit	=	MAX_BIT_POS;
 8020862:	687b      	ldr	r3, [r7, #4]
 8020864:	2207      	movs	r2, #7
 8020866:	611a      	str	r2, [r3, #16]
		++in_byte;
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	68db      	ldr	r3, [r3, #12]
 802086c:	1c5a      	adds	r2, r3, #1
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	60da      	str	r2, [r3, #12]
	}

	/*
	 *	Handle full BYTES in middle of run.
	 */
	for ( ; count >= BITS_IN_BYTE; count -= BITS_IN_BYTE )
 8020872:	e017      	b.n	80208a4 <_ZN4Bits6put_1sEj+0x8c>
	{
		if ( in_byte > last_byte )
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	68da      	ldr	r2, [r3, #12]
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	689b      	ldr	r3, [r3, #8]
 802087c:	429a      	cmp	r2, r3
 802087e:	d907      	bls.n	8020890 <_ZN4Bits6put_1sEj+0x78>
		{
			SET_ERROR( RANGE_OBJ_WARN );
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	601a      	str	r2, [r3, #0]
			return ( *this );
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	e02a      	b.n	80208e6 <_ZN4Bits6put_1sEj+0xce>
		}
		else
		{
			*in_byte++	=	0xff;
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	68db      	ldr	r3, [r3, #12]
 8020894:	1c59      	adds	r1, r3, #1
 8020896:	687a      	ldr	r2, [r7, #4]
 8020898:	60d1      	str	r1, [r2, #12]
 802089a:	22ff      	movs	r2, #255	@ 0xff
 802089c:	701a      	strb	r2, [r3, #0]
	for ( ; count >= BITS_IN_BYTE; count -= BITS_IN_BYTE )
 802089e:	683b      	ldr	r3, [r7, #0]
 80208a0:	3b08      	subs	r3, #8
 80208a2:	603b      	str	r3, [r7, #0]
 80208a4:	683b      	ldr	r3, [r7, #0]
 80208a6:	2b07      	cmp	r3, #7
 80208a8:	d8e4      	bhi.n	8020874 <_ZN4Bits6put_1sEj+0x5c>
		}
	}

	if ( count > 0 )
 80208aa:	683b      	ldr	r3, [r7, #0]
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d019      	beq.n	80208e4 <_ZN4Bits6put_1sEj+0xcc>
	{
		/*
	 	 *	Fill in any bits in last byte.
	 	 */
		if ( in_byte > last_byte )
 80208b0:	687b      	ldr	r3, [r7, #4]
 80208b2:	68da      	ldr	r2, [r3, #12]
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	689b      	ldr	r3, [r3, #8]
 80208b8:	429a      	cmp	r2, r3
 80208ba:	d907      	bls.n	80208cc <_ZN4Bits6put_1sEj+0xb4>
		{
			SET_ERROR( RANGE_OBJ_WARN );
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	601a      	str	r2, [r3, #0]
			return ( *this );
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	e00c      	b.n	80208e6 <_ZN4Bits6put_1sEj+0xce>
		}

		*in_byte	=	bit1_2nd[ in_bit ];
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	691a      	ldr	r2, [r3, #16]
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	68db      	ldr	r3, [r3, #12]
 80208d4:	4908      	ldr	r1, [pc, #32]	@ (80208f8 <_ZN4Bits6put_1sEj+0xe0>)
 80208d6:	5c8a      	ldrb	r2, [r1, r2]
 80208d8:	701a      	strb	r2, [r3, #0]
		in_bit		=	MAX_BIT_POS - count;
 80208da:	683b      	ldr	r3, [r7, #0]
 80208dc:	f1c3 0207 	rsb	r2, r3, #7
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	611a      	str	r2, [r3, #16]
	}

	return ( *this );
 80208e4:	687b      	ldr	r3, [r7, #4]
}
 80208e6:	4618      	mov	r0, r3
 80208e8:	370c      	adds	r7, #12
 80208ea:	46bd      	mov	sp, r7
 80208ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f0:	4770      	bx	lr
 80208f2:	bf00      	nop
 80208f4:	0802bf08 	.word	0x0802bf08
 80208f8:	0802bf10 	.word	0x0802bf10

080208fc <_ZN4Bits6put_0sEj>:
/*--------------------------------------------------------------------------*/

Bits &
Bits::put_0s(
	u_int			count )					// Count of 0 bits to add.
{
 80208fc:	b480      	push	{r7}
 80208fe:	b083      	sub	sp, #12
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
 8020904:	6039      	str	r1, [r7, #0]
	/*
	 *	Clear any bits in present Byte.
	 */
	*in_byte	&=	bit0_1st[ in_bit ];
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	68db      	ldr	r3, [r3, #12]
 802090a:	7819      	ldrb	r1, [r3, #0]
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	691b      	ldr	r3, [r3, #16]
 8020910:	4a2f      	ldr	r2, [pc, #188]	@ (80209d0 <_ZN4Bits6put_0sEj+0xd4>)
 8020912:	5cd2      	ldrb	r2, [r2, r3]
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	68db      	ldr	r3, [r3, #12]
 8020918:	400a      	ands	r2, r1
 802091a:	b2d2      	uxtb	r2, r2
 802091c:	701a      	strb	r2, [r3, #0]

	if ( count < (in_bit + 1) )				// We're done.
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	691b      	ldr	r3, [r3, #16]
 8020922:	3301      	adds	r3, #1
 8020924:	683a      	ldr	r2, [r7, #0]
 8020926:	429a      	cmp	r2, r3
 8020928:	d207      	bcs.n	802093a <_ZN4Bits6put_0sEj+0x3e>
	{
		in_bit	-=	count;
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	691a      	ldr	r2, [r3, #16]
 802092e:	683b      	ldr	r3, [r7, #0]
 8020930:	1ad2      	subs	r2, r2, r3
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	611a      	str	r2, [r3, #16]
		return ( *this );
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	e044      	b.n	80209c4 <_ZN4Bits6put_0sEj+0xc8>
	}
	else									// More bits to do.
	{
		count	-=	in_bit + 1;
 802093a:	687b      	ldr	r3, [r7, #4]
 802093c:	691b      	ldr	r3, [r3, #16]
 802093e:	683a      	ldr	r2, [r7, #0]
 8020940:	1ad3      	subs	r3, r2, r3
 8020942:	3b01      	subs	r3, #1
 8020944:	603b      	str	r3, [r7, #0]
		in_bit	=	MAX_BIT_POS;
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	2207      	movs	r2, #7
 802094a:	611a      	str	r2, [r3, #16]
		++in_byte;
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	68db      	ldr	r3, [r3, #12]
 8020950:	1c5a      	adds	r2, r3, #1
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	60da      	str	r2, [r3, #12]
	}

	/*
	 *	Handle full BYTES in middle of run.
	 */
	for ( ; count >= BITS_IN_BYTE; count -= BITS_IN_BYTE )
 8020956:	e017      	b.n	8020988 <_ZN4Bits6put_0sEj+0x8c>
	{
		if ( in_byte > last_byte )
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	68da      	ldr	r2, [r3, #12]
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	689b      	ldr	r3, [r3, #8]
 8020960:	429a      	cmp	r2, r3
 8020962:	d907      	bls.n	8020974 <_ZN4Bits6put_0sEj+0x78>
		{
			SET_ERROR( RANGE_OBJ_WARN );
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	601a      	str	r2, [r3, #0]
			return ( *this );
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	e027      	b.n	80209c4 <_ZN4Bits6put_0sEj+0xc8>
		}
		else
		{
			*in_byte++	=	0x00;
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	68db      	ldr	r3, [r3, #12]
 8020978:	1c59      	adds	r1, r3, #1
 802097a:	687a      	ldr	r2, [r7, #4]
 802097c:	60d1      	str	r1, [r2, #12]
 802097e:	2200      	movs	r2, #0
 8020980:	701a      	strb	r2, [r3, #0]
	for ( ; count >= BITS_IN_BYTE; count -= BITS_IN_BYTE )
 8020982:	683b      	ldr	r3, [r7, #0]
 8020984:	3b08      	subs	r3, #8
 8020986:	603b      	str	r3, [r7, #0]
 8020988:	683b      	ldr	r3, [r7, #0]
 802098a:	2b07      	cmp	r3, #7
 802098c:	d8e4      	bhi.n	8020958 <_ZN4Bits6put_0sEj+0x5c>
		}
	}


	if ( count > 0 )
 802098e:	683b      	ldr	r3, [r7, #0]
 8020990:	2b00      	cmp	r3, #0
 8020992:	d016      	beq.n	80209c2 <_ZN4Bits6put_0sEj+0xc6>
	{
		/*
		 *	Clear any bits in last byte.
		 */
		if ( in_byte > last_byte )
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	68da      	ldr	r2, [r3, #12]
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	689b      	ldr	r3, [r3, #8]
 802099c:	429a      	cmp	r2, r3
 802099e:	d907      	bls.n	80209b0 <_ZN4Bits6put_0sEj+0xb4>
		{
			SET_ERROR( RANGE_OBJ_WARN );
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	601a      	str	r2, [r3, #0]
			return ( *this );
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	e009      	b.n	80209c4 <_ZN4Bits6put_0sEj+0xc8>
		}

		*in_byte	=	0x00;
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	68db      	ldr	r3, [r3, #12]
 80209b4:	2200      	movs	r2, #0
 80209b6:	701a      	strb	r2, [r3, #0]
		in_bit		=	MAX_BIT_POS - count;
 80209b8:	683b      	ldr	r3, [r7, #0]
 80209ba:	f1c3 0207 	rsb	r2, r3, #7
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	611a      	str	r2, [r3, #16]
	}

	return ( *this );
 80209c2:	687b      	ldr	r3, [r7, #4]
}
 80209c4:	4618      	mov	r0, r3
 80209c6:	370c      	adds	r7, #12
 80209c8:	46bd      	mov	sp, r7
 80209ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209ce:	4770      	bx	lr
 80209d0:	0802bf18 	.word	0x0802bf18

080209d4 <_ZN4Bits8put_fsocEv>:
 */
/*--------------------------------------------------------------------------*/

Bits &
Bits::put_fsoc( void )
{
 80209d4:	b580      	push	{r7, lr}
 80209d6:	b082      	sub	sp, #8
 80209d8:	af00      	add	r7, sp, #0
 80209da:	6078      	str	r0, [r7, #4]
	put_reset_pkt( 20 ).put_idle_pkt( 10 );
 80209dc:	220c      	movs	r2, #12
 80209de:	2114      	movs	r1, #20
 80209e0:	6878      	ldr	r0, [r7, #4]
 80209e2:	f000 f80b 	bl	80209fc <_ZN4Bits13put_reset_pktEjj>
 80209e6:	4603      	mov	r3, r0
 80209e8:	220c      	movs	r2, #12
 80209ea:	210a      	movs	r1, #10
 80209ec:	4618      	mov	r0, r3
 80209ee:	f000 f824 	bl	8020a3a <_ZN4Bits12put_idle_pktEjj>
	return ( *this );
 80209f2:	687b      	ldr	r3, [r7, #4]
}
 80209f4:	4618      	mov	r0, r3
 80209f6:	3708      	adds	r7, #8
 80209f8:	46bd      	mov	sp, r7
 80209fa:	bd80      	pop	{r7, pc}

080209fc <_ZN4Bits13put_reset_pktEjj>:

Bits &
Bits::put_reset_pkt(
	u_int			packets,				// Count of reset packets to add.
	u_int			pre_bits )				// Preamble bits (default PRE_BITS)
{
 80209fc:	b580      	push	{r7, lr}
 80209fe:	b084      	sub	sp, #16
 8020a00:	af00      	add	r7, sp, #0
 8020a02:	60f8      	str	r0, [r7, #12]
 8020a04:	60b9      	str	r1, [r7, #8]
 8020a06:	607a      	str	r2, [r7, #4]
	while ( packets-- > 0 )
 8020a08:	e008      	b.n	8020a1c <_ZN4Bits13put_reset_pktEjj+0x20>
	{
		put_1s( pre_bits ).put_0s( BASE_BITS - PRE_BITS );
 8020a0a:	6879      	ldr	r1, [r7, #4]
 8020a0c:	68f8      	ldr	r0, [r7, #12]
 8020a0e:	f7ff ff03 	bl	8020818 <_ZN4Bits6put_1sEj>
 8020a12:	4603      	mov	r3, r0
 8020a14:	211b      	movs	r1, #27
 8020a16:	4618      	mov	r0, r3
 8020a18:	f7ff ff70 	bl	80208fc <_ZN4Bits6put_0sEj>
	while ( packets-- > 0 )
 8020a1c:	68bb      	ldr	r3, [r7, #8]
 8020a1e:	1e5a      	subs	r2, r3, #1
 8020a20:	60ba      	str	r2, [r7, #8]
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	bf14      	ite	ne
 8020a26:	2301      	movne	r3, #1
 8020a28:	2300      	moveq	r3, #0
 8020a2a:	b2db      	uxtb	r3, r3
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d1ec      	bne.n	8020a0a <_ZN4Bits13put_reset_pktEjj+0xe>
	}

	return ( *this );
 8020a30:	68fb      	ldr	r3, [r7, #12]
}
 8020a32:	4618      	mov	r0, r3
 8020a34:	3710      	adds	r7, #16
 8020a36:	46bd      	mov	sp, r7
 8020a38:	bd80      	pop	{r7, pc}

08020a3a <_ZN4Bits12put_idle_pktEjj>:

Bits &
Bits::put_idle_pkt(
	u_int			packets,				// Count of idle packets to add.
	u_int			pre_bits )				// Preamble bits (default PRE_BITS)
{
 8020a3a:	b580      	push	{r7, lr}
 8020a3c:	b084      	sub	sp, #16
 8020a3e:	af00      	add	r7, sp, #0
 8020a40:	60f8      	str	r0, [r7, #12]
 8020a42:	60b9      	str	r1, [r7, #8]
 8020a44:	607a      	str	r2, [r7, #4]
	while ( packets-- > 0 )
 8020a46:	e016      	b.n	8020a76 <_ZN4Bits12put_idle_pktEjj+0x3c>
	{
		put_1s( pre_bits ).put_0s( 1 ).put_byte( 0xff ).put_0s( 10 );
 8020a48:	6879      	ldr	r1, [r7, #4]
 8020a4a:	68f8      	ldr	r0, [r7, #12]
 8020a4c:	f7ff fee4 	bl	8020818 <_ZN4Bits6put_1sEj>
 8020a50:	4603      	mov	r3, r0
 8020a52:	2101      	movs	r1, #1
 8020a54:	4618      	mov	r0, r3
 8020a56:	f7ff ff51 	bl	80208fc <_ZN4Bits6put_0sEj>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	21ff      	movs	r1, #255	@ 0xff
 8020a5e:	4618      	mov	r0, r3
 8020a60:	f7ff fe74 	bl	802074c <_ZN4Bits8put_byteEh>
 8020a64:	4603      	mov	r3, r0
 8020a66:	210a      	movs	r1, #10
 8020a68:	4618      	mov	r0, r3
 8020a6a:	f7ff ff47 	bl	80208fc <_ZN4Bits6put_0sEj>
		put_byte( 0xff );
 8020a6e:	21ff      	movs	r1, #255	@ 0xff
 8020a70:	68f8      	ldr	r0, [r7, #12]
 8020a72:	f7ff fe6b 	bl	802074c <_ZN4Bits8put_byteEh>
	while ( packets-- > 0 )
 8020a76:	68bb      	ldr	r3, [r7, #8]
 8020a78:	1e5a      	subs	r2, r3, #1
 8020a7a:	60ba      	str	r2, [r7, #8]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	bf14      	ite	ne
 8020a80:	2301      	movne	r3, #1
 8020a82:	2300      	moveq	r3, #0
 8020a84:	b2db      	uxtb	r3, r3
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	d1de      	bne.n	8020a48 <_ZN4Bits12put_idle_pktEjj+0xe>
	}

	return ( *this );
 8020a8a:	68fb      	ldr	r3, [r7, #12]
}
 8020a8c:	4618      	mov	r0, r3
 8020a8e:	3710      	adds	r7, #16
 8020a90:	46bd      	mov	sp, r7
 8020a92:	bd80      	pop	{r7, pc}

08020a94 <_ZN4Bits4doneEv>:
 */
/*--------------------------------------------------------------------------*/

Bits &
Bits::done( void )
{
 8020a94:	b480      	push	{r7}
 8020a96:	b083      	sub	sp, #12
 8020a98:	af00      	add	r7, sp, #0
 8020a9a:	6078      	str	r0, [r7, #4]
	if ( (in_byte > last_byte) || (in_bit == MAX_BIT_POS) )
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	68da      	ldr	r2, [r3, #12]
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	689b      	ldr	r3, [r3, #8]
 8020aa4:	429a      	cmp	r2, r3
 8020aa6:	d803      	bhi.n	8020ab0 <_ZN4Bits4doneEv+0x1c>
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	691b      	ldr	r3, [r3, #16]
 8020aac:	2b07      	cmp	r3, #7
 8020aae:	d101      	bne.n	8020ab4 <_ZN4Bits4doneEv+0x20>
	{
		return ( *this );
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	e014      	b.n	8020ade <_ZN4Bits4doneEv+0x4a>
	}

	*in_byte	&=	bit0_1st[ in_bit ];
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	68db      	ldr	r3, [r3, #12]
 8020ab8:	7819      	ldrb	r1, [r3, #0]
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	691b      	ldr	r3, [r3, #16]
 8020abe:	4a0b      	ldr	r2, [pc, #44]	@ (8020aec <_ZN4Bits4doneEv+0x58>)
 8020ac0:	5cd2      	ldrb	r2, [r2, r3]
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	68db      	ldr	r3, [r3, #12]
 8020ac6:	400a      	ands	r2, r1
 8020ac8:	b2d2      	uxtb	r2, r2
 8020aca:	701a      	strb	r2, [r3, #0]
	in_bit		=	MAX_BIT_POS;
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	2207      	movs	r2, #7
 8020ad0:	611a      	str	r2, [r3, #16]
	++in_byte;
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	68db      	ldr	r3, [r3, #12]
 8020ad6:	1c5a      	adds	r2, r3, #1
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	60da      	str	r2, [r3, #12]

	return ( *this );
 8020adc:	687b      	ldr	r3, [r7, #4]
}
 8020ade:	4618      	mov	r0, r3
 8020ae0:	370c      	adds	r7, #12
 8020ae2:	46bd      	mov	sp, r7
 8020ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ae8:	4770      	bx	lr
 8020aea:	bf00      	nop
 8020aec:	0802bf18 	.word	0x0802bf18

08020af0 <_ZN4Bits8clr_flipEv>:
 */
/*--------------------------------------------------------------------------*/

void
Bits::clr_flip( void )
{
 8020af0:	b480      	push	{r7}
 8020af2:	b083      	sub	sp, #12
 8020af4:	af00      	add	r7, sp, #0
 8020af6:	6078      	str	r0, [r7, #4]
	if ( flip_byte )					// Reset present flipped bit.
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	69db      	ldr	r3, [r3, #28]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d00b      	beq.n	8020b18 <_ZN4Bits8clr_flipEv+0x28>
	{
		*flip_byte	^=	bit_flips[ flip_bit ];
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	69db      	ldr	r3, [r3, #28]
 8020b04:	7819      	ldrb	r1, [r3, #0]
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	6a1b      	ldr	r3, [r3, #32]
 8020b0a:	4a09      	ldr	r2, [pc, #36]	@ (8020b30 <_ZN4Bits8clr_flipEv+0x40>)
 8020b0c:	5cd2      	ldrb	r2, [r2, r3]
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	69db      	ldr	r3, [r3, #28]
 8020b12:	404a      	eors	r2, r1
 8020b14:	b2d2      	uxtb	r2, r2
 8020b16:	701a      	strb	r2, [r3, #0]
	}

	flip_byte	=	(BYTE *)0;
 8020b18:	687b      	ldr	r3, [r7, #4]
 8020b1a:	2200      	movs	r2, #0
 8020b1c:	61da      	str	r2, [r3, #28]
	flip_bit	=	MAX_BIT_POS;
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	2207      	movs	r2, #7
 8020b22:	621a      	str	r2, [r3, #32]
}
 8020b24:	bf00      	nop
 8020b26:	370c      	adds	r7, #12
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b2e:	4770      	bx	lr
 8020b30:	0802bf20 	.word	0x0802bf20

08020b34 <_ZN9Fsoc_bitsC1Ev>:
 *		BYTE arrary large enough to hold the fail safe packet sequence
 *		and then fills it with the fail safe packet sequence.
 */
/*--------------------------------------------------------------------------*/

Fsoc_bits::Fsoc_bits( void )
 8020b34:	b590      	push	{r4, r7, lr}
 8020b36:	b083      	sub	sp, #12
 8020b38:	af00      	add	r7, sp, #0
 8020b3a:	6078      	str	r0, [r7, #4]
: Bits( bits_to_bytes( (30 * BASE_BITS) + 1 ) )
 8020b3c:	687c      	ldr	r4, [r7, #4]
 8020b3e:	f240 4093 	movw	r0, #1171	@ 0x493
 8020b42:	f7ff fd76 	bl	8020632 <_Z13bits_to_bytesj>
 8020b46:	4603      	mov	r3, r0
 8020b48:	4619      	mov	r1, r3
 8020b4a:	4620      	mov	r0, r4
 8020b4c:	f7ff fd90 	bl	8020670 <_ZN4BitsC1Ej>
{
	put_fsoc().put_1s( 1 ).done();
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	4618      	mov	r0, r3
 8020b54:	f7ff ff3e 	bl	80209d4 <_ZN4Bits8put_fsocEv>
 8020b58:	4603      	mov	r3, r0
 8020b5a:	2101      	movs	r1, #1
 8020b5c:	4618      	mov	r0, r3
 8020b5e:	f7ff fe5b 	bl	8020818 <_ZN4Bits6put_1sEj>
 8020b62:	4603      	mov	r3, r0
 8020b64:	4618      	mov	r0, r3
 8020b66:	f7ff ff95 	bl	8020a94 <_ZN4Bits4doneEv>

	if ( get_obj_errs() )
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	f7ff fd54 	bl	802061a <_ZNK6Z_core12get_obj_errsEv>
 8020b72:	4603      	mov	r3, r0
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	bf14      	ite	ne
 8020b78:	2301      	movne	r3, #1
 8020b7a:	2300      	moveq	r3, #0
 8020b7c:	b2db      	uxtb	r3, r3
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d005      	beq.n	8020b8e <_ZN9Fsoc_bitsC1Ev+0x5a>
	{
		SET_ERROR( CONSTRUCTOR_OBJ_ERR );
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	f043 0201 	orr.w	r2, r3, #1
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	601a      	str	r2, [r3, #0]
	}
}
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	4618      	mov	r0, r3
 8020b92:	370c      	adds	r7, #12
 8020b94:	46bd      	mov	sp, r7
 8020b96:	bd90      	pop	{r4, r7, pc}

08020b98 <_ZN4ZlogC1Ev>:
 *
 *		Zlog() constructs a new Zlog object.
 */
/*--------------------------------------------------------------------------*/

Zlog::Zlog( void )
 8020b98:	b580      	push	{r7, lr}
 8020b9a:	b082      	sub	sp, #8
 8020b9c:	af00      	add	r7, sp, #0
 8020b9e:	6078      	str	r0, [r7, #4]
{
	cmd_name[0]		=	'\0';
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	701a      	strb	r2, [r3, #0]
	fp_log			=	(FILE *)0;
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	2200      	movs	r2, #0
 8020baa:	621a      	str	r2, [r3, #32]
	fp_stat			=	(FILE *)0;
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	2200      	movs	r2, #0
 8020bb0:	625a      	str	r2, [r3, #36]	@ 0x24
	log_mask		=	LOG_MASK_INIT;
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	629a      	str	r2, [r3, #40]	@ 0x28
	lib_log_mask	=	LOG_MASK_INIT;
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	2200      	movs	r2, #0
 8020bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	no_abort_flag	=	false;
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	2200      	movs	r2, #0
 8020bc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	stderr_too		=	true;
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	2201      	movs	r2, #1
 8020bca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	dbg_on			=	false;
 8020bce:	687b      	ldr	r3, [r7, #4]
 8020bd0:	2200      	movs	r2, #0
 8020bd2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    // Eliminate bogus sccsid and sccsid_h declared but never used warning.
    dummy( sccsid, sccsid_h );
 8020bd6:	4904      	ldr	r1, [pc, #16]	@ (8020be8 <_ZN4ZlogC1Ev+0x50>)
 8020bd8:	4804      	ldr	r0, [pc, #16]	@ (8020bec <_ZN4ZlogC1Ev+0x54>)
 8020bda:	f7ff fd3d 	bl	8020658 <_Z5dummyPKcS0_>
}
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	4618      	mov	r0, r3
 8020be2:	3708      	adds	r7, #8
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	0802bf58 	.word	0x0802bf58
 8020bec:	0802bf28 	.word	0x0802bf28

08020bf0 <_ZN4ZlogD1Ev>:
 *
 *		~Zlog() is the destructor for Zlog.
 */
/*--------------------------------------------------------------------------*/

Zlog::~Zlog()
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	b082      	sub	sp, #8
 8020bf4:	af00      	add	r7, sp, #0
 8020bf6:	6078      	str	r0, [r7, #4]
{
	close_log();
 8020bf8:	6878      	ldr	r0, [r7, #4]
 8020bfa:	f000 f808 	bl	8020c0e <_ZN4Zlog9close_logEv>
	close_stat();
 8020bfe:	6878      	ldr	r0, [r7, #4]
 8020c00:	f000 f81d 	bl	8020c3e <_ZN4Zlog10close_statEv>
}
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	4618      	mov	r0, r3
 8020c08:	3708      	adds	r7, #8
 8020c0a:	46bd      	mov	sp, r7
 8020c0c:	bd80      	pop	{r7, pc}

08020c0e <_ZN4Zlog9close_logEv>:
 */
/*--------------------------------------------------------------------------*/

void
Zlog::close_log( void )
{
 8020c0e:	b580      	push	{r7, lr}
 8020c10:	b082      	sub	sp, #8
 8020c12:	af00      	add	r7, sp, #0
 8020c14:	6078      	str	r0, [r7, #4]
	stderr_too	=	true;
 8020c16:	687b      	ldr	r3, [r7, #4]
 8020c18:	2201      	movs	r2, #1
 8020c1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

	if ( fp_log )
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	6a1b      	ldr	r3, [r3, #32]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d004      	beq.n	8020c30 <_ZN4Zlog9close_logEv+0x22>
	{
		fclose( fp_log );
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	6a1b      	ldr	r3, [r3, #32]
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	f7e9 fc5a 	bl	800a4e4 <fclose>
	}

	fp_log	=	(FILE *)0;
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	2200      	movs	r2, #0
 8020c34:	621a      	str	r2, [r3, #32]
}
 8020c36:	bf00      	nop
 8020c38:	3708      	adds	r7, #8
 8020c3a:	46bd      	mov	sp, r7
 8020c3c:	bd80      	pop	{r7, pc}

08020c3e <_ZN4Zlog10close_statEv>:
 */
/*--------------------------------------------------------------------------*/

void
Zlog::close_stat( void )
{
 8020c3e:	b580      	push	{r7, lr}
 8020c40:	b082      	sub	sp, #8
 8020c42:	af00      	add	r7, sp, #0
 8020c44:	6078      	str	r0, [r7, #4]
	if ( fp_stat )
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d004      	beq.n	8020c58 <_ZN4Zlog10close_statEv+0x1a>
	{
		fclose( fp_stat );
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c52:	4618      	mov	r0, r3
 8020c54:	f7e9 fc46 	bl	800a4e4 <fclose>
	}

	fp_stat	=	(FILE *)0;
 8020c58:	687b      	ldr	r3, [r7, #4]
 8020c5a:	2200      	movs	r2, #0
 8020c5c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8020c5e:	bf00      	nop
 8020c60:	3708      	adds	r7, #8
 8020c62:	46bd      	mov	sp, r7
 8020c64:	bd80      	pop	{r7, pc}
	...

08020c68 <_Z41__static_initialization_and_destruction_0ii>:
	va_start( ap, fmt );

	(void)vfprintf( stderr, fmt, ap );

	va_end( ap );
}
 8020c68:	b580      	push	{r7, lr}
 8020c6a:	b082      	sub	sp, #8
 8020c6c:	af00      	add	r7, sp, #0
 8020c6e:	6078      	str	r0, [r7, #4]
 8020c70:	6039      	str	r1, [r7, #0]
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	2b01      	cmp	r3, #1
 8020c76:	d107      	bne.n	8020c88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8020c78:	683b      	ldr	r3, [r7, #0]
 8020c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020c7e:	4293      	cmp	r3, r2
 8020c80:	d102      	bne.n	8020c88 <_Z41__static_initialization_and_destruction_0ii+0x20>
Zlog	Deflog;
 8020c82:	4809      	ldr	r0, [pc, #36]	@ (8020ca8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8020c84:	f7ff ff88 	bl	8020b98 <_ZN4ZlogC1Ev>
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d107      	bne.n	8020c9e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8020c8e:	683b      	ldr	r3, [r7, #0]
 8020c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020c94:	4293      	cmp	r3, r2
 8020c96:	d102      	bne.n	8020c9e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8020c98:	4803      	ldr	r0, [pc, #12]	@ (8020ca8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8020c9a:	f7ff ffa9 	bl	8020bf0 <_ZN4ZlogD1Ev>
}
 8020c9e:	bf00      	nop
 8020ca0:	3708      	adds	r7, #8
 8020ca2:	46bd      	mov	sp, r7
 8020ca4:	bd80      	pop	{r7, pc}
 8020ca6:	bf00      	nop
 8020ca8:	2001d5f8 	.word	0x2001d5f8

08020cac <_GLOBAL__sub_I__ZN4Zlog9tab_arrayE>:
 8020cac:	b580      	push	{r7, lr}
 8020cae:	af00      	add	r7, sp, #0
 8020cb0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8020cb4:	2001      	movs	r0, #1
 8020cb6:	f7ff ffd7 	bl	8020c68 <_Z41__static_initialization_and_destruction_0ii>
 8020cba:	bd80      	pop	{r7, pc}

08020cbc <_GLOBAL__sub_D__ZN4Zlog9tab_arrayE>:
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	af00      	add	r7, sp, #0
 8020cc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8020cc4:	2000      	movs	r0, #0
 8020cc6:	f7ff ffcf 	bl	8020c68 <_Z41__static_initialization_and_destruction_0ii>
 8020cca:	bd80      	pop	{r7, pc}

08020ccc <_ZN8Args_objC1Ev>:
 *
 *		Args_obj() constructs a Args_obj object.
 */
/*--------------------------------------------------------------------------*/

Args_obj::Args_obj( void )
 8020ccc:	b580      	push	{r7, lr}
 8020cce:	b082      	sub	sp, #8
 8020cd0:	af00      	add	r7, sp, #0
 8020cd2:	6078      	str	r0, [r7, #4]
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	4618      	mov	r0, r3
 8020cd8:	f7ff fc91 	bl	80205fe <_ZN6Z_coreC1Ev>
{
	cmd_name[0]  		= '\0';				// Command name.
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	2200      	movs	r2, #0
 8020ce0:	711a      	strb	r2, [r3, #4]
	ini_path[0]			= '\0';				// Ini file path name.
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	2200      	movs	r2, #0
 8020ce6:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	ini_fp				= NULL;				// Ini FILE pointer.
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	2200      	movs	r2, #0
 8020cee:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	decoder_address		= 0;				// Decoder address.
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	2200      	movs	r2, #0
 8020cf6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	address_set			= false;			// Address was set by user.
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	2200      	movs	r2, #0
 8020cfe:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
	port				= PORT_DEF;			// Base I/O port.
 8020d02:	687b      	ldr	r3, [r7, #4]
 8020d04:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8020d08:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	decoder_type		= DEC_LOCO;	 		// Decoder type.
 8020d0c:	687b      	ldr	r3, [r7, #4]
 8020d0e:	224c      	movs	r2, #76	@ 0x4c
 8020d10:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	crit_flag			= false;			// Protect critical regions.
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	2200      	movs	r2, #0
 8020d18:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	fragment_flag  		= false;			// Send all fragment sizes.
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	2200      	movs	r2, #0
 8020d20:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	rep_flag			= false;	  		// Repeat decoder tests.
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	2200      	movs	r2, #0
 8020d28:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
	run_mask			= DEF_RUN_MASK;		// Tests to run.
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8020d32:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	clk_mask			= DEF_CLK_MASK;	  	// Clocks to try.
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	f46f 7246 	mvn.w	r2, #792	@ 0x318
 8020d3c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	manual_flag			= false;			// Run tests manually.
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	2200      	movs	r2, #0
 8020d44:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
	extra_preamble		= 0;				// Extra margin test preambles.
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	2200      	movs	r2, #0
 8020d4c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	trig_rev			= false;			// Use E_STOP as trigger command.
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	2200      	movs	r2, #0
 8020d54:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	loco_first			= false;;			// Put loco pkt + func pkt.
 8020d58:	687b      	ldr	r3, [r7, #4]
 8020d5a:	2200      	movs	r2, #0
 8020d5c:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
	fill_msec			= MSEC_PER_SEC;		// Use 1 second fill time.
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020d66:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	test_repeats		= 2;				// Times to repeat misc. tests.
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	2202      	movs	r2, #2
 8020d6e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	print_user			= false;			// Don't print user docs.
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	2200      	movs	r2, #0
 8020d76:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	log_pkts			= false;			// Don't send packets to log.
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	2200      	movs	r2, #0
 8020d7e:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
	m_no_abort			= false;			// Stop on error.
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	2200      	movs	r2, #0
 8020d86:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	m_late_scope		= false;			// Use normal scope trigger.
 8020d8a:	687b      	ldr	r3, [r7, #4]
 8020d8c:	2200      	movs	r2, #0
 8020d8e:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	m_ambig_addr_same  	= false;			// Use different address.
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	2200      	movs	r2, #0
 8020d96:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
    aspect_preset		= 0;				// Sig decoder aspect preset.
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	2200      	movs	r2, #0
 8020d9e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    aspect_trigger		= 8;				// Sig decoder aspect trigger.
 8020da2:	687b      	ldr	r3, [r7, #4]
 8020da4:	2208      	movs	r2, #8
 8020da6:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    m_lamp_rear			= false;			// Use forward lamp.
 8020daa:	687b      	ldr	r3, [r7, #4]
 8020dac:	2200      	movs	r2, #0
 8020dae:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    func_mask			= DEF_FUNC_MASK;	// Default to all on.
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	221f      	movs	r2, #31
 8020db6:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    acc_pre				= 1;				// Default accessory out preset.
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	2201      	movs	r2, #1
 8020dbe:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    m_kick_start		= false;			// Kick start motor.
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	2200      	movs	r2, #0
 8020dc6:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	key_help			=					// Keyboard commands help msg.
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	4a05      	ldr	r2, [pc, #20]	@ (8020de4 <_ZN8Args_objC1Ev+0x118>)
 8020dce:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
		"  R - Send hard resets             g - Test generic I/O\n"
		"  z - Run decoder tests            q - Quit program\n";


    // Eliminate bogus sccsid and sccsid_h declared but never used warning.
    dummy( sccsid, sccsid_h );
 8020dd2:	4905      	ldr	r1, [pc, #20]	@ (8020de8 <_ZN8Args_objC1Ev+0x11c>)
 8020dd4:	4805      	ldr	r0, [pc, #20]	@ (8020dec <_ZN8Args_objC1Ev+0x120>)
 8020dd6:	f7ff fc3f 	bl	8020658 <_Z5dummyPKcS0_>
}
 8020dda:	687b      	ldr	r3, [r7, #4]
 8020ddc:	4618      	mov	r0, r3
 8020dde:	3708      	adds	r7, #8
 8020de0:	46bd      	mov	sp, r7
 8020de2:	bd80      	pop	{r7, pc}
 8020de4:	080276c8 	.word	0x080276c8
 8020de8:	0802bfb4 	.word	0x0802bfb4
 8020dec:	0802bf84 	.word	0x0802bf84

08020df0 <_ZN8Args_objD1Ev>:
 *
 *		~Args_obj() destroys a Args_obj object.
 */
/*--------------------------------------------------------------------------*/

Args_obj::~Args_obj()
 8020df0:	b580      	push	{r7, lr}
 8020df2:	b082      	sub	sp, #8
 8020df4:	af00      	add	r7, sp, #0
 8020df6:	6078      	str	r0, [r7, #4]
{
	if ( ini_fp )
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d005      	beq.n	8020e0e <_ZN8Args_objD1Ev+0x1e>
	{
		fclose( ini_fp );
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020e08:	4618      	mov	r0, r3
 8020e0a:	f7e9 fb6b 	bl	800a4e4 <fclose>
	}
}
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	4618      	mov	r0, r3
 8020e12:	3708      	adds	r7, #8
 8020e14:	46bd      	mov	sp, r7
 8020e16:	bd80      	pop	{r7, pc}

08020e18 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}

	ostr_ptr	=	otmp;
	return ( itmp );
}
 8020e18:	b580      	push	{r7, lr}
 8020e1a:	b082      	sub	sp, #8
 8020e1c:	af00      	add	r7, sp, #0
 8020e1e:	6078      	str	r0, [r7, #4]
 8020e20:	6039      	str	r1, [r7, #0]
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	2b01      	cmp	r3, #1
 8020e26:	d107      	bne.n	8020e38 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8020e28:	683b      	ldr	r3, [r7, #0]
 8020e2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020e2e:	4293      	cmp	r3, r2
 8020e30:	d102      	bne.n	8020e38 <_Z41__static_initialization_and_destruction_0ii+0x20>
Args_obj	Args;
 8020e32:	4809      	ldr	r0, [pc, #36]	@ (8020e58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8020e34:	f7ff ff4a 	bl	8020ccc <_ZN8Args_objC1Ev>
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d107      	bne.n	8020e4e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8020e3e:	683b      	ldr	r3, [r7, #0]
 8020e40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020e44:	4293      	cmp	r3, r2
 8020e46:	d102      	bne.n	8020e4e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8020e48:	4803      	ldr	r0, [pc, #12]	@ (8020e58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8020e4a:	f7ff ffd1 	bl	8020df0 <_ZN8Args_objD1Ev>
}
 8020e4e:	bf00      	nop
 8020e50:	3708      	adds	r7, #8
 8020e52:	46bd      	mov	sp, r7
 8020e54:	bd80      	pop	{r7, pc}
 8020e56:	bf00      	nop
 8020e58:	2001d62c 	.word	0x2001d62c

08020e5c <_GLOBAL__sub_I_Args>:
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	af00      	add	r7, sp, #0
 8020e60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8020e64:	2001      	movs	r0, #1
 8020e66:	f7ff ffd7 	bl	8020e18 <_Z41__static_initialization_and_destruction_0ii>
 8020e6a:	bd80      	pop	{r7, pc}

08020e6c <_GLOBAL__sub_D_Args>:
 8020e6c:	b580      	push	{r7, lr}
 8020e6e:	af00      	add	r7, sp, #0
 8020e70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8020e74:	2000      	movs	r0, #0
 8020e76:	f7ff ffcf 	bl	8020e18 <_Z41__static_initialization_and_destruction_0ii>
 8020e7a:	bd80      	pop	{r7, pc}

08020e7c <_ZN6T_statC1Ev>:

class T_stat
{
  public:
	/*Method section */
	T_stat( void )
 8020e7c:	b580      	push	{r7, lr}
 8020e7e:	b082      	sub	sp, #8
 8020e80:	af00      	add	r7, sp, #0
 8020e82:	6078      	str	r0, [r7, #4]
	{
		reset();
 8020e84:	6878      	ldr	r0, [r7, #4]
 8020e86:	f000 f810 	bl	8020eaa <_ZN6T_stat5resetEv>
	}
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	3708      	adds	r7, #8
 8020e90:	46bd      	mov	sp, r7
 8020e92:	bd80      	pop	{r7, pc}

08020e94 <_ZN6T_statD1Ev>:

	~T_stat() {}
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	4618      	mov	r0, r3
 8020ea0:	370c      	adds	r7, #12
 8020ea2:	46bd      	mov	sp, r7
 8020ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ea8:	4770      	bx	lr

08020eaa <_ZN6T_stat5resetEv>:

	void
	reset( void )
 8020eaa:	b480      	push	{r7}
 8020eac:	b083      	sub	sp, #12
 8020eae:	af00      	add	r7, sp, #0
 8020eb0:	6078      	str	r0, [r7, #4]
	{
		t_cnt	=	0L;
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	2200      	movs	r2, #0
 8020eb6:	601a      	str	r2, [r3, #0]
		f_cnt	=	0L;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	2200      	movs	r2, #0
 8020ebc:	605a      	str	r2, [r3, #4]
	}
 8020ebe:	bf00      	nop
 8020ec0:	370c      	adds	r7, #12
 8020ec2:	46bd      	mov	sp, r7
 8020ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec8:	4770      	bx	lr

08020eca <_ZN9Fsoc_bitsD1Ev>:
	BYTE				check_byte;					// Check byte.
	BYTE				*flip_byte;					// Byte with flipped bit.
	u_int				flip_bit;					// Bit to flip.
};

class Fsoc_bits : public Bits
 8020eca:	b580      	push	{r7, lr}
 8020ecc:	b082      	sub	sp, #8
 8020ece:	af00      	add	r7, sp, #0
 8020ed0:	6078      	str	r0, [r7, #4]
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	4618      	mov	r0, r3
 8020ed6:	f7ff fc03 	bl	80206e0 <_ZN4BitsD1Ev>
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	4618      	mov	r0, r3
 8020ede:	3708      	adds	r7, #8
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	bd80      	pop	{r7, pc}

08020ee4 <_ZN7Dec_tstC1Ev>:
 *
 *		Dec_tst() constructs a Dec_tst object.
 */
/*--------------------------------------------------------------------------*/

Dec_tst::Dec_tst( void )
 8020ee4:	b580      	push	{r7, lr}
 8020ee6:	b082      	sub	sp, #8
 8020ee8:	af00      	add	r7, sp, #0
 8020eea:	6078      	str	r0, [r7, #4]
:	dcc_bits( 256 ), dcc_bits2( 256 ), dcc_bits3( 256 )
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	4618      	mov	r0, r3
 8020ef0:	f7ff fb85 	bl	80205fe <_ZN6Z_coreC1Ev>
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	3304      	adds	r3, #4
 8020ef8:	4618      	mov	r0, r3
 8020efa:	f7ff ffbf 	bl	8020e7c <_ZN6T_statC1Ev>
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	3318      	adds	r3, #24
 8020f02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8020f06:	4618      	mov	r0, r3
 8020f08:	f7ff fbb2 	bl	8020670 <_ZN4BitsC1Ej>
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	333c      	adds	r3, #60	@ 0x3c
 8020f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8020f14:	4618      	mov	r0, r3
 8020f16:	f7ff fbab 	bl	8020670 <_ZN4BitsC1Ej>
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	3360      	adds	r3, #96	@ 0x60
 8020f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8020f22:	4618      	mov	r0, r3
 8020f24:	f7ff fba4 	bl	8020670 <_ZN4BitsC1Ej>
 8020f28:	687b      	ldr	r3, [r7, #4]
 8020f2a:	3384      	adds	r3, #132	@ 0x84
 8020f2c:	4618      	mov	r0, r3
 8020f2e:	f7ff fe01 	bl	8020b34 <_ZN9Fsoc_bitsC1Ev>
{
	t_stat.reset();						// Reset test statistics.
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	3304      	adds	r3, #4
 8020f36:	4618      	mov	r0, r3
 8020f38:	f7ff ffb7 	bl	8020eaa <_ZN6T_stat5resetEv>
	tst_cnt			= 0L;				// Reset test count.
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	2200      	movs	r2, #0
 8020f40:	60da      	str	r2, [r3, #12]
	run_mask		= ~0L;				// Run all tests.
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	f04f 32ff 	mov.w	r2, #4294967295
 8020f48:	611a      	str	r2, [r3, #16]
	clk_mask		= ~0L;				// Use all clock values.
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8020f50:	615a      	str	r2, [r3, #20]
	trig_cmd_speed	= SP_E_STOP;		// Use emeergency stop as trigger.
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	f06f 0201 	mvn.w	r2, #1
 8020f58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	fill_usec		= USEC_PER_SEC;		// Default to 1 second of filler.
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	4a10      	ldr	r2, [pc, #64]	@ (8020fa0 <_ZN7Dec_tstC1Ev+0xbc>)
 8020f60:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	filler_idles	= PKT_REP_MIN;		// Default to minimum.
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	220a      	movs	r2, #10
 8020f68:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
	pkt_rep_cnt		= PKT_REP_MIN;		// Default to minimum.
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	220a      	movs	r2, #10
 8020f70:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    m_tst_name[0]	= '\0';				// Clear test name buffer.
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	2200      	movs	r2, #0
 8020f78:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	trig_rev        = false;			// Handle reverse differently.
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	2200      	movs	r2, #0
 8020f80:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
	decoder_type    = DEC_LOCO;			// Decoder type.
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	224c      	movs	r2, #76	@ 0x4c
 8020f88:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135

    // Eliminate bogus sccsid and sccsid_h declared but never used warning.
    dummy( sccsid, sccsid_h );
 8020f8c:	4905      	ldr	r1, [pc, #20]	@ (8020fa4 <_ZN7Dec_tstC1Ev+0xc0>)
 8020f8e:	4806      	ldr	r0, [pc, #24]	@ (8020fa8 <_ZN7Dec_tstC1Ev+0xc4>)
 8020f90:	f7ff fb62 	bl	8020658 <_Z5dummyPKcS0_>
}
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	4618      	mov	r0, r3
 8020f98:	3708      	adds	r7, #8
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	bd80      	pop	{r7, pc}
 8020f9e:	bf00      	nop
 8020fa0:	000f4240 	.word	0x000f4240
 8020fa4:	0802c010 	.word	0x0802c010
 8020fa8:	0802bfe0 	.word	0x0802bfe0

08020fac <_ZN7Dec_tstD1Ev>:
 *
 *		~Dec_tst() destroys a Dec_tst object.
 */
/*--------------------------------------------------------------------------*/

Dec_tst::~Dec_tst()
 8020fac:	b580      	push	{r7, lr}
 8020fae:	b082      	sub	sp, #8
 8020fb0:	af00      	add	r7, sp, #0
 8020fb2:	6078      	str	r0, [r7, #4]
{
}
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	3384      	adds	r3, #132	@ 0x84
 8020fb8:	4618      	mov	r0, r3
 8020fba:	f7ff ff86 	bl	8020eca <_ZN9Fsoc_bitsD1Ev>
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	3360      	adds	r3, #96	@ 0x60
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	f7ff fb8c 	bl	80206e0 <_ZN4BitsD1Ev>
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	333c      	adds	r3, #60	@ 0x3c
 8020fcc:	4618      	mov	r0, r3
 8020fce:	f7ff fb87 	bl	80206e0 <_ZN4BitsD1Ev>
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	3318      	adds	r3, #24
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	f7ff fb82 	bl	80206e0 <_ZN4BitsD1Ev>
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	3304      	adds	r3, #4
 8020fe0:	4618      	mov	r0, r3
 8020fe2:	f7ff ff57 	bl	8020e94 <_ZN6T_statD1Ev>
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	4618      	mov	r0, r3
 8020fea:	3708      	adds	r7, #8
 8020fec:	46bd      	mov	sp, r7
 8020fee:	bd80      	pop	{r7, pc}

08020ff0 <_ZN7Sr_coreC1Ev>:

class Sr_core : public Z_core
{
  public:
	/* Method section */
	Sr_core( void ) { init(); }
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	b082      	sub	sp, #8
 8020ff4:	af00      	add	r7, sp, #0
 8020ff6:	6078      	str	r0, [r7, #4]
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	4618      	mov	r0, r3
 8020ffc:	f7ff faff 	bl	80205fe <_ZN6Z_coreC1Ev>
 8021000:	6878      	ldr	r0, [r7, #4]
 8021002:	f000 f915 	bl	8021230 <_ZN7Sr_core4initEv>
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	4618      	mov	r0, r3
 802100a:	3708      	adds	r7, #8
 802100c:	46bd      	mov	sp, r7
 802100e:	bd80      	pop	{r7, pc}

08021010 <_ZN8Send_regC1Ev>:
									u_short iclk0t     = DECODER_0T_NOM,
									u_short iclk1t     = DECODER_1T_NOM);

	/* Method section */
	
	Send_reg( void )
 8021010:	b580      	push	{r7, lr}
 8021012:	b082      	sub	sp, #8
 8021014:	af00      	add	r7, sp, #0
 8021016:	6078      	str	r0, [r7, #4]
	:	running( false ), scope( SCOPE_IDLE ),
		clk0t( DCC_CLK_ERR ), clk0h( DCC_CLK_ERR ), clk1t( DCC_CLK_ERR ),
		do_crit( false ), err_cnt( 0 ), m_pc_delay_1usec( PC_DELAY_INIT ),
		m_swap_0_1( false ), m_log_pkts( false )
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	4618      	mov	r0, r3
 802101c:	f7ff ffe8 	bl	8020ff0 <_ZN7Sr_coreC1Ev>
	:	running( false ), scope( SCOPE_IDLE ),
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	2200      	movs	r2, #0
 8021024:	749a      	strb	r2, [r3, #18]
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	2200      	movs	r2, #0
 802102a:	771a      	strb	r2, [r3, #28]
		clk0t( DCC_CLK_ERR ), clk0h( DCC_CLK_ERR ), clk1t( DCC_CLK_ERR ),
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	2201      	movs	r2, #1
 8021030:	83da      	strh	r2, [r3, #30]
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	2201      	movs	r2, #1
 8021036:	841a      	strh	r2, [r3, #32]
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	2201      	movs	r2, #1
 802103c:	845a      	strh	r2, [r3, #34]	@ 0x22
		do_crit( false ), err_cnt( 0 ), m_pc_delay_1usec( PC_DELAY_INIT ),
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	2200      	movs	r2, #0
 8021042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	2200      	movs	r2, #0
 802104a:	629a      	str	r2, [r3, #40]	@ 0x28
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	2205      	movs	r2, #5
 8021050:	62da      	str	r2, [r3, #44]	@ 0x2c
		m_swap_0_1( false ), m_log_pkts( false )
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	2200      	movs	r2, #0
 8021056:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	2200      	movs	r2, #0
 802105e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	{
		rst_stats();
 8021062:	6878      	ldr	r0, [r7, #4]
 8021064:	f000 f805 	bl	8021072 <_ZN8Send_reg9rst_statsEv>
	}
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	4618      	mov	r0, r3
 802106c:	3708      	adds	r7, #8
 802106e:	46bd      	mov	sp, r7
 8021070:	bd80      	pop	{r7, pc}

08021072 <_ZN8Send_reg9rst_statsEv>:
	bool errprint_ok( void );

	/* Packet statistics routines */
	void	print_stats( void );
	void
	rst_stats( void )
 8021072:	b480      	push	{r7}
 8021074:	b083      	sub	sp, #12
 8021076:	af00      	add	r7, sp, #0
 8021078:	6078      	str	r0, [r7, #4]
	{
		b_cnt	=	0L;
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	2200      	movs	r2, #0
 802107e:	619a      	str	r2, [r3, #24]
		p_cnt	=	0L;
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	2200      	movs	r2, #0
 8021084:	615a      	str	r2, [r3, #20]
	}
 8021086:	bf00      	nop
 8021088:	370c      	adds	r7, #12
 802108a:	46bd      	mov	sp, r7
 802108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021090:	4770      	bx	lr

08021092 <_ZN8Test_regC1EPK11Test_reg_vmi>:
		: vects((Test_reg_vm *)0), vsize(0)
	{
		init();
	}

	Test_reg(
 8021092:	b580      	push	{r7, lr}
 8021094:	b084      	sub	sp, #16
 8021096:	af00      	add	r7, sp, #0
 8021098:	60f8      	str	r0, [r7, #12]
 802109a:	60b9      	str	r1, [r7, #8]
 802109c:	607a      	str	r2, [r7, #4]
		const Test_reg_vm	*ivects,
		int					ivsize )
	: vects(ivects), vsize(ivsize)
 802109e:	68fb      	ldr	r3, [r7, #12]
 80210a0:	4618      	mov	r0, r3
 80210a2:	f7ff ffa5 	bl	8020ff0 <_ZN7Sr_coreC1Ev>
 80210a6:	68fb      	ldr	r3, [r7, #12]
 80210a8:	68ba      	ldr	r2, [r7, #8]
 80210aa:	621a      	str	r2, [r3, #32]
 80210ac:	68fb      	ldr	r3, [r7, #12]
 80210ae:	687a      	ldr	r2, [r7, #4]
 80210b0:	625a      	str	r2, [r3, #36]	@ 0x24
	{
		init();
 80210b2:	68f8      	ldr	r0, [r7, #12]
 80210b4:	f000 f8e4 	bl	8021280 <_ZN8Test_reg4initEv>
	}
 80210b8:	68fb      	ldr	r3, [r7, #12]
 80210ba:	4618      	mov	r0, r3
 80210bc:	3710      	adds	r7, #16
 80210be:	46bd      	mov	sp, r7
 80210c0:	bd80      	pop	{r7, pc}

080210c2 <_ZN8Self_tstC1ER8Send_regP11Test_reg_vmi>:
 */
class Self_tst : public Z_core
{
  public:
	/* Method section */
	Self_tst(
 80210c2:	b580      	push	{r7, lr}
 80210c4:	b084      	sub	sp, #16
 80210c6:	af00      	add	r7, sp, #0
 80210c8:	60f8      	str	r0, [r7, #12]
 80210ca:	60b9      	str	r1, [r7, #8]
 80210cc:	607a      	str	r2, [r7, #4]
 80210ce:	603b      	str	r3, [r7, #0]
	Send_reg		&idcc_reg,				// Hardware register object.
	Test_reg_vm		*ivect,					// Test vectors.
	int				ivect_size )			// Size of test vector array.
	:	dcc_reg( idcc_reg ), treg( ivect, ivect_size ),
		p_vect( 0 ), clk_bits( 0L ),
		icnt0t(CNT_0T_INIT), icnt0h(CNT_0H_INIT), icnt1t(CNT_1T_INIT)
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	4618      	mov	r0, r3
 80210d4:	f7ff fa93 	bl	80205fe <_ZN6Z_coreC1Ev>
	:	dcc_reg( idcc_reg ), treg( ivect, ivect_size ),
 80210d8:	68fb      	ldr	r3, [r7, #12]
 80210da:	68ba      	ldr	r2, [r7, #8]
 80210dc:	605a      	str	r2, [r3, #4]
		p_vect( 0 ), clk_bits( 0L ),
 80210de:	68fb      	ldr	r3, [r7, #12]
 80210e0:	2200      	movs	r2, #0
 80210e2:	609a      	str	r2, [r3, #8]
	:	dcc_reg( idcc_reg ), treg( ivect, ivect_size ),
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	330c      	adds	r3, #12
 80210e8:	683a      	ldr	r2, [r7, #0]
 80210ea:	6879      	ldr	r1, [r7, #4]
 80210ec:	4618      	mov	r0, r3
 80210ee:	f7ff ffd0 	bl	8021092 <_ZN8Test_regC1EPK11Test_reg_vmi>
		p_vect( 0 ), clk_bits( 0L ),
 80210f2:	68fb      	ldr	r3, [r7, #12]
 80210f4:	2200      	movs	r2, #0
 80210f6:	63da      	str	r2, [r3, #60]	@ 0x3c
		icnt0t(CNT_0T_INIT), icnt0h(CNT_0H_INIT), icnt1t(CNT_1T_INIT)
 80210f8:	68fb      	ldr	r3, [r7, #12]
 80210fa:	223a      	movs	r2, #58	@ 0x3a
 80210fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8021100:	68fb      	ldr	r3, [r7, #12]
 8021102:	2274      	movs	r2, #116	@ 0x74
 8021104:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 8021108:	68fb      	ldr	r3, [r7, #12]
 802110a:	22f0      	movs	r2, #240	@ 0xf0
 802110c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	{
		rst_stats();
 8021110:	68f8      	ldr	r0, [r7, #12]
 8021112:	f000 f810 	bl	8021136 <_ZN8Self_tst9rst_statsEv>
	}
 8021116:	68fb      	ldr	r3, [r7, #12]
 8021118:	4618      	mov	r0, r3
 802111a:	3710      	adds	r7, #16
 802111c:	46bd      	mov	sp, r7
 802111e:	bd80      	pop	{r7, pc}

08021120 <_ZN8Self_tstD1Ev>:

	~Self_tst() {}
 8021120:	b480      	push	{r7}
 8021122:	b083      	sub	sp, #12
 8021124:	af00      	add	r7, sp, #0
 8021126:	6078      	str	r0, [r7, #4]
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	4618      	mov	r0, r3
 802112c:	370c      	adds	r7, #12
 802112e:	46bd      	mov	sp, r7
 8021130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021134:	4770      	bx	lr

08021136 <_ZN8Self_tst9rst_statsEv>:
		return ( get_tst_cnt() ==  0 ? 0L : sum_1 / get_tst_cnt() );
	}
	u_long	get_max_1( void ) const { return ( max_1 ); }

	void	print_stats( void ) const;
	void	rst_stats( void )
 8021136:	b480      	push	{r7}
 8021138:	b083      	sub	sp, #12
 802113a:	af00      	add	r7, sp, #0
 802113c:	6078      	str	r0, [r7, #4]
	{
		tst_cnt		=	0L;
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	2200      	movs	r2, #0
 8021142:	649a      	str	r2, [r3, #72]	@ 0x48
		tst_pass	=	0L;
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	2200      	movs	r2, #0
 8021148:	64da      	str	r2, [r3, #76]	@ 0x4c
		v_tst_pass	=	0L;
 802114a:	687b      	ldr	r3, [r7, #4]
 802114c:	2200      	movs	r2, #0
 802114e:	651a      	str	r2, [r3, #80]	@ 0x50
		d_tst_pass	=	0L;
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	2200      	movs	r2, #0
 8021154:	655a      	str	r2, [r3, #84]	@ 0x54
		vd_tst_fail	=	0L;
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	2200      	movs	r2, #0
 802115a:	659a      	str	r2, [r3, #88]	@ 0x58
		min_0		=	ULONG_MAX;
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	f04f 32ff 	mov.w	r2, #4294967295
 8021162:	65da      	str	r2, [r3, #92]	@ 0x5c
		min_1		=	ULONG_MAX;
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	f04f 32ff 	mov.w	r2, #4294967295
 802116a:	661a      	str	r2, [r3, #96]	@ 0x60
		max_0		=	0L;
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	2200      	movs	r2, #0
 8021170:	665a      	str	r2, [r3, #100]	@ 0x64
		max_1		=	0L;
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	2200      	movs	r2, #0
 8021176:	669a      	str	r2, [r3, #104]	@ 0x68
		sum_0		=	0L;
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	2200      	movs	r2, #0
 802117c:	66da      	str	r2, [r3, #108]	@ 0x6c
		sum_1		=	0L;
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	2200      	movs	r2, #0
 8021182:	671a      	str	r2, [r3, #112]	@ 0x70
	}
 8021184:	bf00      	nop
 8021186:	370c      	adds	r7, #12
 8021188:	46bd      	mov	sp, r7
 802118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802118e:	4770      	bx	lr

08021190 <_Z41__static_initialization_and_destruction_0ii>:

	Dcc_reg.send_bytes( 1, 0x00, "SEND_IDLE." );
	Dcc_reg.set_scope( true );
	Dcc_reg.send_idle();

}
 8021190:	b580      	push	{r7, lr}
 8021192:	b082      	sub	sp, #8
 8021194:	af00      	add	r7, sp, #0
 8021196:	6078      	str	r0, [r7, #4]
 8021198:	6039      	str	r1, [r7, #0]
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	2b01      	cmp	r3, #1
 802119e:	d116      	bne.n	80211ce <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80211a0:	683b      	ldr	r3, [r7, #0]
 80211a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80211a6:	4293      	cmp	r3, r2
 80211a8:	d111      	bne.n	80211ce <_Z41__static_initialization_and_destruction_0ii+0x3e>
Send_reg 			Dcc_reg;
 80211aa:	4813      	ldr	r0, [pc, #76]	@ (80211f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80211ac:	f7ff ff30 	bl	8021010 <_ZN8Send_regC1Ev>
static Self_tst		Lself_tst( Dcc_reg, St_vect, St_vect_size );
 80211b0:	4b12      	ldr	r3, [pc, #72]	@ (80211fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	4a12      	ldr	r2, [pc, #72]	@ (8021200 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80211b6:	4910      	ldr	r1, [pc, #64]	@ (80211f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80211b8:	4812      	ldr	r0, [pc, #72]	@ (8021204 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80211ba:	f7ff ff82 	bl	80210c2 <_ZN8Self_tstC1ER8Send_regP11Test_reg_vmi>
static Dec_tst		Ldec_tst;
 80211be:	4812      	ldr	r0, [pc, #72]	@ (8021208 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80211c0:	f7ff fe90 	bl	8020ee4 <_ZN7Dec_tstC1Ev>
static Bits	Dcc_bits( 256 );					// Packet scratchpad.
 80211c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80211c8:	4810      	ldr	r0, [pc, #64]	@ (802120c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80211ca:	f7ff fa51 	bl	8020670 <_ZN4BitsC1Ej>
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d10d      	bne.n	80211f0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80211d4:	683b      	ldr	r3, [r7, #0]
 80211d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80211da:	4293      	cmp	r3, r2
 80211dc:	d108      	bne.n	80211f0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80211de:	480b      	ldr	r0, [pc, #44]	@ (802120c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80211e0:	f7ff fa7e 	bl	80206e0 <_ZN4BitsD1Ev>
static Dec_tst		Ldec_tst;
 80211e4:	4808      	ldr	r0, [pc, #32]	@ (8021208 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80211e6:	f7ff fee1 	bl	8020fac <_ZN7Dec_tstD1Ev>
static Self_tst		Lself_tst( Dcc_reg, St_vect, St_vect_size );
 80211ea:	4806      	ldr	r0, [pc, #24]	@ (8021204 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80211ec:	f7ff ff98 	bl	8021120 <_ZN8Self_tstD1Ev>
}
 80211f0:	bf00      	nop
 80211f2:	3708      	adds	r7, #8
 80211f4:	46bd      	mov	sp, r7
 80211f6:	bd80      	pop	{r7, pc}
 80211f8:	2001d75c 	.word	0x2001d75c
 80211fc:	0802c040 	.word	0x0802c040
 8021200:	200002b8 	.word	0x200002b8
 8021204:	2001d790 	.word	0x2001d790
 8021208:	2001d804 	.word	0x2001d804
 802120c:	2001d93c 	.word	0x2001d93c

08021210 <_GLOBAL__sub_I_Questions>:
 8021210:	b580      	push	{r7, lr}
 8021212:	af00      	add	r7, sp, #0
 8021214:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8021218:	2001      	movs	r0, #1
 802121a:	f7ff ffb9 	bl	8021190 <_Z41__static_initialization_and_destruction_0ii>
 802121e:	bd80      	pop	{r7, pc}

08021220 <_GLOBAL__sub_D_Questions>:
 8021220:	b580      	push	{r7, lr}
 8021222:	af00      	add	r7, sp, #0
 8021224:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8021228:	2000      	movs	r0, #0
 802122a:	f7ff ffb1 	bl	8021190 <_Z41__static_initialization_and_destruction_0ii>
 802122e:	bd80      	pop	{r7, pc}

08021230 <_ZN7Sr_core4initEv>:
 */
/*--------------------------------------------------------------------------*/

void
Sr_core::init( void )
{
 8021230:	b480      	push	{r7}
 8021232:	b083      	sub	sp, #12
 8021234:	af00      	add	r7, sp, #0
 8021236:	6078      	str	r0, [r7, #4]
	v.pa	=	0;
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	2200      	movs	r2, #0
 802123c:	711a      	strb	r2, [r3, #4]
	v.pb	=	0;
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	2200      	movs	r2, #0
 8021242:	715a      	strb	r2, [r3, #5]
	v.pc	=	0;
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	2200      	movs	r2, #0
 8021248:	719a      	strb	r2, [r3, #6]
	v.s0t	=	0;
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	2200      	movs	r2, #0
 802124e:	71da      	strb	r2, [r3, #7]
	v.s0h	=	0;
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	2200      	movs	r2, #0
 8021254:	721a      	strb	r2, [r3, #8]
	v.s1t	=	0;
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	2200      	movs	r2, #0
 802125a:	725a      	strb	r2, [r3, #9]
	v.cnt0t	=	0;
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	2200      	movs	r2, #0
 8021260:	815a      	strh	r2, [r3, #10]
	v.cnt0h	=	0;
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	2200      	movs	r2, #0
 8021266:	819a      	strh	r2, [r3, #12]
	v.cnt1t	=	0;
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	2200      	movs	r2, #0
 802126c:	81da      	strh	r2, [r3, #14]
	v.gen	=	0;
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	2200      	movs	r2, #0
 8021272:	741a      	strb	r2, [r3, #16]
}
 8021274:	bf00      	nop
 8021276:	370c      	adds	r7, #12
 8021278:	46bd      	mov	sp, r7
 802127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802127e:	4770      	bx	lr

08021280 <_ZN8Test_reg4initEv>:
 */
/*--------------------------------------------------------------------------*/

void
Test_reg::init( void )
{
 8021280:	b580      	push	{r7, lr}
 8021282:	b082      	sub	sp, #8
 8021284:	af00      	add	r7, sp, #0
 8021286:	6078      	str	r0, [r7, #4]
	Sr_core::init();
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	4618      	mov	r0, r3
 802128c:	f7ff ffd0 	bl	8021230 <_ZN7Sr_core4initEv>

	m.pa_skip		=	false;
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	2200      	movs	r2, #0
 8021294:	749a      	strb	r2, [r3, #18]
	m.pb_mask		=	0;
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	2200      	movs	r2, #0
 802129a:	74da      	strb	r2, [r3, #19]
	m.pc_mask		=	0;
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	2200      	movs	r2, #0
 80212a0:	751a      	strb	r2, [r3, #20]
	m.s0t_mask		=	0;
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	2200      	movs	r2, #0
 80212a6:	755a      	strb	r2, [r3, #21]
	m.s0h_mask		=	0;
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	2200      	movs	r2, #0
 80212ac:	759a      	strb	r2, [r3, #22]
	m.s1t_mask		=	0;
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	2200      	movs	r2, #0
 80212b2:	75da      	strb	r2, [r3, #23]
	m.cnt0t_skip	=	false;
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	2200      	movs	r2, #0
 80212b8:	761a      	strb	r2, [r3, #24]
	m.cnt0h_skip	=	false;
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	2200      	movs	r2, #0
 80212be:	765a      	strb	r2, [r3, #25]
	m.cnt1t_skip	=	false;
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	2200      	movs	r2, #0
 80212c4:	769a      	strb	r2, [r3, #26]
	m.gen_mask		=	0;
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	2200      	movs	r2, #0
 80212ca:	76da      	strb	r2, [r3, #27]
};
 80212cc:	bf00      	nop
 80212ce:	3708      	adds	r7, #8
 80212d0:	46bd      	mov	sp, r7
 80212d2:	bd80      	pop	{r7, pc}

080212d4 <ClearScreen>:
*
* @return	None
*
*********************************************************************/
void ClearScreen(uint8_t bPort)
{
 80212d4:	b580      	push	{r7, lr}
 80212d6:	b082      	sub	sp, #8
 80212d8:	af00      	add	r7, sp, #0
 80212da:	4603      	mov	r3, r0
 80212dc:	71fb      	strb	r3, [r7, #7]
    ShStringOut(bPort, M_CLRSCR);
 80212de:	79fb      	ldrb	r3, [r7, #7]
 80212e0:	4903      	ldr	r1, [pc, #12]	@ (80212f0 <ClearScreen+0x1c>)
 80212e2:	4618      	mov	r0, r3
 80212e4:	f000 f954 	bl	8021590 <ShStringOut>
}
 80212e8:	bf00      	nop
 80212ea:	3708      	adds	r7, #8
 80212ec:	46bd      	mov	sp, r7
 80212ee:	bd80      	pop	{r7, pc}
 80212f0:	0802ab0c 	.word	0x0802ab0c

080212f4 <ClearEOL>:
*
* @return	None
*
*********************************************************************/
void ClearEOL(uint8_t bPort)
{
 80212f4:	b580      	push	{r7, lr}
 80212f6:	b082      	sub	sp, #8
 80212f8:	af00      	add	r7, sp, #0
 80212fa:	4603      	mov	r3, r0
 80212fc:	71fb      	strb	r3, [r7, #7]
    ShStringOut(bPort, M_CLREOL);
 80212fe:	79fb      	ldrb	r3, [r7, #7]
 8021300:	4903      	ldr	r1, [pc, #12]	@ (8021310 <ClearEOL+0x1c>)
 8021302:	4618      	mov	r0, r3
 8021304:	f000 f944 	bl	8021590 <ShStringOut>
}
 8021308:	bf00      	nop
 802130a:	3708      	adds	r7, #8
 802130c:	46bd      	mov	sp, r7
 802130e:	bd80      	pop	{r7, pc}
 8021310:	0802ab14 	.word	0x0802ab14

08021314 <GoToXY>:
*
* @return	None
*
*********************************************************************/
void GoToXY(uint8_t bPort, int col, int line)
{
 8021314:	b580      	push	{r7, lr}
 8021316:	b084      	sub	sp, #16
 8021318:	af00      	add	r7, sp, #0
 802131a:	4603      	mov	r3, r0
 802131c:	60b9      	str	r1, [r7, #8]
 802131e:	607a      	str	r2, [r7, #4]
 8021320:	73fb      	strb	r3, [r7, #15]
    //char buf[32];

    sprintf(buf, M_GOTOXY, line + 1, col + 1);
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	1c5a      	adds	r2, r3, #1
 8021326:	68bb      	ldr	r3, [r7, #8]
 8021328:	3301      	adds	r3, #1
 802132a:	4906      	ldr	r1, [pc, #24]	@ (8021344 <GoToXY+0x30>)
 802132c:	4806      	ldr	r0, [pc, #24]	@ (8021348 <GoToXY+0x34>)
 802132e:	f004 fe65 	bl	8025ffc <siprintf>
    ShStringOut(bPort, buf);
 8021332:	7bfb      	ldrb	r3, [r7, #15]
 8021334:	4904      	ldr	r1, [pc, #16]	@ (8021348 <GoToXY+0x34>)
 8021336:	4618      	mov	r0, r3
 8021338:	f000 f92a 	bl	8021590 <ShStringOut>
}
 802133c:	bf00      	nop
 802133e:	3710      	adds	r7, #16
 8021340:	46bd      	mov	sp, r7
 8021342:	bd80      	pop	{r7, pc}
 8021344:	0802ab18 	.word	0x0802ab18
 8021348:	2001d960 	.word	0x2001d960

0802134c <TextColor>:
*
* @return	None
*
*********************************************************************/
void TextColor(uint8_t bPort, FG_COLOR fg, BG_COLOR bg, ATTRIBUTE att)
{
 802134c:	b590      	push	{r4, r7, lr}
 802134e:	b085      	sub	sp, #20
 8021350:	af02      	add	r7, sp, #8
 8021352:	4604      	mov	r4, r0
 8021354:	4608      	mov	r0, r1
 8021356:	4611      	mov	r1, r2
 8021358:	461a      	mov	r2, r3
 802135a:	4623      	mov	r3, r4
 802135c:	71fb      	strb	r3, [r7, #7]
 802135e:	4603      	mov	r3, r0
 8021360:	71bb      	strb	r3, [r7, #6]
 8021362:	460b      	mov	r3, r1
 8021364:	717b      	strb	r3, [r7, #5]
 8021366:	4613      	mov	r3, r2
 8021368:	713b      	strb	r3, [r7, #4]

    snprintf(buf, sizeof(buf), CSI "%d;%d;%dm", att, bg, fg);
 802136a:	7939      	ldrb	r1, [r7, #4]
 802136c:	797b      	ldrb	r3, [r7, #5]
 802136e:	79ba      	ldrb	r2, [r7, #6]
 8021370:	9201      	str	r2, [sp, #4]
 8021372:	9300      	str	r3, [sp, #0]
 8021374:	460b      	mov	r3, r1
 8021376:	4a07      	ldr	r2, [pc, #28]	@ (8021394 <TextColor+0x48>)
 8021378:	2140      	movs	r1, #64	@ 0x40
 802137a:	4807      	ldr	r0, [pc, #28]	@ (8021398 <TextColor+0x4c>)
 802137c:	f004 fe0a 	bl	8025f94 <sniprintf>
    ShStringOut(bPort, buf);
 8021380:	79fb      	ldrb	r3, [r7, #7]
 8021382:	4905      	ldr	r1, [pc, #20]	@ (8021398 <TextColor+0x4c>)
 8021384:	4618      	mov	r0, r3
 8021386:	f000 f903 	bl	8021590 <ShStringOut>
}
 802138a:	bf00      	nop
 802138c:	370c      	adds	r7, #12
 802138e:	46bd      	mov	sp, r7
 8021390:	bd90      	pop	{r4, r7, pc}
 8021392:	bf00      	nop
 8021394:	0802ab24 	.word	0x0802ab24
 8021398:	2001d960 	.word	0x2001d960

0802139c <ResetColor>:

void ResetColor(uint8_t bPort)
{
 802139c:	b580      	push	{r7, lr}
 802139e:	b082      	sub	sp, #8
 80213a0:	af00      	add	r7, sp, #0
 80213a2:	4603      	mov	r3, r0
 80213a4:	71fb      	strb	r3, [r7, #7]

    ShStringOut(bPort, M_RESET_COLOR);
 80213a6:	79fb      	ldrb	r3, [r7, #7]
 80213a8:	4903      	ldr	r1, [pc, #12]	@ (80213b8 <ResetColor+0x1c>)
 80213aa:	4618      	mov	r0, r3
 80213ac:	f000 f8f0 	bl	8021590 <ShStringOut>
}
 80213b0:	bf00      	nop
 80213b2:	3708      	adds	r7, #8
 80213b4:	46bd      	mov	sp, r7
 80213b6:	bd80      	pop	{r7, pc}
 80213b8:	0802ab30 	.word	0x0802ab30

080213bc <Cursor>:
*
* @return	None
*
*********************************************************************/
void Cursor(uint8_t bPort, uint8_t s_r)
{
 80213bc:	b580      	push	{r7, lr}
 80213be:	b082      	sub	sp, #8
 80213c0:	af00      	add	r7, sp, #0
 80213c2:	4603      	mov	r3, r0
 80213c4:	460a      	mov	r2, r1
 80213c6:	71fb      	strb	r3, [r7, #7]
 80213c8:	4613      	mov	r3, r2
 80213ca:	71bb      	strb	r3, [r7, #6]

	if(s_r)
 80213cc:	79bb      	ldrb	r3, [r7, #6]
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d004      	beq.n	80213dc <Cursor+0x20>
	{
		sprintf(buf, CSI "s");
 80213d2:	4909      	ldr	r1, [pc, #36]	@ (80213f8 <Cursor+0x3c>)
 80213d4:	4809      	ldr	r0, [pc, #36]	@ (80213fc <Cursor+0x40>)
 80213d6:	f004 fe11 	bl	8025ffc <siprintf>
 80213da:	e003      	b.n	80213e4 <Cursor+0x28>
	}
	else
	{
		sprintf(buf, CSI "u");
 80213dc:	4908      	ldr	r1, [pc, #32]	@ (8021400 <Cursor+0x44>)
 80213de:	4807      	ldr	r0, [pc, #28]	@ (80213fc <Cursor+0x40>)
 80213e0:	f004 fe0c 	bl	8025ffc <siprintf>
	}
		
    ShStringOut(bPort, buf);
 80213e4:	79fb      	ldrb	r3, [r7, #7]
 80213e6:	4905      	ldr	r1, [pc, #20]	@ (80213fc <Cursor+0x40>)
 80213e8:	4618      	mov	r0, r3
 80213ea:	f000 f8d1 	bl	8021590 <ShStringOut>
}
 80213ee:	bf00      	nop
 80213f0:	3708      	adds	r7, #8
 80213f2:	46bd      	mov	sp, r7
 80213f4:	bd80      	pop	{r7, pc}
 80213f6:	bf00      	nop
 80213f8:	0802ab38 	.word	0x0802ab38
 80213fc:	2001d960 	.word	0x2001d960
 8021400:	0802ab3c 	.word	0x0802ab3c

08021404 <f_getc>:
*
* @return	character
*
*********************************************************************/
uint8_t f_getc(FIL *stream)
{
 8021404:	b580      	push	{r7, lr}
 8021406:	b084      	sub	sp, #16
 8021408:	af00      	add	r7, sp, #0
 802140a:	6078      	str	r0, [r7, #4]
	uint8_t c;
	unsigned int rc;

	f_read(stream, &c, 1, &rc);
 802140c:	f107 0308 	add.w	r3, r7, #8
 8021410:	f107 010f 	add.w	r1, r7, #15
 8021414:	2201      	movs	r2, #1
 8021416:	6878      	ldr	r0, [r7, #4]
 8021418:	f7f8 ff27 	bl	801a26a <f_read>
	if(rc)
 802141c:	68bb      	ldr	r3, [r7, #8]
 802141e:	2b00      	cmp	r3, #0
 8021420:	d001      	beq.n	8021426 <f_getc+0x22>
	{
		return c;
 8021422:	7bfb      	ldrb	r3, [r7, #15]
 8021424:	e000      	b.n	8021428 <f_getc+0x24>
	}
	else
	{
		return EOF;
 8021426:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8021428:	4618      	mov	r0, r3
 802142a:	3710      	adds	r7, #16
 802142c:	46bd      	mov	sp, r7
 802142e:	bd80      	pop	{r7, pc}

08021430 <getLine>:
*
* @return	number of characters read
*
*********************************************************************/
int getLine(FIL *stream, char *buffer, int iBufLen)
{
 8021430:	b580      	push	{r7, lr}
 8021432:	b086      	sub	sp, #24
 8021434:	af00      	add	r7, sp, #0
 8021436:	60f8      	str	r0, [r7, #12]
 8021438:	60b9      	str	r1, [r7, #8]
 802143a:	607a      	str	r2, [r7, #4]
    //char bb[2];
    int i = 0;
 802143c:	2300      	movs	r3, #0
 802143e:	617b      	str	r3, [r7, #20]
    uint8_t j = 0;
 8021440:	2300      	movs	r3, #0
 8021442:	74fb      	strb	r3, [r7, #19]
    //uint8_t GotCR = 0;

    buffer[0] = '\0';
 8021444:	68bb      	ldr	r3, [r7, #8]
 8021446:	2200      	movs	r2, #0
 8021448:	701a      	strb	r2, [r3, #0]

    j = f_getc(stream);
 802144a:	68f8      	ldr	r0, [r7, #12]
 802144c:	f7ff ffda 	bl	8021404 <f_getc>
 8021450:	4603      	mov	r3, r0
 8021452:	74fb      	strb	r3, [r7, #19]

    while(j != (uint8_t)EOF)
 8021454:	e024      	b.n	80214a0 <getLine+0x70>
    {
        if(j == '\n')
 8021456:	7cfb      	ldrb	r3, [r7, #19]
 8021458:	2b0a      	cmp	r3, #10
 802145a:	d102      	bne.n	8021462 <getLine+0x32>
        {
			return i + 1;
 802145c:	697b      	ldr	r3, [r7, #20]
 802145e:	3301      	adds	r3, #1
 8021460:	e022      	b.n	80214a8 <getLine+0x78>
        }
        else if(j == '\r')
 8021462:	7cfb      	ldrb	r3, [r7, #19]
 8021464:	2b0d      	cmp	r3, #13
 8021466:	d103      	bne.n	8021470 <getLine+0x40>
        	//{
    		//	return i + 1;
        	//}
        	//else
        	//{
        		i++;
 8021468:	697b      	ldr	r3, [r7, #20]
 802146a:	3301      	adds	r3, #1
 802146c:	617b      	str	r3, [r7, #20]
 802146e:	e012      	b.n	8021496 <getLine+0x66>
        	//	GotCR = 1;
        	//}
        }
        else
		{
			buffer[i++] = j;
 8021470:	697b      	ldr	r3, [r7, #20]
 8021472:	1c5a      	adds	r2, r3, #1
 8021474:	617a      	str	r2, [r7, #20]
 8021476:	461a      	mov	r2, r3
 8021478:	68bb      	ldr	r3, [r7, #8]
 802147a:	4413      	add	r3, r2
 802147c:	7cfa      	ldrb	r2, [r7, #19]
 802147e:	701a      	strb	r2, [r3, #0]
			buffer[i] = '\0';
 8021480:	697b      	ldr	r3, [r7, #20]
 8021482:	68ba      	ldr	r2, [r7, #8]
 8021484:	4413      	add	r3, r2
 8021486:	2200      	movs	r2, #0
 8021488:	701a      	strb	r2, [r3, #0]
			if(i >= iBufLen)                // truncate this at a screen-line's worth + hyperlinks
 802148a:	697a      	ldr	r2, [r7, #20]
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	429a      	cmp	r2, r3
 8021490:	db01      	blt.n	8021496 <getLine+0x66>
			{
				return i;
 8021492:	697b      	ldr	r3, [r7, #20]
 8021494:	e008      	b.n	80214a8 <getLine+0x78>
			}
		}
        j = f_getc(stream);
 8021496:	68f8      	ldr	r0, [r7, #12]
 8021498:	f7ff ffb4 	bl	8021404 <f_getc>
 802149c:	4603      	mov	r3, r0
 802149e:	74fb      	strb	r3, [r7, #19]
    while(j != (uint8_t)EOF)
 80214a0:	7cfb      	ldrb	r3, [r7, #19]
 80214a2:	2bff      	cmp	r3, #255	@ 0xff
 80214a4:	d1d7      	bne.n	8021456 <getLine+0x26>
    }
    return i;
 80214a6:	697b      	ldr	r3, [r7, #20]
}
 80214a8:	4618      	mov	r0, r3
 80214aa:	3718      	adds	r7, #24
 80214ac:	46bd      	mov	sp, r7
 80214ae:	bd80      	pop	{r7, pc}

080214b0 <getLine2>:

int getLine2(FIL *stream, char *buffer, int iBufLen)
{
 80214b0:	b580      	push	{r7, lr}
 80214b2:	b086      	sub	sp, #24
 80214b4:	af00      	add	r7, sp, #0
 80214b6:	60f8      	str	r0, [r7, #12]
 80214b8:	60b9      	str	r1, [r7, #8]
 80214ba:	607a      	str	r2, [r7, #4]
    int i = 0;
 80214bc:	2300      	movs	r3, #0
 80214be:	617b      	str	r3, [r7, #20]
    uint8_t j = 0;
 80214c0:	2300      	movs	r3, #0
 80214c2:	74fb      	strb	r3, [r7, #19]

    buffer[0] = '\0';
 80214c4:	68bb      	ldr	r3, [r7, #8]
 80214c6:	2200      	movs	r2, #0
 80214c8:	701a      	strb	r2, [r3, #0]

    j = f_getc(stream);
 80214ca:	68f8      	ldr	r0, [r7, #12]
 80214cc:	f7ff ff9a 	bl	8021404 <f_getc>
 80214d0:	4603      	mov	r3, r0
 80214d2:	74fb      	strb	r3, [r7, #19]

    while(j != (uint8_t)EOF)
 80214d4:	e01f      	b.n	8021516 <getLine2+0x66>
    {
        if(j == '\n')
 80214d6:	7cfb      	ldrb	r3, [r7, #19]
 80214d8:	2b0a      	cmp	r3, #10
 80214da:	d101      	bne.n	80214e0 <getLine2+0x30>
        {
			return i;
 80214dc:	697b      	ldr	r3, [r7, #20]
 80214de:	e01e      	b.n	802151e <getLine2+0x6e>
        }
        else if(j == '\r')
 80214e0:	7cfb      	ldrb	r3, [r7, #19]
 80214e2:	2b0d      	cmp	r3, #13
 80214e4:	d012      	beq.n	802150c <getLine2+0x5c>
        {
        	;
        }
        else
		{
			buffer[i++] = j;
 80214e6:	697b      	ldr	r3, [r7, #20]
 80214e8:	1c5a      	adds	r2, r3, #1
 80214ea:	617a      	str	r2, [r7, #20]
 80214ec:	461a      	mov	r2, r3
 80214ee:	68bb      	ldr	r3, [r7, #8]
 80214f0:	4413      	add	r3, r2
 80214f2:	7cfa      	ldrb	r2, [r7, #19]
 80214f4:	701a      	strb	r2, [r3, #0]
			buffer[i] = '\0';
 80214f6:	697b      	ldr	r3, [r7, #20]
 80214f8:	68ba      	ldr	r2, [r7, #8]
 80214fa:	4413      	add	r3, r2
 80214fc:	2200      	movs	r2, #0
 80214fe:	701a      	strb	r2, [r3, #0]
			if(i >= iBufLen)                // truncate this at a screen-line's worth + hyperlinks
 8021500:	697a      	ldr	r2, [r7, #20]
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	429a      	cmp	r2, r3
 8021506:	db01      	blt.n	802150c <getLine2+0x5c>
			{
				return i;
 8021508:	697b      	ldr	r3, [r7, #20]
 802150a:	e008      	b.n	802151e <getLine2+0x6e>
			}
		}
        j = f_getc(stream);
 802150c:	68f8      	ldr	r0, [r7, #12]
 802150e:	f7ff ff79 	bl	8021404 <f_getc>
 8021512:	4603      	mov	r3, r0
 8021514:	74fb      	strb	r3, [r7, #19]
    while(j != (uint8_t)EOF)
 8021516:	7cfb      	ldrb	r3, [r7, #19]
 8021518:	2bff      	cmp	r3, #255	@ 0xff
 802151a:	d1dc      	bne.n	80214d6 <getLine2+0x26>
    }
    return i;
 802151c:	697b      	ldr	r3, [r7, #20]
}
 802151e:	4618      	mov	r0, r3
 8021520:	3718      	adds	r7, #24
 8021522:	46bd      	mov	sp, r7
 8021524:	bd80      	pop	{r7, pc}
	...

08021528 <ShCharOut>:
*
* @return	None
*
*********************************************************************/
void ShCharOut(uint8_t port, char c)
{
 8021528:	b580      	push	{r7, lr}
 802152a:	b082      	sub	sp, #8
 802152c:	af00      	add	r7, sp, #0
 802152e:	4603      	mov	r3, r0
 8021530:	460a      	mov	r2, r1
 8021532:	71fb      	strb	r3, [r7, #7]
 8021534:	4613      	mov	r3, r2
 8021536:	71bb      	strb	r3, [r7, #6]
    if(port & PORT1)
    {
//		VCP_write ((uint8_t*)&c, 1);
    }

    if(port & PORT3)
 8021538:	79fb      	ldrb	r3, [r7, #7]
 802153a:	f003 0304 	and.w	r3, r3, #4
 802153e:	2b00      	cmp	r3, #0
 8021540:	d005      	beq.n	802154e <ShCharOut+0x26>
    {
    	HAL_UART_Transmit(&huart3, (uint8_t*)&c, 1, 100);
 8021542:	1db9      	adds	r1, r7, #6
 8021544:	2364      	movs	r3, #100	@ 0x64
 8021546:	2201      	movs	r2, #1
 8021548:	4803      	ldr	r0, [pc, #12]	@ (8021558 <ShCharOut+0x30>)
 802154a:	f7f5 fecf 	bl	80172ec <HAL_UART_Transmit>

    if(port & PORTT)
    {
//    	telnet_putc(c);
    }
}
 802154e:	bf00      	nop
 8021550:	3708      	adds	r7, #8
 8021552:	46bd      	mov	sp, r7
 8021554:	bd80      	pop	{r7, pc}
 8021556:	bf00      	nop
 8021558:	2001c274 	.word	0x2001c274

0802155c <ShBuffOut>:
*
* @return	None
*
*********************************************************************/
void ShBuffOut(uint8_t port, char* s, int len)
{
 802155c:	b580      	push	{r7, lr}
 802155e:	b084      	sub	sp, #16
 8021560:	af00      	add	r7, sp, #0
 8021562:	4603      	mov	r3, r0
 8021564:	60b9      	str	r1, [r7, #8]
 8021566:	607a      	str	r2, [r7, #4]
 8021568:	73fb      	strb	r3, [r7, #15]
	if(port & PORT1)
    {
//		VCP_write ((uint8_t*)s, len);
    }

    if(port & PORT3)
 802156a:	7bfb      	ldrb	r3, [r7, #15]
 802156c:	f003 0304 	and.w	r3, r3, #4
 8021570:	2b00      	cmp	r3, #0
 8021572:	d006      	beq.n	8021582 <ShBuffOut+0x26>
    {
    	HAL_UART_Transmit(&huart3, (uint8_t*)s, len, 100);
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	b29a      	uxth	r2, r3
 8021578:	2364      	movs	r3, #100	@ 0x64
 802157a:	68b9      	ldr	r1, [r7, #8]
 802157c:	4803      	ldr	r0, [pc, #12]	@ (802158c <ShBuffOut+0x30>)
 802157e:	f7f5 feb5 	bl	80172ec <HAL_UART_Transmit>

    if(port & PORTT)
    {
//    	telnet_putbuf(s, len);
    }
}
 8021582:	bf00      	nop
 8021584:	3710      	adds	r7, #16
 8021586:	46bd      	mov	sp, r7
 8021588:	bd80      	pop	{r7, pc}
 802158a:	bf00      	nop
 802158c:	2001c274 	.word	0x2001c274

08021590 <ShStringOut>:
*
* @return	None
*
*********************************************************************/
void ShStringOut(uint8_t port, char* s)
{
 8021590:	b580      	push	{r7, lr}
 8021592:	b082      	sub	sp, #8
 8021594:	af00      	add	r7, sp, #0
 8021596:	4603      	mov	r3, r0
 8021598:	6039      	str	r1, [r7, #0]
 802159a:	71fb      	strb	r3, [r7, #7]

	ShBuffOut(port, s, strlen(s));
 802159c:	6838      	ldr	r0, [r7, #0]
 802159e:	f7de fe81 	bl	80002a4 <strlen>
 80215a2:	4603      	mov	r3, r0
 80215a4:	461a      	mov	r2, r3
 80215a6:	79fb      	ldrb	r3, [r7, #7]
 80215a8:	6839      	ldr	r1, [r7, #0]
 80215aa:	4618      	mov	r0, r3
 80215ac:	f7ff ffd6 	bl	802155c <ShBuffOut>
}
 80215b0:	bf00      	nop
 80215b2:	3708      	adds	r7, #8
 80215b4:	46bd      	mov	sp, r7
 80215b6:	bd80      	pop	{r7, pc}

080215b8 <ShFieldOut>:
*
* @return	None
*
*********************************************************************/
void ShFieldOut(uint8_t port, char* szBuffer, int iFieldWidth)
{
 80215b8:	b580      	push	{r7, lr}
 80215ba:	b086      	sub	sp, #24
 80215bc:	af00      	add	r7, sp, #0
 80215be:	4603      	mov	r3, r0
 80215c0:	60b9      	str	r1, [r7, #8]
 80215c2:	607a      	str	r2, [r7, #4]
 80215c4:	73fb      	strb	r3, [r7, #15]
	int iLen;

	iLen = strlen(szBuffer);
 80215c6:	68b8      	ldr	r0, [r7, #8]
 80215c8:	f7de fe6c 	bl	80002a4 <strlen>
 80215cc:	4603      	mov	r3, r0
 80215ce:	617b      	str	r3, [r7, #20]

	ShBuffOut(port, szBuffer, iLen);
 80215d0:	7bfb      	ldrb	r3, [r7, #15]
 80215d2:	697a      	ldr	r2, [r7, #20]
 80215d4:	68b9      	ldr	r1, [r7, #8]
 80215d6:	4618      	mov	r0, r3
 80215d8:	f7ff ffc0 	bl	802155c <ShBuffOut>

	while(iLen < iFieldWidth)
 80215dc:	e007      	b.n	80215ee <ShFieldOut+0x36>
	{
        ShCharOut(port, ' ');
 80215de:	7bfb      	ldrb	r3, [r7, #15]
 80215e0:	2120      	movs	r1, #32
 80215e2:	4618      	mov	r0, r3
 80215e4:	f7ff ffa0 	bl	8021528 <ShCharOut>
		iFieldWidth--;
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	3b01      	subs	r3, #1
 80215ec:	607b      	str	r3, [r7, #4]
	while(iLen < iFieldWidth)
 80215ee:	697a      	ldr	r2, [r7, #20]
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	429a      	cmp	r2, r3
 80215f4:	dbf3      	blt.n	80215de <ShFieldOut+0x26>
	}
}
 80215f6:	bf00      	nop
 80215f8:	bf00      	nop
 80215fa:	3718      	adds	r7, #24
 80215fc:	46bd      	mov	sp, r7
 80215fe:	bd80      	pop	{r7, pc}

08021600 <ShFieldNumberOut>:
*
* @return	None
*
*********************************************************************/
void ShFieldNumberOut(uint8_t bPort, char* szBuffer, int number, int iFieldWidth)
{
 8021600:	b590      	push	{r4, r7, lr}
 8021602:	b09d      	sub	sp, #116	@ 0x74
 8021604:	af00      	add	r7, sp, #0
 8021606:	60b9      	str	r1, [r7, #8]
 8021608:	607a      	str	r2, [r7, #4]
 802160a:	603b      	str	r3, [r7, #0]
 802160c:	4603      	mov	r3, r0
 802160e:	73fb      	strb	r3, [r7, #15]
	char buf[80];
	char num[10];

	strcpy(buf, szBuffer);
 8021610:	f107 0320 	add.w	r3, r7, #32
 8021614:	68b9      	ldr	r1, [r7, #8]
 8021616:	4618      	mov	r0, r3
 8021618:	f004 ff23 	bl	8026462 <strcpy>
	itoa(number, num, 10);
 802161c:	f107 0314 	add.w	r3, r7, #20
 8021620:	220a      	movs	r2, #10
 8021622:	4619      	mov	r1, r3
 8021624:	6878      	ldr	r0, [r7, #4]
 8021626:	f003 fee7 	bl	80253f8 <itoa>

	if(strlen(buf))
 802162a:	f107 0320 	add.w	r3, r7, #32
 802162e:	781b      	ldrb	r3, [r3, #0]
 8021630:	2b00      	cmp	r3, #0
 8021632:	d016      	beq.n	8021662 <ShFieldNumberOut+0x62>
	{
		ShFieldOut(bPort, buf, iFieldWidth-strlen(num));
 8021634:	683c      	ldr	r4, [r7, #0]
 8021636:	f107 0314 	add.w	r3, r7, #20
 802163a:	4618      	mov	r0, r3
 802163c:	f7de fe32 	bl	80002a4 <strlen>
 8021640:	4603      	mov	r3, r0
 8021642:	1ae3      	subs	r3, r4, r3
 8021644:	461a      	mov	r2, r3
 8021646:	f107 0120 	add.w	r1, r7, #32
 802164a:	7bfb      	ldrb	r3, [r7, #15]
 802164c:	4618      	mov	r0, r3
 802164e:	f7ff ffb3 	bl	80215b8 <ShFieldOut>
		ShFieldOut(bPort, num, 0);
 8021652:	f107 0114 	add.w	r1, r7, #20
 8021656:	7bfb      	ldrb	r3, [r7, #15]
 8021658:	2200      	movs	r2, #0
 802165a:	4618      	mov	r0, r3
 802165c:	f7ff ffac 	bl	80215b8 <ShFieldOut>
	}
	else
	{
		ShFieldOut(bPort, num, iFieldWidth);
	}
}
 8021660:	e006      	b.n	8021670 <ShFieldNumberOut+0x70>
		ShFieldOut(bPort, num, iFieldWidth);
 8021662:	f107 0114 	add.w	r1, r7, #20
 8021666:	7bfb      	ldrb	r3, [r7, #15]
 8021668:	683a      	ldr	r2, [r7, #0]
 802166a:	4618      	mov	r0, r3
 802166c:	f7ff ffa4 	bl	80215b8 <ShFieldOut>
}
 8021670:	bf00      	nop
 8021672:	3774      	adds	r7, #116	@ 0x74
 8021674:	46bd      	mov	sp, r7
 8021676:	bd90      	pop	{r4, r7, pc}

08021678 <ShNL>:
*
* @return	None
*
*********************************************************************/
void ShNL(uint8_t bPort)
{
 8021678:	b580      	push	{r7, lr}
 802167a:	b082      	sub	sp, #8
 802167c:	af00      	add	r7, sp, #0
 802167e:	4603      	mov	r3, r0
 8021680:	71fb      	strb	r3, [r7, #7]
    ShCharOut(bPort, '\r');
 8021682:	79fb      	ldrb	r3, [r7, #7]
 8021684:	210d      	movs	r1, #13
 8021686:	4618      	mov	r0, r3
 8021688:	f7ff ff4e 	bl	8021528 <ShCharOut>
    ShCharOut(bPort, '\n');
 802168c:	79fb      	ldrb	r3, [r7, #7]
 802168e:	210a      	movs	r1, #10
 8021690:	4618      	mov	r0, r3
 8021692:	f7ff ff49 	bl	8021528 <ShCharOut>
}
 8021696:	bf00      	nop
 8021698:	3708      	adds	r7, #8
 802169a:	46bd      	mov	sp, r7
 802169c:	bd80      	pop	{r7, pc}

0802169e <ShCR>:

void ShCR(uint8_t bPort)
{
 802169e:	b580      	push	{r7, lr}
 80216a0:	b082      	sub	sp, #8
 80216a2:	af00      	add	r7, sp, #0
 80216a4:	4603      	mov	r3, r0
 80216a6:	71fb      	strb	r3, [r7, #7]
    ShCharOut(bPort, '\r');
 80216a8:	79fb      	ldrb	r3, [r7, #7]
 80216aa:	210d      	movs	r1, #13
 80216ac:	4618      	mov	r0, r3
 80216ae:	f7ff ff3b 	bl	8021528 <ShCharOut>
    ShCharOut(bPort, '\n');
 80216b2:	79fb      	ldrb	r3, [r7, #7]
 80216b4:	210a      	movs	r1, #10
 80216b6:	4618      	mov	r0, r3
 80216b8:	f7ff ff36 	bl	8021528 <ShCharOut>
}
 80216bc:	bf00      	nop
 80216be:	3708      	adds	r7, #8
 80216c0:	46bd      	mov	sp, r7
 80216c2:	bd80      	pop	{r7, pc}

080216c4 <ShGetChar>:
* @return	None
* @remarks	If multiple consoles are specified, the first received char is returned
*
*********************************************************************/
char ShGetChar(uint8_t port)
{
 80216c4:	b580      	push	{r7, lr}
 80216c6:	b084      	sub	sp, #16
 80216c8:	af00      	add	r7, sp, #0
 80216ca:	4603      	mov	r3, r0
 80216cc:	71fb      	strb	r3, [r7, #7]
	uint8_t c;
	
    if(port & PORT1)
 80216ce:	79fb      	ldrb	r3, [r7, #7]
 80216d0:	f003 0301 	and.w	r3, r3, #1
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d001      	beq.n	80216dc <ShGetChar+0x18>
    {
//		if(VCP_GetRxChar(&c))
//		{
//			return c;
//		}
    	return 0;
 80216d8:	2300      	movs	r3, #0
 80216da:	e017      	b.n	802170c <ShGetChar+0x48>
    }

    if(port & PORT3)
 80216dc:	79fb      	ldrb	r3, [r7, #7]
 80216de:	f003 0304 	and.w	r3, r3, #4
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d00b      	beq.n	80216fe <ShGetChar+0x3a>
    {
    	if(HAL_UART_Receive(&huart3, &c, 1, 0) == HAL_OK)
 80216e6:	f107 010f 	add.w	r1, r7, #15
 80216ea:	2300      	movs	r3, #0
 80216ec:	2201      	movs	r2, #1
 80216ee:	4809      	ldr	r0, [pc, #36]	@ (8021714 <ShGetChar+0x50>)
 80216f0:	f7f5 fe9a 	bl	8017428 <HAL_UART_Receive>
 80216f4:	4603      	mov	r3, r0
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d101      	bne.n	80216fe <ShGetChar+0x3a>
    	{
    	   	return c;
 80216fa:	7bfb      	ldrb	r3, [r7, #15]
 80216fc:	e006      	b.n	802170c <ShGetChar+0x48>
    	}
    }


    if(port & PORTT)
 80216fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021702:	2b00      	cmp	r3, #0
 8021704:	da01      	bge.n	802170a <ShGetChar+0x46>
    {
//    	c = telnet_getc();
    	{
    		return c;
 8021706:	7bfb      	ldrb	r3, [r7, #15]
 8021708:	e000      	b.n	802170c <ShGetChar+0x48>
    	}
    }

	return 0;
 802170a:	2300      	movs	r3, #0
}
 802170c:	4618      	mov	r0, r3
 802170e:	3710      	adds	r7, #16
 8021710:	46bd      	mov	sp, r7
 8021712:	bd80      	pop	{r7, pc}
 8021714:	2001c274 	.word	0x2001c274

08021718 <OpenScript>:
*
* @return	0 = no decimal point in string, 1 if decimal point in string
*
*********************************************************************/
FRESULT OpenScript(FIL* fp, char* path, char* name)
{
 8021718:	b580      	push	{r7, lr}
 802171a:	b0a4      	sub	sp, #144	@ 0x90
 802171c:	af00      	add	r7, sp, #0
 802171e:	60f8      	str	r0, [r7, #12]
 8021720:	60b9      	str	r1, [r7, #8]
 8021722:	607a      	str	r2, [r7, #4]
	char szFullPath[64];
	char pPath[32];
	char* pEnvPath;
	int len;

	strcpy(szFullName, name);
 8021724:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8021728:	6879      	ldr	r1, [r7, #4]
 802172a:	4618      	mov	r0, r3
 802172c:	f004 fe99 	bl	8026462 <strcpy>

	// try the passed in filename
	ret = f_open(fp, szFullName, FA_READ);
 8021730:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8021734:	2201      	movs	r2, #1
 8021736:	4619      	mov	r1, r3
 8021738:	68f8      	ldr	r0, [r7, #12]
 802173a:	f7f8 fbd5 	bl	8019ee8 <f_open>
 802173e:	4603      	mov	r3, r0
 8021740:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	if(ret == FR_OK)
 8021744:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021748:	2b00      	cmp	r3, #0
 802174a:	d102      	bne.n	8021752 <OpenScript+0x3a>
	{
		return ret;
 802174c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021750:	e094      	b.n	802187c <OpenScript+0x164>
	}
	else
	{
		// try the default extension
		strcat(szFullName, SCRIPT_DEFAULT_EXTENSION);
 8021752:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8021756:	4618      	mov	r0, r3
 8021758:	f7de fda4 	bl	80002a4 <strlen>
 802175c:	4603      	mov	r3, r0
 802175e:	461a      	mov	r2, r3
 8021760:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8021764:	4413      	add	r3, r2
 8021766:	4a47      	ldr	r2, [pc, #284]	@ (8021884 <OpenScript+0x16c>)
 8021768:	6810      	ldr	r0, [r2, #0]
 802176a:	6018      	str	r0, [r3, #0]
 802176c:	7912      	ldrb	r2, [r2, #4]
 802176e:	711a      	strb	r2, [r3, #4]
		ret = f_open(fp, szFullName, FA_READ);
 8021770:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8021774:	2201      	movs	r2, #1
 8021776:	4619      	mov	r1, r3
 8021778:	68f8      	ldr	r0, [r7, #12]
 802177a:	f7f8 fbb5 	bl	8019ee8 <f_open>
 802177e:	4603      	mov	r3, r0
 8021780:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		if(ret == FR_OK)
 8021784:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021788:	2b00      	cmp	r3, #0
 802178a:	d102      	bne.n	8021792 <OpenScript+0x7a>
		{
			return ret;
 802178c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021790:	e074      	b.n	802187c <OpenScript+0x164>
		}
		else
		{
			pEnvPath = szPathVar;
 8021792:	4b3d      	ldr	r3, [pc, #244]	@ (8021888 <OpenScript+0x170>)
 8021794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			while((len = GetNextPath(pEnvPath, pPath)) != 0)
 8021798:	e062      	b.n	8021860 <OpenScript+0x148>
			{
				// use pPath
				strcpy(szFullPath, pPath);
 802179a:	f107 0214 	add.w	r2, r7, #20
 802179e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217a2:	4611      	mov	r1, r2
 80217a4:	4618      	mov	r0, r3
 80217a6:	f004 fe5c 	bl	8026462 <strcpy>
				if(pPath[strlen(pPath)-1] != '/')
 80217aa:	f107 0314 	add.w	r3, r7, #20
 80217ae:	4618      	mov	r0, r3
 80217b0:	f7de fd78 	bl	80002a4 <strlen>
 80217b4:	4603      	mov	r3, r0
 80217b6:	3b01      	subs	r3, #1
 80217b8:	3390      	adds	r3, #144	@ 0x90
 80217ba:	443b      	add	r3, r7
 80217bc:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 80217c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80217c2:	d00e      	beq.n	80217e2 <OpenScript+0xca>
				{
					strcat(szFullPath, "/");
 80217c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217c8:	4618      	mov	r0, r3
 80217ca:	f7de fd6b 	bl	80002a4 <strlen>
 80217ce:	4603      	mov	r3, r0
 80217d0:	461a      	mov	r2, r3
 80217d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217d6:	4413      	add	r3, r2
 80217d8:	492c      	ldr	r1, [pc, #176]	@ (802188c <OpenScript+0x174>)
 80217da:	461a      	mov	r2, r3
 80217dc:	460b      	mov	r3, r1
 80217de:	881b      	ldrh	r3, [r3, #0]
 80217e0:	8013      	strh	r3, [r2, #0]
				}
				strcat(szFullPath, name);
 80217e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217e6:	6879      	ldr	r1, [r7, #4]
 80217e8:	4618      	mov	r0, r3
 80217ea:	f004 fd21 	bl	8026230 <strcat>

				// open file
				ret = f_open(fp, szFullPath, FA_READ);
 80217ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217f2:	2201      	movs	r2, #1
 80217f4:	4619      	mov	r1, r3
 80217f6:	68f8      	ldr	r0, [r7, #12]
 80217f8:	f7f8 fb76 	bl	8019ee8 <f_open>
 80217fc:	4603      	mov	r3, r0
 80217fe:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
				if(ret == FR_OK)
 8021802:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021806:	2b00      	cmp	r3, #0
 8021808:	d102      	bne.n	8021810 <OpenScript+0xf8>
				{
					return ret;
 802180a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 802180e:	e035      	b.n	802187c <OpenScript+0x164>
				}

				// add the default extension
				strcat(szFullPath, SCRIPT_DEFAULT_EXTENSION);
 8021810:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8021814:	4618      	mov	r0, r3
 8021816:	f7de fd45 	bl	80002a4 <strlen>
 802181a:	4603      	mov	r3, r0
 802181c:	461a      	mov	r2, r3
 802181e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8021822:	4413      	add	r3, r2
 8021824:	4a17      	ldr	r2, [pc, #92]	@ (8021884 <OpenScript+0x16c>)
 8021826:	6810      	ldr	r0, [r2, #0]
 8021828:	6018      	str	r0, [r3, #0]
 802182a:	7912      	ldrb	r2, [r2, #4]
 802182c:	711a      	strb	r2, [r3, #4]

				// open file
				ret = f_open(fp, szFullPath, FA_READ);
 802182e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8021832:	2201      	movs	r2, #1
 8021834:	4619      	mov	r1, r3
 8021836:	68f8      	ldr	r0, [r7, #12]
 8021838:	f7f8 fb56 	bl	8019ee8 <f_open>
 802183c:	4603      	mov	r3, r0
 802183e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
				if(ret == FR_OK)
 8021842:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021846:	2b00      	cmp	r3, #0
 8021848:	d102      	bne.n	8021850 <OpenScript+0x138>
				{
					return ret;
 802184a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 802184e:	e015      	b.n	802187c <OpenScript+0x164>
				}

				pEnvPath += len+1;
 8021850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8021854:	3301      	adds	r3, #1
 8021856:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802185a:	4413      	add	r3, r2
 802185c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			while((len = GetNextPath(pEnvPath, pPath)) != 0)
 8021860:	f107 0314 	add.w	r3, r7, #20
 8021864:	4619      	mov	r1, r3
 8021866:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 802186a:	f7e8 f83d 	bl	80098e8 <GetNextPath>
 802186e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8021872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8021876:	2b00      	cmp	r3, #0
 8021878:	d18f      	bne.n	802179a <OpenScript+0x82>
			}
		}
	}

	return FR_NO_FILE;
 802187a:	2304      	movs	r3, #4
}
 802187c:	4618      	mov	r0, r3
 802187e:	3790      	adds	r7, #144	@ 0x90
 8021880:	46bd      	mov	sp, r7
 8021882:	bd80      	pop	{r7, pc}
 8021884:	0802ae2c 	.word	0x0802ae2c
 8021888:	2001b5a4 	.word	0x2001b5a4
 802188c:	0802ae34 	.word	0x0802ae34

08021890 <OpenPacket>:
*
* @return	0 = no decimal point in string, 1 if decimal point in string
*
*********************************************************************/
FRESULT OpenPacket(FIL* fp, char* path, char* name)
{
 8021890:	b580      	push	{r7, lr}
 8021892:	b0a4      	sub	sp, #144	@ 0x90
 8021894:	af00      	add	r7, sp, #0
 8021896:	60f8      	str	r0, [r7, #12]
 8021898:	60b9      	str	r1, [r7, #8]
 802189a:	607a      	str	r2, [r7, #4]
	char szFullPath[64];
	char pPath[32];
	char* pEnvPath;
	int len;

	strcpy(szFullName, name);
 802189c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80218a0:	6879      	ldr	r1, [r7, #4]
 80218a2:	4618      	mov	r0, r3
 80218a4:	f004 fddd 	bl	8026462 <strcpy>

	// try the passed in filename
	ret = f_open(fp, szFullName, FA_READ);
 80218a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80218ac:	2201      	movs	r2, #1
 80218ae:	4619      	mov	r1, r3
 80218b0:	68f8      	ldr	r0, [r7, #12]
 80218b2:	f7f8 fb19 	bl	8019ee8 <f_open>
 80218b6:	4603      	mov	r3, r0
 80218b8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	if(ret == FR_OK)
 80218bc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	d102      	bne.n	80218ca <OpenPacket+0x3a>
	{
		return ret;
 80218c4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80218c8:	e094      	b.n	80219f4 <OpenPacket+0x164>
	}
	else
	{
		// try the default extension
		strcat(szFullName, PACKET_DEFAULT_EXTENSION);
 80218ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80218ce:	4618      	mov	r0, r3
 80218d0:	f7de fce8 	bl	80002a4 <strlen>
 80218d4:	4603      	mov	r3, r0
 80218d6:	461a      	mov	r2, r3
 80218d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80218dc:	4413      	add	r3, r2
 80218de:	4a47      	ldr	r2, [pc, #284]	@ (80219fc <OpenPacket+0x16c>)
 80218e0:	6810      	ldr	r0, [r2, #0]
 80218e2:	6018      	str	r0, [r3, #0]
 80218e4:	7912      	ldrb	r2, [r2, #4]
 80218e6:	711a      	strb	r2, [r3, #4]
		ret = f_open(fp, szFullName, FA_READ);
 80218e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80218ec:	2201      	movs	r2, #1
 80218ee:	4619      	mov	r1, r3
 80218f0:	68f8      	ldr	r0, [r7, #12]
 80218f2:	f7f8 faf9 	bl	8019ee8 <f_open>
 80218f6:	4603      	mov	r3, r0
 80218f8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		if(ret == FR_OK)
 80218fc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021900:	2b00      	cmp	r3, #0
 8021902:	d102      	bne.n	802190a <OpenPacket+0x7a>
		{
			return ret;
 8021904:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021908:	e074      	b.n	80219f4 <OpenPacket+0x164>
		}
		else
		{
			pEnvPath = szPathVar;
 802190a:	4b3d      	ldr	r3, [pc, #244]	@ (8021a00 <OpenPacket+0x170>)
 802190c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			while((len = GetNextPath(pEnvPath, pPath)) != 0)
 8021910:	e062      	b.n	80219d8 <OpenPacket+0x148>
			{
				// use pPath
				strcpy(szFullPath, pPath);
 8021912:	f107 0214 	add.w	r2, r7, #20
 8021916:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802191a:	4611      	mov	r1, r2
 802191c:	4618      	mov	r0, r3
 802191e:	f004 fda0 	bl	8026462 <strcpy>
				if(pPath[strlen(pPath)-1] != '/')
 8021922:	f107 0314 	add.w	r3, r7, #20
 8021926:	4618      	mov	r0, r3
 8021928:	f7de fcbc 	bl	80002a4 <strlen>
 802192c:	4603      	mov	r3, r0
 802192e:	3b01      	subs	r3, #1
 8021930:	3390      	adds	r3, #144	@ 0x90
 8021932:	443b      	add	r3, r7
 8021934:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 8021938:	2b2f      	cmp	r3, #47	@ 0x2f
 802193a:	d00e      	beq.n	802195a <OpenPacket+0xca>
				{
					strcat(szFullPath, "/");
 802193c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8021940:	4618      	mov	r0, r3
 8021942:	f7de fcaf 	bl	80002a4 <strlen>
 8021946:	4603      	mov	r3, r0
 8021948:	461a      	mov	r2, r3
 802194a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802194e:	4413      	add	r3, r2
 8021950:	492c      	ldr	r1, [pc, #176]	@ (8021a04 <OpenPacket+0x174>)
 8021952:	461a      	mov	r2, r3
 8021954:	460b      	mov	r3, r1
 8021956:	881b      	ldrh	r3, [r3, #0]
 8021958:	8013      	strh	r3, [r2, #0]
				}
				strcat(szFullPath, name);
 802195a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802195e:	6879      	ldr	r1, [r7, #4]
 8021960:	4618      	mov	r0, r3
 8021962:	f004 fc65 	bl	8026230 <strcat>

				// open file
				ret = f_open(fp, szFullPath, FA_READ);
 8021966:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802196a:	2201      	movs	r2, #1
 802196c:	4619      	mov	r1, r3
 802196e:	68f8      	ldr	r0, [r7, #12]
 8021970:	f7f8 faba 	bl	8019ee8 <f_open>
 8021974:	4603      	mov	r3, r0
 8021976:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
				if(ret == FR_OK)
 802197a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 802197e:	2b00      	cmp	r3, #0
 8021980:	d102      	bne.n	8021988 <OpenPacket+0xf8>
				{
					return ret;
 8021982:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8021986:	e035      	b.n	80219f4 <OpenPacket+0x164>
				}

				// add the default extension
				strcat(szFullPath, PACKET_DEFAULT_EXTENSION);
 8021988:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802198c:	4618      	mov	r0, r3
 802198e:	f7de fc89 	bl	80002a4 <strlen>
 8021992:	4603      	mov	r3, r0
 8021994:	461a      	mov	r2, r3
 8021996:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802199a:	4413      	add	r3, r2
 802199c:	4a17      	ldr	r2, [pc, #92]	@ (80219fc <OpenPacket+0x16c>)
 802199e:	6810      	ldr	r0, [r2, #0]
 80219a0:	6018      	str	r0, [r3, #0]
 80219a2:	7912      	ldrb	r2, [r2, #4]
 80219a4:	711a      	strb	r2, [r3, #4]

				// open file
				ret = f_open(fp, szFullPath, FA_READ);
 80219a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80219aa:	2201      	movs	r2, #1
 80219ac:	4619      	mov	r1, r3
 80219ae:	68f8      	ldr	r0, [r7, #12]
 80219b0:	f7f8 fa9a 	bl	8019ee8 <f_open>
 80219b4:	4603      	mov	r3, r0
 80219b6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
				if(ret == FR_OK)
 80219ba:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d102      	bne.n	80219c8 <OpenPacket+0x138>
				{
					return ret;
 80219c2:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80219c6:	e015      	b.n	80219f4 <OpenPacket+0x164>
				}

				pEnvPath += len+1;
 80219c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80219cc:	3301      	adds	r3, #1
 80219ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80219d2:	4413      	add	r3, r2
 80219d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			while((len = GetNextPath(pEnvPath, pPath)) != 0)
 80219d8:	f107 0314 	add.w	r3, r7, #20
 80219dc:	4619      	mov	r1, r3
 80219de:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80219e2:	f7e7 ff81 	bl	80098e8 <GetNextPath>
 80219e6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 80219ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	d18f      	bne.n	8021912 <OpenPacket+0x82>
			}
		}
	}

	return FR_NO_FILE;
 80219f2:	2304      	movs	r3, #4
}
 80219f4:	4618      	mov	r0, r3
 80219f6:	3790      	adds	r7, #144	@ 0x90
 80219f8:	46bd      	mov	sp, r7
 80219fa:	bd80      	pop	{r7, pc}
 80219fc:	0802ae38 	.word	0x0802ae38
 8021a00:	2001b5a4 	.word	0x2001b5a4
 8021a04:	0802ae34 	.word	0x0802ae34

08021a08 <ShHelp>:
*
* @return	CMD_RETURN - shell result (always OK)
*
*********************************************************************/
CMD_RETURN ShHelp(uint8_t bPort, int argc, char *argv[])
{
 8021a08:	b580      	push	{r7, lr}
 8021a0a:	f5ad 7d40 	sub.w	sp, sp, #768	@ 0x300
 8021a0e:	af00      	add	r7, sp, #0
 8021a10:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021a14:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8021a18:	6019      	str	r1, [r3, #0]
 8021a1a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021a1e:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021a22:	601a      	str	r2, [r3, #0]
 8021a24:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021a28:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021a2c:	4602      	mov	r2, r0
 8021a2e:	701a      	strb	r2, [r3, #0]
	int i;
	int cnt = 0;
 8021a30:	2300      	movs	r3, #0
 8021a32:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
    unsigned int bc;
	char pPath[32];
	char* pEnvPath;
	int len;

	if(argc == 2)
 8021a36:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021a3a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8021a3e:	681b      	ldr	r3, [r3, #0]
 8021a40:	2b02      	cmp	r3, #2
 8021a42:	f040 8565 	bne.w	8022510 <ShHelp+0xb08>
	{
		// help for commands
		for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021a46:	2300      	movs	r3, #0
 8021a48:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021a4c:	e03a      	b.n	8021ac4 <ShHelp+0xbc>
		{
			if(strcasecmp(ShellTable[i].szCommand, argv[1]) == 0)
 8021a4e:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021a52:	4613      	mov	r3, r2
 8021a54:	005b      	lsls	r3, r3, #1
 8021a56:	4413      	add	r3, r2
 8021a58:	00db      	lsls	r3, r3, #3
 8021a5a:	4ac8      	ldr	r2, [pc, #800]	@ (8021d7c <ShHelp+0x374>)
 8021a5c:	441a      	add	r2, r3
 8021a5e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021a62:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	3304      	adds	r3, #4
 8021a6a:	681b      	ldr	r3, [r3, #0]
 8021a6c:	4619      	mov	r1, r3
 8021a6e:	4610      	mov	r0, r2
 8021a70:	f001 f878 	bl	8022b64 <strcasecmp>
 8021a74:	4603      	mov	r3, r0
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d11f      	bne.n	8021aba <ShHelp+0xb2>
			{
				ShFieldOut(bPort, " - ", 0);
 8021a7a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021a7e:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021a82:	781b      	ldrb	r3, [r3, #0]
 8021a84:	2200      	movs	r2, #0
 8021a86:	49be      	ldr	r1, [pc, #760]	@ (8021d80 <ShHelp+0x378>)
 8021a88:	4618      	mov	r0, r3
 8021a8a:	f7ff fd95 	bl	80215b8 <ShFieldOut>
				ShFieldOut(bPort, (char*)ShellTable[i].pszHelp, 0);
 8021a8e:	49bb      	ldr	r1, [pc, #748]	@ (8021d7c <ShHelp+0x374>)
 8021a90:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021a94:	4613      	mov	r3, r2
 8021a96:	005b      	lsls	r3, r3, #1
 8021a98:	4413      	add	r3, r2
 8021a9a:	00db      	lsls	r3, r3, #3
 8021a9c:	440b      	add	r3, r1
 8021a9e:	3314      	adds	r3, #20
 8021aa0:	6819      	ldr	r1, [r3, #0]
 8021aa2:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021aa6:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021aaa:	781b      	ldrb	r3, [r3, #0]
 8021aac:	2200      	movs	r2, #0
 8021aae:	4618      	mov	r0, r3
 8021ab0:	f7ff fd82 	bl	80215b8 <ShFieldOut>
				return CMD_OK;
 8021ab4:	2300      	movs	r3, #0
 8021ab6:	f000 bf45 	b.w	8022944 <ShHelp+0xf3c>
		for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021aba:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021abe:	3301      	adds	r3, #1
 8021ac0:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021ac4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021ac8:	2b1f      	cmp	r3, #31
 8021aca:	d9c0      	bls.n	8021a4e <ShHelp+0x46>
			}
		}

		// help for variables
		i = FindVariable(argv[1]);
 8021acc:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021ad0:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	3304      	adds	r3, #4
 8021ad8:	681b      	ldr	r3, [r3, #0]
 8021ada:	4618      	mov	r0, r3
 8021adc:	f7e7 f93a 	bl	8008d54 <FindVariable>
 8021ae0:	f8c7 02fc 	str.w	r0, [r7, #764]	@ 0x2fc
		if(i != -1)
 8021ae4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021aec:	d01c      	beq.n	8021b28 <ShHelp+0x120>
		{
			//if(!IsVariableHidden(argv[1]))
			{
				ShFieldOut(bPort, " - ", 0);
 8021aee:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021af2:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021af6:	781b      	ldrb	r3, [r3, #0]
 8021af8:	2200      	movs	r2, #0
 8021afa:	49a1      	ldr	r1, [pc, #644]	@ (8021d80 <ShHelp+0x378>)
 8021afc:	4618      	mov	r0, r3
 8021afe:	f7ff fd5b 	bl	80215b8 <ShFieldOut>
				ShFieldOut(bPort, GetVariableHelp(i), 0);
 8021b02:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021b06:	b2db      	uxtb	r3, r3
 8021b08:	4618      	mov	r0, r3
 8021b0a:	f7e7 f8c9 	bl	8008ca0 <GetVariableHelp>
 8021b0e:	4601      	mov	r1, r0
 8021b10:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021b14:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021b18:	781b      	ldrb	r3, [r3, #0]
 8021b1a:	2200      	movs	r2, #0
 8021b1c:	4618      	mov	r0, r3
 8021b1e:	f7ff fd4b 	bl	80215b8 <ShFieldOut>
				return CMD_OK;
 8021b22:	2300      	movs	r3, #0
 8021b24:	f000 bf0e 	b.w	8022944 <ShHelp+0xf3c>
		}


		// open file
		//res = f_open(&fp, argv[1], FA_READ);
		res = OpenScript(&fp, szPathVar, argv[1]);
 8021b28:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021b2c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021b30:	681b      	ldr	r3, [r3, #0]
 8021b32:	3304      	adds	r3, #4
 8021b34:	681a      	ldr	r2, [r3, #0]
 8021b36:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8021b3a:	4992      	ldr	r1, [pc, #584]	@ (8021d84 <ShHelp+0x37c>)
 8021b3c:	4618      	mov	r0, r3
 8021b3e:	f7ff fdeb 	bl	8021718 <OpenScript>
 8021b42:	4603      	mov	r3, r0
 8021b44:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef
		if(res == FR_OK)
 8021b48:	f897 32ef 	ldrb.w	r3, [r7, #751]	@ 0x2ef
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d14c      	bne.n	8021bea <ShHelp+0x1e2>
		{
			bc = getLine(&fp, szTypeBuf, sizeof(szTypeBuf));
 8021b50:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8021b54:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8021b58:	2250      	movs	r2, #80	@ 0x50
 8021b5a:	4618      	mov	r0, r3
 8021b5c:	f7ff fc68 	bl	8021430 <getLine>
 8021b60:	4603      	mov	r3, r0
 8021b62:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
			if(bc != 0)
 8021b66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d02b      	beq.n	8021bc6 <ShHelp+0x1be>
			{
				if(strncmp(szTypeBuf, "rem", 3) == 0)
 8021b6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8021b72:	2203      	movs	r2, #3
 8021b74:	4984      	ldr	r1, [pc, #528]	@ (8021d88 <ShHelp+0x380>)
 8021b76:	4618      	mov	r0, r3
 8021b78:	f004 fb96 	bl	80262a8 <strncmp>
 8021b7c:	4603      	mov	r3, r0
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d116      	bne.n	8021bb0 <ShHelp+0x1a8>
				{
					ShFieldOut(bPort, " - ", 0);
 8021b82:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021b86:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021b8a:	781b      	ldrb	r3, [r3, #0]
 8021b8c:	2200      	movs	r2, #0
 8021b8e:	497c      	ldr	r1, [pc, #496]	@ (8021d80 <ShHelp+0x378>)
 8021b90:	4618      	mov	r0, r3
 8021b92:	f7ff fd11 	bl	80215b8 <ShFieldOut>
					ShFieldOut(bPort, &szTypeBuf[4], 0);
 8021b96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8021b9a:	1d19      	adds	r1, r3, #4
 8021b9c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021ba0:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021ba4:	781b      	ldrb	r3, [r3, #0]
 8021ba6:	2200      	movs	r2, #0
 8021ba8:	4618      	mov	r0, r3
 8021baa:	f7ff fd05 	bl	80215b8 <ShFieldOut>
 8021bae:	e014      	b.n	8021bda <ShHelp+0x1d2>
				}
				else
				{
					ShFieldOut(bPort, " - No Help String", 0);
 8021bb0:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021bb4:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021bb8:	781b      	ldrb	r3, [r3, #0]
 8021bba:	2200      	movs	r2, #0
 8021bbc:	4973      	ldr	r1, [pc, #460]	@ (8021d8c <ShHelp+0x384>)
 8021bbe:	4618      	mov	r0, r3
 8021bc0:	f7ff fcfa 	bl	80215b8 <ShFieldOut>
 8021bc4:	e009      	b.n	8021bda <ShHelp+0x1d2>
				}
			}
			else
			{
				ShFieldOut(bPort, " - No Help String", 0);
 8021bc6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021bca:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021bce:	781b      	ldrb	r3, [r3, #0]
 8021bd0:	2200      	movs	r2, #0
 8021bd2:	496e      	ldr	r1, [pc, #440]	@ (8021d8c <ShHelp+0x384>)
 8021bd4:	4618      	mov	r0, r3
 8021bd6:	f7ff fcef 	bl	80215b8 <ShFieldOut>
			}
			f_close(&fp);
 8021bda:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8021bde:	4618      	mov	r0, r3
 8021be0:	f7f8 fede 	bl	801a9a0 <f_close>
			return CMD_OK;
 8021be4:	2300      	movs	r3, #0
 8021be6:	f000 bead 	b.w	8022944 <ShHelp+0xf3c>
		}

		res = OpenPacket(&fp, szPathVar, argv[1]);
 8021bea:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021bee:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	3304      	adds	r3, #4
 8021bf6:	681a      	ldr	r2, [r3, #0]
 8021bf8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8021bfc:	4961      	ldr	r1, [pc, #388]	@ (8021d84 <ShHelp+0x37c>)
 8021bfe:	4618      	mov	r0, r3
 8021c00:	f7ff fe46 	bl	8021890 <OpenPacket>
 8021c04:	4603      	mov	r3, r0
 8021c06:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef
		if(res == FR_OK)
 8021c0a:	f897 32ef 	ldrb.w	r3, [r7, #751]	@ 0x2ef
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d14c      	bne.n	8021cac <ShHelp+0x2a4>
		{
			bc = getLine(&fp, szTypeBuf, sizeof(szTypeBuf));
 8021c12:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8021c16:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8021c1a:	2250      	movs	r2, #80	@ 0x50
 8021c1c:	4618      	mov	r0, r3
 8021c1e:	f7ff fc07 	bl	8021430 <getLine>
 8021c22:	4603      	mov	r3, r0
 8021c24:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
			if(bc != 0)
 8021c28:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	d02b      	beq.n	8021c88 <ShHelp+0x280>
			{
				if(strncmp(szTypeBuf, "rem", 3) == 0)
 8021c30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8021c34:	2203      	movs	r2, #3
 8021c36:	4954      	ldr	r1, [pc, #336]	@ (8021d88 <ShHelp+0x380>)
 8021c38:	4618      	mov	r0, r3
 8021c3a:	f004 fb35 	bl	80262a8 <strncmp>
 8021c3e:	4603      	mov	r3, r0
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	d116      	bne.n	8021c72 <ShHelp+0x26a>
				{
					ShFieldOut(bPort, " - ", 0);
 8021c44:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021c48:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021c4c:	781b      	ldrb	r3, [r3, #0]
 8021c4e:	2200      	movs	r2, #0
 8021c50:	494b      	ldr	r1, [pc, #300]	@ (8021d80 <ShHelp+0x378>)
 8021c52:	4618      	mov	r0, r3
 8021c54:	f7ff fcb0 	bl	80215b8 <ShFieldOut>
					ShFieldOut(bPort, &szTypeBuf[4], 0);
 8021c58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8021c5c:	1d19      	adds	r1, r3, #4
 8021c5e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021c62:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021c66:	781b      	ldrb	r3, [r3, #0]
 8021c68:	2200      	movs	r2, #0
 8021c6a:	4618      	mov	r0, r3
 8021c6c:	f7ff fca4 	bl	80215b8 <ShFieldOut>
 8021c70:	e014      	b.n	8021c9c <ShHelp+0x294>
				}
				else
				{
					ShFieldOut(bPort, " - No Help String", 0);
 8021c72:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021c76:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021c7a:	781b      	ldrb	r3, [r3, #0]
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	4943      	ldr	r1, [pc, #268]	@ (8021d8c <ShHelp+0x384>)
 8021c80:	4618      	mov	r0, r3
 8021c82:	f7ff fc99 	bl	80215b8 <ShFieldOut>
 8021c86:	e009      	b.n	8021c9c <ShHelp+0x294>
				}
			}
			else
			{
				ShFieldOut(bPort, " - No Help String", 0);
 8021c88:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021c8c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021c90:	781b      	ldrb	r3, [r3, #0]
 8021c92:	2200      	movs	r2, #0
 8021c94:	493d      	ldr	r1, [pc, #244]	@ (8021d8c <ShHelp+0x384>)
 8021c96:	4618      	mov	r0, r3
 8021c98:	f7ff fc8e 	bl	80215b8 <ShFieldOut>
			}
			f_close(&fp);
 8021c9c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8021ca0:	4618      	mov	r0, r3
 8021ca2:	f7f8 fe7d 	bl	801a9a0 <f_close>
			return CMD_OK;
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	f000 be4c 	b.w	8022944 <ShHelp+0xf3c>
		}


		if(strcasecmp("-n", argv[1]) == 0)
 8021cac:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021cb0:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	3304      	adds	r3, #4
 8021cb8:	681b      	ldr	r3, [r3, #0]
 8021cba:	4619      	mov	r1, r3
 8021cbc:	4834      	ldr	r0, [pc, #208]	@ (8021d90 <ShHelp+0x388>)
 8021cbe:	f000 ff51 	bl	8022b64 <strcasecmp>
 8021cc2:	4603      	mov	r3, r0
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d167      	bne.n	8021d98 <ShHelp+0x390>
		{
			ShNL(bPort);
 8021cc8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021ccc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021cd0:	781b      	ldrb	r3, [r3, #0]
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	f7ff fcd0 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "ANSI Commands:", 0);
 8021cd8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021cdc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021ce0:	781b      	ldrb	r3, [r3, #0]
 8021ce2:	2200      	movs	r2, #0
 8021ce4:	492b      	ldr	r1, [pc, #172]	@ (8021d94 <ShHelp+0x38c>)
 8021ce6:	4618      	mov	r0, r3
 8021ce8:	f7ff fc66 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8021cec:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021cf0:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021cf4:	781b      	ldrb	r3, [r3, #0]
 8021cf6:	4618      	mov	r0, r3
 8021cf8:	f7ff fcbe 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021cfc:	2300      	movs	r3, #0
 8021cfe:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021d02:	e035      	b.n	8021d70 <ShHelp+0x368>
			{
				if(ShellTable[i].bClass == CL_ANSI)
 8021d04:	491d      	ldr	r1, [pc, #116]	@ (8021d7c <ShHelp+0x374>)
 8021d06:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021d0a:	4613      	mov	r3, r2
 8021d0c:	005b      	lsls	r3, r3, #1
 8021d0e:	4413      	add	r3, r2
 8021d10:	00db      	lsls	r3, r3, #3
 8021d12:	440b      	add	r3, r1
 8021d14:	330b      	adds	r3, #11
 8021d16:	781b      	ldrb	r3, [r3, #0]
 8021d18:	2b01      	cmp	r3, #1
 8021d1a:	d124      	bne.n	8021d66 <ShHelp+0x35e>
				{
					ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 8021d1c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021d20:	4613      	mov	r3, r2
 8021d22:	005b      	lsls	r3, r3, #1
 8021d24:	4413      	add	r3, r2
 8021d26:	00db      	lsls	r3, r3, #3
 8021d28:	4a14      	ldr	r2, [pc, #80]	@ (8021d7c <ShHelp+0x374>)
 8021d2a:	1899      	adds	r1, r3, r2
 8021d2c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021d30:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021d34:	781b      	ldrb	r3, [r3, #0]
 8021d36:	220d      	movs	r2, #13
 8021d38:	4618      	mov	r0, r3
 8021d3a:	f7ff fc3d 	bl	80215b8 <ShFieldOut>
					cnt++;
 8021d3e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021d42:	3301      	adds	r3, #1
 8021d44:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					if(cnt >= 6)
 8021d48:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021d4c:	2b05      	cmp	r3, #5
 8021d4e:	dd0a      	ble.n	8021d66 <ShHelp+0x35e>
					{
						ShNL(bPort);
 8021d50:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021d54:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021d58:	781b      	ldrb	r3, [r3, #0]
 8021d5a:	4618      	mov	r0, r3
 8021d5c:	f7ff fc8c 	bl	8021678 <ShNL>
						cnt = 0;
 8021d60:	2300      	movs	r3, #0
 8021d62:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021d66:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021d6a:	3301      	adds	r3, #1
 8021d6c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021d70:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021d74:	2b1f      	cmp	r3, #31
 8021d76:	d9c5      	bls.n	8021d04 <ShHelp+0x2fc>
 8021d78:	f000 bde3 	b.w	8022942 <ShHelp+0xf3a>
 8021d7c:	0802c054 	.word	0x0802c054
 8021d80:	0802ae40 	.word	0x0802ae40
 8021d84:	2001b5a4 	.word	0x2001b5a4
 8021d88:	0802ae44 	.word	0x0802ae44
 8021d8c:	0802ae48 	.word	0x0802ae48
 8021d90:	0802ae5c 	.word	0x0802ae5c
 8021d94:	0802ae60 	.word	0x0802ae60
					}
				}
			}
		}
		else if(strcasecmp("-f", argv[1]) == 0)
 8021d98:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021d9c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021da0:	681b      	ldr	r3, [r3, #0]
 8021da2:	3304      	adds	r3, #4
 8021da4:	681b      	ldr	r3, [r3, #0]
 8021da6:	4619      	mov	r1, r3
 8021da8:	48cb      	ldr	r0, [pc, #812]	@ (80220d8 <ShHelp+0x6d0>)
 8021daa:	f000 fedb 	bl	8022b64 <strcasecmp>
 8021dae:	4603      	mov	r3, r0
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d159      	bne.n	8021e68 <ShHelp+0x460>
		{
			ShNL(bPort);
 8021db4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021db8:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021dbc:	781b      	ldrb	r3, [r3, #0]
 8021dbe:	4618      	mov	r0, r3
 8021dc0:	f7ff fc5a 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "File Commands:", 0);
 8021dc4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021dc8:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021dcc:	781b      	ldrb	r3, [r3, #0]
 8021dce:	2200      	movs	r2, #0
 8021dd0:	49c2      	ldr	r1, [pc, #776]	@ (80220dc <ShHelp+0x6d4>)
 8021dd2:	4618      	mov	r0, r3
 8021dd4:	f7ff fbf0 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8021dd8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021ddc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021de0:	781b      	ldrb	r3, [r3, #0]
 8021de2:	4618      	mov	r0, r3
 8021de4:	f7ff fc48 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021de8:	2300      	movs	r3, #0
 8021dea:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021dee:	e035      	b.n	8021e5c <ShHelp+0x454>
			{
				if(ShellTable[i].bClass == CL_FILE)
 8021df0:	49bb      	ldr	r1, [pc, #748]	@ (80220e0 <ShHelp+0x6d8>)
 8021df2:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021df6:	4613      	mov	r3, r2
 8021df8:	005b      	lsls	r3, r3, #1
 8021dfa:	4413      	add	r3, r2
 8021dfc:	00db      	lsls	r3, r3, #3
 8021dfe:	440b      	add	r3, r1
 8021e00:	330b      	adds	r3, #11
 8021e02:	781b      	ldrb	r3, [r3, #0]
 8021e04:	2b02      	cmp	r3, #2
 8021e06:	d124      	bne.n	8021e52 <ShHelp+0x44a>
				{
					ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 8021e08:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021e0c:	4613      	mov	r3, r2
 8021e0e:	005b      	lsls	r3, r3, #1
 8021e10:	4413      	add	r3, r2
 8021e12:	00db      	lsls	r3, r3, #3
 8021e14:	4ab2      	ldr	r2, [pc, #712]	@ (80220e0 <ShHelp+0x6d8>)
 8021e16:	1899      	adds	r1, r3, r2
 8021e18:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021e1c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021e20:	781b      	ldrb	r3, [r3, #0]
 8021e22:	220d      	movs	r2, #13
 8021e24:	4618      	mov	r0, r3
 8021e26:	f7ff fbc7 	bl	80215b8 <ShFieldOut>
					cnt++;
 8021e2a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021e2e:	3301      	adds	r3, #1
 8021e30:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					if(cnt >= 6)
 8021e34:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021e38:	2b05      	cmp	r3, #5
 8021e3a:	dd0a      	ble.n	8021e52 <ShHelp+0x44a>
					{
						ShNL(bPort);
 8021e3c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021e40:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021e44:	781b      	ldrb	r3, [r3, #0]
 8021e46:	4618      	mov	r0, r3
 8021e48:	f7ff fc16 	bl	8021678 <ShNL>
						cnt = 0;
 8021e4c:	2300      	movs	r3, #0
 8021e4e:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021e52:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021e56:	3301      	adds	r3, #1
 8021e58:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021e5c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021e60:	2b1f      	cmp	r3, #31
 8021e62:	d9c5      	bls.n	8021df0 <ShHelp+0x3e8>
 8021e64:	f000 bd6d 	b.w	8022942 <ShHelp+0xf3a>
					}
				}
			}
		}
		else if(strcasecmp("-s", argv[1]) == 0)
 8021e68:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021e6c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021e70:	681b      	ldr	r3, [r3, #0]
 8021e72:	3304      	adds	r3, #4
 8021e74:	681b      	ldr	r3, [r3, #0]
 8021e76:	4619      	mov	r1, r3
 8021e78:	489a      	ldr	r0, [pc, #616]	@ (80220e4 <ShHelp+0x6dc>)
 8021e7a:	f000 fe73 	bl	8022b64 <strcasecmp>
 8021e7e:	4603      	mov	r3, r0
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d159      	bne.n	8021f38 <ShHelp+0x530>
		{
			ShNL(bPort);
 8021e84:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021e88:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021e8c:	781b      	ldrb	r3, [r3, #0]
 8021e8e:	4618      	mov	r0, r3
 8021e90:	f7ff fbf2 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "Script Commands:", 0);
 8021e94:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021e98:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021e9c:	781b      	ldrb	r3, [r3, #0]
 8021e9e:	2200      	movs	r2, #0
 8021ea0:	4991      	ldr	r1, [pc, #580]	@ (80220e8 <ShHelp+0x6e0>)
 8021ea2:	4618      	mov	r0, r3
 8021ea4:	f7ff fb88 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8021ea8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021eac:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021eb0:	781b      	ldrb	r3, [r3, #0]
 8021eb2:	4618      	mov	r0, r3
 8021eb4:	f7ff fbe0 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021eb8:	2300      	movs	r3, #0
 8021eba:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021ebe:	e035      	b.n	8021f2c <ShHelp+0x524>
			{
				if(ShellTable[i].bClass == CL_SCRIPT)
 8021ec0:	4987      	ldr	r1, [pc, #540]	@ (80220e0 <ShHelp+0x6d8>)
 8021ec2:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021ec6:	4613      	mov	r3, r2
 8021ec8:	005b      	lsls	r3, r3, #1
 8021eca:	4413      	add	r3, r2
 8021ecc:	00db      	lsls	r3, r3, #3
 8021ece:	440b      	add	r3, r1
 8021ed0:	330b      	adds	r3, #11
 8021ed2:	781b      	ldrb	r3, [r3, #0]
 8021ed4:	2b03      	cmp	r3, #3
 8021ed6:	d124      	bne.n	8021f22 <ShHelp+0x51a>
				{
					ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 8021ed8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021edc:	4613      	mov	r3, r2
 8021ede:	005b      	lsls	r3, r3, #1
 8021ee0:	4413      	add	r3, r2
 8021ee2:	00db      	lsls	r3, r3, #3
 8021ee4:	4a7e      	ldr	r2, [pc, #504]	@ (80220e0 <ShHelp+0x6d8>)
 8021ee6:	1899      	adds	r1, r3, r2
 8021ee8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021eec:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021ef0:	781b      	ldrb	r3, [r3, #0]
 8021ef2:	220d      	movs	r2, #13
 8021ef4:	4618      	mov	r0, r3
 8021ef6:	f7ff fb5f 	bl	80215b8 <ShFieldOut>
					cnt++;
 8021efa:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021efe:	3301      	adds	r3, #1
 8021f00:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					if(cnt >= 6)
 8021f04:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021f08:	2b05      	cmp	r3, #5
 8021f0a:	dd0a      	ble.n	8021f22 <ShHelp+0x51a>
					{
						ShNL(bPort);
 8021f0c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021f10:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021f14:	781b      	ldrb	r3, [r3, #0]
 8021f16:	4618      	mov	r0, r3
 8021f18:	f7ff fbae 	bl	8021678 <ShNL>
						cnt = 0;
 8021f1c:	2300      	movs	r3, #0
 8021f1e:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021f22:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021f26:	3301      	adds	r3, #1
 8021f28:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021f2c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021f30:	2b1f      	cmp	r3, #31
 8021f32:	d9c5      	bls.n	8021ec0 <ShHelp+0x4b8>
 8021f34:	f000 bd05 	b.w	8022942 <ShHelp+0xf3a>
					}
				}
			}
		}
		else if(strcasecmp("-w", argv[1]) == 0)
 8021f38:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021f3c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8021f40:	681b      	ldr	r3, [r3, #0]
 8021f42:	3304      	adds	r3, #4
 8021f44:	681b      	ldr	r3, [r3, #0]
 8021f46:	4619      	mov	r1, r3
 8021f48:	4868      	ldr	r0, [pc, #416]	@ (80220ec <ShHelp+0x6e4>)
 8021f4a:	f000 fe0b 	bl	8022b64 <strcasecmp>
 8021f4e:	4603      	mov	r3, r0
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d159      	bne.n	8022008 <ShHelp+0x600>
		{
			ShNL(bPort);
 8021f54:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021f58:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021f5c:	781b      	ldrb	r3, [r3, #0]
 8021f5e:	4618      	mov	r0, r3
 8021f60:	f7ff fb8a 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "Command Station Commands:", 0);
 8021f64:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021f68:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021f6c:	781b      	ldrb	r3, [r3, #0]
 8021f6e:	2200      	movs	r2, #0
 8021f70:	495f      	ldr	r1, [pc, #380]	@ (80220f0 <ShHelp+0x6e8>)
 8021f72:	4618      	mov	r0, r3
 8021f74:	f7ff fb20 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8021f78:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021f7c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021f80:	781b      	ldrb	r3, [r3, #0]
 8021f82:	4618      	mov	r0, r3
 8021f84:	f7ff fb78 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021f88:	2300      	movs	r3, #0
 8021f8a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021f8e:	e035      	b.n	8021ffc <ShHelp+0x5f4>
			{
				if(ShellTable[i].bClass == CL_CS)
 8021f90:	4953      	ldr	r1, [pc, #332]	@ (80220e0 <ShHelp+0x6d8>)
 8021f92:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021f96:	4613      	mov	r3, r2
 8021f98:	005b      	lsls	r3, r3, #1
 8021f9a:	4413      	add	r3, r2
 8021f9c:	00db      	lsls	r3, r3, #3
 8021f9e:	440b      	add	r3, r1
 8021fa0:	330b      	adds	r3, #11
 8021fa2:	781b      	ldrb	r3, [r3, #0]
 8021fa4:	2b04      	cmp	r3, #4
 8021fa6:	d124      	bne.n	8021ff2 <ShHelp+0x5ea>
				{
					ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 8021fa8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8021fac:	4613      	mov	r3, r2
 8021fae:	005b      	lsls	r3, r3, #1
 8021fb0:	4413      	add	r3, r2
 8021fb2:	00db      	lsls	r3, r3, #3
 8021fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80220e0 <ShHelp+0x6d8>)
 8021fb6:	1899      	adds	r1, r3, r2
 8021fb8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021fbc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021fc0:	781b      	ldrb	r3, [r3, #0]
 8021fc2:	220d      	movs	r2, #13
 8021fc4:	4618      	mov	r0, r3
 8021fc6:	f7ff faf7 	bl	80215b8 <ShFieldOut>
					cnt++;
 8021fca:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021fce:	3301      	adds	r3, #1
 8021fd0:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					if(cnt >= 6)
 8021fd4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8021fd8:	2b05      	cmp	r3, #5
 8021fda:	dd0a      	ble.n	8021ff2 <ShHelp+0x5ea>
					{
						ShNL(bPort);
 8021fdc:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8021fe0:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8021fe4:	781b      	ldrb	r3, [r3, #0]
 8021fe6:	4618      	mov	r0, r3
 8021fe8:	f7ff fb46 	bl	8021678 <ShNL>
						cnt = 0;
 8021fec:	2300      	movs	r3, #0
 8021fee:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8021ff2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8021ff6:	3301      	adds	r3, #1
 8021ff8:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8021ffc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8022000:	2b1f      	cmp	r3, #31
 8022002:	d9c5      	bls.n	8021f90 <ShHelp+0x588>
 8022004:	f000 bc9d 	b.w	8022942 <ShHelp+0xf3a>
					}
				}
			}
		}
		else if(strcasecmp("-y", argv[1]) == 0)
 8022008:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802200c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8022010:	681b      	ldr	r3, [r3, #0]
 8022012:	3304      	adds	r3, #4
 8022014:	681b      	ldr	r3, [r3, #0]
 8022016:	4619      	mov	r1, r3
 8022018:	4836      	ldr	r0, [pc, #216]	@ (80220f4 <ShHelp+0x6ec>)
 802201a:	f000 fda3 	bl	8022b64 <strcasecmp>
 802201e:	4603      	mov	r3, r0
 8022020:	2b00      	cmp	r3, #0
 8022022:	d16b      	bne.n	80220fc <ShHelp+0x6f4>
		{
			ShNL(bPort);
 8022024:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022028:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802202c:	781b      	ldrb	r3, [r3, #0]
 802202e:	4618      	mov	r0, r3
 8022030:	f7ff fb22 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "System Commands:", 0);
 8022034:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022038:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802203c:	781b      	ldrb	r3, [r3, #0]
 802203e:	2200      	movs	r2, #0
 8022040:	492d      	ldr	r1, [pc, #180]	@ (80220f8 <ShHelp+0x6f0>)
 8022042:	4618      	mov	r0, r3
 8022044:	f7ff fab8 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8022048:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802204c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022050:	781b      	ldrb	r3, [r3, #0]
 8022052:	4618      	mov	r0, r3
 8022054:	f7ff fb10 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8022058:	2300      	movs	r3, #0
 802205a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 802205e:	e035      	b.n	80220cc <ShHelp+0x6c4>
			{
				if(ShellTable[i].bClass == CL_SYS)
 8022060:	491f      	ldr	r1, [pc, #124]	@ (80220e0 <ShHelp+0x6d8>)
 8022062:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8022066:	4613      	mov	r3, r2
 8022068:	005b      	lsls	r3, r3, #1
 802206a:	4413      	add	r3, r2
 802206c:	00db      	lsls	r3, r3, #3
 802206e:	440b      	add	r3, r1
 8022070:	330b      	adds	r3, #11
 8022072:	781b      	ldrb	r3, [r3, #0]
 8022074:	2b05      	cmp	r3, #5
 8022076:	d124      	bne.n	80220c2 <ShHelp+0x6ba>
				{
					ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 8022078:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 802207c:	4613      	mov	r3, r2
 802207e:	005b      	lsls	r3, r3, #1
 8022080:	4413      	add	r3, r2
 8022082:	00db      	lsls	r3, r3, #3
 8022084:	4a16      	ldr	r2, [pc, #88]	@ (80220e0 <ShHelp+0x6d8>)
 8022086:	1899      	adds	r1, r3, r2
 8022088:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802208c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022090:	781b      	ldrb	r3, [r3, #0]
 8022092:	220d      	movs	r2, #13
 8022094:	4618      	mov	r0, r3
 8022096:	f7ff fa8f 	bl	80215b8 <ShFieldOut>
					cnt++;
 802209a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 802209e:	3301      	adds	r3, #1
 80220a0:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					if(cnt >= 6)
 80220a4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80220a8:	2b05      	cmp	r3, #5
 80220aa:	dd0a      	ble.n	80220c2 <ShHelp+0x6ba>
					{
						ShNL(bPort);
 80220ac:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80220b0:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80220b4:	781b      	ldrb	r3, [r3, #0]
 80220b6:	4618      	mov	r0, r3
 80220b8:	f7ff fade 	bl	8021678 <ShNL>
						cnt = 0;
 80220bc:	2300      	movs	r3, #0
 80220be:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 80220c2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80220c6:	3301      	adds	r3, #1
 80220c8:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80220cc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80220d0:	2b1f      	cmp	r3, #31
 80220d2:	d9c5      	bls.n	8022060 <ShHelp+0x658>
 80220d4:	f000 bc35 	b.w	8022942 <ShHelp+0xf3a>
 80220d8:	0802ae70 	.word	0x0802ae70
 80220dc:	0802ae74 	.word	0x0802ae74
 80220e0:	0802c054 	.word	0x0802c054
 80220e4:	0802ae84 	.word	0x0802ae84
 80220e8:	0802ae88 	.word	0x0802ae88
 80220ec:	0802ae9c 	.word	0x0802ae9c
 80220f0:	0802aea0 	.word	0x0802aea0
 80220f4:	0802aebc 	.word	0x0802aebc
 80220f8:	0802aec0 	.word	0x0802aec0
					}
				}
			}
		}
		else if(strcasecmp("-t", argv[1]) == 0)
 80220fc:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022100:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8022104:	681b      	ldr	r3, [r3, #0]
 8022106:	3304      	adds	r3, #4
 8022108:	681b      	ldr	r3, [r3, #0]
 802210a:	4619      	mov	r1, r3
 802210c:	4873      	ldr	r0, [pc, #460]	@ (80222dc <ShHelp+0x8d4>)
 802210e:	f000 fd29 	bl	8022b64 <strcasecmp>
 8022112:	4603      	mov	r3, r0
 8022114:	2b00      	cmp	r3, #0
 8022116:	d158      	bne.n	80221ca <ShHelp+0x7c2>
		{
			ShNL(bPort);
 8022118:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802211c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022120:	781b      	ldrb	r3, [r3, #0]
 8022122:	4618      	mov	r0, r3
 8022124:	f7ff faa8 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "Test Commands:", 0);
 8022128:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802212c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022130:	781b      	ldrb	r3, [r3, #0]
 8022132:	2200      	movs	r2, #0
 8022134:	496a      	ldr	r1, [pc, #424]	@ (80222e0 <ShHelp+0x8d8>)
 8022136:	4618      	mov	r0, r3
 8022138:	f7ff fa3e 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 802213c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022140:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022144:	781b      	ldrb	r3, [r3, #0]
 8022146:	4618      	mov	r0, r3
 8022148:	f7ff fa96 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 802214c:	2300      	movs	r3, #0
 802214e:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8022152:	e035      	b.n	80221c0 <ShHelp+0x7b8>
			{
				if(ShellTable[i].bClass == CL_TEST)
 8022154:	4963      	ldr	r1, [pc, #396]	@ (80222e4 <ShHelp+0x8dc>)
 8022156:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 802215a:	4613      	mov	r3, r2
 802215c:	005b      	lsls	r3, r3, #1
 802215e:	4413      	add	r3, r2
 8022160:	00db      	lsls	r3, r3, #3
 8022162:	440b      	add	r3, r1
 8022164:	330b      	adds	r3, #11
 8022166:	781b      	ldrb	r3, [r3, #0]
 8022168:	2b06      	cmp	r3, #6
 802216a:	d124      	bne.n	80221b6 <ShHelp+0x7ae>
				{
					ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 802216c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8022170:	4613      	mov	r3, r2
 8022172:	005b      	lsls	r3, r3, #1
 8022174:	4413      	add	r3, r2
 8022176:	00db      	lsls	r3, r3, #3
 8022178:	4a5a      	ldr	r2, [pc, #360]	@ (80222e4 <ShHelp+0x8dc>)
 802217a:	1899      	adds	r1, r3, r2
 802217c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022180:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022184:	781b      	ldrb	r3, [r3, #0]
 8022186:	220d      	movs	r2, #13
 8022188:	4618      	mov	r0, r3
 802218a:	f7ff fa15 	bl	80215b8 <ShFieldOut>
					cnt++;
 802218e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8022192:	3301      	adds	r3, #1
 8022194:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					if(cnt >= 6)
 8022198:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 802219c:	2b05      	cmp	r3, #5
 802219e:	dd0a      	ble.n	80221b6 <ShHelp+0x7ae>
					{
						ShNL(bPort);
 80221a0:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80221a4:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80221a8:	781b      	ldrb	r3, [r3, #0]
 80221aa:	4618      	mov	r0, r3
 80221ac:	f7ff fa64 	bl	8021678 <ShNL>
						cnt = 0;
 80221b0:	2300      	movs	r3, #0
 80221b2:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 80221b6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80221ba:	3301      	adds	r3, #1
 80221bc:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80221c0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80221c4:	2b1f      	cmp	r3, #31
 80221c6:	d9c5      	bls.n	8022154 <ShHelp+0x74c>
 80221c8:	e3bb      	b.n	8022942 <ShHelp+0xf3a>
					}
				}
			}
		}
		else if(strcasecmp("-a", argv[1]) == 0)
 80221ca:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80221ce:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	3304      	adds	r3, #4
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	4619      	mov	r1, r3
 80221da:	4843      	ldr	r0, [pc, #268]	@ (80222e8 <ShHelp+0x8e0>)
 80221dc:	f000 fcc2 	bl	8022b64 <strcasecmp>
 80221e0:	4603      	mov	r3, r0
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	d14c      	bne.n	8022280 <ShHelp+0x878>
		{
			ShNL(bPort);
 80221e6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80221ea:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80221ee:	781b      	ldrb	r3, [r3, #0]
 80221f0:	4618      	mov	r0, r3
 80221f2:	f7ff fa41 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "All Commands:", 0);
 80221f6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80221fa:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80221fe:	781b      	ldrb	r3, [r3, #0]
 8022200:	2200      	movs	r2, #0
 8022202:	493a      	ldr	r1, [pc, #232]	@ (80222ec <ShHelp+0x8e4>)
 8022204:	4618      	mov	r0, r3
 8022206:	f7ff f9d7 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 802220a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802220e:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022212:	781b      	ldrb	r3, [r3, #0]
 8022214:	4618      	mov	r0, r3
 8022216:	f7ff fa2f 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 802221a:	2300      	movs	r3, #0
 802221c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8022220:	e029      	b.n	8022276 <ShHelp+0x86e>
			{
				ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 8022222:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8022226:	4613      	mov	r3, r2
 8022228:	005b      	lsls	r3, r3, #1
 802222a:	4413      	add	r3, r2
 802222c:	00db      	lsls	r3, r3, #3
 802222e:	4a2d      	ldr	r2, [pc, #180]	@ (80222e4 <ShHelp+0x8dc>)
 8022230:	1899      	adds	r1, r3, r2
 8022232:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022236:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802223a:	781b      	ldrb	r3, [r3, #0]
 802223c:	220d      	movs	r2, #13
 802223e:	4618      	mov	r0, r3
 8022240:	f7ff f9ba 	bl	80215b8 <ShFieldOut>
				cnt++;
 8022244:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8022248:	3301      	adds	r3, #1
 802224a:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
				if(cnt >= 6)
 802224e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8022252:	2b05      	cmp	r3, #5
 8022254:	dd0a      	ble.n	802226c <ShHelp+0x864>
				{
					ShNL(bPort);
 8022256:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802225a:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802225e:	781b      	ldrb	r3, [r3, #0]
 8022260:	4618      	mov	r0, r3
 8022262:	f7ff fa09 	bl	8021678 <ShNL>
					cnt = 0;
 8022266:	2300      	movs	r3, #0
 8022268:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 802226c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8022270:	3301      	adds	r3, #1
 8022272:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8022276:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 802227a:	2b1f      	cmp	r3, #31
 802227c:	d9d1      	bls.n	8022222 <ShHelp+0x81a>
 802227e:	e360      	b.n	8022942 <ShHelp+0xf3a>
				}
			}
		}
		else if(strcasecmp("-c", argv[1]) == 0)
 8022280:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022284:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	3304      	adds	r3, #4
 802228c:	681b      	ldr	r3, [r3, #0]
 802228e:	4619      	mov	r1, r3
 8022290:	4817      	ldr	r0, [pc, #92]	@ (80222f0 <ShHelp+0x8e8>)
 8022292:	f000 fc67 	bl	8022b64 <strcasecmp>
 8022296:	4603      	mov	r3, r0
 8022298:	2b00      	cmp	r3, #0
 802229a:	f040 8137 	bne.w	802250c <ShHelp+0xb04>
		{
			ShNL(bPort);
 802229e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80222a2:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80222a6:	781b      	ldrb	r3, [r3, #0]
 80222a8:	4618      	mov	r0, r3
 80222aa:	f7ff f9e5 	bl	8021678 <ShNL>

			ShFieldOut(bPort, "All Commands:", 0);
 80222ae:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80222b2:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80222b6:	781b      	ldrb	r3, [r3, #0]
 80222b8:	2200      	movs	r2, #0
 80222ba:	490c      	ldr	r1, [pc, #48]	@ (80222ec <ShHelp+0x8e4>)
 80222bc:	4618      	mov	r0, r3
 80222be:	f7ff f97b 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 80222c2:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80222c6:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80222ca:	781b      	ldrb	r3, [r3, #0]
 80222cc:	4618      	mov	r0, r3
 80222ce:	f7ff f9d3 	bl	8021678 <ShNL>
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 80222d2:	2300      	movs	r3, #0
 80222d4:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80222d8:	e053      	b.n	8022382 <ShHelp+0x97a>
 80222da:	bf00      	nop
 80222dc:	0802aed4 	.word	0x0802aed4
 80222e0:	0802aed8 	.word	0x0802aed8
 80222e4:	0802c054 	.word	0x0802c054
 80222e8:	0802aee8 	.word	0x0802aee8
 80222ec:	0802aeec 	.word	0x0802aeec
 80222f0:	0802aefc 	.word	0x0802aefc
			{
				TextColor(bPort, ShellColor[Theme][ShellTable[i].bClass], BG_Default, ATT_Bold);
 80222f4:	4bc7      	ldr	r3, [pc, #796]	@ (8022614 <ShHelp+0xc0c>)
 80222f6:	681a      	ldr	r2, [r3, #0]
 80222f8:	48c7      	ldr	r0, [pc, #796]	@ (8022618 <ShHelp+0xc10>)
 80222fa:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 80222fe:	460b      	mov	r3, r1
 8022300:	005b      	lsls	r3, r3, #1
 8022302:	440b      	add	r3, r1
 8022304:	00db      	lsls	r3, r3, #3
 8022306:	4403      	add	r3, r0
 8022308:	330b      	adds	r3, #11
 802230a:	781b      	ldrb	r3, [r3, #0]
 802230c:	4618      	mov	r0, r3
 802230e:	49c3      	ldr	r1, [pc, #780]	@ (802261c <ShHelp+0xc14>)
 8022310:	4613      	mov	r3, r2
 8022312:	00db      	lsls	r3, r3, #3
 8022314:	1a9b      	subs	r3, r3, r2
 8022316:	440b      	add	r3, r1
 8022318:	4403      	add	r3, r0
 802231a:	7819      	ldrb	r1, [r3, #0]
 802231c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022320:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022324:	7818      	ldrb	r0, [r3, #0]
 8022326:	2301      	movs	r3, #1
 8022328:	2231      	movs	r2, #49	@ 0x31
 802232a:	f7ff f80f 	bl	802134c <TextColor>
				ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 802232e:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8022332:	4613      	mov	r3, r2
 8022334:	005b      	lsls	r3, r3, #1
 8022336:	4413      	add	r3, r2
 8022338:	00db      	lsls	r3, r3, #3
 802233a:	4ab7      	ldr	r2, [pc, #732]	@ (8022618 <ShHelp+0xc10>)
 802233c:	1899      	adds	r1, r3, r2
 802233e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022342:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022346:	781b      	ldrb	r3, [r3, #0]
 8022348:	220d      	movs	r2, #13
 802234a:	4618      	mov	r0, r3
 802234c:	f7ff f934 	bl	80215b8 <ShFieldOut>
				cnt++;
 8022350:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8022354:	3301      	adds	r3, #1
 8022356:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
				if(cnt >= 6)
 802235a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 802235e:	2b05      	cmp	r3, #5
 8022360:	dd0a      	ble.n	8022378 <ShHelp+0x970>
				{
					ShNL(bPort);
 8022362:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022366:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802236a:	781b      	ldrb	r3, [r3, #0]
 802236c:	4618      	mov	r0, r3
 802236e:	f7ff f983 	bl	8021678 <ShNL>
					cnt = 0;
 8022372:	2300      	movs	r3, #0
 8022374:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
			for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8022378:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 802237c:	3301      	adds	r3, #1
 802237e:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8022382:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8022386:	2b1f      	cmp	r3, #31
 8022388:	d9b4      	bls.n	80222f4 <ShHelp+0x8ec>
				}
			}

			//TextColor(bPort, ShellColor[0], BG_Black, ATT_Bold);
			//ShFieldOut(bPort, "Default ", 0);
			ShNL(bPort);
 802238a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802238e:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022392:	781b      	ldrb	r3, [r3, #0]
 8022394:	4618      	mov	r0, r3
 8022396:	f7ff f96f 	bl	8021678 <ShNL>
			TextColor(bPort, ShellColor[Theme][1], BG_Default, ATT_Bold);
 802239a:	4b9e      	ldr	r3, [pc, #632]	@ (8022614 <ShHelp+0xc0c>)
 802239c:	681a      	ldr	r2, [r3, #0]
 802239e:	499f      	ldr	r1, [pc, #636]	@ (802261c <ShHelp+0xc14>)
 80223a0:	4613      	mov	r3, r2
 80223a2:	00db      	lsls	r3, r3, #3
 80223a4:	1a9b      	subs	r3, r3, r2
 80223a6:	440b      	add	r3, r1
 80223a8:	3301      	adds	r3, #1
 80223aa:	7819      	ldrb	r1, [r3, #0]
 80223ac:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80223b0:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80223b4:	7818      	ldrb	r0, [r3, #0]
 80223b6:	2301      	movs	r3, #1
 80223b8:	2231      	movs	r2, #49	@ 0x31
 80223ba:	f7fe ffc7 	bl	802134c <TextColor>
			ShFieldOut(bPort, "ANSI ", 0);
 80223be:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80223c2:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80223c6:	781b      	ldrb	r3, [r3, #0]
 80223c8:	2200      	movs	r2, #0
 80223ca:	4995      	ldr	r1, [pc, #596]	@ (8022620 <ShHelp+0xc18>)
 80223cc:	4618      	mov	r0, r3
 80223ce:	f7ff f8f3 	bl	80215b8 <ShFieldOut>
			TextColor(bPort, ShellColor[Theme][2], BG_Default, ATT_Bold);
 80223d2:	4b90      	ldr	r3, [pc, #576]	@ (8022614 <ShHelp+0xc0c>)
 80223d4:	681a      	ldr	r2, [r3, #0]
 80223d6:	4991      	ldr	r1, [pc, #580]	@ (802261c <ShHelp+0xc14>)
 80223d8:	4613      	mov	r3, r2
 80223da:	00db      	lsls	r3, r3, #3
 80223dc:	1a9b      	subs	r3, r3, r2
 80223de:	440b      	add	r3, r1
 80223e0:	3302      	adds	r3, #2
 80223e2:	7819      	ldrb	r1, [r3, #0]
 80223e4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80223e8:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80223ec:	7818      	ldrb	r0, [r3, #0]
 80223ee:	2301      	movs	r3, #1
 80223f0:	2231      	movs	r2, #49	@ 0x31
 80223f2:	f7fe ffab 	bl	802134c <TextColor>
			ShFieldOut(bPort, "File ", 0);
 80223f6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80223fa:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80223fe:	781b      	ldrb	r3, [r3, #0]
 8022400:	2200      	movs	r2, #0
 8022402:	4988      	ldr	r1, [pc, #544]	@ (8022624 <ShHelp+0xc1c>)
 8022404:	4618      	mov	r0, r3
 8022406:	f7ff f8d7 	bl	80215b8 <ShFieldOut>
			TextColor(bPort, ShellColor[Theme][3], BG_Default, ATT_Bold);
 802240a:	4b82      	ldr	r3, [pc, #520]	@ (8022614 <ShHelp+0xc0c>)
 802240c:	681a      	ldr	r2, [r3, #0]
 802240e:	4983      	ldr	r1, [pc, #524]	@ (802261c <ShHelp+0xc14>)
 8022410:	4613      	mov	r3, r2
 8022412:	00db      	lsls	r3, r3, #3
 8022414:	1a9b      	subs	r3, r3, r2
 8022416:	440b      	add	r3, r1
 8022418:	3303      	adds	r3, #3
 802241a:	7819      	ldrb	r1, [r3, #0]
 802241c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022420:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022424:	7818      	ldrb	r0, [r3, #0]
 8022426:	2301      	movs	r3, #1
 8022428:	2231      	movs	r2, #49	@ 0x31
 802242a:	f7fe ff8f 	bl	802134c <TextColor>
			ShFieldOut(bPort, "Script ", 0);
 802242e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022432:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022436:	781b      	ldrb	r3, [r3, #0]
 8022438:	2200      	movs	r2, #0
 802243a:	497b      	ldr	r1, [pc, #492]	@ (8022628 <ShHelp+0xc20>)
 802243c:	4618      	mov	r0, r3
 802243e:	f7ff f8bb 	bl	80215b8 <ShFieldOut>
			TextColor(bPort, ShellColor[Theme][4], BG_Default, ATT_Bold);
 8022442:	4b74      	ldr	r3, [pc, #464]	@ (8022614 <ShHelp+0xc0c>)
 8022444:	681a      	ldr	r2, [r3, #0]
 8022446:	4975      	ldr	r1, [pc, #468]	@ (802261c <ShHelp+0xc14>)
 8022448:	4613      	mov	r3, r2
 802244a:	00db      	lsls	r3, r3, #3
 802244c:	1a9b      	subs	r3, r3, r2
 802244e:	440b      	add	r3, r1
 8022450:	3304      	adds	r3, #4
 8022452:	7819      	ldrb	r1, [r3, #0]
 8022454:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022458:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802245c:	7818      	ldrb	r0, [r3, #0]
 802245e:	2301      	movs	r3, #1
 8022460:	2231      	movs	r2, #49	@ 0x31
 8022462:	f7fe ff73 	bl	802134c <TextColor>
			ShFieldOut(bPort, "CS ", 0);
 8022466:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802246a:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802246e:	781b      	ldrb	r3, [r3, #0]
 8022470:	2200      	movs	r2, #0
 8022472:	496e      	ldr	r1, [pc, #440]	@ (802262c <ShHelp+0xc24>)
 8022474:	4618      	mov	r0, r3
 8022476:	f7ff f89f 	bl	80215b8 <ShFieldOut>
			TextColor(bPort, ShellColor[Theme][5], BG_Default, ATT_Bold);
 802247a:	4b66      	ldr	r3, [pc, #408]	@ (8022614 <ShHelp+0xc0c>)
 802247c:	681a      	ldr	r2, [r3, #0]
 802247e:	4967      	ldr	r1, [pc, #412]	@ (802261c <ShHelp+0xc14>)
 8022480:	4613      	mov	r3, r2
 8022482:	00db      	lsls	r3, r3, #3
 8022484:	1a9b      	subs	r3, r3, r2
 8022486:	440b      	add	r3, r1
 8022488:	3305      	adds	r3, #5
 802248a:	7819      	ldrb	r1, [r3, #0]
 802248c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022490:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022494:	7818      	ldrb	r0, [r3, #0]
 8022496:	2301      	movs	r3, #1
 8022498:	2231      	movs	r2, #49	@ 0x31
 802249a:	f7fe ff57 	bl	802134c <TextColor>
			ShFieldOut(bPort, "Sys ", 0);
 802249e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80224a2:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80224a6:	781b      	ldrb	r3, [r3, #0]
 80224a8:	2200      	movs	r2, #0
 80224aa:	4961      	ldr	r1, [pc, #388]	@ (8022630 <ShHelp+0xc28>)
 80224ac:	4618      	mov	r0, r3
 80224ae:	f7ff f883 	bl	80215b8 <ShFieldOut>
			TextColor(bPort, ShellColor[Theme][6], BG_Default, ATT_Bold);
 80224b2:	4b58      	ldr	r3, [pc, #352]	@ (8022614 <ShHelp+0xc0c>)
 80224b4:	681a      	ldr	r2, [r3, #0]
 80224b6:	4959      	ldr	r1, [pc, #356]	@ (802261c <ShHelp+0xc14>)
 80224b8:	4613      	mov	r3, r2
 80224ba:	00db      	lsls	r3, r3, #3
 80224bc:	1a9b      	subs	r3, r3, r2
 80224be:	440b      	add	r3, r1
 80224c0:	3306      	adds	r3, #6
 80224c2:	7819      	ldrb	r1, [r3, #0]
 80224c4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80224c8:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80224cc:	7818      	ldrb	r0, [r3, #0]
 80224ce:	2301      	movs	r3, #1
 80224d0:	2231      	movs	r2, #49	@ 0x31
 80224d2:	f7fe ff3b 	bl	802134c <TextColor>
			ShFieldOut(bPort, "Test ", 0);
 80224d6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80224da:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80224de:	781b      	ldrb	r3, [r3, #0]
 80224e0:	2200      	movs	r2, #0
 80224e2:	4954      	ldr	r1, [pc, #336]	@ (8022634 <ShHelp+0xc2c>)
 80224e4:	4618      	mov	r0, r3
 80224e6:	f7ff f867 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 80224ea:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80224ee:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80224f2:	781b      	ldrb	r3, [r3, #0]
 80224f4:	4618      	mov	r0, r3
 80224f6:	f7ff f8bf 	bl	8021678 <ShNL>

			ResetColor(bPort);
 80224fa:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80224fe:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022502:	781b      	ldrb	r3, [r3, #0]
 8022504:	4618      	mov	r0, r3
 8022506:	f7fe ff49 	bl	802139c <ResetColor>
 802250a:	e21a      	b.n	8022942 <ShHelp+0xf3a>
		}
		else
		{
			return CMD_NOT_FOUND;
 802250c:	2302      	movs	r3, #2
 802250e:	e219      	b.n	8022944 <ShHelp+0xf3c>
		}
	}
	else
	{
		ShNL(bPort);
 8022510:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022514:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022518:	781b      	ldrb	r3, [r3, #0]
 802251a:	4618      	mov	r0, r3
 802251c:	f7ff f8ac 	bl	8021678 <ShNL>

		ShFieldOut(bPort, "Commands:", 0);
 8022520:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022524:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	2200      	movs	r2, #0
 802252c:	4942      	ldr	r1, [pc, #264]	@ (8022638 <ShHelp+0xc30>)
 802252e:	4618      	mov	r0, r3
 8022530:	f7ff f842 	bl	80215b8 <ShFieldOut>
		ShNL(bPort);
 8022534:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022538:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802253c:	781b      	ldrb	r3, [r3, #0]
 802253e:	4618      	mov	r0, r3
 8022540:	f7ff f89a 	bl	8021678 <ShNL>
		for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8022544:	2300      	movs	r3, #0
 8022546:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 802254a:	e036      	b.n	80225ba <ShHelp+0xbb2>
		{
			if((ShellTable[i].bFlags & SUPPRESS_HELP) == 0)
 802254c:	4932      	ldr	r1, [pc, #200]	@ (8022618 <ShHelp+0xc10>)
 802254e:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8022552:	4613      	mov	r3, r2
 8022554:	005b      	lsls	r3, r3, #1
 8022556:	4413      	add	r3, r2
 8022558:	00db      	lsls	r3, r3, #3
 802255a:	440b      	add	r3, r1
 802255c:	330c      	adds	r3, #12
 802255e:	781b      	ldrb	r3, [r3, #0]
 8022560:	b25b      	sxtb	r3, r3
 8022562:	2b00      	cmp	r3, #0
 8022564:	db24      	blt.n	80225b0 <ShHelp+0xba8>
			{
				ShFieldOut(bPort, (char*)ShellTable[i].szCommand, HELP_FIELD_WIDTH);
 8022566:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 802256a:	4613      	mov	r3, r2
 802256c:	005b      	lsls	r3, r3, #1
 802256e:	4413      	add	r3, r2
 8022570:	00db      	lsls	r3, r3, #3
 8022572:	4a29      	ldr	r2, [pc, #164]	@ (8022618 <ShHelp+0xc10>)
 8022574:	1899      	adds	r1, r3, r2
 8022576:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802257a:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802257e:	781b      	ldrb	r3, [r3, #0]
 8022580:	220d      	movs	r2, #13
 8022582:	4618      	mov	r0, r3
 8022584:	f7ff f818 	bl	80215b8 <ShFieldOut>
				cnt++;
 8022588:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 802258c:	3301      	adds	r3, #1
 802258e:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
				if(cnt >= 6)
 8022592:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8022596:	2b05      	cmp	r3, #5
 8022598:	dd0a      	ble.n	80225b0 <ShHelp+0xba8>
				{
					ShNL(bPort);
 802259a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802259e:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80225a2:	781b      	ldrb	r3, [r3, #0]
 80225a4:	4618      	mov	r0, r3
 80225a6:	f7ff f867 	bl	8021678 <ShNL>
					cnt = 0;
 80225aa:	2300      	movs	r3, #0
 80225ac:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
		for(i = 0; i < SHELL_TABLE_COUNT; i++)
 80225b0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80225b4:	3301      	adds	r3, #1
 80225b6:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80225ba:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80225be:	2b1f      	cmp	r3, #31
 80225c0:	d9c4      	bls.n	802254c <ShHelp+0xb44>
				}
			}
		}

		cnt = 0;
 80225c2:	2300      	movs	r3, #0
 80225c4:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
		ShNL(bPort);
 80225c8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80225cc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80225d0:	781b      	ldrb	r3, [r3, #0]
 80225d2:	4618      	mov	r0, r3
 80225d4:	f7ff f850 	bl	8021678 <ShNL>
		ShNL(bPort);
 80225d8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80225dc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80225e0:	781b      	ldrb	r3, [r3, #0]
 80225e2:	4618      	mov	r0, r3
 80225e4:	f7ff f848 	bl	8021678 <ShNL>
		ShFieldOut(bPort, "Variables:", 0);
 80225e8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80225ec:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80225f0:	781b      	ldrb	r3, [r3, #0]
 80225f2:	2200      	movs	r2, #0
 80225f4:	4911      	ldr	r1, [pc, #68]	@ (802263c <ShHelp+0xc34>)
 80225f6:	4618      	mov	r0, r3
 80225f8:	f7fe ffde 	bl	80215b8 <ShFieldOut>
		ShNL(bPort);
 80225fc:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022600:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022604:	781b      	ldrb	r3, [r3, #0]
 8022606:	4618      	mov	r0, r3
 8022608:	f7ff f836 	bl	8021678 <ShNL>
		for(i = 0; i < GetNumVariables(); i++)
 802260c:	2300      	movs	r3, #0
 802260e:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8022612:	e047      	b.n	80226a4 <ShHelp+0xc9c>
 8022614:	2001b598 	.word	0x2001b598
 8022618:	0802c054 	.word	0x0802c054
 802261c:	0802c044 	.word	0x0802c044
 8022620:	0802af00 	.word	0x0802af00
 8022624:	0802af08 	.word	0x0802af08
 8022628:	0802af10 	.word	0x0802af10
 802262c:	0802af18 	.word	0x0802af18
 8022630:	0802af1c 	.word	0x0802af1c
 8022634:	0802af24 	.word	0x0802af24
 8022638:	0802af2c 	.word	0x0802af2c
 802263c:	0802af38 	.word	0x0802af38
		{
			if(IsVariableVisible(i))
 8022640:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8022644:	b2db      	uxtb	r3, r3
 8022646:	4618      	mov	r0, r3
 8022648:	f7e6 fb66 	bl	8008d18 <IsVariableVisible>
 802264c:	4603      	mov	r3, r0
 802264e:	2b00      	cmp	r3, #0
 8022650:	d023      	beq.n	802269a <ShHelp+0xc92>
			{
				ShFieldOut(bPort, GetVariableName(i), HELP_FIELD_WIDTH);
 8022652:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8022656:	b2db      	uxtb	r3, r3
 8022658:	4618      	mov	r0, r3
 802265a:	f7e6 fb0b 	bl	8008c74 <GetVariableName>
 802265e:	4601      	mov	r1, r0
 8022660:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022664:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022668:	781b      	ldrb	r3, [r3, #0]
 802266a:	220d      	movs	r2, #13
 802266c:	4618      	mov	r0, r3
 802266e:	f7fe ffa3 	bl	80215b8 <ShFieldOut>
				cnt++;
 8022672:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8022676:	3301      	adds	r3, #1
 8022678:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
				if(cnt >= 6)
 802267c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8022680:	2b05      	cmp	r3, #5
 8022682:	dd0a      	ble.n	802269a <ShHelp+0xc92>
				{
					ShNL(bPort);
 8022684:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022688:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802268c:	781b      	ldrb	r3, [r3, #0]
 802268e:	4618      	mov	r0, r3
 8022690:	f7fe fff2 	bl	8021678 <ShNL>
					cnt = 0;
 8022694:	2300      	movs	r3, #0
 8022696:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
		for(i = 0; i < GetNumVariables(); i++)
 802269a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 802269e:	3301      	adds	r3, #1
 80226a0:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80226a4:	f7e6 fade 	bl	8008c64 <GetNumVariables>
 80226a8:	4602      	mov	r2, r0
 80226aa:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80226ae:	4293      	cmp	r3, r2
 80226b0:	dbc6      	blt.n	8022640 <ShHelp+0xc38>
				}
			}
		}


		cnt = 0;
 80226b2:	2300      	movs	r3, #0
 80226b4:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
		ShNL(bPort);
 80226b8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80226bc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80226c0:	781b      	ldrb	r3, [r3, #0]
 80226c2:	4618      	mov	r0, r3
 80226c4:	f7fe ffd8 	bl	8021678 <ShNL>
		ShNL(bPort);
 80226c8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80226cc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80226d0:	781b      	ldrb	r3, [r3, #0]
 80226d2:	4618      	mov	r0, r3
 80226d4:	f7fe ffd0 	bl	8021678 <ShNL>
		ShFieldOut(bPort, "Scripts:", 0);
 80226d8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80226dc:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80226e0:	781b      	ldrb	r3, [r3, #0]
 80226e2:	2200      	movs	r2, #0
 80226e4:	499a      	ldr	r1, [pc, #616]	@ (8022950 <ShHelp+0xf48>)
 80226e6:	4618      	mov	r0, r3
 80226e8:	f7fe ff66 	bl	80215b8 <ShFieldOut>
		ShNL(bPort);
 80226ec:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80226f0:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80226f4:	781b      	ldrb	r3, [r3, #0]
 80226f6:	4618      	mov	r0, r3
 80226f8:	f7fe ffbe 	bl	8021678 <ShNL>

		pEnvPath = szPathVar;
 80226fc:	4b95      	ldr	r3, [pc, #596]	@ (8022954 <ShHelp+0xf4c>)
 80226fe:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
		while((len = GetNextPath(pEnvPath, pPath)) != 0)
 8022702:	e06d      	b.n	80227e0 <ShHelp+0xdd8>
		{
			// use pPath
			res = f_opendir(&dir, pPath);                       /* Open the directory */
 8022704:	f107 0210 	add.w	r2, r7, #16
 8022708:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 802270c:	4611      	mov	r1, r2
 802270e:	4618      	mov	r0, r3
 8022710:	f7f8 fd10 	bl	801b134 <f_opendir>
 8022714:	4603      	mov	r3, r0
 8022716:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef
			if (res == FR_OK)
 802271a:	f897 32ef 	ldrb.w	r3, [r7, #751]	@ 0x2ef
 802271e:	2b00      	cmp	r3, #0
 8022720:	d156      	bne.n	80227d0 <ShHelp+0xdc8>
			{
				for (;;)
				{
					res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8022722:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8022726:	498c      	ldr	r1, [pc, #560]	@ (8022958 <ShHelp+0xf50>)
 8022728:	4618      	mov	r0, r3
 802272a:	f7f8 fda7 	bl	801b27c <f_readdir>
 802272e:	4603      	mov	r3, r0
 8022730:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef
					if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8022734:	f897 32ef 	ldrb.w	r3, [r7, #751]	@ 0x2ef
 8022738:	2b00      	cmp	r3, #0
 802273a:	d144      	bne.n	80227c6 <ShHelp+0xdbe>
 802273c:	4b86      	ldr	r3, [pc, #536]	@ (8022958 <ShHelp+0xf50>)
 802273e:	7a5b      	ldrb	r3, [r3, #9]
 8022740:	2b00      	cmp	r3, #0
 8022742:	d040      	beq.n	80227c6 <ShHelp+0xdbe>
					if (!(fno.fattrib & AM_DIR))
 8022744:	4b84      	ldr	r3, [pc, #528]	@ (8022958 <ShHelp+0xf50>)
 8022746:	7a1b      	ldrb	r3, [r3, #8]
 8022748:	f003 0310 	and.w	r3, r3, #16
 802274c:	2b00      	cmp	r3, #0
 802274e:	d1e8      	bne.n	8022722 <ShHelp+0xd1a>
					{
						/* It is a file. */
						int len = strlen(fno.fname) - 4;
 8022750:	4882      	ldr	r0, [pc, #520]	@ (802295c <ShHelp+0xf54>)
 8022752:	f7dd fda7 	bl	80002a4 <strlen>
 8022756:	4603      	mov	r3, r0
 8022758:	3b04      	subs	r3, #4
 802275a:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
						strcpy(szTypeBuf, &fno.fname[len]);
 802275e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8022762:	3308      	adds	r3, #8
 8022764:	4a7c      	ldr	r2, [pc, #496]	@ (8022958 <ShHelp+0xf50>)
 8022766:	4413      	add	r3, r2
 8022768:	1c5a      	adds	r2, r3, #1
 802276a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 802276e:	4611      	mov	r1, r2
 8022770:	4618      	mov	r0, r3
 8022772:	f003 fe76 	bl	8026462 <strcpy>
						if(strcmp(szTypeBuf, ".SCP") == 0)
 8022776:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 802277a:	4979      	ldr	r1, [pc, #484]	@ (8022960 <ShHelp+0xf58>)
 802277c:	4618      	mov	r0, r3
 802277e:	f7dd fd87 	bl	8000290 <strcmp>
 8022782:	4603      	mov	r3, r0
 8022784:	2b00      	cmp	r3, #0
 8022786:	d1cc      	bne.n	8022722 <ShHelp+0xd1a>
						//if(strcmp(fno.fname, "CONFIG.INI") != 0)
						{
							ShFieldOut(bPort, fno.fname, HELP_FIELD_WIDTH);
 8022788:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 802278c:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022790:	781b      	ldrb	r3, [r3, #0]
 8022792:	220d      	movs	r2, #13
 8022794:	4971      	ldr	r1, [pc, #452]	@ (802295c <ShHelp+0xf54>)
 8022796:	4618      	mov	r0, r3
 8022798:	f7fe ff0e 	bl	80215b8 <ShFieldOut>
							cnt++;
 802279c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80227a0:	3301      	adds	r3, #1
 80227a2:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
							if(cnt >= 6)
 80227a6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80227aa:	2b05      	cmp	r3, #5
 80227ac:	ddb9      	ble.n	8022722 <ShHelp+0xd1a>
							{
								ShNL(bPort);
 80227ae:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80227b2:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80227b6:	781b      	ldrb	r3, [r3, #0]
 80227b8:	4618      	mov	r0, r3
 80227ba:	f7fe ff5d 	bl	8021678 <ShNL>
								cnt = 0;
 80227be:	2300      	movs	r3, #0
 80227c0:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80227c4:	e7ad      	b.n	8022722 <ShHelp+0xd1a>
							}
						}
					}
				}
				f_closedir(&dir);
 80227c6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80227ca:	4618      	mov	r0, r3
 80227cc:	f7f8 fd2b 	bl	801b226 <f_closedir>
			}

			pEnvPath += len+1;
 80227d0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80227d4:	3301      	adds	r3, #1
 80227d6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 80227da:	4413      	add	r3, r2
 80227dc:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
		while((len = GetNextPath(pEnvPath, pPath)) != 0)
 80227e0:	f107 0310 	add.w	r3, r7, #16
 80227e4:	4619      	mov	r1, r3
 80227e6:	f8d7 02f4 	ldr.w	r0, [r7, #756]	@ 0x2f4
 80227ea:	f7e7 f87d 	bl	80098e8 <GetNextPath>
 80227ee:	f8c7 02f0 	str.w	r0, [r7, #752]	@ 0x2f0
 80227f2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80227f6:	2b00      	cmp	r3, #0
 80227f8:	d184      	bne.n	8022704 <ShHelp+0xcfc>
		}


		cnt = 0;
 80227fa:	2300      	movs	r3, #0
 80227fc:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
		ShNL(bPort);
 8022800:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022804:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022808:	781b      	ldrb	r3, [r3, #0]
 802280a:	4618      	mov	r0, r3
 802280c:	f7fe ff34 	bl	8021678 <ShNL>
		ShNL(bPort);
 8022810:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022814:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022818:	781b      	ldrb	r3, [r3, #0]
 802281a:	4618      	mov	r0, r3
 802281c:	f7fe ff2c 	bl	8021678 <ShNL>
		ShFieldOut(bPort, "Packets:", 0);
 8022820:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022824:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 8022828:	781b      	ldrb	r3, [r3, #0]
 802282a:	2200      	movs	r2, #0
 802282c:	494d      	ldr	r1, [pc, #308]	@ (8022964 <ShHelp+0xf5c>)
 802282e:	4618      	mov	r0, r3
 8022830:	f7fe fec2 	bl	80215b8 <ShFieldOut>
		ShNL(bPort);
 8022834:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8022838:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 802283c:	781b      	ldrb	r3, [r3, #0]
 802283e:	4618      	mov	r0, r3
 8022840:	f7fe ff1a 	bl	8021678 <ShNL>

		pEnvPath = szPathVar;
 8022844:	4b43      	ldr	r3, [pc, #268]	@ (8022954 <ShHelp+0xf4c>)
 8022846:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
		while((len = GetNextPath(pEnvPath, pPath)) != 0)
 802284a:	e06d      	b.n	8022928 <ShHelp+0xf20>
		{
			// use pPath
			res = f_opendir(&dir, pPath);                       /* Open the directory */
 802284c:	f107 0210 	add.w	r2, r7, #16
 8022850:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8022854:	4611      	mov	r1, r2
 8022856:	4618      	mov	r0, r3
 8022858:	f7f8 fc6c 	bl	801b134 <f_opendir>
 802285c:	4603      	mov	r3, r0
 802285e:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef
			if (res == FR_OK)
 8022862:	f897 32ef 	ldrb.w	r3, [r7, #751]	@ 0x2ef
 8022866:	2b00      	cmp	r3, #0
 8022868:	d156      	bne.n	8022918 <ShHelp+0xf10>
			{
				for (;;)
				{
					res = f_readdir(&dir, &fno);                   /* Read a directory item */
 802286a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 802286e:	493a      	ldr	r1, [pc, #232]	@ (8022958 <ShHelp+0xf50>)
 8022870:	4618      	mov	r0, r3
 8022872:	f7f8 fd03 	bl	801b27c <f_readdir>
 8022876:	4603      	mov	r3, r0
 8022878:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef
					if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 802287c:	f897 32ef 	ldrb.w	r3, [r7, #751]	@ 0x2ef
 8022880:	2b00      	cmp	r3, #0
 8022882:	d144      	bne.n	802290e <ShHelp+0xf06>
 8022884:	4b34      	ldr	r3, [pc, #208]	@ (8022958 <ShHelp+0xf50>)
 8022886:	7a5b      	ldrb	r3, [r3, #9]
 8022888:	2b00      	cmp	r3, #0
 802288a:	d040      	beq.n	802290e <ShHelp+0xf06>
					if (!(fno.fattrib & AM_DIR))
 802288c:	4b32      	ldr	r3, [pc, #200]	@ (8022958 <ShHelp+0xf50>)
 802288e:	7a1b      	ldrb	r3, [r3, #8]
 8022890:	f003 0310 	and.w	r3, r3, #16
 8022894:	2b00      	cmp	r3, #0
 8022896:	d1e8      	bne.n	802286a <ShHelp+0xe62>
					{
						/* It is a file. */
						int len = strlen(fno.fname) - 4;
 8022898:	4830      	ldr	r0, [pc, #192]	@ (802295c <ShHelp+0xf54>)
 802289a:	f7dd fd03 	bl	80002a4 <strlen>
 802289e:	4603      	mov	r3, r0
 80228a0:	3b04      	subs	r3, #4
 80228a2:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
						strcpy(szTypeBuf, &fno.fname[len]);
 80228a6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80228aa:	3308      	adds	r3, #8
 80228ac:	4a2a      	ldr	r2, [pc, #168]	@ (8022958 <ShHelp+0xf50>)
 80228ae:	4413      	add	r3, r2
 80228b0:	1c5a      	adds	r2, r3, #1
 80228b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80228b6:	4611      	mov	r1, r2
 80228b8:	4618      	mov	r0, r3
 80228ba:	f003 fdd2 	bl	8026462 <strcpy>
						if(strcmp(szTypeBuf, ".PKT") == 0)
 80228be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80228c2:	4929      	ldr	r1, [pc, #164]	@ (8022968 <ShHelp+0xf60>)
 80228c4:	4618      	mov	r0, r3
 80228c6:	f7dd fce3 	bl	8000290 <strcmp>
 80228ca:	4603      	mov	r3, r0
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	d1cc      	bne.n	802286a <ShHelp+0xe62>
						//if(strcmp(fno.fname, "CONFIG.INI") != 0)
						{
							ShFieldOut(bPort, fno.fname, HELP_FIELD_WIDTH);
 80228d0:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80228d4:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80228d8:	781b      	ldrb	r3, [r3, #0]
 80228da:	220d      	movs	r2, #13
 80228dc:	491f      	ldr	r1, [pc, #124]	@ (802295c <ShHelp+0xf54>)
 80228de:	4618      	mov	r0, r3
 80228e0:	f7fe fe6a 	bl	80215b8 <ShFieldOut>
							cnt++;
 80228e4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80228e8:	3301      	adds	r3, #1
 80228ea:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
							if(cnt >= 6)
 80228ee:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80228f2:	2b05      	cmp	r3, #5
 80228f4:	ddb9      	ble.n	802286a <ShHelp+0xe62>
							{
								ShNL(bPort);
 80228f6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80228fa:	f2a3 23f1 	subw	r3, r3, #753	@ 0x2f1
 80228fe:	781b      	ldrb	r3, [r3, #0]
 8022900:	4618      	mov	r0, r3
 8022902:	f7fe feb9 	bl	8021678 <ShNL>
								cnt = 0;
 8022906:	2300      	movs	r3, #0
 8022908:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
					res = f_readdir(&dir, &fno);                   /* Read a directory item */
 802290c:	e7ad      	b.n	802286a <ShHelp+0xe62>
							}
						}
					}
				}
				f_closedir(&dir);
 802290e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8022912:	4618      	mov	r0, r3
 8022914:	f7f8 fc87 	bl	801b226 <f_closedir>
			}

			pEnvPath += len+1;
 8022918:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 802291c:	3301      	adds	r3, #1
 802291e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8022922:	4413      	add	r3, r2
 8022924:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
		while((len = GetNextPath(pEnvPath, pPath)) != 0)
 8022928:	f107 0310 	add.w	r3, r7, #16
 802292c:	4619      	mov	r1, r3
 802292e:	f8d7 02f4 	ldr.w	r0, [r7, #756]	@ 0x2f4
 8022932:	f7e6 ffd9 	bl	80098e8 <GetNextPath>
 8022936:	f8c7 02f0 	str.w	r0, [r7, #752]	@ 0x2f0
 802293a:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 802293e:	2b00      	cmp	r3, #0
 8022940:	d184      	bne.n	802284c <ShHelp+0xe44>
		}
	}

	return CMD_OK;
 8022942:	2300      	movs	r3, #0
}
 8022944:	4618      	mov	r0, r3
 8022946:	f507 7740 	add.w	r7, r7, #768	@ 0x300
 802294a:	46bd      	mov	sp, r7
 802294c:	bd80      	pop	{r7, pc}
 802294e:	bf00      	nop
 8022950:	0802af44 	.word	0x0802af44
 8022954:	2001b5a4 	.word	0x2001b5a4
 8022958:	2001e40c 	.word	0x2001e40c
 802295c:	2001e415 	.word	0x2001e415
 8022960:	0802af50 	.word	0x0802af50
 8022964:	0802af58 	.word	0x0802af58
 8022968:	0802af64 	.word	0x0802af64

0802296c <ShRem>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShRem(uint8_t bPort, int argc, char *argv[])
{
 802296c:	b480      	push	{r7}
 802296e:	b085      	sub	sp, #20
 8022970:	af00      	add	r7, sp, #0
 8022972:	4603      	mov	r3, r0
 8022974:	60b9      	str	r1, [r7, #8]
 8022976:	607a      	str	r2, [r7, #4]
 8022978:	73fb      	strb	r3, [r7, #15]
	return CMD_OK;
 802297a:	2300      	movs	r3, #0
}
 802297c:	4618      	mov	r0, r3
 802297e:	3714      	adds	r7, #20
 8022980:	46bd      	mov	sp, r7
 8022982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022986:	4770      	bx	lr

08022988 <ShDelay>:
* @return	CMD_RETURN - shell result
* @remark	The script delay (thread aware) is handled in the run script method
*
*********************************************************************/
CMD_RETURN ShDelay(uint8_t bPort, int argc, char *argv[])
{
 8022988:	b580      	push	{r7, lr}
 802298a:	b086      	sub	sp, #24
 802298c:	af00      	add	r7, sp, #0
 802298e:	4603      	mov	r3, r0
 8022990:	60b9      	str	r1, [r7, #8]
 8022992:	607a      	str	r2, [r7, #4]
 8022994:	73fb      	strb	r3, [r7, #15]
	int iDelayCount;

	iDelayCount = atoi(argv[1]);
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	3304      	adds	r3, #4
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	4618      	mov	r0, r3
 802299e:	f002 fd0f 	bl	80253c0 <atoi>
 80229a2:	6178      	str	r0, [r7, #20]

	osDelay(pdMS_TO_TICKS(10));
 80229a4:	200a      	movs	r0, #10
 80229a6:	f7f9 fabf 	bl	801bf28 <osDelay>

	return CMD_OK;
 80229aa:	2300      	movs	r3, #0
}
 80229ac:	4618      	mov	r0, r3
 80229ae:	3718      	adds	r7, #24
 80229b0:	46bd      	mov	sp, r7
 80229b2:	bd80      	pop	{r7, pc}

080229b4 <ShEcho>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShEcho(uint8_t bPort, int argc, char *argv[])
{
 80229b4:	b580      	push	{r7, lr}
 80229b6:	b084      	sub	sp, #16
 80229b8:	af00      	add	r7, sp, #0
 80229ba:	4603      	mov	r3, r0
 80229bc:	60b9      	str	r1, [r7, #8]
 80229be:	607a      	str	r2, [r7, #4]
 80229c0:	73fb      	strb	r3, [r7, #15]

	if(argc >= 2)
 80229c2:	68bb      	ldr	r3, [r7, #8]
 80229c4:	2b01      	cmp	r3, #1
 80229c6:	dd25      	ble.n	8022a14 <ShEcho+0x60>
	{
		if(strcasecmp(argv[1], "cr") == 0)
 80229c8:	687b      	ldr	r3, [r7, #4]
 80229ca:	3304      	adds	r3, #4
 80229cc:	681b      	ldr	r3, [r3, #0]
 80229ce:	4924      	ldr	r1, [pc, #144]	@ (8022a60 <ShEcho+0xac>)
 80229d0:	4618      	mov	r0, r3
 80229d2:	f000 f8c7 	bl	8022b64 <strcasecmp>
 80229d6:	4603      	mov	r3, r0
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d104      	bne.n	80229e6 <ShEcho+0x32>
		{
		    ShCR(bPort);
 80229dc:	7bfb      	ldrb	r3, [r7, #15]
 80229de:	4618      	mov	r0, r3
 80229e0:	f7fe fe5d 	bl	802169e <ShCR>
 80229e4:	e016      	b.n	8022a14 <ShEcho+0x60>
		}
		else if(strcasecmp(argv[1], "nl") == 0)
 80229e6:	687b      	ldr	r3, [r7, #4]
 80229e8:	3304      	adds	r3, #4
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	491d      	ldr	r1, [pc, #116]	@ (8022a64 <ShEcho+0xb0>)
 80229ee:	4618      	mov	r0, r3
 80229f0:	f000 f8b8 	bl	8022b64 <strcasecmp>
 80229f4:	4603      	mov	r3, r0
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	d104      	bne.n	8022a04 <ShEcho+0x50>
		{
			ShNL(bPort);
 80229fa:	7bfb      	ldrb	r3, [r7, #15]
 80229fc:	4618      	mov	r0, r3
 80229fe:	f7fe fe3b 	bl	8021678 <ShNL>
 8022a02:	e007      	b.n	8022a14 <ShEcho+0x60>
			// echo "#normal#\n"

			// echo "#normal#\rInput 1 is %l" "inputs && 1 :: ON|OFF
			//    echo "#green#ON\n"

			ShFieldOut(bPort, argv[1], 0);
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	3304      	adds	r3, #4
 8022a08:	6819      	ldr	r1, [r3, #0]
 8022a0a:	7bfb      	ldrb	r3, [r7, #15]
 8022a0c:	2200      	movs	r2, #0
 8022a0e:	4618      	mov	r0, r3
 8022a10:	f7fe fdd2 	bl	80215b8 <ShFieldOut>
		}
	}

	if(argc == 3)
 8022a14:	68bb      	ldr	r3, [r7, #8]
 8022a16:	2b03      	cmp	r3, #3
 8022a18:	d11c      	bne.n	8022a54 <ShEcho+0xa0>
	{
		if(strcasecmp(argv[2], "cr") == 0)
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	3308      	adds	r3, #8
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	490f      	ldr	r1, [pc, #60]	@ (8022a60 <ShEcho+0xac>)
 8022a22:	4618      	mov	r0, r3
 8022a24:	f000 f89e 	bl	8022b64 <strcasecmp>
 8022a28:	4603      	mov	r3, r0
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	d104      	bne.n	8022a38 <ShEcho+0x84>
		{
		    ShCR(bPort);
 8022a2e:	7bfb      	ldrb	r3, [r7, #15]
 8022a30:	4618      	mov	r0, r3
 8022a32:	f7fe fe34 	bl	802169e <ShCR>
 8022a36:	e00d      	b.n	8022a54 <ShEcho+0xa0>
		}
		else if(strcasecmp(argv[2], "nl") == 0)
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	3308      	adds	r3, #8
 8022a3c:	681b      	ldr	r3, [r3, #0]
 8022a3e:	4909      	ldr	r1, [pc, #36]	@ (8022a64 <ShEcho+0xb0>)
 8022a40:	4618      	mov	r0, r3
 8022a42:	f000 f88f 	bl	8022b64 <strcasecmp>
 8022a46:	4603      	mov	r3, r0
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d103      	bne.n	8022a54 <ShEcho+0xa0>
		{
		    ShNL(bPort);
 8022a4c:	7bfb      	ldrb	r3, [r7, #15]
 8022a4e:	4618      	mov	r0, r3
 8022a50:	f7fe fe12 	bl	8021678 <ShNL>
		}
	}
	return CMD_OK;
 8022a54:	2300      	movs	r3, #0
}
 8022a56:	4618      	mov	r0, r3
 8022a58:	3710      	adds	r7, #16
 8022a5a:	46bd      	mov	sp, r7
 8022a5c:	bd80      	pop	{r7, pc}
 8022a5e:	bf00      	nop
 8022a60:	0802af6c 	.word	0x0802af6c
 8022a64:	0802af70 	.word	0x0802af70

08022a68 <ShClrScreen>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShClrScreen(uint8_t bPort, int argc, char *argv[])
{
 8022a68:	b580      	push	{r7, lr}
 8022a6a:	b084      	sub	sp, #16
 8022a6c:	af00      	add	r7, sp, #0
 8022a6e:	4603      	mov	r3, r0
 8022a70:	60b9      	str	r1, [r7, #8]
 8022a72:	607a      	str	r2, [r7, #4]
 8022a74:	73fb      	strb	r3, [r7, #15]
    ClearScreen(bPort);
 8022a76:	7bfb      	ldrb	r3, [r7, #15]
 8022a78:	4618      	mov	r0, r3
 8022a7a:	f7fe fc2b 	bl	80212d4 <ClearScreen>
    return CMD_OK;
 8022a7e:	2300      	movs	r3, #0
}
 8022a80:	4618      	mov	r0, r3
 8022a82:	3710      	adds	r7, #16
 8022a84:	46bd      	mov	sp, r7
 8022a86:	bd80      	pop	{r7, pc}

08022a88 <ShClrEOL>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShClrEOL(uint8_t bPort, int argc, char *argv[])
{
 8022a88:	b580      	push	{r7, lr}
 8022a8a:	b084      	sub	sp, #16
 8022a8c:	af00      	add	r7, sp, #0
 8022a8e:	4603      	mov	r3, r0
 8022a90:	60b9      	str	r1, [r7, #8]
 8022a92:	607a      	str	r2, [r7, #4]
 8022a94:	73fb      	strb	r3, [r7, #15]
    ClearEOL(bPort);
 8022a96:	7bfb      	ldrb	r3, [r7, #15]
 8022a98:	4618      	mov	r0, r3
 8022a9a:	f7fe fc2b 	bl	80212f4 <ClearEOL>
    return CMD_OK;
 8022a9e:	2300      	movs	r3, #0
}
 8022aa0:	4618      	mov	r0, r3
 8022aa2:	3710      	adds	r7, #16
 8022aa4:	46bd      	mov	sp, r7
 8022aa6:	bd80      	pop	{r7, pc}

08022aa8 <ShGotoXY>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShGotoXY(uint8_t bPort, int argc, char *argv[])
{
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b086      	sub	sp, #24
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	4603      	mov	r3, r0
 8022ab0:	60b9      	str	r1, [r7, #8]
 8022ab2:	607a      	str	r2, [r7, #4]
 8022ab4:	73fb      	strb	r3, [r7, #15]
    int x, y;

    if(argc == 3)
 8022ab6:	68bb      	ldr	r3, [r7, #8]
 8022ab8:	2b03      	cmp	r3, #3
 8022aba:	d115      	bne.n	8022ae8 <ShGotoXY+0x40>
    {
        x = atoi(argv[1]);
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	3304      	adds	r3, #4
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	4618      	mov	r0, r3
 8022ac4:	f002 fc7c 	bl	80253c0 <atoi>
 8022ac8:	6178      	str	r0, [r7, #20]
        y = atoi(argv[2]);
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	3308      	adds	r3, #8
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	4618      	mov	r0, r3
 8022ad2:	f002 fc75 	bl	80253c0 <atoi>
 8022ad6:	6138      	str	r0, [r7, #16]
        GoToXY(bPort, x, y);
 8022ad8:	7bfb      	ldrb	r3, [r7, #15]
 8022ada:	693a      	ldr	r2, [r7, #16]
 8022adc:	6979      	ldr	r1, [r7, #20]
 8022ade:	4618      	mov	r0, r3
 8022ae0:	f7fe fc18 	bl	8021314 <GoToXY>
        return CMD_OK;
 8022ae4:	2300      	movs	r3, #0
 8022ae6:	e000      	b.n	8022aea <ShGotoXY+0x42>
    }
    return CMD_BAD_PARAMS;
 8022ae8:	2301      	movs	r3, #1
}
 8022aea:	4618      	mov	r0, r3
 8022aec:	3718      	adds	r7, #24
 8022aee:	46bd      	mov	sp, r7
 8022af0:	bd80      	pop	{r7, pc}
	...

08022af4 <ShCursor>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShCursor(uint8_t bPort, int argc, char *argv[])
{
 8022af4:	b580      	push	{r7, lr}
 8022af6:	b084      	sub	sp, #16
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	4603      	mov	r3, r0
 8022afc:	60b9      	str	r1, [r7, #8]
 8022afe:	607a      	str	r2, [r7, #4]
 8022b00:	73fb      	strb	r3, [r7, #15]

    if(argc == 2)
 8022b02:	68bb      	ldr	r3, [r7, #8]
 8022b04:	2b02      	cmp	r3, #2
 8022b06:	d123      	bne.n	8022b50 <ShCursor+0x5c>
    {
		if(strcmp(argv[1], "save") == 0)
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	3304      	adds	r3, #4
 8022b0c:	681b      	ldr	r3, [r3, #0]
 8022b0e:	4913      	ldr	r1, [pc, #76]	@ (8022b5c <ShCursor+0x68>)
 8022b10:	4618      	mov	r0, r3
 8022b12:	f7dd fbbd 	bl	8000290 <strcmp>
 8022b16:	4603      	mov	r3, r0
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	d105      	bne.n	8022b28 <ShCursor+0x34>
		{
			Cursor(bPort, 1);
 8022b1c:	7bfb      	ldrb	r3, [r7, #15]
 8022b1e:	2101      	movs	r1, #1
 8022b20:	4618      	mov	r0, r3
 8022b22:	f7fe fc4b 	bl	80213bc <Cursor>
 8022b26:	e011      	b.n	8022b4c <ShCursor+0x58>
		}
		else if(strcmp(argv[1], "restore") == 0)
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	3304      	adds	r3, #4
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	490c      	ldr	r1, [pc, #48]	@ (8022b60 <ShCursor+0x6c>)
 8022b30:	4618      	mov	r0, r3
 8022b32:	f7dd fbad 	bl	8000290 <strcmp>
 8022b36:	4603      	mov	r3, r0
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	d105      	bne.n	8022b48 <ShCursor+0x54>
		{
			Cursor(bPort, 0);
 8022b3c:	7bfb      	ldrb	r3, [r7, #15]
 8022b3e:	2100      	movs	r1, #0
 8022b40:	4618      	mov	r0, r3
 8022b42:	f7fe fc3b 	bl	80213bc <Cursor>
 8022b46:	e001      	b.n	8022b4c <ShCursor+0x58>
		}
		else
		{
			return CMD_BAD_PARAMS;
 8022b48:	2301      	movs	r3, #1
 8022b4a:	e002      	b.n	8022b52 <ShCursor+0x5e>
		}
        return CMD_OK;
 8022b4c:	2300      	movs	r3, #0
 8022b4e:	e000      	b.n	8022b52 <ShCursor+0x5e>
    }
    return CMD_BAD_PARAMS;
 8022b50:	2301      	movs	r3, #1
}
 8022b52:	4618      	mov	r0, r3
 8022b54:	3710      	adds	r7, #16
 8022b56:	46bd      	mov	sp, r7
 8022b58:	bd80      	pop	{r7, pc}
 8022b5a:	bf00      	nop
 8022b5c:	0802af74 	.word	0x0802af74
 8022b60:	0802af7c 	.word	0x0802af7c

08022b64 <strcasecmp>:
*
* @return	1 = match
*
*********************************************************************/
int strcmpi(char const *a, char const *b)
{
 8022b64:	b480      	push	{r7}
 8022b66:	b085      	sub	sp, #20
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	6078      	str	r0, [r7, #4]
 8022b6c:	6039      	str	r1, [r7, #0]
    for (;; a++, b++)
    {
        int d = tolower(*a) - tolower(*b);
 8022b6e:	687b      	ldr	r3, [r7, #4]
 8022b70:	781b      	ldrb	r3, [r3, #0]
 8022b72:	73fb      	strb	r3, [r7, #15]
 8022b74:	7bfb      	ldrb	r3, [r7, #15]
 8022b76:	3301      	adds	r3, #1
 8022b78:	4a19      	ldr	r2, [pc, #100]	@ (8022be0 <strcasecmp+0x7c>)
 8022b7a:	4413      	add	r3, r2
 8022b7c:	781b      	ldrb	r3, [r3, #0]
 8022b7e:	f003 0303 	and.w	r3, r3, #3
 8022b82:	2b01      	cmp	r3, #1
 8022b84:	d103      	bne.n	8022b8e <strcasecmp+0x2a>
 8022b86:	7bfb      	ldrb	r3, [r7, #15]
 8022b88:	f103 0220 	add.w	r2, r3, #32
 8022b8c:	e000      	b.n	8022b90 <strcasecmp+0x2c>
 8022b8e:	7bfa      	ldrb	r2, [r7, #15]
 8022b90:	683b      	ldr	r3, [r7, #0]
 8022b92:	781b      	ldrb	r3, [r3, #0]
 8022b94:	73bb      	strb	r3, [r7, #14]
 8022b96:	7bbb      	ldrb	r3, [r7, #14]
 8022b98:	3301      	adds	r3, #1
 8022b9a:	4911      	ldr	r1, [pc, #68]	@ (8022be0 <strcasecmp+0x7c>)
 8022b9c:	440b      	add	r3, r1
 8022b9e:	781b      	ldrb	r3, [r3, #0]
 8022ba0:	f003 0303 	and.w	r3, r3, #3
 8022ba4:	2b01      	cmp	r3, #1
 8022ba6:	d102      	bne.n	8022bae <strcasecmp+0x4a>
 8022ba8:	7bbb      	ldrb	r3, [r7, #14]
 8022baa:	3320      	adds	r3, #32
 8022bac:	e000      	b.n	8022bb0 <strcasecmp+0x4c>
 8022bae:	7bbb      	ldrb	r3, [r7, #14]
 8022bb0:	1ad3      	subs	r3, r2, r3
 8022bb2:	60bb      	str	r3, [r7, #8]
        if (d != 0 || !*a)
 8022bb4:	68bb      	ldr	r3, [r7, #8]
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d103      	bne.n	8022bc2 <strcasecmp+0x5e>
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	781b      	ldrb	r3, [r3, #0]
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d101      	bne.n	8022bc6 <strcasecmp+0x62>
            return d;
 8022bc2:	68bb      	ldr	r3, [r7, #8]
 8022bc4:	e006      	b.n	8022bd4 <strcasecmp+0x70>
    for (;; a++, b++)
 8022bc6:	687b      	ldr	r3, [r7, #4]
 8022bc8:	3301      	adds	r3, #1
 8022bca:	607b      	str	r3, [r7, #4]
 8022bcc:	683b      	ldr	r3, [r7, #0]
 8022bce:	3301      	adds	r3, #1
 8022bd0:	603b      	str	r3, [r7, #0]
    {
 8022bd2:	e7cc      	b.n	8022b6e <strcasecmp+0xa>
    }
    return 0;
}
 8022bd4:	4618      	mov	r0, r3
 8022bd6:	3714      	adds	r7, #20
 8022bd8:	46bd      	mov	sp, r7
 8022bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bde:	4770      	bx	lr
 8022be0:	0802c3d0 	.word	0x0802c3d0

08022be4 <GetColorOffset>:
*
* @return	color index
*
*********************************************************************/
int GetColorOffset(char* c)
{
 8022be4:	b580      	push	{r7, lr}
 8022be6:	b082      	sub	sp, #8
 8022be8:	af00      	add	r7, sp, #0
 8022bea:	6078      	str	r0, [r7, #4]
    if(strcmpi(c, "black") == 0)    return 0;
 8022bec:	4926      	ldr	r1, [pc, #152]	@ (8022c88 <GetColorOffset+0xa4>)
 8022bee:	6878      	ldr	r0, [r7, #4]
 8022bf0:	f7ff ffb8 	bl	8022b64 <strcasecmp>
 8022bf4:	4603      	mov	r3, r0
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d101      	bne.n	8022bfe <GetColorOffset+0x1a>
 8022bfa:	2300      	movs	r3, #0
 8022bfc:	e040      	b.n	8022c80 <GetColorOffset+0x9c>
    if(strcmpi(c, "red") == 0)      return 1;
 8022bfe:	4923      	ldr	r1, [pc, #140]	@ (8022c8c <GetColorOffset+0xa8>)
 8022c00:	6878      	ldr	r0, [r7, #4]
 8022c02:	f7ff ffaf 	bl	8022b64 <strcasecmp>
 8022c06:	4603      	mov	r3, r0
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	d101      	bne.n	8022c10 <GetColorOffset+0x2c>
 8022c0c:	2301      	movs	r3, #1
 8022c0e:	e037      	b.n	8022c80 <GetColorOffset+0x9c>
    if(strcmpi(c, "green") == 0)    return 2;
 8022c10:	491f      	ldr	r1, [pc, #124]	@ (8022c90 <GetColorOffset+0xac>)
 8022c12:	6878      	ldr	r0, [r7, #4]
 8022c14:	f7ff ffa6 	bl	8022b64 <strcasecmp>
 8022c18:	4603      	mov	r3, r0
 8022c1a:	2b00      	cmp	r3, #0
 8022c1c:	d101      	bne.n	8022c22 <GetColorOffset+0x3e>
 8022c1e:	2302      	movs	r3, #2
 8022c20:	e02e      	b.n	8022c80 <GetColorOffset+0x9c>
    if(strcmpi(c, "yellow") == 0)   return 3;
 8022c22:	491c      	ldr	r1, [pc, #112]	@ (8022c94 <GetColorOffset+0xb0>)
 8022c24:	6878      	ldr	r0, [r7, #4]
 8022c26:	f7ff ff9d 	bl	8022b64 <strcasecmp>
 8022c2a:	4603      	mov	r3, r0
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	d101      	bne.n	8022c34 <GetColorOffset+0x50>
 8022c30:	2303      	movs	r3, #3
 8022c32:	e025      	b.n	8022c80 <GetColorOffset+0x9c>
    if(strcmpi(c, "blue") == 0)     return 4;
 8022c34:	4918      	ldr	r1, [pc, #96]	@ (8022c98 <GetColorOffset+0xb4>)
 8022c36:	6878      	ldr	r0, [r7, #4]
 8022c38:	f7ff ff94 	bl	8022b64 <strcasecmp>
 8022c3c:	4603      	mov	r3, r0
 8022c3e:	2b00      	cmp	r3, #0
 8022c40:	d101      	bne.n	8022c46 <GetColorOffset+0x62>
 8022c42:	2304      	movs	r3, #4
 8022c44:	e01c      	b.n	8022c80 <GetColorOffset+0x9c>
    if(strcmpi(c, "purple") == 0)   return 5;
 8022c46:	4915      	ldr	r1, [pc, #84]	@ (8022c9c <GetColorOffset+0xb8>)
 8022c48:	6878      	ldr	r0, [r7, #4]
 8022c4a:	f7ff ff8b 	bl	8022b64 <strcasecmp>
 8022c4e:	4603      	mov	r3, r0
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	d101      	bne.n	8022c58 <GetColorOffset+0x74>
 8022c54:	2305      	movs	r3, #5
 8022c56:	e013      	b.n	8022c80 <GetColorOffset+0x9c>
    if(strcmpi(c, "cyan") == 0)     return 6;
 8022c58:	4911      	ldr	r1, [pc, #68]	@ (8022ca0 <GetColorOffset+0xbc>)
 8022c5a:	6878      	ldr	r0, [r7, #4]
 8022c5c:	f7ff ff82 	bl	8022b64 <strcasecmp>
 8022c60:	4603      	mov	r3, r0
 8022c62:	2b00      	cmp	r3, #0
 8022c64:	d101      	bne.n	8022c6a <GetColorOffset+0x86>
 8022c66:	2306      	movs	r3, #6
 8022c68:	e00a      	b.n	8022c80 <GetColorOffset+0x9c>
    if(strcmpi(c, "white") == 0)    return 7;
 8022c6a:	490e      	ldr	r1, [pc, #56]	@ (8022ca4 <GetColorOffset+0xc0>)
 8022c6c:	6878      	ldr	r0, [r7, #4]
 8022c6e:	f7ff ff79 	bl	8022b64 <strcasecmp>
 8022c72:	4603      	mov	r3, r0
 8022c74:	2b00      	cmp	r3, #0
 8022c76:	d101      	bne.n	8022c7c <GetColorOffset+0x98>
 8022c78:	2307      	movs	r3, #7
 8022c7a:	e001      	b.n	8022c80 <GetColorOffset+0x9c>
    return -1;
 8022c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022c80:	4618      	mov	r0, r3
 8022c82:	3708      	adds	r7, #8
 8022c84:	46bd      	mov	sp, r7
 8022c86:	bd80      	pop	{r7, pc}
 8022c88:	0802af84 	.word	0x0802af84
 8022c8c:	0802af8c 	.word	0x0802af8c
 8022c90:	0802af90 	.word	0x0802af90
 8022c94:	0802af98 	.word	0x0802af98
 8022c98:	0802afa0 	.word	0x0802afa0
 8022c9c:	0802afa8 	.word	0x0802afa8
 8022ca0:	0802afb0 	.word	0x0802afb0
 8022ca4:	0802afb8 	.word	0x0802afb8

08022ca8 <GetAttribute>:
*
* @return	attribute index
*
*********************************************************************/
int GetAttribute(char* c)
{
 8022ca8:	b580      	push	{r7, lr}
 8022caa:	b082      	sub	sp, #8
 8022cac:	af00      	add	r7, sp, #0
 8022cae:	6078      	str	r0, [r7, #4]
    if(strcmpi(c, "normal") == 0)    return 0;
 8022cb0:	4958      	ldr	r1, [pc, #352]	@ (8022e14 <GetAttribute+0x16c>)
 8022cb2:	6878      	ldr	r0, [r7, #4]
 8022cb4:	f7ff ff56 	bl	8022b64 <strcasecmp>
 8022cb8:	4603      	mov	r3, r0
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d101      	bne.n	8022cc2 <GetAttribute+0x1a>
 8022cbe:	2300      	movs	r3, #0
 8022cc0:	e0a3      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "bold") == 0)      return 1;
 8022cc2:	4955      	ldr	r1, [pc, #340]	@ (8022e18 <GetAttribute+0x170>)
 8022cc4:	6878      	ldr	r0, [r7, #4]
 8022cc6:	f7ff ff4d 	bl	8022b64 <strcasecmp>
 8022cca:	4603      	mov	r3, r0
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d101      	bne.n	8022cd4 <GetAttribute+0x2c>
 8022cd0:	2301      	movs	r3, #1
 8022cd2:	e09a      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "underline") == 0) return 4;
 8022cd4:	4951      	ldr	r1, [pc, #324]	@ (8022e1c <GetAttribute+0x174>)
 8022cd6:	6878      	ldr	r0, [r7, #4]
 8022cd8:	f7ff ff44 	bl	8022b64 <strcasecmp>
 8022cdc:	4603      	mov	r3, r0
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d101      	bne.n	8022ce6 <GetAttribute+0x3e>
 8022ce2:	2304      	movs	r3, #4
 8022ce4:	e091      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "blink") == 0)     return 5;
 8022ce6:	494e      	ldr	r1, [pc, #312]	@ (8022e20 <GetAttribute+0x178>)
 8022ce8:	6878      	ldr	r0, [r7, #4]
 8022cea:	f7ff ff3b 	bl	8022b64 <strcasecmp>
 8022cee:	4603      	mov	r3, r0
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d101      	bne.n	8022cf8 <GetAttribute+0x50>
 8022cf4:	2305      	movs	r3, #5
 8022cf6:	e088      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "negative") == 0)  return 7;
 8022cf8:	494a      	ldr	r1, [pc, #296]	@ (8022e24 <GetAttribute+0x17c>)
 8022cfa:	6878      	ldr	r0, [r7, #4]
 8022cfc:	f7ff ff32 	bl	8022b64 <strcasecmp>
 8022d00:	4603      	mov	r3, r0
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d101      	bne.n	8022d0a <GetAttribute+0x62>
 8022d06:	2307      	movs	r3, #7
 8022d08:	e07f      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font0") == 0)     return 10;
 8022d0a:	4947      	ldr	r1, [pc, #284]	@ (8022e28 <GetAttribute+0x180>)
 8022d0c:	6878      	ldr	r0, [r7, #4]
 8022d0e:	f7ff ff29 	bl	8022b64 <strcasecmp>
 8022d12:	4603      	mov	r3, r0
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	d101      	bne.n	8022d1c <GetAttribute+0x74>
 8022d18:	230a      	movs	r3, #10
 8022d1a:	e076      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font1") == 0)     return 11;
 8022d1c:	4943      	ldr	r1, [pc, #268]	@ (8022e2c <GetAttribute+0x184>)
 8022d1e:	6878      	ldr	r0, [r7, #4]
 8022d20:	f7ff ff20 	bl	8022b64 <strcasecmp>
 8022d24:	4603      	mov	r3, r0
 8022d26:	2b00      	cmp	r3, #0
 8022d28:	d101      	bne.n	8022d2e <GetAttribute+0x86>
 8022d2a:	230b      	movs	r3, #11
 8022d2c:	e06d      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font2") == 0)     return 12;
 8022d2e:	4940      	ldr	r1, [pc, #256]	@ (8022e30 <GetAttribute+0x188>)
 8022d30:	6878      	ldr	r0, [r7, #4]
 8022d32:	f7ff ff17 	bl	8022b64 <strcasecmp>
 8022d36:	4603      	mov	r3, r0
 8022d38:	2b00      	cmp	r3, #0
 8022d3a:	d101      	bne.n	8022d40 <GetAttribute+0x98>
 8022d3c:	230c      	movs	r3, #12
 8022d3e:	e064      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font3") == 0)     return 13;
 8022d40:	493c      	ldr	r1, [pc, #240]	@ (8022e34 <GetAttribute+0x18c>)
 8022d42:	6878      	ldr	r0, [r7, #4]
 8022d44:	f7ff ff0e 	bl	8022b64 <strcasecmp>
 8022d48:	4603      	mov	r3, r0
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d101      	bne.n	8022d52 <GetAttribute+0xaa>
 8022d4e:	230d      	movs	r3, #13
 8022d50:	e05b      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font4") == 0)     return 14;
 8022d52:	4939      	ldr	r1, [pc, #228]	@ (8022e38 <GetAttribute+0x190>)
 8022d54:	6878      	ldr	r0, [r7, #4]
 8022d56:	f7ff ff05 	bl	8022b64 <strcasecmp>
 8022d5a:	4603      	mov	r3, r0
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d101      	bne.n	8022d64 <GetAttribute+0xbc>
 8022d60:	230e      	movs	r3, #14
 8022d62:	e052      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font5") == 0)     return 15;
 8022d64:	4935      	ldr	r1, [pc, #212]	@ (8022e3c <GetAttribute+0x194>)
 8022d66:	6878      	ldr	r0, [r7, #4]
 8022d68:	f7ff fefc 	bl	8022b64 <strcasecmp>
 8022d6c:	4603      	mov	r3, r0
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d101      	bne.n	8022d76 <GetAttribute+0xce>
 8022d72:	230f      	movs	r3, #15
 8022d74:	e049      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font6") == 0)     return 16;
 8022d76:	4932      	ldr	r1, [pc, #200]	@ (8022e40 <GetAttribute+0x198>)
 8022d78:	6878      	ldr	r0, [r7, #4]
 8022d7a:	f7ff fef3 	bl	8022b64 <strcasecmp>
 8022d7e:	4603      	mov	r3, r0
 8022d80:	2b00      	cmp	r3, #0
 8022d82:	d101      	bne.n	8022d88 <GetAttribute+0xe0>
 8022d84:	2310      	movs	r3, #16
 8022d86:	e040      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font7") == 0)     return 17;
 8022d88:	492e      	ldr	r1, [pc, #184]	@ (8022e44 <GetAttribute+0x19c>)
 8022d8a:	6878      	ldr	r0, [r7, #4]
 8022d8c:	f7ff feea 	bl	8022b64 <strcasecmp>
 8022d90:	4603      	mov	r3, r0
 8022d92:	2b00      	cmp	r3, #0
 8022d94:	d101      	bne.n	8022d9a <GetAttribute+0xf2>
 8022d96:	2311      	movs	r3, #17
 8022d98:	e037      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font8") == 0)     return 18;
 8022d9a:	492b      	ldr	r1, [pc, #172]	@ (8022e48 <GetAttribute+0x1a0>)
 8022d9c:	6878      	ldr	r0, [r7, #4]
 8022d9e:	f7ff fee1 	bl	8022b64 <strcasecmp>
 8022da2:	4603      	mov	r3, r0
 8022da4:	2b00      	cmp	r3, #0
 8022da6:	d101      	bne.n	8022dac <GetAttribute+0x104>
 8022da8:	2312      	movs	r3, #18
 8022daa:	e02e      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "font9") == 0)     return 19;
 8022dac:	4927      	ldr	r1, [pc, #156]	@ (8022e4c <GetAttribute+0x1a4>)
 8022dae:	6878      	ldr	r0, [r7, #4]
 8022db0:	f7ff fed8 	bl	8022b64 <strcasecmp>
 8022db4:	4603      	mov	r3, r0
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d101      	bne.n	8022dbe <GetAttribute+0x116>
 8022dba:	2313      	movs	r3, #19
 8022dbc:	e025      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "normcolor") == 0) return 22;
 8022dbe:	4924      	ldr	r1, [pc, #144]	@ (8022e50 <GetAttribute+0x1a8>)
 8022dc0:	6878      	ldr	r0, [r7, #4]
 8022dc2:	f7ff fecf 	bl	8022b64 <strcasecmp>
 8022dc6:	4603      	mov	r3, r0
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d101      	bne.n	8022dd0 <GetAttribute+0x128>
 8022dcc:	2316      	movs	r3, #22
 8022dce:	e01c      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "underline2") == 0)return 24;
 8022dd0:	4920      	ldr	r1, [pc, #128]	@ (8022e54 <GetAttribute+0x1ac>)
 8022dd2:	6878      	ldr	r0, [r7, #4]
 8022dd4:	f7ff fec6 	bl	8022b64 <strcasecmp>
 8022dd8:	4603      	mov	r3, r0
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	d101      	bne.n	8022de2 <GetAttribute+0x13a>
 8022dde:	2318      	movs	r3, #24
 8022de0:	e013      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "blinkoff") == 0)  return 25;
 8022de2:	491d      	ldr	r1, [pc, #116]	@ (8022e58 <GetAttribute+0x1b0>)
 8022de4:	6878      	ldr	r0, [r7, #4]
 8022de6:	f7ff febd 	bl	8022b64 <strcasecmp>
 8022dea:	4603      	mov	r3, r0
 8022dec:	2b00      	cmp	r3, #0
 8022dee:	d101      	bne.n	8022df4 <GetAttribute+0x14c>
 8022df0:	2319      	movs	r3, #25
 8022df2:	e00a      	b.n	8022e0a <GetAttribute+0x162>
    if(strcmpi(c, "positive") == 0)  return 27;
 8022df4:	4919      	ldr	r1, [pc, #100]	@ (8022e5c <GetAttribute+0x1b4>)
 8022df6:	6878      	ldr	r0, [r7, #4]
 8022df8:	f7ff feb4 	bl	8022b64 <strcasecmp>
 8022dfc:	4603      	mov	r3, r0
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d101      	bne.n	8022e06 <GetAttribute+0x15e>
 8022e02:	231b      	movs	r3, #27
 8022e04:	e001      	b.n	8022e0a <GetAttribute+0x162>
    return -1;
 8022e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022e0a:	4618      	mov	r0, r3
 8022e0c:	3708      	adds	r7, #8
 8022e0e:	46bd      	mov	sp, r7
 8022e10:	bd80      	pop	{r7, pc}
 8022e12:	bf00      	nop
 8022e14:	0802afc0 	.word	0x0802afc0
 8022e18:	0802afc8 	.word	0x0802afc8
 8022e1c:	0802afd0 	.word	0x0802afd0
 8022e20:	0802afdc 	.word	0x0802afdc
 8022e24:	0802afe4 	.word	0x0802afe4
 8022e28:	0802aff0 	.word	0x0802aff0
 8022e2c:	0802aff8 	.word	0x0802aff8
 8022e30:	0802b000 	.word	0x0802b000
 8022e34:	0802b008 	.word	0x0802b008
 8022e38:	0802b010 	.word	0x0802b010
 8022e3c:	0802b018 	.word	0x0802b018
 8022e40:	0802b020 	.word	0x0802b020
 8022e44:	0802b028 	.word	0x0802b028
 8022e48:	0802b030 	.word	0x0802b030
 8022e4c:	0802b038 	.word	0x0802b038
 8022e50:	0802b040 	.word	0x0802b040
 8022e54:	0802b04c 	.word	0x0802b04c
 8022e58:	0802b058 	.word	0x0802b058
 8022e5c:	0802b064 	.word	0x0802b064

08022e60 <ShTextColor>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShTextColor(uint8_t bPort, int argc, char *argv[])
{
 8022e60:	b580      	push	{r7, lr}
 8022e62:	b088      	sub	sp, #32
 8022e64:	af00      	add	r7, sp, #0
 8022e66:	4603      	mov	r3, r0
 8022e68:	60b9      	str	r1, [r7, #8]
 8022e6a:	607a      	str	r2, [r7, #4]
 8022e6c:	73fb      	strb	r3, [r7, #15]
    int fg, bg, att;

    if(argc == 1)
 8022e6e:	68bb      	ldr	r3, [r7, #8]
 8022e70:	2b01      	cmp	r3, #1
 8022e72:	d105      	bne.n	8022e80 <ShTextColor+0x20>
    {
        //TextColor(bPort, FG_White, FG_Black, ATT_Normal);
        ResetColor(bPort);
 8022e74:	7bfb      	ldrb	r3, [r7, #15]
 8022e76:	4618      	mov	r0, r3
 8022e78:	f7fe fa90 	bl	802139c <ResetColor>
        return CMD_OK;
 8022e7c:	2300      	movs	r3, #0
 8022e7e:	e08d      	b.n	8022f9c <ShTextColor+0x13c>
    }
    else if(argc == 2)
 8022e80:	68bb      	ldr	r3, [r7, #8]
 8022e82:	2b02      	cmp	r3, #2
 8022e84:	d118      	bne.n	8022eb8 <ShTextColor+0x58>
    {
        fg = GetColorOffset(argv[1]);
 8022e86:	687b      	ldr	r3, [r7, #4]
 8022e88:	3304      	adds	r3, #4
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	4618      	mov	r0, r3
 8022e8e:	f7ff fea9 	bl	8022be4 <GetColorOffset>
 8022e92:	61f8      	str	r0, [r7, #28]
        if(fg != -1)
 8022e94:	69fb      	ldr	r3, [r7, #28]
 8022e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e9a:	d07e      	beq.n	8022f9a <ShTextColor+0x13a>
        {
            TextColor(bPort, (FG_COLOR)FG_Black+fg, (BG_COLOR)FG_Black+fg, ATT_Normal);
 8022e9c:	69fb      	ldr	r3, [r7, #28]
 8022e9e:	b2db      	uxtb	r3, r3
 8022ea0:	331e      	adds	r3, #30
 8022ea2:	b2d9      	uxtb	r1, r3
 8022ea4:	69fb      	ldr	r3, [r7, #28]
 8022ea6:	b2db      	uxtb	r3, r3
 8022ea8:	331e      	adds	r3, #30
 8022eaa:	b2da      	uxtb	r2, r3
 8022eac:	7bf8      	ldrb	r0, [r7, #15]
 8022eae:	2300      	movs	r3, #0
 8022eb0:	f7fe fa4c 	bl	802134c <TextColor>
            return CMD_OK;
 8022eb4:	2300      	movs	r3, #0
 8022eb6:	e071      	b.n	8022f9c <ShTextColor+0x13c>
        }
    }
    else if(argc == 3)
 8022eb8:	68bb      	ldr	r3, [r7, #8]
 8022eba:	2b03      	cmp	r3, #3
 8022ebc:	d13a      	bne.n	8022f34 <ShTextColor+0xd4>
    {
        fg = GetColorOffset(argv[1]);
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	3304      	adds	r3, #4
 8022ec2:	681b      	ldr	r3, [r3, #0]
 8022ec4:	4618      	mov	r0, r3
 8022ec6:	f7ff fe8d 	bl	8022be4 <GetColorOffset>
 8022eca:	61f8      	str	r0, [r7, #28]
        if(fg != -1)
 8022ecc:	69fb      	ldr	r3, [r7, #28]
 8022ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ed2:	d062      	beq.n	8022f9a <ShTextColor+0x13a>
        {
            bg = GetColorOffset(argv[2]);
 8022ed4:	687b      	ldr	r3, [r7, #4]
 8022ed6:	3308      	adds	r3, #8
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	4618      	mov	r0, r3
 8022edc:	f7ff fe82 	bl	8022be4 <GetColorOffset>
 8022ee0:	61b8      	str	r0, [r7, #24]
            if(bg != -1)
 8022ee2:	69bb      	ldr	r3, [r7, #24]
 8022ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ee8:	d00d      	beq.n	8022f06 <ShTextColor+0xa6>
            {
            	TextColor(bPort, (FG_COLOR)FG_Black+fg, (BG_COLOR)BG_Black+bg, ATT_Normal);
 8022eea:	69fb      	ldr	r3, [r7, #28]
 8022eec:	b2db      	uxtb	r3, r3
 8022eee:	331e      	adds	r3, #30
 8022ef0:	b2d9      	uxtb	r1, r3
 8022ef2:	69bb      	ldr	r3, [r7, #24]
 8022ef4:	b2db      	uxtb	r3, r3
 8022ef6:	3328      	adds	r3, #40	@ 0x28
 8022ef8:	b2da      	uxtb	r2, r3
 8022efa:	7bf8      	ldrb	r0, [r7, #15]
 8022efc:	2300      	movs	r3, #0
 8022efe:	f7fe fa25 	bl	802134c <TextColor>
            	return CMD_OK;
 8022f02:	2300      	movs	r3, #0
 8022f04:	e04a      	b.n	8022f9c <ShTextColor+0x13c>
            }
            else
            {
                att = GetAttribute(argv[2]);
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	3308      	adds	r3, #8
 8022f0a:	681b      	ldr	r3, [r3, #0]
 8022f0c:	4618      	mov	r0, r3
 8022f0e:	f7ff fecb 	bl	8022ca8 <GetAttribute>
 8022f12:	6178      	str	r0, [r7, #20]
                if(att != -1)
 8022f14:	697b      	ldr	r3, [r7, #20]
 8022f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f1a:	d03e      	beq.n	8022f9a <ShTextColor+0x13a>
                {
                	TextColor(bPort, (FG_COLOR)FG_Black+fg, (BG_COLOR)BG_Black, (ATTRIBUTE)ATT_Normal+att);
 8022f1c:	69fb      	ldr	r3, [r7, #28]
 8022f1e:	b2db      	uxtb	r3, r3
 8022f20:	331e      	adds	r3, #30
 8022f22:	b2d9      	uxtb	r1, r3
 8022f24:	697b      	ldr	r3, [r7, #20]
 8022f26:	b2db      	uxtb	r3, r3
 8022f28:	7bf8      	ldrb	r0, [r7, #15]
 8022f2a:	2228      	movs	r2, #40	@ 0x28
 8022f2c:	f7fe fa0e 	bl	802134c <TextColor>
                	return CMD_OK;
 8022f30:	2300      	movs	r3, #0
 8022f32:	e033      	b.n	8022f9c <ShTextColor+0x13c>
                }
            }
        }
    }
    else if(argc == 4)
 8022f34:	68bb      	ldr	r3, [r7, #8]
 8022f36:	2b04      	cmp	r3, #4
 8022f38:	d12f      	bne.n	8022f9a <ShTextColor+0x13a>
    {
        fg = GetColorOffset(argv[1]);
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	3304      	adds	r3, #4
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	4618      	mov	r0, r3
 8022f42:	f7ff fe4f 	bl	8022be4 <GetColorOffset>
 8022f46:	61f8      	str	r0, [r7, #28]
        bg = GetColorOffset(argv[2]);
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	3308      	adds	r3, #8
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	4618      	mov	r0, r3
 8022f50:	f7ff fe48 	bl	8022be4 <GetColorOffset>
 8022f54:	61b8      	str	r0, [r7, #24]
        att = GetAttribute(argv[3]);
 8022f56:	687b      	ldr	r3, [r7, #4]
 8022f58:	330c      	adds	r3, #12
 8022f5a:	681b      	ldr	r3, [r3, #0]
 8022f5c:	4618      	mov	r0, r3
 8022f5e:	f7ff fea3 	bl	8022ca8 <GetAttribute>
 8022f62:	6178      	str	r0, [r7, #20]
        if(fg != -1 && bg != -1 && att != -1)
 8022f64:	69fb      	ldr	r3, [r7, #28]
 8022f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f6a:	d016      	beq.n	8022f9a <ShTextColor+0x13a>
 8022f6c:	69bb      	ldr	r3, [r7, #24]
 8022f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f72:	d012      	beq.n	8022f9a <ShTextColor+0x13a>
 8022f74:	697b      	ldr	r3, [r7, #20]
 8022f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f7a:	d00e      	beq.n	8022f9a <ShTextColor+0x13a>
        {
            TextColor(bPort, (FG_COLOR)FG_Black+fg, (BG_COLOR)BG_Black+bg, (ATTRIBUTE)ATT_Normal+att);
 8022f7c:	69fb      	ldr	r3, [r7, #28]
 8022f7e:	b2db      	uxtb	r3, r3
 8022f80:	331e      	adds	r3, #30
 8022f82:	b2d9      	uxtb	r1, r3
 8022f84:	69bb      	ldr	r3, [r7, #24]
 8022f86:	b2db      	uxtb	r3, r3
 8022f88:	3328      	adds	r3, #40	@ 0x28
 8022f8a:	b2da      	uxtb	r2, r3
 8022f8c:	697b      	ldr	r3, [r7, #20]
 8022f8e:	b2db      	uxtb	r3, r3
 8022f90:	7bf8      	ldrb	r0, [r7, #15]
 8022f92:	f7fe f9db 	bl	802134c <TextColor>
            return CMD_OK;
 8022f96:	2300      	movs	r3, #0
 8022f98:	e000      	b.n	8022f9c <ShTextColor+0x13c>
        }
    }
    return CMD_BAD_PARAMS;
 8022f9a:	2301      	movs	r3, #1
}
 8022f9c:	4618      	mov	r0, r3
 8022f9e:	3720      	adds	r7, #32
 8022fa0:	46bd      	mov	sp, r7
 8022fa2:	bd80      	pop	{r7, pc}

08022fa4 <ShVariables>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShVariables(uint8_t bPort, int argc, char *argv[])
{
 8022fa4:	b580      	push	{r7, lr}
 8022fa6:	b084      	sub	sp, #16
 8022fa8:	af00      	add	r7, sp, #0
 8022faa:	4603      	mov	r3, r0
 8022fac:	60b9      	str	r1, [r7, #8]
 8022fae:	607a      	str	r2, [r7, #4]
 8022fb0:	73fb      	strb	r3, [r7, #15]

	ShowVariables(bPort);
 8022fb2:	7bfb      	ldrb	r3, [r7, #15]
 8022fb4:	4618      	mov	r0, r3
 8022fb6:	f7e5 fe0b 	bl	8008bd0 <ShowVariables>
	return CMD_OK;
 8022fba:	2300      	movs	r3, #0
}
 8022fbc:	4618      	mov	r0, r3
 8022fbe:	3710      	adds	r7, #16
 8022fc0:	46bd      	mov	sp, r7
 8022fc2:	bd80      	pop	{r7, pc}

08022fc4 <ShArgs>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShArgs(uint8_t bPort, int argc, char *argv[])
{
 8022fc4:	b580      	push	{r7, lr}
 8022fc6:	b086      	sub	sp, #24
 8022fc8:	af00      	add	r7, sp, #0
 8022fca:	4603      	mov	r3, r0
 8022fcc:	60b9      	str	r1, [r7, #8]
 8022fce:	607a      	str	r2, [r7, #4]
 8022fd0:	73fb      	strb	r3, [r7, #15]

    ShNL(bPort);
 8022fd2:	7bfb      	ldrb	r3, [r7, #15]
 8022fd4:	4618      	mov	r0, r3
 8022fd6:	f7fe fb4f 	bl	8021678 <ShNL>

	ShFieldNumberOut(bPort, "Command Arguments: ", argc, 0);
 8022fda:	7bf8      	ldrb	r0, [r7, #15]
 8022fdc:	2300      	movs	r3, #0
 8022fde:	68ba      	ldr	r2, [r7, #8]
 8022fe0:	490f      	ldr	r1, [pc, #60]	@ (8023020 <ShArgs+0x5c>)
 8022fe2:	f7fe fb0d 	bl	8021600 <ShFieldNumberOut>

	for(int i = 0; i < argc; i++)
 8022fe6:	2300      	movs	r3, #0
 8022fe8:	617b      	str	r3, [r7, #20]
 8022fea:	e010      	b.n	802300e <ShArgs+0x4a>
	{
	    ShNL(bPort);
 8022fec:	7bfb      	ldrb	r3, [r7, #15]
 8022fee:	4618      	mov	r0, r3
 8022ff0:	f7fe fb42 	bl	8021678 <ShNL>
	    ShFieldOut(bPort, argv[i], 0);
 8022ff4:	697b      	ldr	r3, [r7, #20]
 8022ff6:	009b      	lsls	r3, r3, #2
 8022ff8:	687a      	ldr	r2, [r7, #4]
 8022ffa:	4413      	add	r3, r2
 8022ffc:	6819      	ldr	r1, [r3, #0]
 8022ffe:	7bfb      	ldrb	r3, [r7, #15]
 8023000:	2200      	movs	r2, #0
 8023002:	4618      	mov	r0, r3
 8023004:	f7fe fad8 	bl	80215b8 <ShFieldOut>
	for(int i = 0; i < argc; i++)
 8023008:	697b      	ldr	r3, [r7, #20]
 802300a:	3301      	adds	r3, #1
 802300c:	617b      	str	r3, [r7, #20]
 802300e:	697a      	ldr	r2, [r7, #20]
 8023010:	68bb      	ldr	r3, [r7, #8]
 8023012:	429a      	cmp	r2, r3
 8023014:	dbea      	blt.n	8022fec <ShArgs+0x28>
	}
	return CMD_OK;
 8023016:	2300      	movs	r3, #0
}
 8023018:	4618      	mov	r0, r3
 802301a:	3718      	adds	r7, #24
 802301c:	46bd      	mov	sp, r7
 802301e:	bd80      	pop	{r7, pc}
 8023020:	0802b070 	.word	0x0802b070

08023024 <ShSend>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShSend(uint8_t bPort, int argc, char *argv[])
{
 8023024:	b580      	push	{r7, lr}
 8023026:	b084      	sub	sp, #16
 8023028:	af00      	add	r7, sp, #0
 802302a:	4603      	mov	r3, r0
 802302c:	60b9      	str	r1, [r7, #8]
 802302e:	607a      	str	r2, [r7, #4]
 8023030:	73fb      	strb	r3, [r7, #15]

	ShNL(bPort);
 8023032:	7bfb      	ldrb	r3, [r7, #15]
 8023034:	4618      	mov	r0, r3
 8023036:	f7fe fb1f 	bl	8021678 <ShNL>

//k	send_main(argc, argv);

	return CMD_OK;
 802303a:	2300      	movs	r3, #0
}
 802303c:	4618      	mov	r0, r3
 802303e:	3710      	adds	r7, #16
 8023040:	46bd      	mov	sp, r7
 8023042:	bd80      	pop	{r7, pc}

08023044 <AddToHistory>:
*
* @return	None
*
*********************************************************************/
void AddToHistory(uint8_t idx, uint8_t* buf)
{
 8023044:	b580      	push	{r7, lr}
 8023046:	b082      	sub	sp, #8
 8023048:	af00      	add	r7, sp, #0
 802304a:	4603      	mov	r3, r0
 802304c:	6039      	str	r1, [r7, #0]
 802304e:	71fb      	strb	r3, [r7, #7]

	strcpy((char*)HistoryBuf[idx][HistoryIndex[idx]], (char*)buf);
 8023050:	79fa      	ldrb	r2, [r7, #7]
 8023052:	79fb      	ldrb	r3, [r7, #7]
 8023054:	4912      	ldr	r1, [pc, #72]	@ (80230a0 <AddToHistory+0x5c>)
 8023056:	5ccb      	ldrb	r3, [r1, r3]
 8023058:	4619      	mov	r1, r3
 802305a:	460b      	mov	r3, r1
 802305c:	009b      	lsls	r3, r3, #2
 802305e:	440b      	add	r3, r1
 8023060:	011b      	lsls	r3, r3, #4
 8023062:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8023066:	fb01 f202 	mul.w	r2, r1, r2
 802306a:	4413      	add	r3, r2
 802306c:	4a0d      	ldr	r2, [pc, #52]	@ (80230a4 <AddToHistory+0x60>)
 802306e:	4413      	add	r3, r2
 8023070:	6839      	ldr	r1, [r7, #0]
 8023072:	4618      	mov	r0, r3
 8023074:	f003 f9f5 	bl	8026462 <strcpy>
	HistoryIndex[idx]++;
 8023078:	79fb      	ldrb	r3, [r7, #7]
 802307a:	4a09      	ldr	r2, [pc, #36]	@ (80230a0 <AddToHistory+0x5c>)
 802307c:	5cd2      	ldrb	r2, [r2, r3]
 802307e:	3201      	adds	r2, #1
 8023080:	b2d1      	uxtb	r1, r2
 8023082:	4a07      	ldr	r2, [pc, #28]	@ (80230a0 <AddToHistory+0x5c>)
 8023084:	54d1      	strb	r1, [r2, r3]
	if(HistoryIndex[idx] > NUM_HISTORY)
 8023086:	79fb      	ldrb	r3, [r7, #7]
 8023088:	4a05      	ldr	r2, [pc, #20]	@ (80230a0 <AddToHistory+0x5c>)
 802308a:	5cd3      	ldrb	r3, [r2, r3]
 802308c:	2b0a      	cmp	r3, #10
 802308e:	d903      	bls.n	8023098 <AddToHistory+0x54>
	{
		HistoryIndex[idx] = 0;
 8023090:	79fb      	ldrb	r3, [r7, #7]
 8023092:	4a03      	ldr	r2, [pc, #12]	@ (80230a0 <AddToHistory+0x5c>)
 8023094:	2100      	movs	r1, #0
 8023096:	54d1      	strb	r1, [r2, r3]
	}
}
 8023098:	bf00      	nop
 802309a:	3708      	adds	r7, #8
 802309c:	46bd      	mov	sp, r7
 802309e:	bd80      	pop	{r7, pc}
 80230a0:	2001e3f4 	.word	0x2001e3f4
 80230a4:	2001da94 	.word	0x2001da94

080230a8 <parse_args>:
*
* @return	None
*
*********************************************************************/
void parse_args(char *buffer, char** args, size_t args_size, size_t *nargs)
{
 80230a8:	b580      	push	{r7, lr}
 80230aa:	b0b0      	sub	sp, #192	@ 0xc0
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	60f8      	str	r0, [r7, #12]
 80230b0:	60b9      	str	r1, [r7, #8]
 80230b2:	607a      	str	r2, [r7, #4]
 80230b4:	603b      	str	r3, [r7, #0]
    #define args_size 40
    char *buf_args[args_size];
    char **cp;
    char *wbuf;
    size_t i, j;
    wbuf = buffer;
 80230b6:	68fb      	ldr	r3, [r7, #12]
 80230b8:	613b      	str	r3, [r7, #16]
    buf_args[0] = buffer;
 80230ba:	68fb      	ldr	r3, [r7, #12]
 80230bc:	617b      	str	r3, [r7, #20]
    args[0] = buffer;
 80230be:	68bb      	ldr	r3, [r7, #8]
 80230c0:	68fa      	ldr	r2, [r7, #12]
 80230c2:	601a      	str	r2, [r3, #0]

    for(cp = buf_args; (*cp = strsep(&wbuf, " \r\n\t\"")) != NULL ;)
 80230c4:	f107 0314 	add.w	r3, r7, #20
 80230c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80230cc:	e010      	b.n	80230f0 <parse_args+0x48>
    {
        if ((*cp != 0) && (++cp >= &buf_args[args_size]))
 80230ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80230d2:	681b      	ldr	r3, [r3, #0]
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	d00b      	beq.n	80230f0 <parse_args+0x48>
 80230d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80230dc:	3304      	adds	r3, #4
 80230de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80230e2:	f107 0314 	add.w	r3, r7, #20
 80230e6:	33a0      	adds	r3, #160	@ 0xa0
 80230e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80230ec:	429a      	cmp	r2, r3
 80230ee:	d20f      	bcs.n	8023110 <parse_args+0x68>
    for(cp = buf_args; (*cp = strsep(&wbuf, " \r\n\t\"")) != NULL ;)
 80230f0:	f107 0310 	add.w	r3, r7, #16
 80230f4:	4926      	ldr	r1, [pc, #152]	@ (8023190 <parse_args+0xe8>)
 80230f6:	4618      	mov	r0, r3
 80230f8:	f002 f8d0 	bl	802529c <strsep>
 80230fc:	4602      	mov	r2, r0
 80230fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8023102:	601a      	str	r2, [r3, #0]
 8023104:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8023108:	681b      	ldr	r3, [r3, #0]
 802310a:	2b00      	cmp	r3, #0
 802310c:	d1df      	bne.n	80230ce <parse_args+0x26>
 802310e:	e000      	b.n	8023112 <parse_args+0x6a>
        {
            break;
 8023110:	bf00      	nop
        }
    }

    for (j = i = 0; buf_args[i] != NULL; i++)
 8023112:	2300      	movs	r3, #0
 8023114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8023118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802311c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8023120:	e01e      	b.n	8023160 <parse_args+0xb8>
    {
        if(strlen(buf_args[i])>0)
 8023122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023126:	009b      	lsls	r3, r3, #2
 8023128:	33c0      	adds	r3, #192	@ 0xc0
 802312a:	443b      	add	r3, r7
 802312c:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8023130:	781b      	ldrb	r3, [r3, #0]
 8023132:	2b00      	cmp	r3, #0
 8023134:	d00f      	beq.n	8023156 <parse_args+0xae>
        {
            args[j++]=buf_args[i];
 8023136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802313a:	1c5a      	adds	r2, r3, #1
 802313c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8023140:	009b      	lsls	r3, r3, #2
 8023142:	68ba      	ldr	r2, [r7, #8]
 8023144:	441a      	add	r2, r3
 8023146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802314a:	009b      	lsls	r3, r3, #2
 802314c:	33c0      	adds	r3, #192	@ 0xc0
 802314e:	443b      	add	r3, r7
 8023150:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8023154:	6013      	str	r3, [r2, #0]
    for (j = i = 0; buf_args[i] != NULL; i++)
 8023156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802315a:	3301      	adds	r3, #1
 802315c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8023160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023164:	009b      	lsls	r3, r3, #2
 8023166:	33c0      	adds	r3, #192	@ 0xc0
 8023168:	443b      	add	r3, r7
 802316a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 802316e:	2b00      	cmp	r3, #0
 8023170:	d1d7      	bne.n	8023122 <parse_args+0x7a>
        }
    }

    *nargs = j;
 8023172:	683b      	ldr	r3, [r7, #0]
 8023174:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8023178:	601a      	str	r2, [r3, #0]
    args[j] = NULL;
 802317a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802317e:	009b      	lsls	r3, r3, #2
 8023180:	68ba      	ldr	r2, [r7, #8]
 8023182:	4413      	add	r3, r2
 8023184:	2200      	movs	r2, #0
 8023186:	601a      	str	r2, [r3, #0]
}
 8023188:	bf00      	nop
 802318a:	37c0      	adds	r7, #192	@ 0xc0
 802318c:	46bd      	mov	sp, r7
 802318e:	bd80      	pop	{r7, pc}
 8023190:	0802b084 	.word	0x0802b084

08023194 <ExecuteCommand>:
*
* @return	None
*
*********************************************************************/
int ExecuteCommand(int iCmdIndex, uint8_t bPort, size_t nargs, char** args)
{
 8023194:	b580      	push	{r7, lr}
 8023196:	b084      	sub	sp, #16
 8023198:	af00      	add	r7, sp, #0
 802319a:	60f8      	str	r0, [r7, #12]
 802319c:	607a      	str	r2, [r7, #4]
 802319e:	603b      	str	r3, [r7, #0]
 80231a0:	460b      	mov	r3, r1
 80231a2:	72fb      	strb	r3, [r7, #11]
	return (*ShellTable[iCmdIndex].Command)(bPort, nargs, args);
 80231a4:	4908      	ldr	r1, [pc, #32]	@ (80231c8 <ExecuteCommand+0x34>)
 80231a6:	68fa      	ldr	r2, [r7, #12]
 80231a8:	4613      	mov	r3, r2
 80231aa:	005b      	lsls	r3, r3, #1
 80231ac:	4413      	add	r3, r2
 80231ae:	00db      	lsls	r3, r3, #3
 80231b0:	440b      	add	r3, r1
 80231b2:	3310      	adds	r3, #16
 80231b4:	681b      	ldr	r3, [r3, #0]
 80231b6:	6879      	ldr	r1, [r7, #4]
 80231b8:	7af8      	ldrb	r0, [r7, #11]
 80231ba:	683a      	ldr	r2, [r7, #0]
 80231bc:	4798      	blx	r3
 80231be:	4603      	mov	r3, r0
}
 80231c0:	4618      	mov	r0, r3
 80231c2:	3710      	adds	r7, #16
 80231c4:	46bd      	mov	sp, r7
 80231c6:	bd80      	pop	{r7, pc}
 80231c8:	0802c054 	.word	0x0802c054

080231cc <FindCommand>:
*
* @return	None
*
*********************************************************************/
int FindCommand(char* szCmdBuffer, size_t* nargs, char** args)
{
 80231cc:	b580      	push	{r7, lr}
 80231ce:	b08c      	sub	sp, #48	@ 0x30
 80231d0:	af00      	add	r7, sp, #0
 80231d2:	60f8      	str	r0, [r7, #12]
 80231d4:	60b9      	str	r1, [r7, #8]
 80231d6:	607a      	str	r2, [r7, #4]
	int i;
	char command[24];

	// temp code to remove the
    parse_args(szCmdBuffer, args, ARR_SIZE, nargs);
 80231d8:	68bb      	ldr	r3, [r7, #8]
 80231da:	223c      	movs	r2, #60	@ 0x3c
 80231dc:	6879      	ldr	r1, [r7, #4]
 80231de:	68f8      	ldr	r0, [r7, #12]
 80231e0:	f7ff ff62 	bl	80230a8 <parse_args>

    if(*nargs != 0)
 80231e4:	68bb      	ldr	r3, [r7, #8]
 80231e6:	681b      	ldr	r3, [r3, #0]
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d03b      	beq.n	8023264 <FindCommand+0x98>
    {
    	for(i = 0; i < SHELL_TABLE_COUNT; i++)
 80231ec:	2300      	movs	r3, #0
 80231ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80231f0:	e035      	b.n	802325e <FindCommand+0x92>
    	{
    		// temp code to remove the pad space
    		strcpy(command, ShellTable[i].szCommand);
 80231f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80231f4:	4613      	mov	r3, r2
 80231f6:	005b      	lsls	r3, r3, #1
 80231f8:	4413      	add	r3, r2
 80231fa:	00db      	lsls	r3, r3, #3
 80231fc:	4a1c      	ldr	r2, [pc, #112]	@ (8023270 <FindCommand+0xa4>)
 80231fe:	441a      	add	r2, r3
 8023200:	f107 0314 	add.w	r3, r7, #20
 8023204:	4611      	mov	r1, r2
 8023206:	4618      	mov	r0, r3
 8023208:	f003 f92b 	bl	8026462 <strcpy>
    		if(command[strlen(command)-1] == ' ')
 802320c:	f107 0314 	add.w	r3, r7, #20
 8023210:	4618      	mov	r0, r3
 8023212:	f7dd f847 	bl	80002a4 <strlen>
 8023216:	4603      	mov	r3, r0
 8023218:	3b01      	subs	r3, #1
 802321a:	3330      	adds	r3, #48	@ 0x30
 802321c:	443b      	add	r3, r7
 802321e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8023222:	2b20      	cmp	r3, #32
 8023224:	d10b      	bne.n	802323e <FindCommand+0x72>
    		{
    			command[strlen(command)-1] = '\0';
 8023226:	f107 0314 	add.w	r3, r7, #20
 802322a:	4618      	mov	r0, r3
 802322c:	f7dd f83a 	bl	80002a4 <strlen>
 8023230:	4603      	mov	r3, r0
 8023232:	3b01      	subs	r3, #1
 8023234:	3330      	adds	r3, #48	@ 0x30
 8023236:	443b      	add	r3, r7
 8023238:	2200      	movs	r2, #0
 802323a:	f803 2c1c 	strb.w	r2, [r3, #-28]
    		}
    		// temp code to remove the pad space

    		//if(strcasecmp(ShellTable[i].szCommand, args[0]) == 0)
       		//if(strcmp(ShellTable[i].szCommand, args[0]) == 0)
       		if(strcmp(command, args[0]) == 0)
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	681a      	ldr	r2, [r3, #0]
 8023242:	f107 0314 	add.w	r3, r7, #20
 8023246:	4611      	mov	r1, r2
 8023248:	4618      	mov	r0, r3
 802324a:	f7dd f821 	bl	8000290 <strcmp>
 802324e:	4603      	mov	r3, r0
 8023250:	2b00      	cmp	r3, #0
 8023252:	d101      	bne.n	8023258 <FindCommand+0x8c>
    		{
    			return i;
 8023254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023256:	e007      	b.n	8023268 <FindCommand+0x9c>
    	for(i = 0; i < SHELL_TABLE_COUNT; i++)
 8023258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802325a:	3301      	adds	r3, #1
 802325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023260:	2b1f      	cmp	r3, #31
 8023262:	d9c6      	bls.n	80231f2 <FindCommand+0x26>
    		}
    	}
    }
    return -1;
 8023264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023268:	4618      	mov	r0, r3
 802326a:	3730      	adds	r7, #48	@ 0x30
 802326c:	46bd      	mov	sp, r7
 802326e:	bd80      	pop	{r7, pc}
 8023270:	0802c054 	.word	0x0802c054

08023274 <Prompt>:
*
* @return	None
*
*********************************************************************/
void Prompt(uint8_t bPort)
{
 8023274:	b580      	push	{r7, lr}
 8023276:	b082      	sub	sp, #8
 8023278:	af00      	add	r7, sp, #0
 802327a:	4603      	mov	r3, r0
 802327c:	71fb      	strb	r3, [r7, #7]
	ShNL(bPort);
 802327e:	79fb      	ldrb	r3, [r7, #7]
 8023280:	4618      	mov	r0, r3
 8023282:	f7fe f9f9 	bl	8021678 <ShNL>

	f_getcwd (szCWD, sizeof(szCWD));
 8023286:	2114      	movs	r1, #20
 8023288:	480d      	ldr	r0, [pc, #52]	@ (80232c0 <Prompt+0x4c>)
 802328a:	f7f7 fc09 	bl	801aaa0 <f_getcwd>
	if(szCWD[0] != '/')
 802328e:	4b0c      	ldr	r3, [pc, #48]	@ (80232c0 <Prompt+0x4c>)
 8023290:	781b      	ldrb	r3, [r3, #0]
 8023292:	2b2f      	cmp	r3, #47	@ 0x2f
 8023294:	d004      	beq.n	80232a0 <Prompt+0x2c>
	{
		ShCharOut(bPort, '/');
 8023296:	79fb      	ldrb	r3, [r7, #7]
 8023298:	212f      	movs	r1, #47	@ 0x2f
 802329a:	4618      	mov	r0, r3
 802329c:	f7fe f944 	bl	8021528 <ShCharOut>
	}

	ShFieldOut(bPort, szCWD, 0);
 80232a0:	79fb      	ldrb	r3, [r7, #7]
 80232a2:	2200      	movs	r2, #0
 80232a4:	4906      	ldr	r1, [pc, #24]	@ (80232c0 <Prompt+0x4c>)
 80232a6:	4618      	mov	r0, r3
 80232a8:	f7fe f986 	bl	80215b8 <ShFieldOut>
	ShFieldOut(bPort, ">", 0);
 80232ac:	79fb      	ldrb	r3, [r7, #7]
 80232ae:	2200      	movs	r2, #0
 80232b0:	4904      	ldr	r1, [pc, #16]	@ (80232c4 <Prompt+0x50>)
 80232b2:	4618      	mov	r0, r3
 80232b4:	f7fe f980 	bl	80215b8 <ShFieldOut>
}
 80232b8:	bf00      	nop
 80232ba:	3708      	adds	r7, #8
 80232bc:	46bd      	mov	sp, r7
 80232be:	bd80      	pop	{r7, pc}
 80232c0:	2001e3f8 	.word	0x2001e3f8
 80232c4:	0802b08c 	.word	0x0802b08c

080232c8 <ShellInit>:
*
* @return	None
*
*********************************************************************/
void ShellInit(void)
{
 80232c8:	b580      	push	{r7, lr}
 80232ca:	af00      	add	r7, sp, #0

//	RunScript(PORT3, args[0], nargs, args);

	// ToDo - fix this
    //ShNL(ALL_PORTS);
    ShNL(PORT3);
 80232cc:	2004      	movs	r0, #4
 80232ce:	f7fe f9d3 	bl	8021678 <ShNL>

    if(szDnsName[0] != 0)
 80232d2:	4b12      	ldr	r3, [pc, #72]	@ (802331c <ShellInit+0x54>)
 80232d4:	781b      	ldrb	r3, [r3, #0]
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	d008      	beq.n	80232ec <ShellInit+0x24>
    {
    	ShFieldOut(PORT3, szDnsName, 0);
 80232da:	2200      	movs	r2, #0
 80232dc:	490f      	ldr	r1, [pc, #60]	@ (802331c <ShellInit+0x54>)
 80232de:	2004      	movs	r0, #4
 80232e0:	f7fe f96a 	bl	80215b8 <ShFieldOut>
    	ShCharOut(PORT3, ' ');
 80232e4:	2120      	movs	r1, #32
 80232e6:	2004      	movs	r0, #4
 80232e8:	f7fe f91e 	bl	8021528 <ShCharOut>
    }
	ShFieldOut(PORT3, "Sender 4, Version ", 0);
 80232ec:	2200      	movs	r2, #0
 80232ee:	490c      	ldr	r1, [pc, #48]	@ (8023320 <ShellInit+0x58>)
 80232f0:	2004      	movs	r0, #4
 80232f2:	f7fe f961 	bl	80215b8 <ShFieldOut>
	ShFieldOut(PORT3, VarToString(FindVariable("version")), 0);
 80232f6:	480b      	ldr	r0, [pc, #44]	@ (8023324 <ShellInit+0x5c>)
 80232f8:	f7e5 fd2c 	bl	8008d54 <FindVariable>
 80232fc:	4603      	mov	r3, r0
 80232fe:	4618      	mov	r0, r3
 8023300:	f7e5 f8ce 	bl	80084a0 <VarToString>
 8023304:	4603      	mov	r3, r0
 8023306:	2200      	movs	r2, #0
 8023308:	4619      	mov	r1, r3
 802330a:	2004      	movs	r0, #4
 802330c:	f7fe f954 	bl	80215b8 <ShFieldOut>

	//Prompt(ALL_PORTS);
	Prompt(PORT3);
 8023310:	2004      	movs	r0, #4
 8023312:	f7ff ffaf 	bl	8023274 <Prompt>
}
 8023316:	bf00      	nop
 8023318:	bd80      	pop	{r7, pc}
 802331a:	bf00      	nop
 802331c:	2001b580 	.word	0x2001b580
 8023320:	0802b090 	.word	0x0802b090
 8023324:	0802b0a4 	.word	0x0802b0a4

08023328 <PrintReturnString>:
*
* @return	None
*
*********************************************************************/
void PrintReturnString(uint8_t bPort, int ret_value)
{
 8023328:	b580      	push	{r7, lr}
 802332a:	b082      	sub	sp, #8
 802332c:	af00      	add	r7, sp, #0
 802332e:	4603      	mov	r3, r0
 8023330:	6039      	str	r1, [r7, #0]
 8023332:	71fb      	strb	r3, [r7, #7]

	switch(ret_value)
 8023334:	683b      	ldr	r3, [r7, #0]
 8023336:	3b01      	subs	r3, #1
 8023338:	2b07      	cmp	r3, #7
 802333a:	f200 808b 	bhi.w	8023454 <PrintReturnString+0x12c>
 802333e:	a201      	add	r2, pc, #4	@ (adr r2, 8023344 <PrintReturnString+0x1c>)
 8023340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023344:	08023365 	.word	0x08023365
 8023348:	08023383 	.word	0x08023383
 802334c:	080233a1 	.word	0x080233a1
 8023350:	080233bf 	.word	0x080233bf
 8023354:	080233dd 	.word	0x080233dd
 8023358:	080233fb 	.word	0x080233fb
 802335c:	08023419 	.word	0x08023419
 8023360:	08023437 	.word	0x08023437
	{
		case CMD_BAD_PARAMS:
			ShNL(bPort);
 8023364:	79fb      	ldrb	r3, [r7, #7]
 8023366:	4618      	mov	r0, r3
 8023368:	f7fe f986 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Bad Parameters", 0);
 802336c:	79fb      	ldrb	r3, [r7, #7]
 802336e:	2200      	movs	r2, #0
 8023370:	493a      	ldr	r1, [pc, #232]	@ (802345c <PrintReturnString+0x134>)
 8023372:	4618      	mov	r0, r3
 8023374:	f7fe f920 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8023378:	79fb      	ldrb	r3, [r7, #7]
 802337a:	4618      	mov	r0, r3
 802337c:	f7fe f97c 	bl	8021678 <ShNL>
		break;
 8023380:	e068      	b.n	8023454 <PrintReturnString+0x12c>

		case CMD_NOT_FOUND:
			ShNL(bPort);
 8023382:	79fb      	ldrb	r3, [r7, #7]
 8023384:	4618      	mov	r0, r3
 8023386:	f7fe f977 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Command/File Not Found", 0);
 802338a:	79fb      	ldrb	r3, [r7, #7]
 802338c:	2200      	movs	r2, #0
 802338e:	4934      	ldr	r1, [pc, #208]	@ (8023460 <PrintReturnString+0x138>)
 8023390:	4618      	mov	r0, r3
 8023392:	f7fe f911 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8023396:	79fb      	ldrb	r3, [r7, #7]
 8023398:	4618      	mov	r0, r3
 802339a:	f7fe f96d 	bl	8021678 <ShNL>
		break;
 802339e:	e059      	b.n	8023454 <PrintReturnString+0x12c>

		case CMD_FAILED:
			ShNL(bPort);
 80233a0:	79fb      	ldrb	r3, [r7, #7]
 80233a2:	4618      	mov	r0, r3
 80233a4:	f7fe f968 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Command Failed", 0);
 80233a8:	79fb      	ldrb	r3, [r7, #7]
 80233aa:	2200      	movs	r2, #0
 80233ac:	492d      	ldr	r1, [pc, #180]	@ (8023464 <PrintReturnString+0x13c>)
 80233ae:	4618      	mov	r0, r3
 80233b0:	f7fe f902 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 80233b4:	79fb      	ldrb	r3, [r7, #7]
 80233b6:	4618      	mov	r0, r3
 80233b8:	f7fe f95e 	bl	8021678 <ShNL>
		break;
 80233bc:	e04a      	b.n	8023454 <PrintReturnString+0x12c>

		case CMD_CANCEL_KEY:
			ShNL(bPort);
 80233be:	79fb      	ldrb	r3, [r7, #7]
 80233c0:	4618      	mov	r0, r3
 80233c2:	f7fe f959 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Command Canceled", 0);
 80233c6:	79fb      	ldrb	r3, [r7, #7]
 80233c8:	2200      	movs	r2, #0
 80233ca:	4927      	ldr	r1, [pc, #156]	@ (8023468 <PrintReturnString+0x140>)
 80233cc:	4618      	mov	r0, r3
 80233ce:	f7fe f8f3 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 80233d2:	79fb      	ldrb	r3, [r7, #7]
 80233d4:	4618      	mov	r0, r3
 80233d6:	f7fe f94f 	bl	8021678 <ShNL>
		break;
 80233da:	e03b      	b.n	8023454 <PrintReturnString+0x12c>

		case CMD_BAD_NUMBER:
			ShNL(bPort);
 80233dc:	79fb      	ldrb	r3, [r7, #7]
 80233de:	4618      	mov	r0, r3
 80233e0:	f7fe f94a 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Bad Number", 0);
 80233e4:	79fb      	ldrb	r3, [r7, #7]
 80233e6:	2200      	movs	r2, #0
 80233e8:	4920      	ldr	r1, [pc, #128]	@ (802346c <PrintReturnString+0x144>)
 80233ea:	4618      	mov	r0, r3
 80233ec:	f7fe f8e4 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 80233f0:	79fb      	ldrb	r3, [r7, #7]
 80233f2:	4618      	mov	r0, r3
 80233f4:	f7fe f940 	bl	8021678 <ShNL>
		break;
 80233f8:	e02c      	b.n	8023454 <PrintReturnString+0x12c>

		case CMD_READ_ONLY:
			ShNL(bPort);
 80233fa:	79fb      	ldrb	r3, [r7, #7]
 80233fc:	4618      	mov	r0, r3
 80233fe:	f7fe f93b 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Read Only", 0);
 8023402:	79fb      	ldrb	r3, [r7, #7]
 8023404:	2200      	movs	r2, #0
 8023406:	491a      	ldr	r1, [pc, #104]	@ (8023470 <PrintReturnString+0x148>)
 8023408:	4618      	mov	r0, r3
 802340a:	f7fe f8d5 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 802340e:	79fb      	ldrb	r3, [r7, #7]
 8023410:	4618      	mov	r0, r3
 8023412:	f7fe f931 	bl	8021678 <ShNL>
		break;
 8023416:	e01d      	b.n	8023454 <PrintReturnString+0x12c>

		case CMD_BAD_PACKET:
			ShNL(bPort);
 8023418:	79fb      	ldrb	r3, [r7, #7]
 802341a:	4618      	mov	r0, r3
 802341c:	f7fe f92c 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Bad Packet", 0);
 8023420:	79fb      	ldrb	r3, [r7, #7]
 8023422:	2200      	movs	r2, #0
 8023424:	4913      	ldr	r1, [pc, #76]	@ (8023474 <PrintReturnString+0x14c>)
 8023426:	4618      	mov	r0, r3
 8023428:	f7fe f8c6 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 802342c:	79fb      	ldrb	r3, [r7, #7]
 802342e:	4618      	mov	r0, r3
 8023430:	f7fe f922 	bl	8021678 <ShNL>
		break;
 8023434:	e00e      	b.n	8023454 <PrintReturnString+0x12c>

		case CMD_BAD_BIT_FILE:
			ShNL(bPort);
 8023436:	79fb      	ldrb	r3, [r7, #7]
 8023438:	4618      	mov	r0, r3
 802343a:	f7fe f91d 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "Bad Bit File", 0);
 802343e:	79fb      	ldrb	r3, [r7, #7]
 8023440:	2200      	movs	r2, #0
 8023442:	490d      	ldr	r1, [pc, #52]	@ (8023478 <PrintReturnString+0x150>)
 8023444:	4618      	mov	r0, r3
 8023446:	f7fe f8b7 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 802344a:	79fb      	ldrb	r3, [r7, #7]
 802344c:	4618      	mov	r0, r3
 802344e:	f7fe f913 	bl	8021678 <ShNL>
		break;
 8023452:	bf00      	nop
	}
}
 8023454:	bf00      	nop
 8023456:	3708      	adds	r7, #8
 8023458:	46bd      	mov	sp, r7
 802345a:	bd80      	pop	{r7, pc}
 802345c:	0802b0ac 	.word	0x0802b0ac
 8023460:	0802b0bc 	.word	0x0802b0bc
 8023464:	0802b0d4 	.word	0x0802b0d4
 8023468:	0802b0e4 	.word	0x0802b0e4
 802346c:	0802b0f8 	.word	0x0802b0f8
 8023470:	0802b104 	.word	0x0802b104
 8023474:	0802b110 	.word	0x0802b110
 8023478:	0802b11c 	.word	0x0802b11c

0802347c <RunScript>:
*
* @return	1 = run the script
*
*********************************************************************/
int RunScript(uint8_t bPort, char* filename, size_t nargs, char** args)
{
 802347c:	b580      	push	{r7, lr}
 802347e:	b086      	sub	sp, #24
 8023480:	af00      	add	r7, sp, #0
 8023482:	60b9      	str	r1, [r7, #8]
 8023484:	607a      	str	r2, [r7, #4]
 8023486:	603b      	str	r3, [r7, #0]
 8023488:	4603      	mov	r3, r0
 802348a:	73fb      	strb	r3, [r7, #15]
	//char* pPath;
	//uint8_t run = 0;
	FRESULT ret;
	static FIL fp;

	ret = OpenScript(&fp, szPathVar, filename);
 802348c:	68ba      	ldr	r2, [r7, #8]
 802348e:	4911      	ldr	r1, [pc, #68]	@ (80234d4 <RunScript+0x58>)
 8023490:	4811      	ldr	r0, [pc, #68]	@ (80234d8 <RunScript+0x5c>)
 8023492:	f7fe f941 	bl	8021718 <OpenScript>
 8023496:	4603      	mov	r3, r0
 8023498:	75fb      	strb	r3, [r7, #23]

	if(ret == FR_OK)
 802349a:	7dfb      	ldrb	r3, [r7, #23]
 802349c:	2b00      	cmp	r3, #0
 802349e:	d113      	bne.n	80234c8 <RunScript+0x4c>
	{
		ret = DoRun(bPort, &fp, nargs, args);	// this will close the file
 80234a0:	7bf8      	ldrb	r0, [r7, #15]
 80234a2:	683b      	ldr	r3, [r7, #0]
 80234a4:	687a      	ldr	r2, [r7, #4]
 80234a6:	490c      	ldr	r1, [pc, #48]	@ (80234d8 <RunScript+0x5c>)
 80234a8:	f001 f944 	bl	8024734 <DoRun>
 80234ac:	4603      	mov	r3, r0
 80234ae:	75fb      	strb	r3, [r7, #23]
		ShNL(bPort);
 80234b0:	7bfb      	ldrb	r3, [r7, #15]
 80234b2:	4618      	mov	r0, r3
 80234b4:	f7fe f8e0 	bl	8021678 <ShNL>
		PrintReturnString(bPort, ret);
 80234b8:	7dfa      	ldrb	r2, [r7, #23]
 80234ba:	7bfb      	ldrb	r3, [r7, #15]
 80234bc:	4611      	mov	r1, r2
 80234be:	4618      	mov	r0, r3
 80234c0:	f7ff ff32 	bl	8023328 <PrintReturnString>
		return 1;
 80234c4:	2301      	movs	r3, #1
 80234c6:	e000      	b.n	80234ca <RunScript+0x4e>
	}
	else
	{
		return 0;
 80234c8:	2300      	movs	r3, #0
	}
}
 80234ca:	4618      	mov	r0, r3
 80234cc:	3718      	adds	r7, #24
 80234ce:	46bd      	mov	sp, r7
 80234d0:	bd80      	pop	{r7, pc}
 80234d2:	bf00      	nop
 80234d4:	2001b5a4 	.word	0x2001b5a4
 80234d8:	2001e424 	.word	0x2001e424

080234dc <ShellMain>:
*
* @return	None
*
*********************************************************************/
int ShellMain(uint8_t bPort, char* buf)
{
 80234dc:	b590      	push	{r4, r7, lr}
 80234de:	f5ad 7d21 	sub.w	sp, sp, #644	@ 0x284
 80234e2:	af00      	add	r7, sp, #0
 80234e4:	4602      	mov	r2, r0
 80234e6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80234ea:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80234ee:	6019      	str	r1, [r3, #0]
 80234f0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80234f4:	f2a3 2379 	subw	r3, r3, #633	@ 0x279
 80234f8:	701a      	strb	r2, [r3, #0]
	int iCmdIndex;
	static char *args[ARG_SIZE];
	static size_t nargs;
	char StrTemp[64];
	int ret = CMD_FAILED;
 80234fa:	2303      	movs	r3, #3
 80234fc:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
    FIL fp;
    FRESULT res;

	if(strlen(buf) == 0)
 8023500:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8023504:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	781b      	ldrb	r3, [r3, #0]
 802350c:	2b00      	cmp	r3, #0
 802350e:	d101      	bne.n	8023514 <ShellMain+0x38>
	{
		return CMD_OK;
 8023510:	2300      	movs	r3, #0
 8023512:	e146      	b.n	80237a2 <ShellMain+0x2c6>
	}

	iCmdIndex = FindCommand(buf, &nargs, args);
 8023514:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8023518:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 802351c:	4aa3      	ldr	r2, [pc, #652]	@ (80237ac <ShellMain+0x2d0>)
 802351e:	49a4      	ldr	r1, [pc, #656]	@ (80237b0 <ShellMain+0x2d4>)
 8023520:	6818      	ldr	r0, [r3, #0]
 8023522:	f7ff fe53 	bl	80231cc <FindCommand>
 8023526:	f8c7 0278 	str.w	r0, [r7, #632]	@ 0x278
	if(iCmdIndex != -1)
 802352a:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 802352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023532:	d00e      	beq.n	8023552 <ShellMain+0x76>
	{
		ret = ExecuteCommand(iCmdIndex, bPort, nargs, args);
 8023534:	4b9e      	ldr	r3, [pc, #632]	@ (80237b0 <ShellMain+0x2d4>)
 8023536:	681a      	ldr	r2, [r3, #0]
 8023538:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 802353c:	f2a3 2379 	subw	r3, r3, #633	@ 0x279
 8023540:	7819      	ldrb	r1, [r3, #0]
 8023542:	4b9a      	ldr	r3, [pc, #616]	@ (80237ac <ShellMain+0x2d0>)
 8023544:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8023548:	f7ff fe24 	bl	8023194 <ExecuteCommand>
 802354c:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
 8023550:	e125      	b.n	802379e <ShellMain+0x2c2>
	}
	else if(IsVariable(args[0]))
 8023552:	4b96      	ldr	r3, [pc, #600]	@ (80237ac <ShellMain+0x2d0>)
 8023554:	681b      	ldr	r3, [r3, #0]
 8023556:	4618      	mov	r0, r3
 8023558:	f7e5 fbb8 	bl	8008ccc <IsVariable>
 802355c:	4603      	mov	r3, r0
 802355e:	2b00      	cmp	r3, #0
 8023560:	f000 80df 	beq.w	8023722 <ShellMain+0x246>
	{
		//if(args[1][0] == '=')
		if(nargs > 1 && args[1][0] == '=')
 8023564:	4b92      	ldr	r3, [pc, #584]	@ (80237b0 <ShellMain+0x2d4>)
 8023566:	681b      	ldr	r3, [r3, #0]
 8023568:	2b01      	cmp	r3, #1
 802356a:	d95c      	bls.n	8023626 <ShellMain+0x14a>
 802356c:	4b8f      	ldr	r3, [pc, #572]	@ (80237ac <ShellMain+0x2d0>)
 802356e:	685b      	ldr	r3, [r3, #4]
 8023570:	781b      	ldrb	r3, [r3, #0]
 8023572:	2b3d      	cmp	r3, #61	@ 0x3d
 8023574:	d157      	bne.n	8023626 <ShellMain+0x14a>
		{
			if(nargs == 4)
 8023576:	4b8e      	ldr	r3, [pc, #568]	@ (80237b0 <ShellMain+0x2d4>)
 8023578:	681b      	ldr	r3, [r3, #0]
 802357a:	2b04      	cmp	r3, #4
 802357c:	d142      	bne.n	8023604 <ShellMain+0x128>
			{
				// check for a math operation
				switch(args[2][0])
 802357e:	4b8b      	ldr	r3, [pc, #556]	@ (80237ac <ShellMain+0x2d0>)
 8023580:	689b      	ldr	r3, [r3, #8]
 8023582:	781b      	ldrb	r3, [r3, #0]
 8023584:	3b2a      	subs	r3, #42	@ 0x2a
 8023586:	2b05      	cmp	r3, #5
 8023588:	f200 8108 	bhi.w	802379c <ShellMain+0x2c0>
 802358c:	a201      	add	r2, pc, #4	@ (adr r2, 8023594 <ShellMain+0xb8>)
 802358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023592:	bf00      	nop
 8023594:	080235d9 	.word	0x080235d9
 8023598:	080235ad 	.word	0x080235ad
 802359c:	0802379d 	.word	0x0802379d
 80235a0:	080235c3 	.word	0x080235c3
 80235a4:	0802379d 	.word	0x0802379d
 80235a8:	080235ef 	.word	0x080235ef
				{
					case '+':
						ret = MathVariable(args[0], args[3], MV_ADD);
 80235ac:	4b7f      	ldr	r3, [pc, #508]	@ (80237ac <ShellMain+0x2d0>)
 80235ae:	681b      	ldr	r3, [r3, #0]
 80235b0:	4a7e      	ldr	r2, [pc, #504]	@ (80237ac <ShellMain+0x2d0>)
 80235b2:	68d1      	ldr	r1, [r2, #12]
 80235b4:	2200      	movs	r2, #0
 80235b6:	4618      	mov	r0, r3
 80235b8:	f7e6 f8b2 	bl	8009720 <MathVariable>
 80235bc:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 80235c0:	e030      	b.n	8023624 <ShellMain+0x148>

					case '-':
						ret = MathVariable(args[0], args[3], MV_SUBTRACT);
 80235c2:	4b7a      	ldr	r3, [pc, #488]	@ (80237ac <ShellMain+0x2d0>)
 80235c4:	681b      	ldr	r3, [r3, #0]
 80235c6:	4a79      	ldr	r2, [pc, #484]	@ (80237ac <ShellMain+0x2d0>)
 80235c8:	68d1      	ldr	r1, [r2, #12]
 80235ca:	2201      	movs	r2, #1
 80235cc:	4618      	mov	r0, r3
 80235ce:	f7e6 f8a7 	bl	8009720 <MathVariable>
 80235d2:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 80235d6:	e025      	b.n	8023624 <ShellMain+0x148>

					case '*':
						ret = MathVariable(args[0], args[3], MV_MULTIPLY);
 80235d8:	4b74      	ldr	r3, [pc, #464]	@ (80237ac <ShellMain+0x2d0>)
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	4a73      	ldr	r2, [pc, #460]	@ (80237ac <ShellMain+0x2d0>)
 80235de:	68d1      	ldr	r1, [r2, #12]
 80235e0:	2202      	movs	r2, #2
 80235e2:	4618      	mov	r0, r3
 80235e4:	f7e6 f89c 	bl	8009720 <MathVariable>
 80235e8:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 80235ec:	e01a      	b.n	8023624 <ShellMain+0x148>

					case '/':
						ret = MathVariable(args[0], args[3], MV_DIVIDE);
 80235ee:	4b6f      	ldr	r3, [pc, #444]	@ (80237ac <ShellMain+0x2d0>)
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	4a6e      	ldr	r2, [pc, #440]	@ (80237ac <ShellMain+0x2d0>)
 80235f4:	68d1      	ldr	r1, [r2, #12]
 80235f6:	2203      	movs	r2, #3
 80235f8:	4618      	mov	r0, r3
 80235fa:	f7e6 f891 	bl	8009720 <MathVariable>
 80235fe:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 8023602:	e00f      	b.n	8023624 <ShellMain+0x148>
				}
			}
			else if(nargs == 3)
 8023604:	4b6a      	ldr	r3, [pc, #424]	@ (80237b0 <ShellMain+0x2d4>)
 8023606:	681b      	ldr	r3, [r3, #0]
 8023608:	2b03      	cmp	r3, #3
 802360a:	f040 80c7 	bne.w	802379c <ShellMain+0x2c0>
			{
				// set the variable
				ret = SetVariable(args[0], args[2]);
 802360e:	4b67      	ldr	r3, [pc, #412]	@ (80237ac <ShellMain+0x2d0>)
 8023610:	681b      	ldr	r3, [r3, #0]
 8023612:	4a66      	ldr	r2, [pc, #408]	@ (80237ac <ShellMain+0x2d0>)
 8023614:	6892      	ldr	r2, [r2, #8]
 8023616:	4611      	mov	r1, r2
 8023618:	4618      	mov	r0, r3
 802361a:	f7e5 fcf9 	bl	8009010 <SetVariable>
 802361e:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
			if(nargs == 4)
 8023622:	e0bb      	b.n	802379c <ShellMain+0x2c0>
 8023624:	e0ba      	b.n	802379c <ShellMain+0x2c0>
#endif
			}
		}
		else
		{
			if(nargs == 3)
 8023626:	4b62      	ldr	r3, [pc, #392]	@ (80237b0 <ShellMain+0x2d4>)
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	2b03      	cmp	r3, #3
 802362c:	d142      	bne.n	80236b4 <ShellMain+0x1d8>
			{
				// check for a math operation
				switch(args[1][0])
 802362e:	4b5f      	ldr	r3, [pc, #380]	@ (80237ac <ShellMain+0x2d0>)
 8023630:	685b      	ldr	r3, [r3, #4]
 8023632:	781b      	ldrb	r3, [r3, #0]
 8023634:	3b2a      	subs	r3, #42	@ 0x2a
 8023636:	2b05      	cmp	r3, #5
 8023638:	f200 80b1 	bhi.w	802379e <ShellMain+0x2c2>
 802363c:	a201      	add	r2, pc, #4	@ (adr r2, 8023644 <ShellMain+0x168>)
 802363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023642:	bf00      	nop
 8023644:	08023689 	.word	0x08023689
 8023648:	0802365d 	.word	0x0802365d
 802364c:	0802379f 	.word	0x0802379f
 8023650:	08023673 	.word	0x08023673
 8023654:	0802379f 	.word	0x0802379f
 8023658:	0802369f 	.word	0x0802369f
				{
					case '+':
						ret = MathVariable(args[0], args[1], MV_ADD);
 802365c:	4b53      	ldr	r3, [pc, #332]	@ (80237ac <ShellMain+0x2d0>)
 802365e:	681b      	ldr	r3, [r3, #0]
 8023660:	4a52      	ldr	r2, [pc, #328]	@ (80237ac <ShellMain+0x2d0>)
 8023662:	6851      	ldr	r1, [r2, #4]
 8023664:	2200      	movs	r2, #0
 8023666:	4618      	mov	r0, r3
 8023668:	f7e6 f85a 	bl	8009720 <MathVariable>
 802366c:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 8023670:	e095      	b.n	802379e <ShellMain+0x2c2>

					case '-':
						ret = MathVariable(args[0], args[1], MV_SUBTRACT);
 8023672:	4b4e      	ldr	r3, [pc, #312]	@ (80237ac <ShellMain+0x2d0>)
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	4a4d      	ldr	r2, [pc, #308]	@ (80237ac <ShellMain+0x2d0>)
 8023678:	6851      	ldr	r1, [r2, #4]
 802367a:	2201      	movs	r2, #1
 802367c:	4618      	mov	r0, r3
 802367e:	f7e6 f84f 	bl	8009720 <MathVariable>
 8023682:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 8023686:	e08a      	b.n	802379e <ShellMain+0x2c2>

					case '*':
						ret = MathVariable(args[0], args[1], MV_MULTIPLY);
 8023688:	4b48      	ldr	r3, [pc, #288]	@ (80237ac <ShellMain+0x2d0>)
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	4a47      	ldr	r2, [pc, #284]	@ (80237ac <ShellMain+0x2d0>)
 802368e:	6851      	ldr	r1, [r2, #4]
 8023690:	2202      	movs	r2, #2
 8023692:	4618      	mov	r0, r3
 8023694:	f7e6 f844 	bl	8009720 <MathVariable>
 8023698:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 802369c:	e07f      	b.n	802379e <ShellMain+0x2c2>

					case '/':
						ret = MathVariable(args[0], args[1], MV_DIVIDE);
 802369e:	4b43      	ldr	r3, [pc, #268]	@ (80237ac <ShellMain+0x2d0>)
 80236a0:	681b      	ldr	r3, [r3, #0]
 80236a2:	4a42      	ldr	r2, [pc, #264]	@ (80237ac <ShellMain+0x2d0>)
 80236a4:	6851      	ldr	r1, [r2, #4]
 80236a6:	2203      	movs	r2, #3
 80236a8:	4618      	mov	r0, r3
 80236aa:	f7e6 f839 	bl	8009720 <MathVariable>
 80236ae:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
					break;
 80236b2:	e074      	b.n	802379e <ShellMain+0x2c2>
				}
			}
			else if(nargs == 2)
 80236b4:	4b3e      	ldr	r3, [pc, #248]	@ (80237b0 <ShellMain+0x2d4>)
 80236b6:	681b      	ldr	r3, [r3, #0]
 80236b8:	2b02      	cmp	r3, #2
 80236ba:	d10a      	bne.n	80236d2 <ShellMain+0x1f6>
			{
				// set the variable
				ret = SetVariable(args[0], args[1]);
 80236bc:	4b3b      	ldr	r3, [pc, #236]	@ (80237ac <ShellMain+0x2d0>)
 80236be:	681b      	ldr	r3, [r3, #0]
 80236c0:	4a3a      	ldr	r2, [pc, #232]	@ (80237ac <ShellMain+0x2d0>)
 80236c2:	6852      	ldr	r2, [r2, #4]
 80236c4:	4611      	mov	r1, r2
 80236c6:	4618      	mov	r0, r3
 80236c8:	f7e5 fca2 	bl	8009010 <SetVariable>
 80236cc:	f8c7 027c 	str.w	r0, [r7, #636]	@ 0x27c
 80236d0:	e065      	b.n	802379e <ShellMain+0x2c2>
#endif
			}
			else
			{
				// get the variable
				GetVariable(args[0], StrTemp, strlen(StrTemp));
 80236d2:	4b36      	ldr	r3, [pc, #216]	@ (80237ac <ShellMain+0x2d0>)
 80236d4:	681c      	ldr	r4, [r3, #0]
 80236d6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80236da:	4618      	mov	r0, r3
 80236dc:	f7dc fde2 	bl	80002a4 <strlen>
 80236e0:	4603      	mov	r3, r0
 80236e2:	461a      	mov	r2, r3
 80236e4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80236e8:	4619      	mov	r1, r3
 80236ea:	4620      	mov	r0, r4
 80236ec:	f7e5 fb58 	bl	8008da0 <GetVariable>
				ShFieldOut(bPort, " ", 0);
 80236f0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80236f4:	f2a3 2379 	subw	r3, r3, #633	@ 0x279
 80236f8:	781b      	ldrb	r3, [r3, #0]
 80236fa:	2200      	movs	r2, #0
 80236fc:	492d      	ldr	r1, [pc, #180]	@ (80237b4 <ShellMain+0x2d8>)
 80236fe:	4618      	mov	r0, r3
 8023700:	f7fd ff5a 	bl	80215b8 <ShFieldOut>
				ShFieldOut(bPort, StrTemp, 0);
 8023704:	f507 710e 	add.w	r1, r7, #568	@ 0x238
 8023708:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 802370c:	f2a3 2379 	subw	r3, r3, #633	@ 0x279
 8023710:	781b      	ldrb	r3, [r3, #0]
 8023712:	2200      	movs	r2, #0
 8023714:	4618      	mov	r0, r3
 8023716:	f7fd ff4f 	bl	80215b8 <ShFieldOut>
				ret = CMD_OK;
 802371a:	2300      	movs	r3, #0
 802371c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8023720:	e03d      	b.n	802379e <ShellMain+0x2c2>
			}
		}
	}
	else
	{
		if(RunScript(bPort, args[0], nargs, args) == 0)
 8023722:	4b22      	ldr	r3, [pc, #136]	@ (80237ac <ShellMain+0x2d0>)
 8023724:	6819      	ldr	r1, [r3, #0]
 8023726:	4b22      	ldr	r3, [pc, #136]	@ (80237b0 <ShellMain+0x2d4>)
 8023728:	681a      	ldr	r2, [r3, #0]
 802372a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 802372e:	f2a3 2379 	subw	r3, r3, #633	@ 0x279
 8023732:	7818      	ldrb	r0, [r3, #0]
 8023734:	4b1d      	ldr	r3, [pc, #116]	@ (80237ac <ShellMain+0x2d0>)
 8023736:	f7ff fea1 	bl	802347c <RunScript>
 802373a:	4603      	mov	r3, r0
 802373c:	2b00      	cmp	r3, #0
 802373e:	d129      	bne.n	8023794 <ShellMain+0x2b8>
		{
			if(strlen(buf) != 0)
 8023740:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8023744:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8023748:	681b      	ldr	r3, [r3, #0]
 802374a:	781b      	ldrb	r3, [r3, #0]
 802374c:	2b00      	cmp	r3, #0
 802374e:	d01e      	beq.n	802378e <ShellMain+0x2b2>
//k					iCmdIndex = FindCommand("packet", &nargs, args);
//k					ret = ExecuteCommand(iCmdIndex, bPort, nargs, args);
//k				}
//k				else
				{
					ShNL(bPort);
 8023750:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8023754:	f2a3 2379 	subw	r3, r3, #633	@ 0x279
 8023758:	781b      	ldrb	r3, [r3, #0]
 802375a:	4618      	mov	r0, r3
 802375c:	f7fd ff8c 	bl	8021678 <ShNL>
					ShFieldOut(bPort, buf, 0);
 8023760:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8023764:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8023768:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 802376c:	f2a2 2279 	subw	r2, r2, #633	@ 0x279
 8023770:	7810      	ldrb	r0, [r2, #0]
 8023772:	2200      	movs	r2, #0
 8023774:	6819      	ldr	r1, [r3, #0]
 8023776:	f7fd ff1f 	bl	80215b8 <ShFieldOut>
					ShFieldOut(bPort, " Not Found", 0);
 802377a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 802377e:	f2a3 2379 	subw	r3, r3, #633	@ 0x279
 8023782:	781b      	ldrb	r3, [r3, #0]
 8023784:	2200      	movs	r2, #0
 8023786:	490c      	ldr	r1, [pc, #48]	@ (80237b8 <ShellMain+0x2dc>)
 8023788:	4618      	mov	r0, r3
 802378a:	f7fd ff15 	bl	80215b8 <ShFieldOut>
				}
			}
			ret = CMD_OK;
 802378e:	2300      	movs	r3, #0
 8023790:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
		}
		ret = CMD_OK;
 8023794:	2300      	movs	r3, #0
 8023796:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 802379a:	e000      	b.n	802379e <ShellMain+0x2c2>
			if(nargs == 4)
 802379c:	bf00      	nop
	}
	return ret;
 802379e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
}
 80237a2:	4618      	mov	r0, r3
 80237a4:	f507 7721 	add.w	r7, r7, #644	@ 0x284
 80237a8:	46bd      	mov	sp, r7
 80237aa:	bd90      	pop	{r4, r7, pc}
 80237ac:	2001e658 	.word	0x2001e658
 80237b0:	2001e654 	.word	0x2001e654
 80237b4:	0802b12c 	.word	0x0802b12c
 80237b8:	0802b130 	.word	0x0802b130

080237bc <PortIndex>:
*
* @return	port index
*
*********************************************************************/
uint8_t PortIndex(uint8_t p)
{
 80237bc:	b480      	push	{r7}
 80237be:	b085      	sub	sp, #20
 80237c0:	af00      	add	r7, sp, #0
 80237c2:	4603      	mov	r3, r0
 80237c4:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80237c6:	2300      	movs	r3, #0
 80237c8:	73fb      	strb	r3, [r7, #15]
	while((p & 0x01) == 0)
 80237ca:	e005      	b.n	80237d8 <PortIndex+0x1c>
	{
		p >>= 1;
 80237cc:	79fb      	ldrb	r3, [r7, #7]
 80237ce:	085b      	lsrs	r3, r3, #1
 80237d0:	71fb      	strb	r3, [r7, #7]
		i++;
 80237d2:	7bfb      	ldrb	r3, [r7, #15]
 80237d4:	3301      	adds	r3, #1
 80237d6:	73fb      	strb	r3, [r7, #15]
	while((p & 0x01) == 0)
 80237d8:	79fb      	ldrb	r3, [r7, #7]
 80237da:	f003 0301 	and.w	r3, r3, #1
 80237de:	2b00      	cmp	r3, #0
 80237e0:	d0f4      	beq.n	80237cc <PortIndex+0x10>
	}
	if(i > MAX_PORTS)
 80237e2:	7bfb      	ldrb	r3, [r7, #15]
 80237e4:	2b03      	cmp	r3, #3
 80237e6:	d901      	bls.n	80237ec <PortIndex+0x30>
	{
		i = 0;
 80237e8:	2300      	movs	r3, #0
 80237ea:	73fb      	strb	r3, [r7, #15]
	}
	return i;
 80237ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80237ee:	4618      	mov	r0, r3
 80237f0:	3714      	adds	r7, #20
 80237f2:	46bd      	mov	sp, r7
 80237f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237f8:	4770      	bx	lr
	...

080237fc <DoShell>:
*
* @return	None
*
*********************************************************************/
void DoShell(void)
{
 80237fc:	b580      	push	{r7, lr}
 80237fe:	b082      	sub	sp, #8
 8023800:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t portidx;
	int ret;

	// get the next character to process
	port = PORT1;
 8023802:	2301      	movs	r3, #1
 8023804:	71bb      	strb	r3, [r7, #6]
	c = ShGetChar(PORT1);
 8023806:	2001      	movs	r0, #1
 8023808:	f7fd ff5c 	bl	80216c4 <ShGetChar>
 802380c:	4603      	mov	r3, r0
 802380e:	71fb      	strb	r3, [r7, #7]
	if(c == 0)
 8023810:	79fb      	ldrb	r3, [r7, #7]
 8023812:	2b00      	cmp	r3, #0
 8023814:	d106      	bne.n	8023824 <DoShell+0x28>
	{
		port = PORT3;
 8023816:	2304      	movs	r3, #4
 8023818:	71bb      	strb	r3, [r7, #6]
		c = ShGetChar(PORT3);
 802381a:	2004      	movs	r0, #4
 802381c:	f7fd ff52 	bl	80216c4 <ShGetChar>
 8023820:	4603      	mov	r3, r0
 8023822:	71fb      	strb	r3, [r7, #7]
//			port = PORTT;
//			c = ShGetChar(PORTT);
		}
	}

	if(c)
 8023824:	79fb      	ldrb	r3, [r7, #7]
 8023826:	2b00      	cmp	r3, #0
 8023828:	f000 8093 	beq.w	8023952 <DoShell+0x156>
	{
		portidx = PortIndex(port);
 802382c:	79bb      	ldrb	r3, [r7, #6]
 802382e:	4618      	mov	r0, r3
 8023830:	f7ff ffc4 	bl	80237bc <PortIndex>
 8023834:	4603      	mov	r3, r0
 8023836:	717b      	strb	r3, [r7, #5]
		if(c == '\r')
 8023838:	79fb      	ldrb	r3, [r7, #7]
 802383a:	2b0d      	cmp	r3, #13
 802383c:	d12e      	bne.n	802389c <DoShell+0xa0>
		{
			ret = ShellMain(port, (char*)shell_buf[portidx]);
 802383e:	797a      	ldrb	r2, [r7, #5]
 8023840:	4613      	mov	r3, r2
 8023842:	009b      	lsls	r3, r3, #2
 8023844:	4413      	add	r3, r2
 8023846:	011b      	lsls	r3, r3, #4
 8023848:	4a44      	ldr	r2, [pc, #272]	@ (802395c <DoShell+0x160>)
 802384a:	441a      	add	r2, r3
 802384c:	79bb      	ldrb	r3, [r7, #6]
 802384e:	4611      	mov	r1, r2
 8023850:	4618      	mov	r0, r3
 8023852:	f7ff fe43 	bl	80234dc <ShellMain>
 8023856:	6038      	str	r0, [r7, #0]
			Prompt(port);
 8023858:	79bb      	ldrb	r3, [r7, #6]
 802385a:	4618      	mov	r0, r3
 802385c:	f7ff fd0a 	bl	8023274 <Prompt>
			//ShNL(port);
			PrintReturnString(port, ret);
 8023860:	79bb      	ldrb	r3, [r7, #6]
 8023862:	6839      	ldr	r1, [r7, #0]
 8023864:	4618      	mov	r0, r3
 8023866:	f7ff fd5f 	bl	8023328 <PrintReturnString>
			shell_index = 0;
 802386a:	4b3d      	ldr	r3, [pc, #244]	@ (8023960 <DoShell+0x164>)
 802386c:	2200      	movs	r2, #0
 802386e:	701a      	strb	r2, [r3, #0]
			shell_buf[portidx][0] = 0;
 8023870:	797a      	ldrb	r2, [r7, #5]
 8023872:	493a      	ldr	r1, [pc, #232]	@ (802395c <DoShell+0x160>)
 8023874:	4613      	mov	r3, r2
 8023876:	009b      	lsls	r3, r3, #2
 8023878:	4413      	add	r3, r2
 802387a:	011b      	lsls	r3, r3, #4
 802387c:	440b      	add	r3, r1
 802387e:	2200      	movs	r2, #0
 8023880:	701a      	strb	r2, [r3, #0]

			AddToHistory(portidx, shell_buf[portidx]);
 8023882:	797a      	ldrb	r2, [r7, #5]
 8023884:	4613      	mov	r3, r2
 8023886:	009b      	lsls	r3, r3, #2
 8023888:	4413      	add	r3, r2
 802388a:	011b      	lsls	r3, r3, #4
 802388c:	4a33      	ldr	r2, [pc, #204]	@ (802395c <DoShell+0x160>)
 802388e:	441a      	add	r2, r3
 8023890:	797b      	ldrb	r3, [r7, #5]
 8023892:	4611      	mov	r1, r2
 8023894:	4618      	mov	r0, r3
 8023896:	f7ff fbd5 	bl	8023044 <AddToHistory>
		else
		{
			// ignore invalid characters
		}
	}
}
 802389a:	e05a      	b.n	8023952 <DoShell+0x156>
		else if (c == 0x7F || c == 8)        // Rubout (DEL) or Backspace
 802389c:	79fb      	ldrb	r3, [r7, #7]
 802389e:	2b7f      	cmp	r3, #127	@ 0x7f
 80238a0:	d002      	beq.n	80238a8 <DoShell+0xac>
 80238a2:	79fb      	ldrb	r3, [r7, #7]
 80238a4:	2b08      	cmp	r3, #8
 80238a6:	d126      	bne.n	80238f6 <DoShell+0xfa>
			if (shell_index > 0)
 80238a8:	4b2d      	ldr	r3, [pc, #180]	@ (8023960 <DoShell+0x164>)
 80238aa:	781b      	ldrb	r3, [r3, #0]
 80238ac:	2b00      	cmp	r3, #0
 80238ae:	d050      	beq.n	8023952 <DoShell+0x156>
				ShCharOut(port,8);
 80238b0:	79bb      	ldrb	r3, [r7, #6]
 80238b2:	2108      	movs	r1, #8
 80238b4:	4618      	mov	r0, r3
 80238b6:	f7fd fe37 	bl	8021528 <ShCharOut>
				ShCharOut(port,' ');
 80238ba:	79bb      	ldrb	r3, [r7, #6]
 80238bc:	2120      	movs	r1, #32
 80238be:	4618      	mov	r0, r3
 80238c0:	f7fd fe32 	bl	8021528 <ShCharOut>
				ShCharOut(port,8);
 80238c4:	79bb      	ldrb	r3, [r7, #6]
 80238c6:	2108      	movs	r1, #8
 80238c8:	4618      	mov	r0, r3
 80238ca:	f7fd fe2d 	bl	8021528 <ShCharOut>
				shell_buf[portidx][--shell_index] = 0;
 80238ce:	797a      	ldrb	r2, [r7, #5]
 80238d0:	4b23      	ldr	r3, [pc, #140]	@ (8023960 <DoShell+0x164>)
 80238d2:	781b      	ldrb	r3, [r3, #0]
 80238d4:	3b01      	subs	r3, #1
 80238d6:	b2d9      	uxtb	r1, r3
 80238d8:	4b21      	ldr	r3, [pc, #132]	@ (8023960 <DoShell+0x164>)
 80238da:	7019      	strb	r1, [r3, #0]
 80238dc:	4b20      	ldr	r3, [pc, #128]	@ (8023960 <DoShell+0x164>)
 80238de:	781b      	ldrb	r3, [r3, #0]
 80238e0:	4618      	mov	r0, r3
 80238e2:	491e      	ldr	r1, [pc, #120]	@ (802395c <DoShell+0x160>)
 80238e4:	4613      	mov	r3, r2
 80238e6:	009b      	lsls	r3, r3, #2
 80238e8:	4413      	add	r3, r2
 80238ea:	011b      	lsls	r3, r3, #4
 80238ec:	440b      	add	r3, r1
 80238ee:	4403      	add	r3, r0
 80238f0:	2200      	movs	r2, #0
 80238f2:	701a      	strb	r2, [r3, #0]
			if (shell_index > 0)
 80238f4:	e02d      	b.n	8023952 <DoShell+0x156>
		else if(c == '\n')
 80238f6:	79fb      	ldrb	r3, [r7, #7]
 80238f8:	2b0a      	cmp	r3, #10
 80238fa:	d02a      	beq.n	8023952 <DoShell+0x156>
		else if (c >= 32 && c <= 126)
 80238fc:	79fb      	ldrb	r3, [r7, #7]
 80238fe:	2b1f      	cmp	r3, #31
 8023900:	d927      	bls.n	8023952 <DoShell+0x156>
 8023902:	79fb      	ldrb	r3, [r7, #7]
 8023904:	2b7e      	cmp	r3, #126	@ 0x7e
 8023906:	d824      	bhi.n	8023952 <DoShell+0x156>
			ShCharOut(port, c);
 8023908:	79fa      	ldrb	r2, [r7, #7]
 802390a:	79bb      	ldrb	r3, [r7, #6]
 802390c:	4611      	mov	r1, r2
 802390e:	4618      	mov	r0, r3
 8023910:	f7fd fe0a 	bl	8021528 <ShCharOut>
			shell_buf[portidx][shell_index++] = c;
 8023914:	797a      	ldrb	r2, [r7, #5]
 8023916:	4b12      	ldr	r3, [pc, #72]	@ (8023960 <DoShell+0x164>)
 8023918:	781b      	ldrb	r3, [r3, #0]
 802391a:	1c59      	adds	r1, r3, #1
 802391c:	b2c8      	uxtb	r0, r1
 802391e:	4910      	ldr	r1, [pc, #64]	@ (8023960 <DoShell+0x164>)
 8023920:	7008      	strb	r0, [r1, #0]
 8023922:	4618      	mov	r0, r3
 8023924:	490d      	ldr	r1, [pc, #52]	@ (802395c <DoShell+0x160>)
 8023926:	4613      	mov	r3, r2
 8023928:	009b      	lsls	r3, r3, #2
 802392a:	4413      	add	r3, r2
 802392c:	011b      	lsls	r3, r3, #4
 802392e:	440b      	add	r3, r1
 8023930:	4403      	add	r3, r0
 8023932:	79fa      	ldrb	r2, [r7, #7]
 8023934:	701a      	strb	r2, [r3, #0]
			shell_buf[portidx][shell_index] = 0;
 8023936:	797a      	ldrb	r2, [r7, #5]
 8023938:	4b09      	ldr	r3, [pc, #36]	@ (8023960 <DoShell+0x164>)
 802393a:	781b      	ldrb	r3, [r3, #0]
 802393c:	4618      	mov	r0, r3
 802393e:	4907      	ldr	r1, [pc, #28]	@ (802395c <DoShell+0x160>)
 8023940:	4613      	mov	r3, r2
 8023942:	009b      	lsls	r3, r3, #2
 8023944:	4413      	add	r3, r2
 8023946:	011b      	lsls	r3, r3, #4
 8023948:	440b      	add	r3, r1
 802394a:	4403      	add	r3, r0
 802394c:	2200      	movs	r2, #0
 802394e:	701a      	strb	r2, [r3, #0]
}
 8023950:	e7ff      	b.n	8023952 <DoShell+0x156>
 8023952:	bf00      	nop
 8023954:	3708      	adds	r7, #8
 8023956:	46bd      	mov	sp, r7
 8023958:	bd80      	pop	{r7, pc}
 802395a:	bf00      	nop
 802395c:	2001d9a4 	.word	0x2001d9a4
 8023960:	2001d9a0 	.word	0x2001d9a0

08023964 <ShellTask>:
*
* @return	None
*
*********************************************************************/
void ShellTask(void *argument)
{
 8023964:	b580      	push	{r7, lr}
 8023966:	b082      	sub	sp, #8
 8023968:	af00      	add	r7, sp, #0
 802396a:	6078      	str	r0, [r7, #4]
	ShellInit();
 802396c:	f7ff fcac 	bl	80232c8 <ShellInit>

	while(1)
	{
		DoShell();
 8023970:	f7ff ff44 	bl	80237fc <DoShell>
		osDelay(pdMS_TO_TICKS(1));
 8023974:	2001      	movs	r0, #1
 8023976:	f7f8 fad7 	bl	801bf28 <osDelay>
		DoShell();
 802397a:	bf00      	nop
 802397c:	e7f8      	b.n	8023970 <ShellTask+0xc>

0802397e <ScriptTask>:
*
* @return	None
*
*********************************************************************/
void ScriptTask(void *argument)
{
 802397e:	b580      	push	{r7, lr}
 8023980:	b082      	sub	sp, #8
 8023982:	af00      	add	r7, sp, #0
 8023984:	6078      	str	r0, [r7, #4]
//	ScriptInit();

	while(1)
	{
		DoScriptRun();
 8023986:	f000 ff9b 	bl	80248c0 <DoScriptRun>
		osDelay(pdMS_TO_TICKS(1));
 802398a:	2001      	movs	r0, #1
 802398c:	f7f8 facc 	bl	801bf28 <osDelay>
		DoScriptRun();
 8023990:	bf00      	nop
 8023992:	e7f8      	b.n	8023986 <ScriptTask+0x8>

08023994 <GetExtension>:
	EXT_SCRIPT,
	EXT_PAKET,
} FILE_EXTENSION;

FILE_EXTENSION GetExtension(char* fname)
{
 8023994:	b580      	push	{r7, lr}
 8023996:	b084      	sub	sp, #16
 8023998:	af00      	add	r7, sp, #0
 802399a:	6078      	str	r0, [r7, #4]
	FILE_EXTENSION ret = EXT_NONE;
 802399c:	2300      	movs	r3, #0
 802399e:	73fb      	strb	r3, [r7, #15]

	while(*fname != 0)
 80239a0:	e006      	b.n	80239b0 <GetExtension+0x1c>
	{
		if(*fname == '.')
 80239a2:	687b      	ldr	r3, [r7, #4]
 80239a4:	781b      	ldrb	r3, [r3, #0]
 80239a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80239a8:	d007      	beq.n	80239ba <GetExtension+0x26>
		{
			break;
		}
		fname++;
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	3301      	adds	r3, #1
 80239ae:	607b      	str	r3, [r7, #4]
	while(*fname != 0)
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	781b      	ldrb	r3, [r3, #0]
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	d1f4      	bne.n	80239a2 <GetExtension+0xe>
 80239b8:	e000      	b.n	80239bc <GetExtension+0x28>
			break;
 80239ba:	bf00      	nop
	}

	if(stricmp(fname, SCRIPT_DEFAULT_EXTENSION) == 0)
 80239bc:	490b      	ldr	r1, [pc, #44]	@ (80239ec <GetExtension+0x58>)
 80239be:	6878      	ldr	r0, [r7, #4]
 80239c0:	f7ff f8d0 	bl	8022b64 <strcasecmp>
 80239c4:	4603      	mov	r3, r0
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d102      	bne.n	80239d0 <GetExtension+0x3c>
	{
		ret = EXT_SCRIPT;
 80239ca:	2301      	movs	r3, #1
 80239cc:	73fb      	strb	r3, [r7, #15]
 80239ce:	e008      	b.n	80239e2 <GetExtension+0x4e>
	}
	else if(stricmp(fname, PACKET_DEFAULT_EXTENSION) == 0)
 80239d0:	4907      	ldr	r1, [pc, #28]	@ (80239f0 <GetExtension+0x5c>)
 80239d2:	6878      	ldr	r0, [r7, #4]
 80239d4:	f7ff f8c6 	bl	8022b64 <strcasecmp>
 80239d8:	4603      	mov	r3, r0
 80239da:	2b00      	cmp	r3, #0
 80239dc:	d101      	bne.n	80239e2 <GetExtension+0x4e>
	{
		ret = EXT_PAKET;
 80239de:	2302      	movs	r3, #2
 80239e0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80239e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80239e4:	4618      	mov	r0, r3
 80239e6:	3710      	adds	r7, #16
 80239e8:	46bd      	mov	sp, r7
 80239ea:	bd80      	pop	{r7, pc}
 80239ec:	0802b13c 	.word	0x0802b13c
 80239f0:	0802b144 	.word	0x0802b144

080239f4 <scan_files>:
* @return	file result - FR-xx
*
*********************************************************************/
/* Start node to be scanned (***also used as work area***) */
FRESULT scan_files(uint8_t bPort, char* path, _Bool sh, _Bool color, _Bool wide)
{
 80239f4:	b580      	push	{r7, lr}
 80239f6:	b096      	sub	sp, #88	@ 0x58
 80239f8:	af00      	add	r7, sp, #0
 80239fa:	6039      	str	r1, [r7, #0]
 80239fc:	4611      	mov	r1, r2
 80239fe:	461a      	mov	r2, r3
 8023a00:	4603      	mov	r3, r0
 8023a02:	71fb      	strb	r3, [r7, #7]
 8023a04:	460b      	mov	r3, r1
 8023a06:	71bb      	strb	r3, [r7, #6]
 8023a08:	4613      	mov	r3, r2
 8023a0a:	717b      	strb	r3, [r7, #5]
    DIR dir;
    UINT i;
    static FILINFO fno;
    char szTemp[16];
    FILE_EXTENSION extension;
    int count = 0;
 8023a0c:	2300      	movs	r3, #0
 8023a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ShNL(bPort);
 8023a10:	79fb      	ldrb	r3, [r7, #7]
 8023a12:	4618      	mov	r0, r3
 8023a14:	f7fd fe30 	bl	8021678 <ShNL>
    res = f_opendir(&dir, path);                       /* Open the directory */
 8023a18:	f107 0318 	add.w	r3, r7, #24
 8023a1c:	6839      	ldr	r1, [r7, #0]
 8023a1e:	4618      	mov	r0, r3
 8023a20:	f7f7 fb88 	bl	801b134 <f_opendir>
 8023a24:	4603      	mov	r3, r0
 8023a26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (res == FR_OK)
 8023a2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8023a2e:	2b00      	cmp	r3, #0
 8023a30:	f040 816a 	bne.w	8023d08 <scan_files+0x314>
    {
        for (;;)
        {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8023a34:	f107 0318 	add.w	r3, r7, #24
 8023a38:	49b6      	ldr	r1, [pc, #728]	@ (8023d14 <scan_files+0x320>)
 8023a3a:	4618      	mov	r0, r3
 8023a3c:	f7f7 fc1e 	bl	801b27c <f_readdir>
 8023a40:	4603      	mov	r3, r0
 8023a42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8023a46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	f040 8157 	bne.w	8023cfe <scan_files+0x30a>
 8023a50:	4bb0      	ldr	r3, [pc, #704]	@ (8023d14 <scan_files+0x320>)
 8023a52:	7a5b      	ldrb	r3, [r3, #9]
 8023a54:	2b00      	cmp	r3, #0
 8023a56:	f000 8152 	beq.w	8023cfe <scan_files+0x30a>
            if ((fno.fattrib & AM_SYS) == 0)
 8023a5a:	4bae      	ldr	r3, [pc, #696]	@ (8023d14 <scan_files+0x320>)
 8023a5c:	7a1b      	ldrb	r3, [r3, #8]
 8023a5e:	f003 0304 	and.w	r3, r3, #4
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d1e6      	bne.n	8023a34 <scan_files+0x40>
            {
                if (sh != 0 || (fno.fattrib & AM_HID) == 0)
 8023a66:	79bb      	ldrb	r3, [r7, #6]
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	d105      	bne.n	8023a78 <scan_files+0x84>
 8023a6c:	4ba9      	ldr	r3, [pc, #676]	@ (8023d14 <scan_files+0x320>)
 8023a6e:	7a1b      	ldrb	r3, [r3, #8]
 8023a70:	f003 0302 	and.w	r3, r3, #2
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d1dd      	bne.n	8023a34 <scan_files+0x40>
                {

					if (fno.fattrib & AM_DIR)
 8023a78:	4ba6      	ldr	r3, [pc, #664]	@ (8023d14 <scan_files+0x320>)
 8023a7a:	7a1b      	ldrb	r3, [r3, #8]
 8023a7c:	f003 0310 	and.w	r3, r3, #16
 8023a80:	2b00      	cmp	r3, #0
 8023a82:	f000 8083 	beq.w	8023b8c <scan_files+0x198>
					{
						/* It is a directory */
						if(color)
 8023a86:	797b      	ldrb	r3, [r7, #5]
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	d010      	beq.n	8023aae <scan_files+0xba>
						{
		                	//TextColor(bPort, FG_Yellow, BG_Default, ATT_Bold);
		                	TextColor(bPort, FG_Red, BG_Default, ATT_Bold);
 8023a8c:	79f8      	ldrb	r0, [r7, #7]
 8023a8e:	2301      	movs	r3, #1
 8023a90:	2231      	movs	r2, #49	@ 0x31
 8023a92:	211f      	movs	r1, #31
 8023a94:	f7fd fc5a 	bl	802134c <TextColor>
							ShFieldOut(bPort, fno.fname, 15);
 8023a98:	79fb      	ldrb	r3, [r7, #7]
 8023a9a:	220f      	movs	r2, #15
 8023a9c:	499e      	ldr	r1, [pc, #632]	@ (8023d18 <scan_files+0x324>)
 8023a9e:	4618      	mov	r0, r3
 8023aa0:	f7fd fd8a 	bl	80215b8 <ShFieldOut>
							ResetColor(bPort);
 8023aa4:	79fb      	ldrb	r3, [r7, #7]
 8023aa6:	4618      	mov	r0, r3
 8023aa8:	f7fd fc78 	bl	802139c <ResetColor>
 8023aac:	e005      	b.n	8023aba <scan_files+0xc6>
						}
						else
						{
							ShFieldOut(bPort, fno.fname, 15);
 8023aae:	79fb      	ldrb	r3, [r7, #7]
 8023ab0:	220f      	movs	r2, #15
 8023ab2:	4999      	ldr	r1, [pc, #612]	@ (8023d18 <scan_files+0x324>)
 8023ab4:	4618      	mov	r0, r3
 8023ab6:	f7fd fd7f 	bl	80215b8 <ShFieldOut>
						}
						count++;
 8023aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023abc:	3301      	adds	r3, #1
 8023abe:	64fb      	str	r3, [r7, #76]	@ 0x4c

						if(wide == 0)
 8023ac0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8023ac4:	f083 0301 	eor.w	r3, r3, #1
 8023ac8:	b2db      	uxtb	r3, r3
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	d053      	beq.n	8023b76 <scan_files+0x182>
						{
							ShFieldOut(bPort, "<dir>", 10);
 8023ace:	79fb      	ldrb	r3, [r7, #7]
 8023ad0:	220a      	movs	r2, #10
 8023ad2:	4992      	ldr	r1, [pc, #584]	@ (8023d1c <scan_files+0x328>)
 8023ad4:	4618      	mov	r0, r3
 8023ad6:	f7fd fd6f 	bl	80215b8 <ShFieldOut>

							fat_to_date(fno.fdate, szTemp);
 8023ada:	4b8e      	ldr	r3, [pc, #568]	@ (8023d14 <scan_files+0x320>)
 8023adc:	889b      	ldrh	r3, [r3, #4]
 8023ade:	f107 0208 	add.w	r2, r7, #8
 8023ae2:	4611      	mov	r1, r2
 8023ae4:	4618      	mov	r0, r3
 8023ae6:	f7e6 fcb5 	bl	800a454 <fat_to_date>
							ShFieldOut(bPort, szTemp, 12);
 8023aea:	f107 0108 	add.w	r1, r7, #8
 8023aee:	79fb      	ldrb	r3, [r7, #7]
 8023af0:	220c      	movs	r2, #12
 8023af2:	4618      	mov	r0, r3
 8023af4:	f7fd fd60 	bl	80215b8 <ShFieldOut>

							fat_to_time(fno.ftime, szTemp);
 8023af8:	4b86      	ldr	r3, [pc, #536]	@ (8023d14 <scan_files+0x320>)
 8023afa:	88db      	ldrh	r3, [r3, #6]
 8023afc:	f107 0208 	add.w	r2, r7, #8
 8023b00:	4611      	mov	r1, r2
 8023b02:	4618      	mov	r0, r3
 8023b04:	f7e6 fc80 	bl	800a408 <fat_to_time>
							ShFieldOut(bPort, szTemp, 10);
 8023b08:	f107 0108 	add.w	r1, r7, #8
 8023b0c:	79fb      	ldrb	r3, [r7, #7]
 8023b0e:	220a      	movs	r2, #10
 8023b10:	4618      	mov	r0, r3
 8023b12:	f7fd fd51 	bl	80215b8 <ShFieldOut>

							strcpy(szTemp, "RHSVDA");
 8023b16:	f107 0308 	add.w	r3, r7, #8
 8023b1a:	4a81      	ldr	r2, [pc, #516]	@ (8023d20 <scan_files+0x32c>)
 8023b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023b20:	6018      	str	r0, [r3, #0]
 8023b22:	3304      	adds	r3, #4
 8023b24:	8019      	strh	r1, [r3, #0]
 8023b26:	3302      	adds	r3, #2
 8023b28:	0c0a      	lsrs	r2, r1, #16
 8023b2a:	701a      	strb	r2, [r3, #0]
							for(i = 0; i < 6; i++)
 8023b2c:	2300      	movs	r3, #0
 8023b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8023b30:	e012      	b.n	8023b58 <scan_files+0x164>
							{
								if((fno.fattrib & bBitMask[i]) == 0)
 8023b32:	4b78      	ldr	r3, [pc, #480]	@ (8023d14 <scan_files+0x320>)
 8023b34:	7a1a      	ldrb	r2, [r3, #8]
 8023b36:	497b      	ldr	r1, [pc, #492]	@ (8023d24 <scan_files+0x330>)
 8023b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023b3a:	440b      	add	r3, r1
 8023b3c:	781b      	ldrb	r3, [r3, #0]
 8023b3e:	4013      	ands	r3, r2
 8023b40:	b2db      	uxtb	r3, r3
 8023b42:	2b00      	cmp	r3, #0
 8023b44:	d105      	bne.n	8023b52 <scan_files+0x15e>
								{
									szTemp[i] = '-';
 8023b46:	f107 0208 	add.w	r2, r7, #8
 8023b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023b4c:	4413      	add	r3, r2
 8023b4e:	222d      	movs	r2, #45	@ 0x2d
 8023b50:	701a      	strb	r2, [r3, #0]
							for(i = 0; i < 6; i++)
 8023b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023b54:	3301      	adds	r3, #1
 8023b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8023b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023b5a:	2b05      	cmp	r3, #5
 8023b5c:	d9e9      	bls.n	8023b32 <scan_files+0x13e>
								}
							}
							ShFieldOut(bPort, szTemp, 0);
 8023b5e:	f107 0108 	add.w	r1, r7, #8
 8023b62:	79fb      	ldrb	r3, [r7, #7]
 8023b64:	2200      	movs	r2, #0
 8023b66:	4618      	mov	r0, r3
 8023b68:	f7fd fd26 	bl	80215b8 <ShFieldOut>
							ShNL(bPort);
 8023b6c:	79fb      	ldrb	r3, [r7, #7]
 8023b6e:	4618      	mov	r0, r3
 8023b70:	f7fd fd82 	bl	8021678 <ShNL>
 8023b74:	e75e      	b.n	8023a34 <scan_files+0x40>
						}
						else
						{
							if(count >= NO_WIDE_FILES)
 8023b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023b78:	2b04      	cmp	r3, #4
 8023b7a:	f77f af5b 	ble.w	8023a34 <scan_files+0x40>
							{
								count = 0;
 8023b7e:	2300      	movs	r3, #0
 8023b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
								ShNL(bPort);
 8023b82:	79fb      	ldrb	r3, [r7, #7]
 8023b84:	4618      	mov	r0, r3
 8023b86:	f7fd fd77 	bl	8021678 <ShNL>
 8023b8a:	e753      	b.n	8023a34 <scan_files+0x40>
						}
					}
					else
					{
						/* It is a file. */
						if(color)
 8023b8c:	797b      	ldrb	r3, [r7, #5]
 8023b8e:	2b00      	cmp	r3, #0
 8023b90:	d044      	beq.n	8023c1c <scan_files+0x228>
						{
			                if ((fno.fattrib & AM_HID) != 0)
 8023b92:	4b60      	ldr	r3, [pc, #384]	@ (8023d14 <scan_files+0x320>)
 8023b94:	7a1b      	ldrb	r3, [r3, #8]
 8023b96:	f003 0302 	and.w	r3, r3, #2
 8023b9a:	2b00      	cmp	r3, #0
 8023b9c:	d011      	beq.n	8023bc2 <scan_files+0x1ce>
			                {
			            		if(Theme)
 8023b9e:	4b62      	ldr	r3, [pc, #392]	@ (8023d28 <scan_files+0x334>)
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	d006      	beq.n	8023bb4 <scan_files+0x1c0>
			            		{
			            			TextColor(bPort, BG_Green, BG_Default, ATT_Bold);
 8023ba6:	79f8      	ldrb	r0, [r7, #7]
 8023ba8:	2301      	movs	r3, #1
 8023baa:	2231      	movs	r2, #49	@ 0x31
 8023bac:	212a      	movs	r1, #42	@ 0x2a
 8023bae:	f7fd fbcd 	bl	802134c <TextColor>
 8023bb2:	e028      	b.n	8023c06 <scan_files+0x212>
			            		}
			            		else
			            		{
			            			TextColor(bPort, FG_Cyan, BG_Default, ATT_Bold);
 8023bb4:	79f8      	ldrb	r0, [r7, #7]
 8023bb6:	2301      	movs	r3, #1
 8023bb8:	2231      	movs	r2, #49	@ 0x31
 8023bba:	2124      	movs	r1, #36	@ 0x24
 8023bbc:	f7fd fbc6 	bl	802134c <TextColor>
 8023bc0:	e021      	b.n	8023c06 <scan_files+0x212>
			            		}
			                }
			                else
			                {
			                	// colorize by extension
			                	extension = GetExtension(fno.fname);
 8023bc2:	4855      	ldr	r0, [pc, #340]	@ (8023d18 <scan_files+0x324>)
 8023bc4:	f7ff fee6 	bl	8023994 <GetExtension>
 8023bc8:	4603      	mov	r3, r0
 8023bca:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			                	if(extension == EXT_SCRIPT)
 8023bce:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8023bd2:	2b01      	cmp	r3, #1
 8023bd4:	d106      	bne.n	8023be4 <scan_files+0x1f0>
			                	{
			                		TextColor(bPort, FG_Yellow, BG_Default, ATT_Bold);
 8023bd6:	79f8      	ldrb	r0, [r7, #7]
 8023bd8:	2301      	movs	r3, #1
 8023bda:	2231      	movs	r2, #49	@ 0x31
 8023bdc:	2121      	movs	r1, #33	@ 0x21
 8023bde:	f7fd fbb5 	bl	802134c <TextColor>
 8023be2:	e010      	b.n	8023c06 <scan_files+0x212>
			                	}
			                	else if(extension == EXT_PAKET)
 8023be4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8023be8:	2b02      	cmp	r3, #2
 8023bea:	d106      	bne.n	8023bfa <scan_files+0x206>
			                	{
			                		TextColor(bPort, FG_Purple, BG_Default, ATT_Bold);
 8023bec:	79f8      	ldrb	r0, [r7, #7]
 8023bee:	2301      	movs	r3, #1
 8023bf0:	2231      	movs	r2, #49	@ 0x31
 8023bf2:	2123      	movs	r1, #35	@ 0x23
 8023bf4:	f7fd fbaa 	bl	802134c <TextColor>
 8023bf8:	e005      	b.n	8023c06 <scan_files+0x212>
			                	}
			                	else
			                	{
			                		TextColor(bPort, FG_Blue, BG_Default, ATT_Bold);
 8023bfa:	79f8      	ldrb	r0, [r7, #7]
 8023bfc:	2301      	movs	r3, #1
 8023bfe:	2231      	movs	r2, #49	@ 0x31
 8023c00:	2122      	movs	r1, #34	@ 0x22
 8023c02:	f7fd fba3 	bl	802134c <TextColor>
			                	}
			                }
							ShFieldOut(bPort, fno.fname, 15);
 8023c06:	79fb      	ldrb	r3, [r7, #7]
 8023c08:	220f      	movs	r2, #15
 8023c0a:	4943      	ldr	r1, [pc, #268]	@ (8023d18 <scan_files+0x324>)
 8023c0c:	4618      	mov	r0, r3
 8023c0e:	f7fd fcd3 	bl	80215b8 <ShFieldOut>
							ResetColor(bPort);
 8023c12:	79fb      	ldrb	r3, [r7, #7]
 8023c14:	4618      	mov	r0, r3
 8023c16:	f7fd fbc1 	bl	802139c <ResetColor>
 8023c1a:	e005      	b.n	8023c28 <scan_files+0x234>
						}
						else
						{
							ShFieldOut(bPort, fno.fname, 15);
 8023c1c:	79fb      	ldrb	r3, [r7, #7]
 8023c1e:	220f      	movs	r2, #15
 8023c20:	493d      	ldr	r1, [pc, #244]	@ (8023d18 <scan_files+0x324>)
 8023c22:	4618      	mov	r0, r3
 8023c24:	f7fd fcc8 	bl	80215b8 <ShFieldOut>
						}
						count++;
 8023c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023c2a:	3301      	adds	r3, #1
 8023c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

						if(wide == 0)
 8023c2e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8023c32:	f083 0301 	eor.w	r3, r3, #1
 8023c36:	b2db      	uxtb	r3, r3
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d055      	beq.n	8023ce8 <scan_files+0x2f4>
						{
							ShFieldNumberOut(bPort, "", fno.fsize, 10);
 8023c3c:	4b35      	ldr	r3, [pc, #212]	@ (8023d14 <scan_files+0x320>)
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	461a      	mov	r2, r3
 8023c42:	79f8      	ldrb	r0, [r7, #7]
 8023c44:	230a      	movs	r3, #10
 8023c46:	4939      	ldr	r1, [pc, #228]	@ (8023d2c <scan_files+0x338>)
 8023c48:	f7fd fcda 	bl	8021600 <ShFieldNumberOut>

							fat_to_date(fno.fdate, szTemp);
 8023c4c:	4b31      	ldr	r3, [pc, #196]	@ (8023d14 <scan_files+0x320>)
 8023c4e:	889b      	ldrh	r3, [r3, #4]
 8023c50:	f107 0208 	add.w	r2, r7, #8
 8023c54:	4611      	mov	r1, r2
 8023c56:	4618      	mov	r0, r3
 8023c58:	f7e6 fbfc 	bl	800a454 <fat_to_date>
							ShFieldOut(bPort, szTemp, 12);
 8023c5c:	f107 0108 	add.w	r1, r7, #8
 8023c60:	79fb      	ldrb	r3, [r7, #7]
 8023c62:	220c      	movs	r2, #12
 8023c64:	4618      	mov	r0, r3
 8023c66:	f7fd fca7 	bl	80215b8 <ShFieldOut>

							fat_to_time(fno.ftime, szTemp);
 8023c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8023d14 <scan_files+0x320>)
 8023c6c:	88db      	ldrh	r3, [r3, #6]
 8023c6e:	f107 0208 	add.w	r2, r7, #8
 8023c72:	4611      	mov	r1, r2
 8023c74:	4618      	mov	r0, r3
 8023c76:	f7e6 fbc7 	bl	800a408 <fat_to_time>
							ShFieldOut(bPort, szTemp, 10);
 8023c7a:	f107 0108 	add.w	r1, r7, #8
 8023c7e:	79fb      	ldrb	r3, [r7, #7]
 8023c80:	220a      	movs	r2, #10
 8023c82:	4618      	mov	r0, r3
 8023c84:	f7fd fc98 	bl	80215b8 <ShFieldOut>

							strcpy(szTemp, "RHSVDA");
 8023c88:	f107 0308 	add.w	r3, r7, #8
 8023c8c:	4a24      	ldr	r2, [pc, #144]	@ (8023d20 <scan_files+0x32c>)
 8023c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023c92:	6018      	str	r0, [r3, #0]
 8023c94:	3304      	adds	r3, #4
 8023c96:	8019      	strh	r1, [r3, #0]
 8023c98:	3302      	adds	r3, #2
 8023c9a:	0c0a      	lsrs	r2, r1, #16
 8023c9c:	701a      	strb	r2, [r3, #0]
							for(i = 0; i < 6; i++)
 8023c9e:	2300      	movs	r3, #0
 8023ca0:	653b      	str	r3, [r7, #80]	@ 0x50
 8023ca2:	e012      	b.n	8023cca <scan_files+0x2d6>
							{
								if((fno.fattrib & bBitMask[i]) == 0)
 8023ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8023d14 <scan_files+0x320>)
 8023ca6:	7a1a      	ldrb	r2, [r3, #8]
 8023ca8:	491e      	ldr	r1, [pc, #120]	@ (8023d24 <scan_files+0x330>)
 8023caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023cac:	440b      	add	r3, r1
 8023cae:	781b      	ldrb	r3, [r3, #0]
 8023cb0:	4013      	ands	r3, r2
 8023cb2:	b2db      	uxtb	r3, r3
 8023cb4:	2b00      	cmp	r3, #0
 8023cb6:	d105      	bne.n	8023cc4 <scan_files+0x2d0>
								{
									szTemp[i] = '-';
 8023cb8:	f107 0208 	add.w	r2, r7, #8
 8023cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023cbe:	4413      	add	r3, r2
 8023cc0:	222d      	movs	r2, #45	@ 0x2d
 8023cc2:	701a      	strb	r2, [r3, #0]
							for(i = 0; i < 6; i++)
 8023cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023cc6:	3301      	adds	r3, #1
 8023cc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8023cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023ccc:	2b05      	cmp	r3, #5
 8023cce:	d9e9      	bls.n	8023ca4 <scan_files+0x2b0>
								}
							}
							ShFieldOut(bPort, szTemp, 0);
 8023cd0:	f107 0108 	add.w	r1, r7, #8
 8023cd4:	79fb      	ldrb	r3, [r7, #7]
 8023cd6:	2200      	movs	r2, #0
 8023cd8:	4618      	mov	r0, r3
 8023cda:	f7fd fc6d 	bl	80215b8 <ShFieldOut>
							ShNL(bPort);
 8023cde:	79fb      	ldrb	r3, [r7, #7]
 8023ce0:	4618      	mov	r0, r3
 8023ce2:	f7fd fcc9 	bl	8021678 <ShNL>
 8023ce6:	e6a5      	b.n	8023a34 <scan_files+0x40>
						}
						else
						{
							if(count >= NO_WIDE_FILES)
 8023ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023cea:	2b04      	cmp	r3, #4
 8023cec:	f77f aea2 	ble.w	8023a34 <scan_files+0x40>
							{
								count = 0;
 8023cf0:	2300      	movs	r3, #0
 8023cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
								ShNL(bPort);
 8023cf4:	79fb      	ldrb	r3, [r7, #7]
 8023cf6:	4618      	mov	r0, r3
 8023cf8:	f7fd fcbe 	bl	8021678 <ShNL>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8023cfc:	e69a      	b.n	8023a34 <scan_files+0x40>
						}
				   }
                }
            }
        }
        f_closedir(&dir);
 8023cfe:	f107 0318 	add.w	r3, r7, #24
 8023d02:	4618      	mov	r0, r3
 8023d04:	f7f7 fa8f 	bl	801b226 <f_closedir>
    }

    return res;
 8023d08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8023d0c:	4618      	mov	r0, r3
 8023d0e:	3758      	adds	r7, #88	@ 0x58
 8023d10:	46bd      	mov	sp, r7
 8023d12:	bd80      	pop	{r7, pc}
 8023d14:	2001e670 	.word	0x2001e670
 8023d18:	2001e679 	.word	0x2001e679
 8023d1c:	0802b14c 	.word	0x0802b14c
 8023d20:	0802b154 	.word	0x0802b154
 8023d24:	0802ba20 	.word	0x0802ba20
 8023d28:	2001b598 	.word	0x2001b598
 8023d2c:	0802b15c 	.word	0x0802b15c

08023d30 <ShDir>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShDir(uint8_t bPort, int argc, char *argv[])
{
 8023d30:	b5b0      	push	{r4, r5, r7, lr}
 8023d32:	b0cc      	sub	sp, #304	@ 0x130
 8023d34:	af02      	add	r7, sp, #8
 8023d36:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023d3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8023d3e:	6019      	str	r1, [r3, #0]
 8023d40:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023d44:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8023d48:	601a      	str	r2, [r3, #0]
 8023d4a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023d4e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023d52:	4602      	mov	r2, r0
 8023d54:	701a      	strb	r2, [r3, #0]
    char buff[256];
	_Bool ShowHidden = 0;
 8023d56:	2300      	movs	r3, #0
 8023d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	_Bool color = 0;
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
	int i;
	int argidx = 1;
 8023d62:	2301      	movs	r3, #1
 8023d64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	int argsused = 0;
 8023d68:	2300      	movs	r3, #0
 8023d6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	int wide = 0;
 8023d6e:	2300      	movs	r3, #0
 8023d70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	// dir -c -h <dir>
	// dir <dir> -c -h
	// dir -c -h

	for(i = 1; i < argc; i++)
 8023d74:	2301      	movs	r3, #1
 8023d76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8023d7a:	e070      	b.n	8023e5e <ShDir+0x12e>
	{
		if(stricmp(argv[i], "-h") == 0)
 8023d7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8023d80:	009b      	lsls	r3, r3, #2
 8023d82:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023d86:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8023d8a:	6812      	ldr	r2, [r2, #0]
 8023d8c:	4413      	add	r3, r2
 8023d8e:	681b      	ldr	r3, [r3, #0]
 8023d90:	49b7      	ldr	r1, [pc, #732]	@ (8024070 <ShDir+0x340>)
 8023d92:	4618      	mov	r0, r3
 8023d94:	f7fe fee6 	bl	8022b64 <strcasecmp>
 8023d98:	4603      	mov	r3, r0
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	d112      	bne.n	8023dc4 <ShDir+0x94>
		{
			ShowHidden = 1;
 8023d9e:	2301      	movs	r3, #1
 8023da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
			if(argidx == i)
 8023da4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8023da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8023dac:	429a      	cmp	r2, r3
 8023dae:	d104      	bne.n	8023dba <ShDir+0x8a>
			{
				argidx++;
 8023db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8023db4:	3301      	adds	r3, #1
 8023db6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			}
			argsused++;
 8023dba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8023dbe:	3301      	adds	r3, #1
 8023dc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		}
		if(stricmp(argv[i], "-c") == 0)
 8023dc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8023dc8:	009b      	lsls	r3, r3, #2
 8023dca:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023dce:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8023dd2:	6812      	ldr	r2, [r2, #0]
 8023dd4:	4413      	add	r3, r2
 8023dd6:	681b      	ldr	r3, [r3, #0]
 8023dd8:	49a6      	ldr	r1, [pc, #664]	@ (8024074 <ShDir+0x344>)
 8023dda:	4618      	mov	r0, r3
 8023ddc:	f7fe fec2 	bl	8022b64 <strcasecmp>
 8023de0:	4603      	mov	r3, r0
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	d112      	bne.n	8023e0c <ShDir+0xdc>
		{
			color = 1;
 8023de6:	2301      	movs	r3, #1
 8023de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
			if(argidx == i)
 8023dec:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8023df0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8023df4:	429a      	cmp	r2, r3
 8023df6:	d104      	bne.n	8023e02 <ShDir+0xd2>
			{
				argidx++;
 8023df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8023dfc:	3301      	adds	r3, #1
 8023dfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			}
			argsused++;
 8023e02:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8023e06:	3301      	adds	r3, #1
 8023e08:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		}
		if(stricmp(argv[i], "-w") == 0)
 8023e0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8023e10:	009b      	lsls	r3, r3, #2
 8023e12:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023e16:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8023e1a:	6812      	ldr	r2, [r2, #0]
 8023e1c:	4413      	add	r3, r2
 8023e1e:	681b      	ldr	r3, [r3, #0]
 8023e20:	4995      	ldr	r1, [pc, #596]	@ (8024078 <ShDir+0x348>)
 8023e22:	4618      	mov	r0, r3
 8023e24:	f7fe fe9e 	bl	8022b64 <strcasecmp>
 8023e28:	4603      	mov	r3, r0
 8023e2a:	2b00      	cmp	r3, #0
 8023e2c:	d112      	bne.n	8023e54 <ShDir+0x124>
		{
			wide = 1;
 8023e2e:	2301      	movs	r3, #1
 8023e30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
			if(argidx == i)
 8023e34:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8023e38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8023e3c:	429a      	cmp	r2, r3
 8023e3e:	d104      	bne.n	8023e4a <ShDir+0x11a>
			{
				argidx++;
 8023e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8023e44:	3301      	adds	r3, #1
 8023e46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			}
			argsused++;
 8023e4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8023e4e:	3301      	adds	r3, #1
 8023e50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	for(i = 1; i < argc; i++)
 8023e54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8023e58:	3301      	adds	r3, #1
 8023e5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8023e5e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023e62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8023e66:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8023e6a:	681b      	ldr	r3, [r3, #0]
 8023e6c:	429a      	cmp	r2, r3
 8023e6e:	db85      	blt.n	8023d7c <ShDir+0x4c>
		}
	}

	argc -= argsused;
 8023e70:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023e74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8023e78:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023e7c:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8023e80:	6811      	ldr	r1, [r2, #0]
 8023e82:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8023e86:	1a8a      	subs	r2, r1, r2
 8023e88:	601a      	str	r2, [r3, #0]

    if(argc == 1)
 8023e8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023e8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	2b01      	cmp	r3, #1
 8023e96:	d107      	bne.n	8023ea8 <ShDir+0x178>
    {
		f_getcwd(buff, sizeof(buff));
 8023e98:	f107 0314 	add.w	r3, r7, #20
 8023e9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023ea0:	4618      	mov	r0, r3
 8023ea2:	f7f6 fdfd 	bl	801aaa0 <f_getcwd>
 8023ea6:	e04b      	b.n	8023f40 <ShDir+0x210>
	}
    else if(argc == 2)
 8023ea8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023eac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	2b02      	cmp	r3, #2
 8023eb4:	d142      	bne.n	8023f3c <ShDir+0x20c>
    {
		if(argv[argidx][0] != '/' && argv[argidx][0] != '\\')
 8023eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8023eba:	009b      	lsls	r3, r3, #2
 8023ebc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023ec0:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8023ec4:	6812      	ldr	r2, [r2, #0]
 8023ec6:	4413      	add	r3, r2
 8023ec8:	681b      	ldr	r3, [r3, #0]
 8023eca:	781b      	ldrb	r3, [r3, #0]
 8023ecc:	2b2f      	cmp	r3, #47	@ 0x2f
 8023ece:	d024      	beq.n	8023f1a <ShDir+0x1ea>
 8023ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8023ed4:	009b      	lsls	r3, r3, #2
 8023ed6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023eda:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8023ede:	6812      	ldr	r2, [r2, #0]
 8023ee0:	4413      	add	r3, r2
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	781b      	ldrb	r3, [r3, #0]
 8023ee6:	2b5c      	cmp	r3, #92	@ 0x5c
 8023ee8:	d017      	beq.n	8023f1a <ShDir+0x1ea>
		{
			f_getcwd(buff, sizeof(buff));
 8023eea:	f107 0314 	add.w	r3, r7, #20
 8023eee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	f7f6 fdd4 	bl	801aaa0 <f_getcwd>
			strcat(buff, argv[argidx]);
 8023ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8023efc:	009b      	lsls	r3, r3, #2
 8023efe:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023f02:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8023f06:	6812      	ldr	r2, [r2, #0]
 8023f08:	4413      	add	r3, r2
 8023f0a:	681a      	ldr	r2, [r3, #0]
 8023f0c:	f107 0314 	add.w	r3, r7, #20
 8023f10:	4611      	mov	r1, r2
 8023f12:	4618      	mov	r0, r3
 8023f14:	f002 f98c 	bl	8026230 <strcat>
 8023f18:	e012      	b.n	8023f40 <ShDir+0x210>
		}
		else
		{
			strcpy(buff, argv[argidx]);
 8023f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8023f1e:	009b      	lsls	r3, r3, #2
 8023f20:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8023f24:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8023f28:	6812      	ldr	r2, [r2, #0]
 8023f2a:	4413      	add	r3, r2
 8023f2c:	681a      	ldr	r2, [r3, #0]
 8023f2e:	f107 0314 	add.w	r3, r7, #20
 8023f32:	4611      	mov	r1, r2
 8023f34:	4618      	mov	r0, r3
 8023f36:	f002 fa94 	bl	8026462 <strcpy>
 8023f3a:	e001      	b.n	8023f40 <ShDir+0x210>
		}
    }
	else
	{
		return CMD_BAD_PARAMS;
 8023f3c:	2301      	movs	r3, #1
 8023f3e:	e091      	b.n	8024064 <ShDir+0x334>
	}
	
	
	if(color)
 8023f40:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d018      	beq.n	8023f7a <ShDir+0x24a>
	{
		if(Theme)
 8023f48:	4b4c      	ldr	r3, [pc, #304]	@ (802407c <ShDir+0x34c>)
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d00a      	beq.n	8023f66 <ShDir+0x236>
		{
			TextColor(bPort, FG_Black, BG_Default, ATT_Bold);
 8023f50:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023f54:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023f58:	7818      	ldrb	r0, [r3, #0]
 8023f5a:	2301      	movs	r3, #1
 8023f5c:	2231      	movs	r2, #49	@ 0x31
 8023f5e:	211e      	movs	r1, #30
 8023f60:	f7fd f9f4 	bl	802134c <TextColor>
 8023f64:	e009      	b.n	8023f7a <ShDir+0x24a>
		}
		else
		{
			TextColor(bPort, FG_White, BG_Default, ATT_Bold);
 8023f66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023f6a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023f6e:	7818      	ldrb	r0, [r3, #0]
 8023f70:	2301      	movs	r3, #1
 8023f72:	2231      	movs	r2, #49	@ 0x31
 8023f74:	2125      	movs	r1, #37	@ 0x25
 8023f76:	f7fd f9e9 	bl	802134c <TextColor>
		}
	}

	ShNL(bPort);
 8023f7a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023f7e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023f82:	781b      	ldrb	r3, [r3, #0]
 8023f84:	4618      	mov	r0, r3
 8023f86:	f7fd fb77 	bl	8021678 <ShNL>
	ShFieldOut(bPort, "Directory of ", 0);
 8023f8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023f8e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023f92:	781b      	ldrb	r3, [r3, #0]
 8023f94:	2200      	movs	r2, #0
 8023f96:	493a      	ldr	r1, [pc, #232]	@ (8024080 <ShDir+0x350>)
 8023f98:	4618      	mov	r0, r3
 8023f9a:	f7fd fb0d 	bl	80215b8 <ShFieldOut>
	ShFieldOut(bPort, buff, 0);
 8023f9e:	f107 0114 	add.w	r1, r7, #20
 8023fa2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023fa6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023faa:	781b      	ldrb	r3, [r3, #0]
 8023fac:	2200      	movs	r2, #0
 8023fae:	4618      	mov	r0, r3
 8023fb0:	f7fd fb02 	bl	80215b8 <ShFieldOut>

	if(wide == 0)
 8023fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8023fb8:	2b00      	cmp	r3, #0
 8023fba:	d12f      	bne.n	802401c <ShDir+0x2ec>
	{
		ShNL(bPort);
 8023fbc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023fc0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023fc4:	781b      	ldrb	r3, [r3, #0]
 8023fc6:	4618      	mov	r0, r3
 8023fc8:	f7fd fb56 	bl	8021678 <ShNL>
		ShFieldOut(bPort, "Name", 15);
 8023fcc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023fd0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023fd4:	781b      	ldrb	r3, [r3, #0]
 8023fd6:	220f      	movs	r2, #15
 8023fd8:	492a      	ldr	r1, [pc, #168]	@ (8024084 <ShDir+0x354>)
 8023fda:	4618      	mov	r0, r3
 8023fdc:	f7fd faec 	bl	80215b8 <ShFieldOut>
		ShFieldOut(bPort, "Size", 10);
 8023fe0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023fe4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023fe8:	781b      	ldrb	r3, [r3, #0]
 8023fea:	220a      	movs	r2, #10
 8023fec:	4926      	ldr	r1, [pc, #152]	@ (8024088 <ShDir+0x358>)
 8023fee:	4618      	mov	r0, r3
 8023ff0:	f7fd fae2 	bl	80215b8 <ShFieldOut>
		ShFieldOut(bPort, "Modified Date - Time", 22);
 8023ff4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8023ff8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8023ffc:	781b      	ldrb	r3, [r3, #0]
 8023ffe:	2216      	movs	r2, #22
 8024000:	4922      	ldr	r1, [pc, #136]	@ (802408c <ShDir+0x35c>)
 8024002:	4618      	mov	r0, r3
 8024004:	f7fd fad8 	bl	80215b8 <ShFieldOut>
		ShFieldOut(bPort, "Attributes", 0);
 8024008:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802400c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8024010:	781b      	ldrb	r3, [r3, #0]
 8024012:	2200      	movs	r2, #0
 8024014:	491e      	ldr	r1, [pc, #120]	@ (8024090 <ShDir+0x360>)
 8024016:	4618      	mov	r0, r3
 8024018:	f7fd face 	bl	80215b8 <ShFieldOut>
	}
	if(color)
 802401c:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8024020:	2b00      	cmp	r3, #0
 8024022:	d007      	beq.n	8024034 <ShDir+0x304>
	{
		ResetColor(bPort);
 8024024:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8024028:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 802402c:	781b      	ldrb	r3, [r3, #0]
 802402e:	4618      	mov	r0, r3
 8024030:	f7fd f9b4 	bl	802139c <ResetColor>
	}

	(void)scan_files(bPort, buff, ShowHidden, color, wide);
 8024034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8024038:	2b00      	cmp	r3, #0
 802403a:	bf14      	ite	ne
 802403c:	2301      	movne	r3, #1
 802403e:	2300      	moveq	r3, #0
 8024040:	b2db      	uxtb	r3, r3
 8024042:	f897 5126 	ldrb.w	r5, [r7, #294]	@ 0x126
 8024046:	f897 4127 	ldrb.w	r4, [r7, #295]	@ 0x127
 802404a:	f107 0114 	add.w	r1, r7, #20
 802404e:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8024052:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8024056:	7810      	ldrb	r0, [r2, #0]
 8024058:	9300      	str	r3, [sp, #0]
 802405a:	462b      	mov	r3, r5
 802405c:	4622      	mov	r2, r4
 802405e:	f7ff fcc9 	bl	80239f4 <scan_files>

	return CMD_OK;
 8024062:	2300      	movs	r3, #0
}
 8024064:	4618      	mov	r0, r3
 8024066:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 802406a:	46bd      	mov	sp, r7
 802406c:	bdb0      	pop	{r4, r5, r7, pc}
 802406e:	bf00      	nop
 8024070:	0802b160 	.word	0x0802b160
 8024074:	0802b164 	.word	0x0802b164
 8024078:	0802b168 	.word	0x0802b168
 802407c:	2001b598 	.word	0x2001b598
 8024080:	0802b16c 	.word	0x0802b16c
 8024084:	0802b17c 	.word	0x0802b17c
 8024088:	0802b184 	.word	0x0802b184
 802408c:	0802b18c 	.word	0x0802b18c
 8024090:	0802b1a4 	.word	0x0802b1a4

08024094 <ShCWD>:
*
* @note		This command currently does nothing
*
*********************************************************************/
CMD_RETURN ShCWD(uint8_t bPort, int argc, char *argv[])
{
 8024094:	b580      	push	{r7, lr}
 8024096:	b084      	sub	sp, #16
 8024098:	af00      	add	r7, sp, #0
 802409a:	4603      	mov	r3, r0
 802409c:	60b9      	str	r1, [r7, #8]
 802409e:	607a      	str	r2, [r7, #4]
 80240a0:	73fb      	strb	r3, [r7, #15]
    #define BUFFLEN 256
//    char buffer[BUFFLEN];
//    unsigned char ret;

    //uprintf(bPort, "\r\n\r\n");
    ShNL(bPort);
 80240a2:	7bfb      	ldrb	r3, [r7, #15]
 80240a4:	4618      	mov	r0, r3
 80240a6:	f7fd fae7 	bl	8021678 <ShNL>

    ShFieldOut(bPort, ">", 0);
 80240aa:	7bfb      	ldrb	r3, [r7, #15]
 80240ac:	2200      	movs	r2, #0
 80240ae:	4904      	ldr	r1, [pc, #16]	@ (80240c0 <ShCWD+0x2c>)
 80240b0:	4618      	mov	r0, r3
 80240b2:	f7fd fa81 	bl	80215b8 <ShFieldOut>
//        ShFieldOut(bPort, buffer, 0);
//        //uprintf(bPort, "\n\r\n\r");
//        ShNL(bPort);
//    }

	return CMD_OK;
 80240b6:	2300      	movs	r3, #0
}
 80240b8:	4618      	mov	r0, r3
 80240ba:	3710      	adds	r7, #16
 80240bc:	46bd      	mov	sp, r7
 80240be:	bd80      	pop	{r7, pc}
 80240c0:	0802b1b0 	.word	0x0802b1b0

080240c4 <ShType>:

	return CMD_OK;
}
#else
CMD_RETURN ShType(uint8_t bPort, int argc, char *argv[])
{
 80240c4:	b580      	push	{r7, lr}
 80240c6:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 80240ca:	af00      	add	r7, sp, #0
 80240cc:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80240d0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80240d4:	6019      	str	r1, [r3, #0]
 80240d6:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80240da:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80240de:	601a      	str	r2, [r3, #0]
 80240e0:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80240e4:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80240e8:	4602      	mov	r2, r0
 80240ea:	701a      	strb	r2, [r3, #0]
    FRESULT ret;
    char szTypeBuf[80];
    unsigned int bc;
    FIL fp;

    ShNL(bPort);
 80240ec:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80240f0:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80240f4:	781b      	ldrb	r3, [r3, #0]
 80240f6:	4618      	mov	r0, r3
 80240f8:	f7fd fabe 	bl	8021678 <ShNL>



    if(argc == 2)
 80240fc:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8024100:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8024104:	681b      	ldr	r3, [r3, #0]
 8024106:	2b02      	cmp	r3, #2
 8024108:	f040 8089 	bne.w	802421e <ShType+0x15a>
    {
        f_getcwd (szTypeBuf, sizeof(szTypeBuf));
 802410c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8024110:	2150      	movs	r1, #80	@ 0x50
 8024112:	4618      	mov	r0, r3
 8024114:	f7f6 fcc4 	bl	801aaa0 <f_getcwd>
    	if(szTypeBuf[strlen(szTypeBuf)-1] != '\\')
 8024118:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 802411c:	4618      	mov	r0, r3
 802411e:	f7dc f8c1 	bl	80002a4 <strlen>
 8024122:	4603      	mov	r3, r0
 8024124:	3b01      	subs	r3, #1
 8024126:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 802412a:	443b      	add	r3, r7
 802412c:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8024130:	2b5c      	cmp	r3, #92	@ 0x5c
 8024132:	d00e      	beq.n	8024152 <ShType+0x8e>
    	{
        	strcat(szTypeBuf, "\\");
 8024134:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8024138:	4618      	mov	r0, r3
 802413a:	f7dc f8b3 	bl	80002a4 <strlen>
 802413e:	4603      	mov	r3, r0
 8024140:	461a      	mov	r2, r3
 8024142:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8024146:	4413      	add	r3, r2
 8024148:	4938      	ldr	r1, [pc, #224]	@ (802422c <ShType+0x168>)
 802414a:	461a      	mov	r2, r3
 802414c:	460b      	mov	r3, r1
 802414e:	881b      	ldrh	r3, [r3, #0]
 8024150:	8013      	strh	r3, [r2, #0]
    	}
    	strcat(szTypeBuf, argv[1]);
 8024152:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8024156:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 802415a:	681b      	ldr	r3, [r3, #0]
 802415c:	3304      	adds	r3, #4
 802415e:	681a      	ldr	r2, [r3, #0]
 8024160:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8024164:	4611      	mov	r1, r2
 8024166:	4618      	mov	r0, r3
 8024168:	f002 f862 	bl	8026230 <strcat>

    	// open file
        ret = f_open(&fp, szTypeBuf, FA_READ);
 802416c:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 8024170:	f107 0314 	add.w	r3, r7, #20
 8024174:	2201      	movs	r2, #1
 8024176:	4618      	mov	r0, r3
 8024178:	f7f5 feb6 	bl	8019ee8 <f_open>
 802417c:	4603      	mov	r3, r0
 802417e:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b

    	if(ret == FR_OK)
 8024182:	f897 329b 	ldrb.w	r3, [r7, #667]	@ 0x29b
 8024186:	2b00      	cmp	r3, #0
 8024188:	d13d      	bne.n	8024206 <ShType+0x142>
    	{
    		while(1)
    		{
    			bc = getLine2(&fp, szTypeBuf, sizeof(szTypeBuf));
 802418a:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 802418e:	f107 0314 	add.w	r3, r7, #20
 8024192:	2250      	movs	r2, #80	@ 0x50
 8024194:	4618      	mov	r0, r3
 8024196:	f7fd f98b 	bl	80214b0 <getLine2>
 802419a:	4603      	mov	r3, r0
 802419c:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
    			if(bc)
 80241a0:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80241a4:	2b00      	cmp	r3, #0
 80241a6:	d026      	beq.n	80241f6 <ShType+0x132>
    			{
    				for(int i = 0; i < bc; i++)
 80241a8:	2300      	movs	r3, #0
 80241aa:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80241ae:	e013      	b.n	80241d8 <ShType+0x114>
    				{
    					ShCharOut(bPort, szTypeBuf[i]);
 80241b0:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 80241b4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80241b8:	4413      	add	r3, r2
 80241ba:	781a      	ldrb	r2, [r3, #0]
 80241bc:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80241c0:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80241c4:	781b      	ldrb	r3, [r3, #0]
 80241c6:	4611      	mov	r1, r2
 80241c8:	4618      	mov	r0, r3
 80241ca:	f7fd f9ad 	bl	8021528 <ShCharOut>
    				for(int i = 0; i < bc; i++)
 80241ce:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80241d2:	3301      	adds	r3, #1
 80241d4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80241d8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80241dc:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 80241e0:	429a      	cmp	r2, r3
 80241e2:	d8e5      	bhi.n	80241b0 <ShType+0xec>
    				}
					ShNL(bPort);
 80241e4:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80241e8:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80241ec:	781b      	ldrb	r3, [r3, #0]
 80241ee:	4618      	mov	r0, r3
 80241f0:	f7fd fa42 	bl	8021678 <ShNL>
    			bc = getLine2(&fp, szTypeBuf, sizeof(szTypeBuf));
 80241f4:	e7c9      	b.n	802418a <ShType+0xc6>
    			}
    			else
    			{
    				break;
 80241f6:	bf00      	nop
    			}
    		}
            f_close(&fp);
 80241f8:	f107 0314 	add.w	r3, r7, #20
 80241fc:	4618      	mov	r0, r3
 80241fe:	f7f6 fbcf 	bl	801a9a0 <f_close>
    else
    {
    	return 	CMD_BAD_PARAMS;
    }

	return CMD_OK;
 8024202:	2300      	movs	r3, #0
 8024204:	e00c      	b.n	8024220 <ShType+0x15c>
    		ShFieldOut(bPort, "File not found.\r\n", 0);
 8024206:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 802420a:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 802420e:	781b      	ldrb	r3, [r3, #0]
 8024210:	2200      	movs	r2, #0
 8024212:	4907      	ldr	r1, [pc, #28]	@ (8024230 <ShType+0x16c>)
 8024214:	4618      	mov	r0, r3
 8024216:	f7fd f9cf 	bl	80215b8 <ShFieldOut>
    		return CMD_NOT_FOUND;
 802421a:	2302      	movs	r3, #2
 802421c:	e000      	b.n	8024220 <ShType+0x15c>
    	return 	CMD_BAD_PARAMS;
 802421e:	2301      	movs	r3, #1
}
 8024220:	4618      	mov	r0, r3
 8024222:	f507 7728 	add.w	r7, r7, #672	@ 0x2a0
 8024226:	46bd      	mov	sp, r7
 8024228:	bd80      	pop	{r7, pc}
 802422a:	bf00      	nop
 802422c:	0802b1b4 	.word	0x0802b1b4
 8024230:	0802b1b8 	.word	0x0802b1b8

08024234 <ShDelete>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShDelete(uint8_t bPort, int argc, char *argv[])
{
 8024234:	b580      	push	{r7, lr}
 8024236:	b08a      	sub	sp, #40	@ 0x28
 8024238:	af00      	add	r7, sp, #0
 802423a:	4603      	mov	r3, r0
 802423c:	60b9      	str	r1, [r7, #8]
 802423e:	607a      	str	r2, [r7, #4]
 8024240:	73fb      	strb	r3, [r7, #15]
	FILINFO fnfo;
	
	if(argc == 2)
 8024242:	68bb      	ldr	r3, [r7, #8]
 8024244:	2b02      	cmp	r3, #2
 8024246:	d11d      	bne.n	8024284 <ShDelete+0x50>
	{
		if(f_stat(argv[1], &fnfo) == FR_OK)
 8024248:	687b      	ldr	r3, [r7, #4]
 802424a:	3304      	adds	r3, #4
 802424c:	681b      	ldr	r3, [r3, #0]
 802424e:	f107 0210 	add.w	r2, r7, #16
 8024252:	4611      	mov	r1, r2
 8024254:	4618      	mov	r0, r3
 8024256:	f7f7 f854 	bl	801b302 <f_stat>
 802425a:	4603      	mov	r3, r0
 802425c:	2b00      	cmp	r3, #0
 802425e:	d111      	bne.n	8024284 <ShDelete+0x50>
		{
			if ((fnfo.fattrib & AM_DIR) == 0)
 8024260:	7e3b      	ldrb	r3, [r7, #24]
 8024262:	f003 0310 	and.w	r3, r3, #16
 8024266:	2b00      	cmp	r3, #0
 8024268:	d10c      	bne.n	8024284 <ShDelete+0x50>
			{
				// make sure the argument is a file & not a directory
				if(f_unlink (argv[1]) == FR_OK)
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	3304      	adds	r3, #4
 802426e:	681b      	ldr	r3, [r3, #0]
 8024270:	4618      	mov	r0, r3
 8024272:	f7f7 f886 	bl	801b382 <f_unlink>
 8024276:	4603      	mov	r3, r0
 8024278:	2b00      	cmp	r3, #0
 802427a:	d101      	bne.n	8024280 <ShDelete+0x4c>
				{
					return CMD_OK;
 802427c:	2300      	movs	r3, #0
 802427e:	e002      	b.n	8024286 <ShDelete+0x52>
				}
				else
				{
					return CMD_FAILED;
 8024280:	2303      	movs	r3, #3
 8024282:	e000      	b.n	8024286 <ShDelete+0x52>
				}
			}
		}
	}

	return CMD_OK;
 8024284:	2300      	movs	r3, #0
}
 8024286:	4618      	mov	r0, r3
 8024288:	3728      	adds	r7, #40	@ 0x28
 802428a:	46bd      	mov	sp, r7
 802428c:	bd80      	pop	{r7, pc}

0802428e <ShRename>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShRename(uint8_t bPort, int argc, char *argv[])
{
 802428e:	b580      	push	{r7, lr}
 8024290:	b086      	sub	sp, #24
 8024292:	af00      	add	r7, sp, #0
 8024294:	4603      	mov	r3, r0
 8024296:	60b9      	str	r1, [r7, #8]
 8024298:	607a      	str	r2, [r7, #4]
 802429a:	73fb      	strb	r3, [r7, #15]
    int ret;

    if(argc == 3)
 802429c:	68bb      	ldr	r3, [r7, #8]
 802429e:	2b03      	cmp	r3, #3
 80242a0:	d110      	bne.n	80242c4 <ShRename+0x36>
    {
    	ret = f_rename (argv[1], argv[2]);	/* Rename/Move a file or directory */
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	3304      	adds	r3, #4
 80242a6:	681a      	ldr	r2, [r3, #0]
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	3308      	adds	r3, #8
 80242ac:	681b      	ldr	r3, [r3, #0]
 80242ae:	4619      	mov	r1, r3
 80242b0:	4610      	mov	r0, r2
 80242b2:	f7f7 fa49 	bl	801b748 <f_rename>
 80242b6:	4603      	mov	r3, r0
 80242b8:	617b      	str	r3, [r7, #20]
		if(ret == FR_OK)
 80242ba:	697b      	ldr	r3, [r7, #20]
 80242bc:	2b00      	cmp	r3, #0
 80242be:	d101      	bne.n	80242c4 <ShRename+0x36>
		{
			return CMD_OK;
 80242c0:	2300      	movs	r3, #0
 80242c2:	e000      	b.n	80242c6 <ShRename+0x38>
		}
    }
	return CMD_BAD_PARAMS;
 80242c4:	2301      	movs	r3, #1
}
 80242c6:	4618      	mov	r0, r3
 80242c8:	3718      	adds	r7, #24
 80242ca:	46bd      	mov	sp, r7
 80242cc:	bd80      	pop	{r7, pc}

080242ce <ShMkdir>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShMkdir(uint8_t bPort, int argc, char *argv[])
{
 80242ce:	b580      	push	{r7, lr}
 80242d0:	b084      	sub	sp, #16
 80242d2:	af00      	add	r7, sp, #0
 80242d4:	4603      	mov	r3, r0
 80242d6:	60b9      	str	r1, [r7, #8]
 80242d8:	607a      	str	r2, [r7, #4]
 80242da:	73fb      	strb	r3, [r7, #15]

	if(argc == 2)
 80242dc:	68bb      	ldr	r3, [r7, #8]
 80242de:	2b02      	cmp	r3, #2
 80242e0:	d10c      	bne.n	80242fc <ShMkdir+0x2e>
	{
		if(f_mkdir (argv[1]) == 0)
 80242e2:	687b      	ldr	r3, [r7, #4]
 80242e4:	3304      	adds	r3, #4
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	4618      	mov	r0, r3
 80242ea:	f7f7 f912 	bl	801b512 <f_mkdir>
 80242ee:	4603      	mov	r3, r0
 80242f0:	2b00      	cmp	r3, #0
 80242f2:	d101      	bne.n	80242f8 <ShMkdir+0x2a>
		{
			return CMD_OK;
 80242f4:	2300      	movs	r3, #0
 80242f6:	e002      	b.n	80242fe <ShMkdir+0x30>
		}
		else
		{
			return CMD_FAILED;
 80242f8:	2303      	movs	r3, #3
 80242fa:	e000      	b.n	80242fe <ShMkdir+0x30>
		}
	}
	return CMD_BAD_PARAMS;
 80242fc:	2301      	movs	r3, #1
}
 80242fe:	4618      	mov	r0, r3
 8024300:	3710      	adds	r7, #16
 8024302:	46bd      	mov	sp, r7
 8024304:	bd80      	pop	{r7, pc}

08024306 <ShRmdir>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShRmdir(uint8_t bPort, int argc, char *argv[])
{
 8024306:	b580      	push	{r7, lr}
 8024308:	b08a      	sub	sp, #40	@ 0x28
 802430a:	af00      	add	r7, sp, #0
 802430c:	4603      	mov	r3, r0
 802430e:	60b9      	str	r1, [r7, #8]
 8024310:	607a      	str	r2, [r7, #4]
 8024312:	73fb      	strb	r3, [r7, #15]
	FILINFO fnfo;
	
	if(argc == 2)
 8024314:	68bb      	ldr	r3, [r7, #8]
 8024316:	2b02      	cmp	r3, #2
 8024318:	d11d      	bne.n	8024356 <ShRmdir+0x50>
	{
		if(f_stat(argv[1], &fnfo) == FR_OK)
 802431a:	687b      	ldr	r3, [r7, #4]
 802431c:	3304      	adds	r3, #4
 802431e:	681b      	ldr	r3, [r3, #0]
 8024320:	f107 0210 	add.w	r2, r7, #16
 8024324:	4611      	mov	r1, r2
 8024326:	4618      	mov	r0, r3
 8024328:	f7f6 ffeb 	bl	801b302 <f_stat>
 802432c:	4603      	mov	r3, r0
 802432e:	2b00      	cmp	r3, #0
 8024330:	d111      	bne.n	8024356 <ShRmdir+0x50>
		{
			if (fnfo.fattrib & AM_DIR)
 8024332:	7e3b      	ldrb	r3, [r7, #24]
 8024334:	f003 0310 	and.w	r3, r3, #16
 8024338:	2b00      	cmp	r3, #0
 802433a:	d00c      	beq.n	8024356 <ShRmdir+0x50>
			{
				// make sure the argument is a directory & not a file
				if(f_unlink (argv[1]) == FR_OK)
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	3304      	adds	r3, #4
 8024340:	681b      	ldr	r3, [r3, #0]
 8024342:	4618      	mov	r0, r3
 8024344:	f7f7 f81d 	bl	801b382 <f_unlink>
 8024348:	4603      	mov	r3, r0
 802434a:	2b00      	cmp	r3, #0
 802434c:	d101      	bne.n	8024352 <ShRmdir+0x4c>
				{
					return CMD_OK;
 802434e:	2300      	movs	r3, #0
 8024350:	e002      	b.n	8024358 <ShRmdir+0x52>
				}
				else
				{
					return CMD_FAILED;
 8024352:	2303      	movs	r3, #3
 8024354:	e000      	b.n	8024358 <ShRmdir+0x52>
				}
			}
		}
	}
	return CMD_BAD_PARAMS;
 8024356:	2301      	movs	r3, #1
}
 8024358:	4618      	mov	r0, r3
 802435a:	3728      	adds	r7, #40	@ 0x28
 802435c:	46bd      	mov	sp, r7
 802435e:	bd80      	pop	{r7, pc}

08024360 <ShChdir>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShChdir(uint8_t bPort, int argc, char *argv[])
{
 8024360:	b580      	push	{r7, lr}
 8024362:	b084      	sub	sp, #16
 8024364:	af00      	add	r7, sp, #0
 8024366:	4603      	mov	r3, r0
 8024368:	60b9      	str	r1, [r7, #8]
 802436a:	607a      	str	r2, [r7, #4]
 802436c:	73fb      	strb	r3, [r7, #15]
	if(argc == 2)
 802436e:	68bb      	ldr	r3, [r7, #8]
 8024370:	2b02      	cmp	r3, #2
 8024372:	d10c      	bne.n	802438e <ShChdir+0x2e>
	{
		if(f_chdir(argv[1]) == 0)
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	3304      	adds	r3, #4
 8024378:	681b      	ldr	r3, [r3, #0]
 802437a:	4618      	mov	r0, r3
 802437c:	f7f6 fb3f 	bl	801a9fe <f_chdir>
 8024380:	4603      	mov	r3, r0
 8024382:	2b00      	cmp	r3, #0
 8024384:	d101      	bne.n	802438a <ShChdir+0x2a>
		{
			//strcpy(szCWD, argv[1]);
			return CMD_OK;
 8024386:	2300      	movs	r3, #0
 8024388:	e002      	b.n	8024390 <ShChdir+0x30>
		}
		else
		{
			return CMD_FAILED;
 802438a:	2303      	movs	r3, #3
 802438c:	e000      	b.n	8024390 <ShChdir+0x30>
		}
	}
	return CMD_BAD_PARAMS;
 802438e:	2301      	movs	r3, #1
}
 8024390:	4618      	mov	r0, r3
 8024392:	3710      	adds	r7, #16
 8024394:	46bd      	mov	sp, r7
 8024396:	bd80      	pop	{r7, pc}

08024398 <GetAtribMask>:
*
* @return	File System bit mask
*
*********************************************************************/
uint8_t GetAtribMask(char l)
{
 8024398:	b480      	push	{r7}
 802439a:	b085      	sub	sp, #20
 802439c:	af00      	add	r7, sp, #0
 802439e:	4603      	mov	r3, r0
 80243a0:	71fb      	strb	r3, [r7, #7]

	l = toupper(l);
 80243a2:	79fb      	ldrb	r3, [r7, #7]
 80243a4:	73fb      	strb	r3, [r7, #15]
 80243a6:	7bfb      	ldrb	r3, [r7, #15]
 80243a8:	3301      	adds	r3, #1
 80243aa:	4a24      	ldr	r2, [pc, #144]	@ (802443c <GetAtribMask+0xa4>)
 80243ac:	4413      	add	r3, r2
 80243ae:	781b      	ldrb	r3, [r3, #0]
 80243b0:	f003 0303 	and.w	r3, r3, #3
 80243b4:	2b02      	cmp	r3, #2
 80243b6:	d102      	bne.n	80243be <GetAtribMask+0x26>
 80243b8:	7bfb      	ldrb	r3, [r7, #15]
 80243ba:	3b20      	subs	r3, #32
 80243bc:	e000      	b.n	80243c0 <GetAtribMask+0x28>
 80243be:	7bfb      	ldrb	r3, [r7, #15]
 80243c0:	71fb      	strb	r3, [r7, #7]
	switch(l)
 80243c2:	79fb      	ldrb	r3, [r7, #7]
 80243c4:	3b41      	subs	r3, #65	@ 0x41
 80243c6:	2b12      	cmp	r3, #18
 80243c8:	d830      	bhi.n	802442c <GetAtribMask+0x94>
 80243ca:	a201      	add	r2, pc, #4	@ (adr r2, 80243d0 <GetAtribMask+0x38>)
 80243cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80243d0:	08024429 	.word	0x08024429
 80243d4:	0802442d 	.word	0x0802442d
 80243d8:	0802442d 	.word	0x0802442d
 80243dc:	0802442d 	.word	0x0802442d
 80243e0:	0802442d 	.word	0x0802442d
 80243e4:	0802442d 	.word	0x0802442d
 80243e8:	0802442d 	.word	0x0802442d
 80243ec:	08024421 	.word	0x08024421
 80243f0:	0802442d 	.word	0x0802442d
 80243f4:	0802442d 	.word	0x0802442d
 80243f8:	0802442d 	.word	0x0802442d
 80243fc:	0802442d 	.word	0x0802442d
 8024400:	0802442d 	.word	0x0802442d
 8024404:	0802442d 	.word	0x0802442d
 8024408:	0802442d 	.word	0x0802442d
 802440c:	0802442d 	.word	0x0802442d
 8024410:	0802442d 	.word	0x0802442d
 8024414:	0802441d 	.word	0x0802441d
 8024418:	08024425 	.word	0x08024425
	{
		case 'R':
			return AM_RDO;
 802441c:	2301      	movs	r3, #1
 802441e:	e006      	b.n	802442e <GetAtribMask+0x96>
		break;

		case 'H':
			return AM_HID;
 8024420:	2302      	movs	r3, #2
 8024422:	e004      	b.n	802442e <GetAtribMask+0x96>
		break;

		case 'S':
			return AM_SYS;
 8024424:	2304      	movs	r3, #4
 8024426:	e002      	b.n	802442e <GetAtribMask+0x96>
		break;

		case 'A':
			return AM_ARC;
 8024428:	2320      	movs	r3, #32
 802442a:	e000      	b.n	802442e <GetAtribMask+0x96>
		break;

		default:
			return 0;
 802442c:	2300      	movs	r3, #0
		break;
	}
}
 802442e:	4618      	mov	r0, r3
 8024430:	3714      	adds	r7, #20
 8024432:	46bd      	mov	sp, r7
 8024434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024438:	4770      	bx	lr
 802443a:	bf00      	nop
 802443c:	0802c3d0 	.word	0x0802c3d0

08024440 <ShAtrib>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShAtrib(uint8_t bPort, int argc, char *argv[])
{
 8024440:	b580      	push	{r7, lr}
 8024442:	b092      	sub	sp, #72	@ 0x48
 8024444:	af00      	add	r7, sp, #0
 8024446:	4603      	mov	r3, r0
 8024448:	60b9      	str	r1, [r7, #8]
 802444a:	607a      	str	r2, [r7, #4]
 802444c:	73fb      	strb	r3, [r7, #15]
	int c = 1;
 802444e:	2301      	movs	r3, #1
 8024450:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t att = 0;
 8024452:	2300      	movs	r3, #0
 8024454:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t mask = 0;
 8024458:	2300      	movs	r3, #0
 802445a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	char a;
    char szTemp[16];
	FILINFO fnfo;

	if(argc == 2)
 802445e:	68bb      	ldr	r3, [r7, #8]
 8024460:	2b02      	cmp	r3, #2
 8024462:	f040 808f 	bne.w	8024584 <ShAtrib+0x144>
	{
		if(f_stat(argv[1], &fnfo) == FR_OK)
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	3304      	adds	r3, #4
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	f107 0210 	add.w	r2, r7, #16
 8024470:	4611      	mov	r1, r2
 8024472:	4618      	mov	r0, r3
 8024474:	f7f6 ff45 	bl	801b302 <f_stat>
 8024478:	4603      	mov	r3, r0
 802447a:	2b00      	cmp	r3, #0
 802447c:	f040 80a7 	bne.w	80245ce <ShAtrib+0x18e>
		{
        	strcpy(szTemp, "RHSVDA");
 8024480:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8024484:	4a54      	ldr	r2, [pc, #336]	@ (80245d8 <ShAtrib+0x198>)
 8024486:	e892 0003 	ldmia.w	r2, {r0, r1}
 802448a:	6018      	str	r0, [r3, #0]
 802448c:	3304      	adds	r3, #4
 802448e:	8019      	strh	r1, [r3, #0]
 8024490:	3302      	adds	r3, #2
 8024492:	0c0a      	lsrs	r2, r1, #16
 8024494:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 6; i++)
 8024496:	2300      	movs	r3, #0
 8024498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802449a:	e011      	b.n	80244c0 <ShAtrib+0x80>
			{
				if((fnfo.fattrib & bBitMask[i]) == 0)
 802449c:	7e3a      	ldrb	r2, [r7, #24]
 802449e:	494f      	ldr	r1, [pc, #316]	@ (80245dc <ShAtrib+0x19c>)
 80244a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80244a2:	440b      	add	r3, r1
 80244a4:	781b      	ldrb	r3, [r3, #0]
 80244a6:	4013      	ands	r3, r2
 80244a8:	b2db      	uxtb	r3, r3
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	d105      	bne.n	80244ba <ShAtrib+0x7a>
				{
					szTemp[i] = '-';
 80244ae:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80244b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80244b4:	4413      	add	r3, r2
 80244b6:	222d      	movs	r2, #45	@ 0x2d
 80244b8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 6; i++)
 80244ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80244bc:	3301      	adds	r3, #1
 80244be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80244c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80244c2:	2b05      	cmp	r3, #5
 80244c4:	ddea      	ble.n	802449c <ShAtrib+0x5c>
				}
			}
			ShCharOut(bPort, ' ');
 80244c6:	7bfb      	ldrb	r3, [r7, #15]
 80244c8:	2120      	movs	r1, #32
 80244ca:	4618      	mov	r0, r3
 80244cc:	f7fd f82c 	bl	8021528 <ShCharOut>
			ShFieldOut(bPort, szTemp, 0);
 80244d0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80244d4:	7bfb      	ldrb	r3, [r7, #15]
 80244d6:	2200      	movs	r2, #0
 80244d8:	4618      	mov	r0, r3
 80244da:	f7fd f86d 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 80244de:	7bfb      	ldrb	r3, [r7, #15]
 80244e0:	4618      	mov	r0, r3
 80244e2:	f7fd f8c9 	bl	8021678 <ShNL>
 80244e6:	e072      	b.n	80245ce <ShAtrib+0x18e>
	}
	else
	{
		while(c < argc)
		{
			a = argv[c][1];
 80244e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80244ea:	009b      	lsls	r3, r3, #2
 80244ec:	687a      	ldr	r2, [r7, #4]
 80244ee:	4413      	add	r3, r2
 80244f0:	681b      	ldr	r3, [r3, #0]
 80244f2:	785b      	ldrb	r3, [r3, #1]
 80244f4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			if(argv[c][0] == '+')
 80244f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80244fa:	009b      	lsls	r3, r3, #2
 80244fc:	687a      	ldr	r2, [r7, #4]
 80244fe:	4413      	add	r3, r2
 8024500:	681b      	ldr	r3, [r3, #0]
 8024502:	781b      	ldrb	r3, [r3, #0]
 8024504:	2b2b      	cmp	r3, #43	@ 0x2b
 8024506:	d118      	bne.n	802453a <ShAtrib+0xfa>
			{
				att |= GetAtribMask(a);
 8024508:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802450c:	4618      	mov	r0, r3
 802450e:	f7ff ff43 	bl	8024398 <GetAtribMask>
 8024512:	4603      	mov	r3, r0
 8024514:	461a      	mov	r2, r3
 8024516:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802451a:	4313      	orrs	r3, r2
 802451c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				mask |= GetAtribMask(a);
 8024520:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8024524:	4618      	mov	r0, r3
 8024526:	f7ff ff37 	bl	8024398 <GetAtribMask>
 802452a:	4603      	mov	r3, r0
 802452c:	461a      	mov	r2, r3
 802452e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8024532:	4313      	orrs	r3, r2
 8024534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024538:	e021      	b.n	802457e <ShAtrib+0x13e>
			}
			else if(argv[c][0] == '-')
 802453a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802453c:	009b      	lsls	r3, r3, #2
 802453e:	687a      	ldr	r2, [r7, #4]
 8024540:	4413      	add	r3, r2
 8024542:	681b      	ldr	r3, [r3, #0]
 8024544:	781b      	ldrb	r3, [r3, #0]
 8024546:	2b2d      	cmp	r3, #45	@ 0x2d
 8024548:	d119      	bne.n	802457e <ShAtrib+0x13e>
			{
				att &= ~GetAtribMask(a);	// seems redundant
 802454a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802454e:	4618      	mov	r0, r3
 8024550:	f7ff ff22 	bl	8024398 <GetAtribMask>
 8024554:	4603      	mov	r3, r0
 8024556:	43db      	mvns	r3, r3
 8024558:	b25a      	sxtb	r2, r3
 802455a:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 802455e:	4013      	ands	r3, r2
 8024560:	b25b      	sxtb	r3, r3
 8024562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				mask |= GetAtribMask(a);
 8024566:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802456a:	4618      	mov	r0, r3
 802456c:	f7ff ff14 	bl	8024398 <GetAtribMask>
 8024570:	4603      	mov	r3, r0
 8024572:	461a      	mov	r2, r3
 8024574:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8024578:	4313      	orrs	r3, r2
 802457a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
			}
			// else - ignore this unknown attribute
			c++;
 802457e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024580:	3301      	adds	r3, #1
 8024582:	647b      	str	r3, [r7, #68]	@ 0x44
		while(c < argc)
 8024584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024586:	68bb      	ldr	r3, [r7, #8]
 8024588:	429a      	cmp	r2, r3
 802458a:	dbad      	blt.n	80244e8 <ShAtrib+0xa8>
		}

		if(c == 1)
 802458c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802458e:	2b01      	cmp	r3, #1
 8024590:	d10e      	bne.n	80245b0 <ShAtrib+0x170>
		{
			if(f_chmod(argv[2], att, mask) != FR_OK)
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	3308      	adds	r3, #8
 8024596:	681b      	ldr	r3, [r3, #0]
 8024598:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 802459c:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 80245a0:	4618      	mov	r0, r3
 80245a2:	f7f7 f9d1 	bl	801b948 <f_chmod>
 80245a6:	4603      	mov	r3, r0
 80245a8:	2b00      	cmp	r3, #0
 80245aa:	d010      	beq.n	80245ce <ShAtrib+0x18e>
			{
				return CMD_FAILED;
 80245ac:	2303      	movs	r3, #3
 80245ae:	e00f      	b.n	80245d0 <ShAtrib+0x190>
			}
		}
		else
		{
			if(f_chmod(argv[1], att, mask) != FR_OK)
 80245b0:	687b      	ldr	r3, [r7, #4]
 80245b2:	3304      	adds	r3, #4
 80245b4:	681b      	ldr	r3, [r3, #0]
 80245b6:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 80245ba:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 80245be:	4618      	mov	r0, r3
 80245c0:	f7f7 f9c2 	bl	801b948 <f_chmod>
 80245c4:	4603      	mov	r3, r0
 80245c6:	2b00      	cmp	r3, #0
 80245c8:	d001      	beq.n	80245ce <ShAtrib+0x18e>
			{
				return CMD_FAILED;
 80245ca:	2303      	movs	r3, #3
 80245cc:	e000      	b.n	80245d0 <ShAtrib+0x190>
			}
		}
	}
	return CMD_OK;
 80245ce:	2300      	movs	r3, #0
}
 80245d0:	4618      	mov	r0, r3
 80245d2:	3748      	adds	r7, #72	@ 0x48
 80245d4:	46bd      	mov	sp, r7
 80245d6:	bd80      	pop	{r7, pc}
 80245d8:	0802b154 	.word	0x0802b154
 80245dc:	0802ba20 	.word	0x0802ba20

080245e0 <ShCopy>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShCopy(uint8_t bPort, int argc, char *argv[])
{
 80245e0:	b580      	push	{r7, lr}
 80245e2:	f5ad 6d90 	sub.w	sp, sp, #1152	@ 0x480
 80245e6:	af00      	add	r7, sp, #0
 80245e8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80245ec:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80245f0:	6019      	str	r1, [r3, #0]
 80245f2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80245f6:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80245fa:	601a      	str	r2, [r3, #0]
 80245fc:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8024600:	f2a3 4371 	subw	r3, r3, #1137	@ 0x471
 8024604:	4602      	mov	r2, r0
 8024606:	701a      	strb	r2, [r3, #0]
    int c;
    unsigned int byts;
    int ret;


    if(argc == 3)
 8024608:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 802460c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8024610:	681b      	ldr	r3, [r3, #0]
 8024612:	2b03      	cmp	r3, #3
 8024614:	f040 8086 	bne.w	8024724 <ShCopy+0x144>
    {
		ret = f_open(&srcfp, argv[1], FA_READ);
 8024618:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 802461c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8024620:	681b      	ldr	r3, [r3, #0]
 8024622:	3304      	adds	r3, #4
 8024624:	6819      	ldr	r1, [r3, #0]
 8024626:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 802462a:	2201      	movs	r2, #1
 802462c:	4618      	mov	r0, r3
 802462e:	f7f5 fc5b 	bl	8019ee8 <f_open>
 8024632:	4603      	mov	r3, r0
 8024634:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
		if(ret != FR_OK)
 8024638:	f8d7 347c 	ldr.w	r3, [r7, #1148]	@ 0x47c
 802463c:	2b00      	cmp	r3, #0
 802463e:	d001      	beq.n	8024644 <ShCopy+0x64>
		{
			return CMD_NOT_FOUND;
 8024640:	2302      	movs	r3, #2
 8024642:	e070      	b.n	8024726 <ShCopy+0x146>
		}

		ret = f_open(&destfp, argv[2], FA_READ);
 8024644:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8024648:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 802464c:	681b      	ldr	r3, [r3, #0]
 802464e:	3308      	adds	r3, #8
 8024650:	6819      	ldr	r1, [r3, #0]
 8024652:	f107 031c 	add.w	r3, r7, #28
 8024656:	2201      	movs	r2, #1
 8024658:	4618      	mov	r0, r3
 802465a:	f7f5 fc45 	bl	8019ee8 <f_open>
 802465e:	4603      	mov	r3, r0
 8024660:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
		if(ret == FR_OK)
 8024664:	f8d7 347c 	ldr.w	r3, [r7, #1148]	@ 0x47c
 8024668:	2b00      	cmp	r3, #0
 802466a:	d118      	bne.n	802469e <ShCopy+0xbe>
		{
	        f_close(&destfp);
 802466c:	f107 031c 	add.w	r3, r7, #28
 8024670:	4618      	mov	r0, r3
 8024672:	f7f6 f995 	bl	801a9a0 <f_close>
	        ShNL(bPort);
 8024676:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 802467a:	f2a3 4371 	subw	r3, r3, #1137	@ 0x471
 802467e:	781b      	ldrb	r3, [r3, #0]
 8024680:	4618      	mov	r0, r3
 8024682:	f7fc fff9 	bl	8021678 <ShNL>
			ShFieldOut(bPort, "File already exists", 0);
 8024686:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 802468a:	f2a3 4371 	subw	r3, r3, #1137	@ 0x471
 802468e:	781b      	ldrb	r3, [r3, #0]
 8024690:	2200      	movs	r2, #0
 8024692:	4927      	ldr	r1, [pc, #156]	@ (8024730 <ShCopy+0x150>)
 8024694:	4618      	mov	r0, r3
 8024696:	f7fc ff8f 	bl	80215b8 <ShFieldOut>
			return CMD_BAD_PARAMS;
 802469a:	2301      	movs	r3, #1
 802469c:	e043      	b.n	8024726 <ShCopy+0x146>
		}

		ret = f_open(&destfp, argv[2], FA_WRITE | FA_CREATE_NEW);
 802469e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80246a2:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80246a6:	681b      	ldr	r3, [r3, #0]
 80246a8:	3308      	adds	r3, #8
 80246aa:	6819      	ldr	r1, [r3, #0]
 80246ac:	f107 031c 	add.w	r3, r7, #28
 80246b0:	2206      	movs	r2, #6
 80246b2:	4618      	mov	r0, r3
 80246b4:	f7f5 fc18 	bl	8019ee8 <f_open>
 80246b8:	4603      	mov	r3, r0
 80246ba:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
		if(ret != FR_OK)
 80246be:	f8d7 347c 	ldr.w	r3, [r7, #1148]	@ 0x47c
 80246c2:	2b00      	cmp	r3, #0
 80246c4:	d001      	beq.n	80246ca <ShCopy+0xea>
		{
			return CMD_BAD_PARAMS;
 80246c6:	2301      	movs	r3, #1
 80246c8:	e02d      	b.n	8024726 <ShCopy+0x146>
		}

		while(1)
		{
			ret = f_read(&srcfp, &c, 1, &byts);
 80246ca:	f107 0314 	add.w	r3, r7, #20
 80246ce:	f107 0118 	add.w	r1, r7, #24
 80246d2:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 80246d6:	2201      	movs	r2, #1
 80246d8:	f7f5 fdc7 	bl	801a26a <f_read>
 80246dc:	4603      	mov	r3, r0
 80246de:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
			if(byts == 0)
 80246e2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80246e6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80246ea:	681b      	ldr	r3, [r3, #0]
 80246ec:	2b00      	cmp	r3, #0
 80246ee:	d00c      	beq.n	802470a <ShCopy+0x12a>
			{
				break;
			}
			ret = f_write(&destfp, &c, 1, &byts);
 80246f0:	f107 0314 	add.w	r3, r7, #20
 80246f4:	f107 0118 	add.w	r1, r7, #24
 80246f8:	f107 001c 	add.w	r0, r7, #28
 80246fc:	2201      	movs	r2, #1
 80246fe:	f7f5 ff22 	bl	801a546 <f_write>
 8024702:	4603      	mov	r3, r0
 8024704:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
			ret = f_read(&srcfp, &c, 1, &byts);
 8024708:	e7df      	b.n	80246ca <ShCopy+0xea>
				break;
 802470a:	bf00      	nop
		}

        f_close(&srcfp);
 802470c:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8024710:	4618      	mov	r0, r3
 8024712:	f7f6 f945 	bl	801a9a0 <f_close>
        f_close(&destfp);
 8024716:	f107 031c 	add.w	r3, r7, #28
 802471a:	4618      	mov	r0, r3
 802471c:	f7f6 f940 	bl	801a9a0 <f_close>
		return CMD_OK;
 8024720:	2300      	movs	r3, #0
 8024722:	e000      	b.n	8024726 <ShCopy+0x146>
    }
    else
    {
		return CMD_BAD_PARAMS;
 8024724:	2301      	movs	r3, #1
    }
}
 8024726:	4618      	mov	r0, r3
 8024728:	f507 6790 	add.w	r7, r7, #1152	@ 0x480
 802472c:	46bd      	mov	sp, r7
 802472e:	bd80      	pop	{r7, pc}
 8024730:	0802b1cc 	.word	0x0802b1cc

08024734 <DoRun>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN DoRun(uint8_t bPort, FIL* fp, size_t nargs, char** args)
{
 8024734:	b580      	push	{r7, lr}
 8024736:	b086      	sub	sp, #24
 8024738:	af00      	add	r7, sp, #0
 802473a:	60b9      	str	r1, [r7, #8]
 802473c:	607a      	str	r2, [r7, #4]
 802473e:	603b      	str	r3, [r7, #0]
 8024740:	4603      	mov	r3, r0
 8024742:	73fb      	strb	r3, [r7, #15]

	CurrentScript++;
 8024744:	4b4c      	ldr	r3, [pc, #304]	@ (8024878 <DoRun+0x144>)
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	3301      	adds	r3, #1
 802474a:	4a4b      	ldr	r2, [pc, #300]	@ (8024878 <DoRun+0x144>)
 802474c:	6013      	str	r3, [r2, #0]
	if(CurrentScript >= NUMBER_OF_SCRIPT_NESTS)
 802474e:	4b4a      	ldr	r3, [pc, #296]	@ (8024878 <DoRun+0x144>)
 8024750:	681b      	ldr	r3, [r3, #0]
 8024752:	2b02      	cmp	r3, #2
 8024754:	f300 808b 	bgt.w	802486e <DoRun+0x13a>
	}
	else
	{
		// setup the context
		//ScriptNest[CurrentScript].Scriptfp = fp;
		memcpy(&ScriptNest[CurrentScript].Scriptfp, fp, sizeof(FIL));
 8024758:	4b47      	ldr	r3, [pc, #284]	@ (8024878 <DoRun+0x144>)
 802475a:	681b      	ldr	r3, [r3, #0]
 802475c:	f44f 7266 	mov.w	r2, #920	@ 0x398
 8024760:	fb02 f303 	mul.w	r3, r2, r3
 8024764:	4a45      	ldr	r2, [pc, #276]	@ (802487c <DoRun+0x148>)
 8024766:	4413      	add	r3, r2
 8024768:	f44f 720c 	mov.w	r2, #560	@ 0x230
 802476c:	68b9      	ldr	r1, [r7, #8]
 802476e:	4618      	mov	r0, r3
 8024770:	f001 fe8d 	bl	802648e <memcpy>
		ScriptNest[CurrentScript].RunMode = RUN_NORMAL;
 8024774:	4b40      	ldr	r3, [pc, #256]	@ (8024878 <DoRun+0x144>)
 8024776:	681b      	ldr	r3, [r3, #0]
 8024778:	4a40      	ldr	r2, [pc, #256]	@ (802487c <DoRun+0x148>)
 802477a:	f44f 7166 	mov.w	r1, #920	@ 0x398
 802477e:	fb01 f303 	mul.w	r3, r1, r3
 8024782:	4413      	add	r3, r2
 8024784:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8024788:	2200      	movs	r2, #0
 802478a:	701a      	strb	r2, [r3, #0]
		ScriptNest[CurrentScript].RunMessage = RUN_NORMAL;
 802478c:	4b3a      	ldr	r3, [pc, #232]	@ (8024878 <DoRun+0x144>)
 802478e:	681b      	ldr	r3, [r3, #0]
 8024790:	4a3a      	ldr	r2, [pc, #232]	@ (802487c <DoRun+0x148>)
 8024792:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8024796:	fb01 f303 	mul.w	r3, r1, r3
 802479a:	4413      	add	r3, r2
 802479c:	f203 3381 	addw	r3, r3, #897	@ 0x381
 80247a0:	2200      	movs	r2, #0
 80247a2:	701a      	strb	r2, [r3, #0]
		ScriptNest[CurrentScript].LoopCount = 0;
 80247a4:	4b34      	ldr	r3, [pc, #208]	@ (8024878 <DoRun+0x144>)
 80247a6:	681b      	ldr	r3, [r3, #0]
 80247a8:	4a34      	ldr	r2, [pc, #208]	@ (802487c <DoRun+0x148>)
 80247aa:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80247ae:	fb01 f303 	mul.w	r3, r1, r3
 80247b2:	4413      	add	r3, r2
 80247b4:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 80247b8:	2200      	movs	r2, #0
 80247ba:	601a      	str	r2, [r3, #0]
		ScriptNest[CurrentScript].DelayCount = 0;
 80247bc:	4b2e      	ldr	r3, [pc, #184]	@ (8024878 <DoRun+0x144>)
 80247be:	681b      	ldr	r3, [r3, #0]
 80247c0:	4a2e      	ldr	r2, [pc, #184]	@ (802487c <DoRun+0x148>)
 80247c2:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80247c6:	fb01 f303 	mul.w	r3, r1, r3
 80247ca:	4413      	add	r3, r2
 80247cc:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80247d0:	2200      	movs	r2, #0
 80247d2:	601a      	str	r2, [r3, #0]
		ScriptNest[CurrentScript].bPort = bPort;
 80247d4:	4b28      	ldr	r3, [pc, #160]	@ (8024878 <DoRun+0x144>)
 80247d6:	681b      	ldr	r3, [r3, #0]
 80247d8:	4a28      	ldr	r2, [pc, #160]	@ (802487c <DoRun+0x148>)
 80247da:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80247de:	fb01 f303 	mul.w	r3, r1, r3
 80247e2:	4413      	add	r3, r2
 80247e4:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 80247e8:	7bfa      	ldrb	r2, [r7, #15]
 80247ea:	701a      	strb	r2, [r3, #0]

		strcpy(ScriptNest[CurrentScript].name, args[0]);
 80247ec:	4b22      	ldr	r3, [pc, #136]	@ (8024878 <DoRun+0x144>)
 80247ee:	681b      	ldr	r3, [r3, #0]
 80247f0:	f44f 7266 	mov.w	r2, #920	@ 0x398
 80247f4:	fb02 f303 	mul.w	r3, r2, r3
 80247f8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80247fc:	4a1f      	ldr	r2, [pc, #124]	@ (802487c <DoRun+0x148>)
 80247fe:	441a      	add	r2, r3
 8024800:	683b      	ldr	r3, [r7, #0]
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	4619      	mov	r1, r3
 8024806:	4610      	mov	r0, r2
 8024808:	f001 fe2b 	bl	8026462 <strcpy>

		int pidx = PortIndex(bPort);
 802480c:	7bfb      	ldrb	r3, [r7, #15]
 802480e:	4618      	mov	r0, r3
 8024810:	f7fe ffd4 	bl	80237bc <PortIndex>
 8024814:	4603      	mov	r3, r0
 8024816:	613b      	str	r3, [r7, #16]
		scpargs[pidx].nargs = nargs;
 8024818:	4a19      	ldr	r2, [pc, #100]	@ (8024880 <DoRun+0x14c>)
 802481a:	693b      	ldr	r3, [r7, #16]
 802481c:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8024820:	fb01 f303 	mul.w	r3, r1, r3
 8024824:	4413      	add	r3, r2
 8024826:	687a      	ldr	r2, [r7, #4]
 8024828:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < nargs-1; i++)
 802482a:	2300      	movs	r3, #0
 802482c:	617b      	str	r3, [r7, #20]
 802482e:	e019      	b.n	8024864 <DoRun+0x130>
		{
			strcpy(scpargs[pidx].args[i], args[i+1]);
 8024830:	697a      	ldr	r2, [r7, #20]
 8024832:	4613      	mov	r3, r2
 8024834:	011b      	lsls	r3, r3, #4
 8024836:	1a9b      	subs	r3, r3, r2
 8024838:	009b      	lsls	r3, r3, #2
 802483a:	693a      	ldr	r2, [r7, #16]
 802483c:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8024840:	fb01 f202 	mul.w	r2, r1, r2
 8024844:	4413      	add	r3, r2
 8024846:	4a0e      	ldr	r2, [pc, #56]	@ (8024880 <DoRun+0x14c>)
 8024848:	4413      	add	r3, r2
 802484a:	1d18      	adds	r0, r3, #4
 802484c:	697b      	ldr	r3, [r7, #20]
 802484e:	3301      	adds	r3, #1
 8024850:	009b      	lsls	r3, r3, #2
 8024852:	683a      	ldr	r2, [r7, #0]
 8024854:	4413      	add	r3, r2
 8024856:	681b      	ldr	r3, [r3, #0]
 8024858:	4619      	mov	r1, r3
 802485a:	f001 fe02 	bl	8026462 <strcpy>
		for(int i = 0; i < nargs-1; i++)
 802485e:	697b      	ldr	r3, [r7, #20]
 8024860:	3301      	adds	r3, #1
 8024862:	617b      	str	r3, [r7, #20]
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	1e5a      	subs	r2, r3, #1
 8024868:	697b      	ldr	r3, [r7, #20]
 802486a:	429a      	cmp	r2, r3
 802486c:	d8e0      	bhi.n	8024830 <DoRun+0xfc>
		}
	}
	return CMD_OK;
 802486e:	2300      	movs	r3, #0
}
 8024870:	4618      	mov	r0, r3
 8024872:	3718      	adds	r7, #24
 8024874:	46bd      	mov	sp, r7
 8024876:	bd80      	pop	{r7, pc}
 8024878:	20001898 	.word	0x20001898
 802487c:	2001eacc 	.word	0x2001eacc
 8024880:	2001e688 	.word	0x2001e688

08024884 <ScriptDone>:
*
* @return	None
*
*********************************************************************/
void ScriptDone(void)
{
 8024884:	b580      	push	{r7, lr}
 8024886:	af00      	add	r7, sp, #0
    
	if(CurrentScript != -1)
 8024888:	4b0b      	ldr	r3, [pc, #44]	@ (80248b8 <ScriptDone+0x34>)
 802488a:	681b      	ldr	r3, [r3, #0]
 802488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024890:	d00f      	beq.n	80248b2 <ScriptDone+0x2e>
	{
		f_close(&ScriptNest[CurrentScript].Scriptfp);
 8024892:	4b09      	ldr	r3, [pc, #36]	@ (80248b8 <ScriptDone+0x34>)
 8024894:	681b      	ldr	r3, [r3, #0]
 8024896:	f44f 7266 	mov.w	r2, #920	@ 0x398
 802489a:	fb02 f303 	mul.w	r3, r2, r3
 802489e:	4a07      	ldr	r2, [pc, #28]	@ (80248bc <ScriptDone+0x38>)
 80248a0:	4413      	add	r3, r2
 80248a2:	4618      	mov	r0, r3
 80248a4:	f7f6 f87c 	bl	801a9a0 <f_close>
		CurrentScript--;
 80248a8:	4b03      	ldr	r3, [pc, #12]	@ (80248b8 <ScriptDone+0x34>)
 80248aa:	681b      	ldr	r3, [r3, #0]
 80248ac:	3b01      	subs	r3, #1
 80248ae:	4a02      	ldr	r2, [pc, #8]	@ (80248b8 <ScriptDone+0x34>)
 80248b0:	6013      	str	r3, [r2, #0]
	}
}
 80248b2:	bf00      	nop
 80248b4:	bd80      	pop	{r7, pc}
 80248b6:	bf00      	nop
 80248b8:	20001898 	.word	0x20001898
 80248bc:	2001eacc 	.word	0x2001eacc

080248c0 <DoScriptRun>:
*
* @return	None
*
*********************************************************************/
void DoScriptRun(void)
{
 80248c0:	b590      	push	{r4, r7, lr}
 80248c2:	b09f      	sub	sp, #124	@ 0x7c
 80248c4:	af00      	add	r7, sp, #0
	int iCmdIndex;
	ScriptContext* cs;
	char* p;
	char cmdbuffer[80];

	if(CurrentScript != -1)
 80248c6:	4ba5      	ldr	r3, [pc, #660]	@ (8024b5c <DoScriptRun+0x29c>)
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80248ce:	f000 81d5 	beq.w	8024c7c <DoScriptRun+0x3bc>
	{
		cs = &ScriptNest[CurrentScript];
 80248d2:	4ba2      	ldr	r3, [pc, #648]	@ (8024b5c <DoScriptRun+0x29c>)
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	f44f 7266 	mov.w	r2, #920	@ 0x398
 80248da:	fb02 f303 	mul.w	r3, r2, r3
 80248de:	4aa0      	ldr	r2, [pc, #640]	@ (8024b60 <DoScriptRun+0x2a0>)
 80248e0:	4413      	add	r3, r2
 80248e2:	66bb      	str	r3, [r7, #104]	@ 0x68
		switch(cs->RunMode)
 80248e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80248e6:	f893 3380 	ldrb.w	r3, [r3, #896]	@ 0x380
 80248ea:	2b05      	cmp	r3, #5
 80248ec:	f200 81b9 	bhi.w	8024c62 <DoScriptRun+0x3a2>
 80248f0:	a201      	add	r2, pc, #4	@ (adr r2, 80248f8 <DoScriptRun+0x38>)
 80248f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80248f6:	bf00      	nop
 80248f8:	08024911 	.word	0x08024911
 80248fc:	08024911 	.word	0x08024911
 8024900:	08024ac3 	.word	0x08024ac3
 8024904:	08024b75 	.word	0x08024b75
 8024908:	08024bd1 	.word	0x08024bd1
 802490c:	08024c2d 	.word	0x08024c2d
        {
            case RUN_NORMAL:
            case RUN_IF:

            	if(cs->RunMessage == SCRIPT_EXIT)
 8024910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024912:	f893 3381 	ldrb.w	r3, [r3, #897]	@ 0x381
 8024916:	2b06      	cmp	r3, #6
 8024918:	d102      	bne.n	8024920 <DoScriptRun+0x60>
            	{
            		ScriptDone();
 802491a:	f7ff ffb3 	bl	8024884 <ScriptDone>
 802491e:	e00e      	b.n	802493e <DoScriptRun+0x7e>
            	}
            	else if(cs->RunMessage == SCRIPT_PAUSE)
 8024920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024922:	f893 3381 	ldrb.w	r3, [r3, #897]	@ 0x381
 8024926:	2b07      	cmp	r3, #7
 8024928:	f000 819d 	beq.w	8024c66 <DoScriptRun+0x3a6>
            	{
            		return;
            	}
            	else if(cs->RunMessage == SCRIPT_EXIT)
 802492c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802492e:	f893 3381 	ldrb.w	r3, [r3, #897]	@ 0x381
 8024932:	2b06      	cmp	r3, #6
 8024934:	d103      	bne.n	802493e <DoScriptRun+0x7e>
            	{
            		cs->RunMessage = RUN_NORMAL;
 8024936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024938:	2200      	movs	r2, #0
 802493a:	f883 2381 	strb.w	r2, [r3, #897]	@ 0x381
            	}

                if(getLine(&cs->Scriptfp, cs->buffer, BUFFER_SIZE) != 0)
 802493e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8024940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024942:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8024946:	223c      	movs	r2, #60	@ 0x3c
 8024948:	4619      	mov	r1, r3
 802494a:	f7fc fd71 	bl	8021430 <getLine>
 802494e:	4603      	mov	r3, r0
 8024950:	2b00      	cmp	r3, #0
 8024952:	f000 80b3 	beq.w	8024abc <DoScriptRun+0x1fc>
                {
					// substitute any variable arguments, "%X" where X is 1-6
					// and replace it with the corresponding argument string
					// ex: DIR -c %1 %2
					p = cs->buffer;
 8024956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024958:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 802495c:	663b      	str	r3, [r7, #96]	@ 0x60
					int argidx;
					int cmdidx = 0;
 802495e:	2300      	movs	r3, #0
 8024960:	677b      	str	r3, [r7, #116]	@ 0x74
					int len;
					for(int i = 0; i < strlen(p); i++)
 8024962:	2300      	movs	r3, #0
 8024964:	673b      	str	r3, [r7, #112]	@ 0x70
 8024966:	e06d      	b.n	8024a44 <DoScriptRun+0x184>
					{
						if(p[i] == '%')
 8024968:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802496a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802496c:	4413      	add	r3, r2
 802496e:	781b      	ldrb	r3, [r3, #0]
 8024970:	2b25      	cmp	r3, #37	@ 0x25
 8024972:	d159      	bne.n	8024a28 <DoScriptRun+0x168>
						{
							// found the "arg" in the buffer
							i++;
 8024974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8024976:	3301      	adds	r3, #1
 8024978:	673b      	str	r3, [r7, #112]	@ 0x70
							argidx = p[i] - '0' - 1;
 802497a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802497c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802497e:	4413      	add	r3, r2
 8024980:	781b      	ldrb	r3, [r3, #0]
 8024982:	3b31      	subs	r3, #49	@ 0x31
 8024984:	65bb      	str	r3, [r7, #88]	@ 0x58
							int pidx = PortIndex(cs->bPort);
 8024986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024988:	f893 3370 	ldrb.w	r3, [r3, #880]	@ 0x370
 802498c:	4618      	mov	r0, r3
 802498e:	f7fe ff15 	bl	80237bc <PortIndex>
 8024992:	4603      	mov	r3, r0
 8024994:	657b      	str	r3, [r7, #84]	@ 0x54

							if(argidx >= 0 && argidx < scpargs[pidx].nargs)
 8024996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024998:	2b00      	cmp	r3, #0
 802499a:	db50      	blt.n	8024a3e <DoScriptRun+0x17e>
 802499c:	4a71      	ldr	r2, [pc, #452]	@ (8024b64 <DoScriptRun+0x2a4>)
 802499e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80249a0:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80249a4:	fb01 f303 	mul.w	r3, r1, r3
 80249a8:	4413      	add	r3, r2
 80249aa:	681a      	ldr	r2, [r3, #0]
 80249ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80249ae:	429a      	cmp	r2, r3
 80249b0:	d945      	bls.n	8024a3e <DoScriptRun+0x17e>
							{
								len = strlen(scpargs[pidx].args[argidx]);
 80249b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80249b4:	4613      	mov	r3, r2
 80249b6:	011b      	lsls	r3, r3, #4
 80249b8:	1a9b      	subs	r3, r3, r2
 80249ba:	009b      	lsls	r3, r3, #2
 80249bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80249be:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80249c2:	fb01 f202 	mul.w	r2, r1, r2
 80249c6:	4413      	add	r3, r2
 80249c8:	4a66      	ldr	r2, [pc, #408]	@ (8024b64 <DoScriptRun+0x2a4>)
 80249ca:	4413      	add	r3, r2
 80249cc:	3304      	adds	r3, #4
 80249ce:	4618      	mov	r0, r3
 80249d0:	f7db fc68 	bl	80002a4 <strlen>
 80249d4:	4603      	mov	r3, r0
 80249d6:	653b      	str	r3, [r7, #80]	@ 0x50
								if(len != 0)
 80249d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80249da:	2b00      	cmp	r3, #0
 80249dc:	d02f      	beq.n	8024a3e <DoScriptRun+0x17e>
								{
									// copy the argument into the command buffer
									for(int j = 0; j < len; j++)
 80249de:	2300      	movs	r3, #0
 80249e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80249e2:	e01c      	b.n	8024a1e <DoScriptRun+0x15e>
									{
										cmdbuffer[cmdidx++] = scpargs[pidx].args[argidx][j];
 80249e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80249e6:	1c53      	adds	r3, r2, #1
 80249e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80249ea:	4c5e      	ldr	r4, [pc, #376]	@ (8024b64 <DoScriptRun+0x2a4>)
 80249ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80249ee:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80249f0:	460b      	mov	r3, r1
 80249f2:	011b      	lsls	r3, r3, #4
 80249f4:	1a5b      	subs	r3, r3, r1
 80249f6:	009b      	lsls	r3, r3, #2
 80249f8:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80249fc:	fb00 f101 	mul.w	r1, r0, r1
 8024a00:	440b      	add	r3, r1
 8024a02:	18e1      	adds	r1, r4, r3
 8024a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8024a06:	440b      	add	r3, r1
 8024a08:	3304      	adds	r3, #4
 8024a0a:	7819      	ldrb	r1, [r3, #0]
 8024a0c:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8024a10:	443b      	add	r3, r7
 8024a12:	460a      	mov	r2, r1
 8024a14:	f803 2c78 	strb.w	r2, [r3, #-120]
									for(int j = 0; j < len; j++)
 8024a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8024a1a:	3301      	adds	r3, #1
 8024a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8024a1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8024a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024a22:	429a      	cmp	r2, r3
 8024a24:	dbde      	blt.n	80249e4 <DoScriptRun+0x124>
 8024a26:	e00a      	b.n	8024a3e <DoScriptRun+0x17e>
								}
							}
						}
						else
						{
							cmdbuffer[cmdidx++] = p[i];
 8024a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8024a2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8024a2c:	441a      	add	r2, r3
 8024a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024a30:	1c59      	adds	r1, r3, #1
 8024a32:	6779      	str	r1, [r7, #116]	@ 0x74
 8024a34:	7812      	ldrb	r2, [r2, #0]
 8024a36:	3378      	adds	r3, #120	@ 0x78
 8024a38:	443b      	add	r3, r7
 8024a3a:	f803 2c78 	strb.w	r2, [r3, #-120]
					for(int i = 0; i < strlen(p); i++)
 8024a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8024a40:	3301      	adds	r3, #1
 8024a42:	673b      	str	r3, [r7, #112]	@ 0x70
 8024a44:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8024a46:	f7db fc2d 	bl	80002a4 <strlen>
 8024a4a:	4602      	mov	r2, r0
 8024a4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8024a4e:	429a      	cmp	r2, r3
 8024a50:	d88a      	bhi.n	8024968 <DoScriptRun+0xa8>
						}
					}
					cmdbuffer[cmdidx] = 0;
 8024a52:	463a      	mov	r2, r7
 8024a54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024a56:	4413      	add	r3, r2
 8024a58:	2200      	movs	r2, #0
 8024a5a:	701a      	strb	r2, [r3, #0]
					
//		ShStringOut(ScriptNest[CurrentScript].bPort, (char*)cmdbuffer);
//		ShNL(ScriptNest[CurrentScript].bPort);


        			ret = ShellMain(ScriptNest[CurrentScript].bPort, (char*)cmdbuffer);
 8024a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8024b5c <DoScriptRun+0x29c>)
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	4a3f      	ldr	r2, [pc, #252]	@ (8024b60 <DoScriptRun+0x2a0>)
 8024a62:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8024a66:	fb01 f303 	mul.w	r3, r1, r3
 8024a6a:	4413      	add	r3, r2
 8024a6c:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8024a70:	781b      	ldrb	r3, [r3, #0]
 8024a72:	463a      	mov	r2, r7
 8024a74:	4611      	mov	r1, r2
 8024a76:	4618      	mov	r0, r3
 8024a78:	f7fe fd30 	bl	80234dc <ShellMain>
 8024a7c:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    if(ret & CMD_IF_TRUE)
 8024a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8024a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024a84:	2b00      	cmp	r3, #0
 8024a86:	d004      	beq.n	8024a92 <DoScriptRun+0x1d2>
                    {
                    	cs->RunMode = RUN_IF;
 8024a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024a8a:	2201      	movs	r2, #1
 8024a8c:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
                    }                }
                else
                {
                    ScriptDone();
                }
            break;
 8024a90:	e0eb      	b.n	8024c6a <DoScriptRun+0x3aa>
                    else if(ret & CMD_IF_FALSE)
 8024a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8024a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024a98:	2b00      	cmp	r3, #0
 8024a9a:	d004      	beq.n	8024aa6 <DoScriptRun+0x1e6>
                    	cs->RunMode = SKIP_IF;
 8024a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024a9e:	2202      	movs	r2, #2
 8024aa0:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
            break;
 8024aa4:	e0e1      	b.n	8024c6a <DoScriptRun+0x3aa>
                    else if(ret & CMD_ELSE)
 8024aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8024aa8:	f403 6310 	and.w	r3, r3, #2304	@ 0x900
 8024aac:	2b00      	cmp	r3, #0
 8024aae:	f000 80dc 	beq.w	8024c6a <DoScriptRun+0x3aa>
                    	cs->RunMode = SKIP_ELSE;
 8024ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024ab4:	2203      	movs	r2, #3
 8024ab6:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
            break;
 8024aba:	e0d6      	b.n	8024c6a <DoScriptRun+0x3aa>
                    ScriptDone();
 8024abc:	f7ff fee2 	bl	8024884 <ScriptDone>
            break;
 8024ac0:	e0d3      	b.n	8024c6a <DoScriptRun+0x3aa>

            case SKIP_IF:
                if(getLine(&cs->Scriptfp, cs->buffer, BUFFER_SIZE) != (uint8_t)EOF)
 8024ac2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8024ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024ac6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8024aca:	223c      	movs	r2, #60	@ 0x3c
 8024acc:	4619      	mov	r1, r3
 8024ace:	f7fc fcaf 	bl	8021430 <getLine>
 8024ad2:	4603      	mov	r3, r0
 8024ad4:	2bff      	cmp	r3, #255	@ 0xff
 8024ad6:	d03d      	beq.n	8024b54 <DoScriptRun+0x294>
                {
                    iCmdIndex = FindCommand(cs->buffer, &cs->nargs, cs->args);
 8024ad8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024ada:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 8024ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024ae0:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8024ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024ae6:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 8024aea:	461a      	mov	r2, r3
 8024aec:	f7fe fb6e 	bl	80231cc <FindCommand>
 8024af0:	6678      	str	r0, [r7, #100]	@ 0x64
                    if(strcasecmp(ShellTable[iCmdIndex].szCommand, "else") == 0)
 8024af2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8024af4:	4613      	mov	r3, r2
 8024af6:	005b      	lsls	r3, r3, #1
 8024af8:	4413      	add	r3, r2
 8024afa:	00db      	lsls	r3, r3, #3
 8024afc:	4a1a      	ldr	r2, [pc, #104]	@ (8024b68 <DoScriptRun+0x2a8>)
 8024afe:	4413      	add	r3, r2
 8024b00:	491a      	ldr	r1, [pc, #104]	@ (8024b6c <DoScriptRun+0x2ac>)
 8024b02:	4618      	mov	r0, r3
 8024b04:	f7fe f82e 	bl	8022b64 <strcasecmp>
 8024b08:	4603      	mov	r3, r0
 8024b0a:	2b00      	cmp	r3, #0
 8024b0c:	d10e      	bne.n	8024b2c <DoScriptRun+0x26c>
                    {
                        if(cs->RunMode == RUN_IF)
 8024b0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b10:	f893 3380 	ldrb.w	r3, [r3, #896]	@ 0x380
 8024b14:	2b01      	cmp	r3, #1
 8024b16:	d104      	bne.n	8024b22 <DoScriptRun+0x262>
                        {
                        	cs->RunMode = SKIP_ELSE;
 8024b18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b1a:	2203      	movs	r2, #3
 8024b1c:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
                }
                else
                {
                    ScriptDone();
                }
            break;
 8024b20:	e0a5      	b.n	8024c6e <DoScriptRun+0x3ae>
                        	cs->RunMode = RUN_NORMAL;
 8024b22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b24:	2200      	movs	r2, #0
 8024b26:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
            break;
 8024b2a:	e0a0      	b.n	8024c6e <DoScriptRun+0x3ae>
                    else if(strcasecmp(ShellTable[iCmdIndex].szCommand, "endif") == 0)
 8024b2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8024b2e:	4613      	mov	r3, r2
 8024b30:	005b      	lsls	r3, r3, #1
 8024b32:	4413      	add	r3, r2
 8024b34:	00db      	lsls	r3, r3, #3
 8024b36:	4a0c      	ldr	r2, [pc, #48]	@ (8024b68 <DoScriptRun+0x2a8>)
 8024b38:	4413      	add	r3, r2
 8024b3a:	490d      	ldr	r1, [pc, #52]	@ (8024b70 <DoScriptRun+0x2b0>)
 8024b3c:	4618      	mov	r0, r3
 8024b3e:	f7fe f811 	bl	8022b64 <strcasecmp>
 8024b42:	4603      	mov	r3, r0
 8024b44:	2b00      	cmp	r3, #0
 8024b46:	f040 8092 	bne.w	8024c6e <DoScriptRun+0x3ae>
						cs->RunMode = RUN_NORMAL;
 8024b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b4c:	2200      	movs	r2, #0
 8024b4e:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
            break;
 8024b52:	e08c      	b.n	8024c6e <DoScriptRun+0x3ae>
                    ScriptDone();
 8024b54:	f7ff fe96 	bl	8024884 <ScriptDone>
            break;
 8024b58:	e089      	b.n	8024c6e <DoScriptRun+0x3ae>
 8024b5a:	bf00      	nop
 8024b5c:	20001898 	.word	0x20001898
 8024b60:	2001eacc 	.word	0x2001eacc
 8024b64:	2001e688 	.word	0x2001e688
 8024b68:	0802c054 	.word	0x0802c054
 8024b6c:	0802b210 	.word	0x0802b210
 8024b70:	0802b218 	.word	0x0802b218

            case SKIP_ELSE:
                if(getLine(&cs->Scriptfp, cs->buffer, BUFFER_SIZE) != (uint8_t)EOF)
 8024b74:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8024b76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b78:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8024b7c:	223c      	movs	r2, #60	@ 0x3c
 8024b7e:	4619      	mov	r1, r3
 8024b80:	f7fc fc56 	bl	8021430 <getLine>
 8024b84:	4603      	mov	r3, r0
 8024b86:	2bff      	cmp	r3, #255	@ 0xff
 8024b88:	d01f      	beq.n	8024bca <DoScriptRun+0x30a>
                {
                    iCmdIndex = FindCommand(cs->buffer, &cs->nargs, cs->args);
 8024b8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b8c:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 8024b90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b92:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8024b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024b98:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 8024b9c:	461a      	mov	r2, r3
 8024b9e:	f7fe fb15 	bl	80231cc <FindCommand>
 8024ba2:	6678      	str	r0, [r7, #100]	@ 0x64
                    if(strcasecmp(ShellTable[iCmdIndex].szCommand, "endif") == 0)
 8024ba4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8024ba6:	4613      	mov	r3, r2
 8024ba8:	005b      	lsls	r3, r3, #1
 8024baa:	4413      	add	r3, r2
 8024bac:	00db      	lsls	r3, r3, #3
 8024bae:	4a35      	ldr	r2, [pc, #212]	@ (8024c84 <DoScriptRun+0x3c4>)
 8024bb0:	4413      	add	r3, r2
 8024bb2:	4935      	ldr	r1, [pc, #212]	@ (8024c88 <DoScriptRun+0x3c8>)
 8024bb4:	4618      	mov	r0, r3
 8024bb6:	f7fd ffd5 	bl	8022b64 <strcasecmp>
 8024bba:	4603      	mov	r3, r0
 8024bbc:	2b00      	cmp	r3, #0
 8024bbe:	d158      	bne.n	8024c72 <DoScriptRun+0x3b2>
                    {
                    	cs->RunMode = RUN_NORMAL;
 8024bc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024bc2:	2200      	movs	r2, #0
 8024bc4:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
                }
                else
                {
                    ScriptDone();
                }
            break;
 8024bc8:	e053      	b.n	8024c72 <DoScriptRun+0x3b2>
                    ScriptDone();
 8024bca:	f7ff fe5b 	bl	8024884 <ScriptDone>
            break;
 8024bce:	e050      	b.n	8024c72 <DoScriptRun+0x3b2>

            case SKIP_LOOP:
                if(getLine(&cs->Scriptfp, cs->buffer, BUFFER_SIZE) != (uint8_t)EOF)
 8024bd0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8024bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024bd4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8024bd8:	223c      	movs	r2, #60	@ 0x3c
 8024bda:	4619      	mov	r1, r3
 8024bdc:	f7fc fc28 	bl	8021430 <getLine>
 8024be0:	4603      	mov	r3, r0
 8024be2:	2bff      	cmp	r3, #255	@ 0xff
 8024be4:	d01f      	beq.n	8024c26 <DoScriptRun+0x366>
                {
                    iCmdIndex = FindCommand(cs->buffer, &cs->nargs, cs->args);
 8024be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024be8:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 8024bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024bee:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8024bf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024bf4:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 8024bf8:	461a      	mov	r2, r3
 8024bfa:	f7fe fae7 	bl	80231cc <FindCommand>
 8024bfe:	6678      	str	r0, [r7, #100]	@ 0x64
                    if(strcasecmp(ShellTable[iCmdIndex].szCommand, "endloop") == 0)
 8024c00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8024c02:	4613      	mov	r3, r2
 8024c04:	005b      	lsls	r3, r3, #1
 8024c06:	4413      	add	r3, r2
 8024c08:	00db      	lsls	r3, r3, #3
 8024c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8024c84 <DoScriptRun+0x3c4>)
 8024c0c:	4413      	add	r3, r2
 8024c0e:	491f      	ldr	r1, [pc, #124]	@ (8024c8c <DoScriptRun+0x3cc>)
 8024c10:	4618      	mov	r0, r3
 8024c12:	f7fd ffa7 	bl	8022b64 <strcasecmp>
 8024c16:	4603      	mov	r3, r0
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	d12c      	bne.n	8024c76 <DoScriptRun+0x3b6>
                    {
                    	cs->RunMode = RUN_NORMAL;
 8024c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024c1e:	2200      	movs	r2, #0
 8024c20:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
                }
                else
                {
                    ScriptDone();
                }
            break;
 8024c24:	e027      	b.n	8024c76 <DoScriptRun+0x3b6>
                    ScriptDone();
 8024c26:	f7ff fe2d 	bl	8024884 <ScriptDone>
            break;
 8024c2a:	e024      	b.n	8024c76 <DoScriptRun+0x3b6>

            case RUN_DELAY:
                if(cs->DelayCount == 0)
 8024c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8024c32:	2b00      	cmp	r3, #0
 8024c34:	d104      	bne.n	8024c40 <DoScriptRun+0x380>
                {
                	cs->RunMode = RUN_NORMAL;
 8024c36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024c38:	2200      	movs	r2, #0
 8024c3a:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
                    if(cs->DelayCount == 0)
                    {
                    	cs->RunMode = RUN_NORMAL;
                    }
                }
            break;
 8024c3e:	e01c      	b.n	8024c7a <DoScriptRun+0x3ba>
                	cs->DelayCount--;
 8024c40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8024c46:	1e5a      	subs	r2, r3, #1
 8024c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024c4a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
                    if(cs->DelayCount == 0)
 8024c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8024c54:	2b00      	cmp	r3, #0
 8024c56:	d110      	bne.n	8024c7a <DoScriptRun+0x3ba>
                    	cs->RunMode = RUN_NORMAL;
 8024c58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024c5a:	2200      	movs	r2, #0
 8024c5c:	f883 2380 	strb.w	r2, [r3, #896]	@ 0x380
            break;
 8024c60:	e00b      	b.n	8024c7a <DoScriptRun+0x3ba>

            default:
            break;
 8024c62:	bf00      	nop
 8024c64:	e00a      	b.n	8024c7c <DoScriptRun+0x3bc>
            		return;
 8024c66:	bf00      	nop
 8024c68:	e008      	b.n	8024c7c <DoScriptRun+0x3bc>
            break;
 8024c6a:	bf00      	nop
 8024c6c:	e006      	b.n	8024c7c <DoScriptRun+0x3bc>
            break;
 8024c6e:	bf00      	nop
 8024c70:	e004      	b.n	8024c7c <DoScriptRun+0x3bc>
            break;
 8024c72:	bf00      	nop
 8024c74:	e002      	b.n	8024c7c <DoScriptRun+0x3bc>
            break;
 8024c76:	bf00      	nop
 8024c78:	e000      	b.n	8024c7c <DoScriptRun+0x3bc>
            break;
 8024c7a:	bf00      	nop
        }
        
        // ToDo - see if there is anything in the port input buffer
        // if ^C, break out
    }
}
 8024c7c:	377c      	adds	r7, #124	@ 0x7c
 8024c7e:	46bd      	mov	sp, r7
 8024c80:	bd90      	pop	{r4, r7, pc}
 8024c82:	bf00      	nop
 8024c84:	0802c054 	.word	0x0802c054
 8024c88:	0802b218 	.word	0x0802b218
 8024c8c:	0802b220 	.word	0x0802b220

08024c90 <TestCondition>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN TestCondition(char* szArg1, char* szCondition, char* szArg2)
{
 8024c90:	b580      	push	{r7, lr}
 8024c92:	b088      	sub	sp, #32
 8024c94:	af00      	add	r7, sp, #0
 8024c96:	60f8      	str	r0, [r7, #12]
 8024c98:	60b9      	str	r1, [r7, #8]
 8024c9a:	607a      	str	r2, [r7, #4]
        
//k	GetVariable(szArg1, szValue1, 16);
//k	GetVariable(szArg2, szValue2, 16);

	// find the conditional
	for(c = 0; c < CONDITIONAL_TABLE_COUNT; c++)
 8024c9c:	2300      	movs	r3, #0
 8024c9e:	61fb      	str	r3, [r7, #28]
 8024ca0:	e00f      	b.n	8024cc2 <TestCondition+0x32>
	{
		if(strcasecmp(ConditionTable[c], szCondition) == 0)
 8024ca2:	69fa      	ldr	r2, [r7, #28]
 8024ca4:	4613      	mov	r3, r2
 8024ca6:	005b      	lsls	r3, r3, #1
 8024ca8:	4413      	add	r3, r2
 8024caa:	4a51      	ldr	r2, [pc, #324]	@ (8024df0 <TestCondition+0x160>)
 8024cac:	4413      	add	r3, r2
 8024cae:	68b9      	ldr	r1, [r7, #8]
 8024cb0:	4618      	mov	r0, r3
 8024cb2:	f7fd ff57 	bl	8022b64 <strcasecmp>
 8024cb6:	4603      	mov	r3, r0
 8024cb8:	2b00      	cmp	r3, #0
 8024cba:	d006      	beq.n	8024cca <TestCondition+0x3a>
	for(c = 0; c < CONDITIONAL_TABLE_COUNT; c++)
 8024cbc:	69fb      	ldr	r3, [r7, #28]
 8024cbe:	3301      	adds	r3, #1
 8024cc0:	61fb      	str	r3, [r7, #28]
 8024cc2:	69fb      	ldr	r3, [r7, #28]
 8024cc4:	2b08      	cmp	r3, #8
 8024cc6:	d9ec      	bls.n	8024ca2 <TestCondition+0x12>
 8024cc8:	e000      	b.n	8024ccc <TestCondition+0x3c>
		{
			break;
 8024cca:	bf00      	nop
		}
	}
	if(c >= CONDITIONAL_TABLE_COUNT)
 8024ccc:	69fb      	ldr	r3, [r7, #28]
 8024cce:	2b08      	cmp	r3, #8
 8024cd0:	d902      	bls.n	8024cd8 <TestCondition+0x48>
	{
		return CMD_IF_FALSE;
 8024cd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8024cd6:	e087      	b.n	8024de8 <TestCondition+0x158>
	}
	else
#endif
	{
		//i = FindVariable(szValue1);
		i = FindVariable(szArg1);
 8024cd8:	68f8      	ldr	r0, [r7, #12]
 8024cda:	f7e4 f83b 	bl	8008d54 <FindVariable>
 8024cde:	6138      	str	r0, [r7, #16]
		if(i != -1)
 8024ce0:	693b      	ldr	r3, [r7, #16]
 8024ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024ce6:	d005      	beq.n	8024cf4 <TestCondition+0x64>
		{
			iValue1 = GetVariableValue(i);
 8024ce8:	6938      	ldr	r0, [r7, #16]
 8024cea:	f7e4 f879 	bl	8008de0 <GetVariableValue>
 8024cee:	4603      	mov	r3, r0
 8024cf0:	61bb      	str	r3, [r7, #24]
 8024cf2:	e003      	b.n	8024cfc <TestCondition+0x6c>
		}
		else
		{
			//iValue1 = atoi(szValue1);
			iValue1 = atoi(szArg1);
 8024cf4:	68f8      	ldr	r0, [r7, #12]
 8024cf6:	f000 fb63 	bl	80253c0 <atoi>
 8024cfa:	61b8      	str	r0, [r7, #24]
		}

		//i = FindVariable(szValue2);
		i = FindVariable(szArg2);
 8024cfc:	6878      	ldr	r0, [r7, #4]
 8024cfe:	f7e4 f829 	bl	8008d54 <FindVariable>
 8024d02:	6138      	str	r0, [r7, #16]
		if(i != -1)
 8024d04:	693b      	ldr	r3, [r7, #16]
 8024d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024d0a:	d005      	beq.n	8024d18 <TestCondition+0x88>
		{
			iValue2 = GetVariableValue(i);
 8024d0c:	6938      	ldr	r0, [r7, #16]
 8024d0e:	f7e4 f867 	bl	8008de0 <GetVariableValue>
 8024d12:	4603      	mov	r3, r0
 8024d14:	617b      	str	r3, [r7, #20]
 8024d16:	e003      	b.n	8024d20 <TestCondition+0x90>
		}
		else
		{
			//iValue2 = atoi(szValue2);
			iValue2 = atoi(szArg2);
 8024d18:	6878      	ldr	r0, [r7, #4]
 8024d1a:	f000 fb51 	bl	80253c0 <atoi>
 8024d1e:	6178      	str	r0, [r7, #20]
		}

		switch(c)
 8024d20:	69fb      	ldr	r3, [r7, #28]
 8024d22:	2b08      	cmp	r3, #8
 8024d24:	d85e      	bhi.n	8024de4 <TestCondition+0x154>
 8024d26:	a201      	add	r2, pc, #4	@ (adr r2, 8024d2c <TestCondition+0x9c>)
 8024d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024d2c:	08024de5 	.word	0x08024de5
 8024d30:	08024d51 	.word	0x08024d51
 8024d34:	08024d5f 	.word	0x08024d5f
 8024d38:	08024d6d 	.word	0x08024d6d
 8024d3c:	08024d7b 	.word	0x08024d7b
 8024d40:	08024d89 	.word	0x08024d89
 8024d44:	08024d97 	.word	0x08024d97
 8024d48:	08024da5 	.word	0x08024da5
 8024d4c:	08024db5 	.word	0x08024db5
		{
			case COND_NONE:
			break;
			case COND_EQUAL:
				if(iValue1 == iValue2)
 8024d50:	69ba      	ldr	r2, [r7, #24]
 8024d52:	697b      	ldr	r3, [r7, #20]
 8024d54:	429a      	cmp	r2, r3
 8024d56:	d136      	bne.n	8024dc6 <TestCondition+0x136>
				{
					return CMD_IF_TRUE;
 8024d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024d5c:	e044      	b.n	8024de8 <TestCondition+0x158>
				}
			break;
			case COND_NOT_EQUAL:
				if(iValue1 != iValue2)
 8024d5e:	69ba      	ldr	r2, [r7, #24]
 8024d60:	697b      	ldr	r3, [r7, #20]
 8024d62:	429a      	cmp	r2, r3
 8024d64:	d031      	beq.n	8024dca <TestCondition+0x13a>
				{
					return CMD_IF_TRUE;
 8024d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024d6a:	e03d      	b.n	8024de8 <TestCondition+0x158>
				}
			break;
			case COND_GREATER_THAN:
				if(iValue1 > iValue2)
 8024d6c:	69ba      	ldr	r2, [r7, #24]
 8024d6e:	697b      	ldr	r3, [r7, #20]
 8024d70:	429a      	cmp	r2, r3
 8024d72:	dd2c      	ble.n	8024dce <TestCondition+0x13e>
				{
					return CMD_IF_TRUE;
 8024d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024d78:	e036      	b.n	8024de8 <TestCondition+0x158>
				}
			break;
			case COND_LESS_THAN:
				if(iValue1 < iValue2)
 8024d7a:	69ba      	ldr	r2, [r7, #24]
 8024d7c:	697b      	ldr	r3, [r7, #20]
 8024d7e:	429a      	cmp	r2, r3
 8024d80:	da27      	bge.n	8024dd2 <TestCondition+0x142>
				{
					return CMD_IF_TRUE;
 8024d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024d86:	e02f      	b.n	8024de8 <TestCondition+0x158>
				}
			break;
			case COND_GREATER_THAN_EQUAL:
				if(iValue1 >= iValue2)
 8024d88:	69ba      	ldr	r2, [r7, #24]
 8024d8a:	697b      	ldr	r3, [r7, #20]
 8024d8c:	429a      	cmp	r2, r3
 8024d8e:	db22      	blt.n	8024dd6 <TestCondition+0x146>
				{
					return CMD_IF_TRUE;
 8024d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024d94:	e028      	b.n	8024de8 <TestCondition+0x158>
				}
			break;
			case COND_LESS_THAN_EQUAL:
				if(iValue1 <= iValue2)
 8024d96:	69ba      	ldr	r2, [r7, #24]
 8024d98:	697b      	ldr	r3, [r7, #20]
 8024d9a:	429a      	cmp	r2, r3
 8024d9c:	dc1d      	bgt.n	8024dda <TestCondition+0x14a>
				{
					return CMD_IF_TRUE;
 8024d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024da2:	e021      	b.n	8024de8 <TestCondition+0x158>
				//if(iValue2 != 0)
				//{
				//	iValue2--;
				//}
				//if(iValue1 & lBitMask[iValue2])
				if(iValue1 & iValue2)
 8024da4:	69ba      	ldr	r2, [r7, #24]
 8024da6:	697b      	ldr	r3, [r7, #20]
 8024da8:	4013      	ands	r3, r2
 8024daa:	2b00      	cmp	r3, #0
 8024dac:	d017      	beq.n	8024dde <TestCondition+0x14e>
				{
					return CMD_IF_TRUE;
 8024dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024db2:	e019      	b.n	8024de8 <TestCondition+0x158>
				//if(iValue2 != 0)
				//{
				//	iValue2--;
				//}
				//if(~(iValue1 & lBitMask[iValue2]))
				if(~(iValue1 & iValue2))
 8024db4:	69ba      	ldr	r2, [r7, #24]
 8024db6:	697b      	ldr	r3, [r7, #20]
 8024db8:	4013      	ands	r3, r2
 8024dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024dbe:	d010      	beq.n	8024de2 <TestCondition+0x152>
				{
					return CMD_IF_TRUE;
 8024dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024dc4:	e010      	b.n	8024de8 <TestCondition+0x158>
			break;
 8024dc6:	bf00      	nop
 8024dc8:	e00c      	b.n	8024de4 <TestCondition+0x154>
			break;
 8024dca:	bf00      	nop
 8024dcc:	e00a      	b.n	8024de4 <TestCondition+0x154>
			break;
 8024dce:	bf00      	nop
 8024dd0:	e008      	b.n	8024de4 <TestCondition+0x154>
			break;
 8024dd2:	bf00      	nop
 8024dd4:	e006      	b.n	8024de4 <TestCondition+0x154>
			break;
 8024dd6:	bf00      	nop
 8024dd8:	e004      	b.n	8024de4 <TestCondition+0x154>
			break;
 8024dda:	bf00      	nop
 8024ddc:	e002      	b.n	8024de4 <TestCondition+0x154>
			break;
 8024dde:	bf00      	nop
 8024de0:	e000      	b.n	8024de4 <TestCondition+0x154>
				}
			break;
 8024de2:	bf00      	nop
		}
	}

	return CMD_IF_FALSE;
 8024de4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
}
 8024de8:	4618      	mov	r0, r3
 8024dea:	3720      	adds	r7, #32
 8024dec:	46bd      	mov	sp, r7
 8024dee:	bd80      	pop	{r7, pc}
 8024df0:	0802c354 	.word	0x0802c354

08024df4 <ShScripts>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShScripts(uint8_t bPort, int argc, char *argv[])
{
 8024df4:	b580      	push	{r7, lr}
 8024df6:	b08a      	sub	sp, #40	@ 0x28
 8024df8:	af00      	add	r7, sp, #0
 8024dfa:	4603      	mov	r3, r0
 8024dfc:	60b9      	str	r1, [r7, #8]
 8024dfe:	607a      	str	r2, [r7, #4]
 8024e00:	73fb      	strb	r3, [r7, #15]

	uint32_t Variable[4];
	uint32_t Return;
#endif

	if(argc == 3)
 8024e02:	68bb      	ldr	r3, [r7, #8]
 8024e04:	2b03      	cmp	r3, #3
 8024e06:	d16d      	bne.n	8024ee4 <ShScripts+0xf0>
	{
		if(CurrentScript != -1)
 8024e08:	4b75      	ldr	r3, [pc, #468]	@ (8024fe0 <ShScripts+0x1ec>)
 8024e0a:	681b      	ldr	r3, [r3, #0]
 8024e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e10:	f000 80e0 	beq.w	8024fd4 <ShScripts+0x1e0>
		{
			// search for the names script add do something with it
			for(int i = CurrentScript; i >= 0; i--)
 8024e14:	4b72      	ldr	r3, [pc, #456]	@ (8024fe0 <ShScripts+0x1ec>)
 8024e16:	681b      	ldr	r3, [r3, #0]
 8024e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8024e1a:	e05e      	b.n	8024eda <ShScripts+0xe6>
			{
				if(stricmp(ScriptNest[i].name, argv[1]) == 0)
 8024e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024e1e:	f44f 7266 	mov.w	r2, #920	@ 0x398
 8024e22:	fb02 f303 	mul.w	r3, r2, r3
 8024e26:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8024e2a:	4a6e      	ldr	r2, [pc, #440]	@ (8024fe4 <ShScripts+0x1f0>)
 8024e2c:	441a      	add	r2, r3
 8024e2e:	687b      	ldr	r3, [r7, #4]
 8024e30:	3304      	adds	r3, #4
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	4619      	mov	r1, r3
 8024e36:	4610      	mov	r0, r2
 8024e38:	f7fd fe94 	bl	8022b64 <strcasecmp>
 8024e3c:	4603      	mov	r3, r0
 8024e3e:	2b00      	cmp	r3, #0
 8024e40:	d148      	bne.n	8024ed4 <ShScripts+0xe0>
				{
					if(stricmp("kill", argv[2]) == 0)
 8024e42:	687b      	ldr	r3, [r7, #4]
 8024e44:	3308      	adds	r3, #8
 8024e46:	681b      	ldr	r3, [r3, #0]
 8024e48:	4619      	mov	r1, r3
 8024e4a:	4867      	ldr	r0, [pc, #412]	@ (8024fe8 <ShScripts+0x1f4>)
 8024e4c:	f7fd fe8a 	bl	8022b64 <strcasecmp>
 8024e50:	4603      	mov	r3, r0
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	d10c      	bne.n	8024e70 <ShScripts+0x7c>
					{
						ScriptNest[CurrentScript].RunMessage = SCRIPT_EXIT;
 8024e56:	4b62      	ldr	r3, [pc, #392]	@ (8024fe0 <ShScripts+0x1ec>)
 8024e58:	681b      	ldr	r3, [r3, #0]
 8024e5a:	4a62      	ldr	r2, [pc, #392]	@ (8024fe4 <ShScripts+0x1f0>)
 8024e5c:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8024e60:	fb01 f303 	mul.w	r3, r1, r3
 8024e64:	4413      	add	r3, r2
 8024e66:	f203 3381 	addw	r3, r3, #897	@ 0x381
 8024e6a:	2206      	movs	r2, #6
 8024e6c:	701a      	strb	r2, [r3, #0]
 8024e6e:	e02f      	b.n	8024ed0 <ShScripts+0xdc>
					}
					else if(stricmp("pause", argv[2]) == 0)
 8024e70:	687b      	ldr	r3, [r7, #4]
 8024e72:	3308      	adds	r3, #8
 8024e74:	681b      	ldr	r3, [r3, #0]
 8024e76:	4619      	mov	r1, r3
 8024e78:	485c      	ldr	r0, [pc, #368]	@ (8024fec <ShScripts+0x1f8>)
 8024e7a:	f7fd fe73 	bl	8022b64 <strcasecmp>
 8024e7e:	4603      	mov	r3, r0
 8024e80:	2b00      	cmp	r3, #0
 8024e82:	d10c      	bne.n	8024e9e <ShScripts+0xaa>
					{
						ScriptNest[CurrentScript].RunMessage = SCRIPT_PAUSE;
 8024e84:	4b56      	ldr	r3, [pc, #344]	@ (8024fe0 <ShScripts+0x1ec>)
 8024e86:	681b      	ldr	r3, [r3, #0]
 8024e88:	4a56      	ldr	r2, [pc, #344]	@ (8024fe4 <ShScripts+0x1f0>)
 8024e8a:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8024e8e:	fb01 f303 	mul.w	r3, r1, r3
 8024e92:	4413      	add	r3, r2
 8024e94:	f203 3381 	addw	r3, r3, #897	@ 0x381
 8024e98:	2207      	movs	r2, #7
 8024e9a:	701a      	strb	r2, [r3, #0]
 8024e9c:	e018      	b.n	8024ed0 <ShScripts+0xdc>
					}
					else if(stricmp("resume", argv[2]) == 0)
 8024e9e:	687b      	ldr	r3, [r7, #4]
 8024ea0:	3308      	adds	r3, #8
 8024ea2:	681b      	ldr	r3, [r3, #0]
 8024ea4:	4619      	mov	r1, r3
 8024ea6:	4852      	ldr	r0, [pc, #328]	@ (8024ff0 <ShScripts+0x1fc>)
 8024ea8:	f7fd fe5c 	bl	8022b64 <strcasecmp>
 8024eac:	4603      	mov	r3, r0
 8024eae:	2b00      	cmp	r3, #0
 8024eb0:	d10c      	bne.n	8024ecc <ShScripts+0xd8>
					{
						ScriptNest[CurrentScript].RunMessage = SCRIPT_RESUME;
 8024eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8024fe0 <ShScripts+0x1ec>)
 8024eb4:	681b      	ldr	r3, [r3, #0]
 8024eb6:	4a4b      	ldr	r2, [pc, #300]	@ (8024fe4 <ShScripts+0x1f0>)
 8024eb8:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8024ebc:	fb01 f303 	mul.w	r3, r1, r3
 8024ec0:	4413      	add	r3, r2
 8024ec2:	f203 3381 	addw	r3, r3, #897	@ 0x381
 8024ec6:	2208      	movs	r2, #8
 8024ec8:	701a      	strb	r2, [r3, #0]
 8024eca:	e001      	b.n	8024ed0 <ShScripts+0xdc>
					}
					else
					{
						return CMD_BAD_PARAMS;
 8024ecc:	2301      	movs	r3, #1
 8024ece:	e082      	b.n	8024fd6 <ShScripts+0x1e2>
					}
					return CMD_OK;
 8024ed0:	2300      	movs	r3, #0
 8024ed2:	e080      	b.n	8024fd6 <ShScripts+0x1e2>
			for(int i = CurrentScript; i >= 0; i--)
 8024ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024ed6:	3b01      	subs	r3, #1
 8024ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8024eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	da9d      	bge.n	8024e1c <ShScripts+0x28>
				}
			}
			return CMD_BAD_PARAMS;
 8024ee0:	2301      	movs	r3, #1
 8024ee2:	e078      	b.n	8024fd6 <ShScripts+0x1e2>
		}
	}
	else
	{
		ShNL(bPort);
 8024ee4:	7bfb      	ldrb	r3, [r7, #15]
 8024ee6:	4618      	mov	r0, r3
 8024ee8:	f7fc fbc6 	bl	8021678 <ShNL>
		if(CurrentScript != -1)
 8024eec:	4b3c      	ldr	r3, [pc, #240]	@ (8024fe0 <ShScripts+0x1ec>)
 8024eee:	681b      	ldr	r3, [r3, #0]
 8024ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024ef4:	d062      	beq.n	8024fbc <ShScripts+0x1c8>
		{
			ShFieldOut(bPort, "Name", 15);
 8024ef6:	7bfb      	ldrb	r3, [r7, #15]
 8024ef8:	220f      	movs	r2, #15
 8024efa:	493e      	ldr	r1, [pc, #248]	@ (8024ff4 <ShScripts+0x200>)
 8024efc:	4618      	mov	r0, r3
 8024efe:	f7fc fb5b 	bl	80215b8 <ShFieldOut>
			ShFieldOut(bPort, "Mode", 10);
 8024f02:	7bfb      	ldrb	r3, [r7, #15]
 8024f04:	220a      	movs	r2, #10
 8024f06:	493c      	ldr	r1, [pc, #240]	@ (8024ff8 <ShScripts+0x204>)
 8024f08:	4618      	mov	r0, r3
 8024f0a:	f7fc fb55 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8024f0e:	7bfb      	ldrb	r3, [r7, #15]
 8024f10:	4618      	mov	r0, r3
 8024f12:	f7fc fbb1 	bl	8021678 <ShNL>

			for(int i = CurrentScript; i >= 0; i--)
 8024f16:	4b32      	ldr	r3, [pc, #200]	@ (8024fe0 <ShScripts+0x1ec>)
 8024f18:	681b      	ldr	r3, [r3, #0]
 8024f1a:	623b      	str	r3, [r7, #32]
 8024f1c:	e04a      	b.n	8024fb4 <ShScripts+0x1c0>
			{
				ShFieldOut(bPort, ScriptNest[i].name, 15);
 8024f1e:	6a3b      	ldr	r3, [r7, #32]
 8024f20:	f44f 7266 	mov.w	r2, #920	@ 0x398
 8024f24:	fb02 f303 	mul.w	r3, r2, r3
 8024f28:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8024f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8024fe4 <ShScripts+0x1f0>)
 8024f2e:	1899      	adds	r1, r3, r2
 8024f30:	7bfb      	ldrb	r3, [r7, #15]
 8024f32:	220f      	movs	r2, #15
 8024f34:	4618      	mov	r0, r3
 8024f36:	f7fc fb3f 	bl	80215b8 <ShFieldOut>

				strcpy(szMode, RunModeName[ScriptNest[i].RunMode]);
 8024f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8024fe4 <ShScripts+0x1f0>)
 8024f3c:	6a3b      	ldr	r3, [r7, #32]
 8024f3e:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8024f42:	fb01 f303 	mul.w	r3, r1, r3
 8024f46:	4413      	add	r3, r2
 8024f48:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8024f4c:	781b      	ldrb	r3, [r3, #0]
 8024f4e:	461a      	mov	r2, r3
 8024f50:	4b2a      	ldr	r3, [pc, #168]	@ (8024ffc <ShScripts+0x208>)
 8024f52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024f56:	f107 0310 	add.w	r3, r7, #16
 8024f5a:	4611      	mov	r1, r2
 8024f5c:	4618      	mov	r0, r3
 8024f5e:	f001 fa80 	bl	8026462 <strcpy>
	//			{
	//				strcat(szMode, "-");
	////				strcat(szMode, atoi(ScriptNest[i].LoopCount));
	//			}
	//			else
				if(ScriptNest[i].RunMode == RUN_DELAY)
 8024f62:	4a20      	ldr	r2, [pc, #128]	@ (8024fe4 <ShScripts+0x1f0>)
 8024f64:	6a3b      	ldr	r3, [r7, #32]
 8024f66:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8024f6a:	fb01 f303 	mul.w	r3, r1, r3
 8024f6e:	4413      	add	r3, r2
 8024f70:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8024f74:	781b      	ldrb	r3, [r3, #0]
 8024f76:	2b05      	cmp	r3, #5
 8024f78:	d10e      	bne.n	8024f98 <ShScripts+0x1a4>
				{
					strcat(szMode, "-");
 8024f7a:	f107 0310 	add.w	r3, r7, #16
 8024f7e:	4618      	mov	r0, r3
 8024f80:	f7db f990 	bl	80002a4 <strlen>
 8024f84:	4603      	mov	r3, r0
 8024f86:	461a      	mov	r2, r3
 8024f88:	f107 0310 	add.w	r3, r7, #16
 8024f8c:	4413      	add	r3, r2
 8024f8e:	491c      	ldr	r1, [pc, #112]	@ (8025000 <ShScripts+0x20c>)
 8024f90:	461a      	mov	r2, r3
 8024f92:	460b      	mov	r3, r1
 8024f94:	881b      	ldrh	r3, [r3, #0]
 8024f96:	8013      	strh	r3, [r2, #0]
	//				strcat(szMode, atoi(ScriptNest[i].DelayCount));
				}
				ShFieldOut(bPort, szMode, 10);
 8024f98:	f107 0110 	add.w	r1, r7, #16
 8024f9c:	7bfb      	ldrb	r3, [r7, #15]
 8024f9e:	220a      	movs	r2, #10
 8024fa0:	4618      	mov	r0, r3
 8024fa2:	f7fc fb09 	bl	80215b8 <ShFieldOut>
				ShNL(bPort);
 8024fa6:	7bfb      	ldrb	r3, [r7, #15]
 8024fa8:	4618      	mov	r0, r3
 8024faa:	f7fc fb65 	bl	8021678 <ShNL>
			for(int i = CurrentScript; i >= 0; i--)
 8024fae:	6a3b      	ldr	r3, [r7, #32]
 8024fb0:	3b01      	subs	r3, #1
 8024fb2:	623b      	str	r3, [r7, #32]
 8024fb4:	6a3b      	ldr	r3, [r7, #32]
 8024fb6:	2b00      	cmp	r3, #0
 8024fb8:	dab1      	bge.n	8024f1e <ShScripts+0x12a>
 8024fba:	e009      	b.n	8024fd0 <ShScripts+0x1dc>
			}
		}
		else
		{
			ShFieldOut(bPort, "No Running scripts", 0);
 8024fbc:	7bfb      	ldrb	r3, [r7, #15]
 8024fbe:	2200      	movs	r2, #0
 8024fc0:	4910      	ldr	r1, [pc, #64]	@ (8025004 <ShScripts+0x210>)
 8024fc2:	4618      	mov	r0, r3
 8024fc4:	f7fc faf8 	bl	80215b8 <ShFieldOut>
			ShNL(bPort);
 8024fc8:	7bfb      	ldrb	r3, [r7, #15]
 8024fca:	4618      	mov	r0, r3
 8024fcc:	f7fc fb54 	bl	8021678 <ShNL>
		}
		return CMD_OK;
 8024fd0:	2300      	movs	r3, #0
 8024fd2:	e000      	b.n	8024fd6 <ShScripts+0x1e2>
	}
	return CMD_BAD_PARAMS;
 8024fd4:	2301      	movs	r3, #1
}
 8024fd6:	4618      	mov	r0, r3
 8024fd8:	3728      	adds	r7, #40	@ 0x28
 8024fda:	46bd      	mov	sp, r7
 8024fdc:	bd80      	pop	{r7, pc}
 8024fde:	bf00      	nop
 8024fe0:	20001898 	.word	0x20001898
 8024fe4:	2001eacc 	.word	0x2001eacc
 8024fe8:	0802b228 	.word	0x0802b228
 8024fec:	0802b230 	.word	0x0802b230
 8024ff0:	0802b238 	.word	0x0802b238
 8024ff4:	0802b240 	.word	0x0802b240
 8024ff8:	0802b248 	.word	0x0802b248
 8024ffc:	2000189c 	.word	0x2000189c
 8025000:	0802b250 	.word	0x0802b250
 8025004:	0802b254 	.word	0x0802b254

08025008 <ShIf>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShIf(uint8_t bPort, int argc, char *argv[])
{
 8025008:	b580      	push	{r7, lr}
 802500a:	b084      	sub	sp, #16
 802500c:	af00      	add	r7, sp, #0
 802500e:	4603      	mov	r3, r0
 8025010:	60b9      	str	r1, [r7, #8]
 8025012:	607a      	str	r2, [r7, #4]
 8025014:	73fb      	strb	r3, [r7, #15]
	if(argc == 4)
 8025016:	68bb      	ldr	r3, [r7, #8]
 8025018:	2b04      	cmp	r3, #4
 802501a:	d10d      	bne.n	8025038 <ShIf+0x30>
	{
		return TestCondition(argv[1], argv[2], argv[3]);
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	3304      	adds	r3, #4
 8025020:	6818      	ldr	r0, [r3, #0]
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	3308      	adds	r3, #8
 8025026:	6819      	ldr	r1, [r3, #0]
 8025028:	687b      	ldr	r3, [r7, #4]
 802502a:	330c      	adds	r3, #12
 802502c:	681b      	ldr	r3, [r3, #0]
 802502e:	461a      	mov	r2, r3
 8025030:	f7ff fe2e 	bl	8024c90 <TestCondition>
 8025034:	4603      	mov	r3, r0
 8025036:	e001      	b.n	802503c <ShIf+0x34>
	}
	return CMD_IF_FALSE;
 8025038:	f44f 6300 	mov.w	r3, #2048	@ 0x800
}
 802503c:	4618      	mov	r0, r3
 802503e:	3710      	adds	r7, #16
 8025040:	46bd      	mov	sp, r7
 8025042:	bd80      	pop	{r7, pc}

08025044 <ShElse>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShElse(uint8_t bPort, int argc, char *argv[])
{
 8025044:	b480      	push	{r7}
 8025046:	b085      	sub	sp, #20
 8025048:	af00      	add	r7, sp, #0
 802504a:	4603      	mov	r3, r0
 802504c:	60b9      	str	r1, [r7, #8]
 802504e:	607a      	str	r2, [r7, #4]
 8025050:	73fb      	strb	r3, [r7, #15]
	return CMD_ELSE;
 8025052:	f44f 6310 	mov.w	r3, #2304	@ 0x900
}
 8025056:	4618      	mov	r0, r3
 8025058:	3714      	adds	r7, #20
 802505a:	46bd      	mov	sp, r7
 802505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025060:	4770      	bx	lr

08025062 <ShEndif>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShEndif(uint8_t bPort, int argc, char *argv[])
{
 8025062:	b480      	push	{r7}
 8025064:	b085      	sub	sp, #20
 8025066:	af00      	add	r7, sp, #0
 8025068:	4603      	mov	r3, r0
 802506a:	60b9      	str	r1, [r7, #8]
 802506c:	607a      	str	r2, [r7, #4]
 802506e:	73fb      	strb	r3, [r7, #15]

	//RunMode = RUN_NORMAL;
	return CMD_OK;
 8025070:	2300      	movs	r3, #0
}
 8025072:	4618      	mov	r0, r3
 8025074:	3714      	adds	r7, #20
 8025076:	46bd      	mov	sp, r7
 8025078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802507c:	4770      	bx	lr
	...

08025080 <ShLoop>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShLoop(uint8_t bPort, int argc, char *argv[])
{
 8025080:	b580      	push	{r7, lr}
 8025082:	b086      	sub	sp, #24
 8025084:	af00      	add	r7, sp, #0
 8025086:	4603      	mov	r3, r0
 8025088:	60b9      	str	r1, [r7, #8]
 802508a:	607a      	str	r2, [r7, #4]
 802508c:	73fb      	strb	r3, [r7, #15]
	uint32_t cnt;

	if(argc == 2)
 802508e:	68bb      	ldr	r3, [r7, #8]
 8025090:	2b02      	cmp	r3, #2
 8025092:	d13e      	bne.n	8025112 <ShLoop+0x92>
	{
		if(CurrentScript != -1)
 8025094:	4b21      	ldr	r3, [pc, #132]	@ (802511c <ShLoop+0x9c>)
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	f1b3 3fff 	cmp.w	r3, #4294967295
 802509c:	d039      	beq.n	8025112 <ShLoop+0x92>
		{
			cnt = atoi(argv[1]);
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	3304      	adds	r3, #4
 80250a2:	681b      	ldr	r3, [r3, #0]
 80250a4:	4618      	mov	r0, r3
 80250a6:	f000 f98b 	bl	80253c0 <atoi>
 80250aa:	4603      	mov	r3, r0
 80250ac:	617b      	str	r3, [r7, #20]
			if(cnt == 0)
 80250ae:	697b      	ldr	r3, [r7, #20]
 80250b0:	2b00      	cmp	r3, #0
 80250b2:	d10d      	bne.n	80250d0 <ShLoop+0x50>
			{
				ScriptNest[CurrentScript].LoopCount = LOOP_FOREVER;
 80250b4:	4b19      	ldr	r3, [pc, #100]	@ (802511c <ShLoop+0x9c>)
 80250b6:	681b      	ldr	r3, [r3, #0]
 80250b8:	4a19      	ldr	r2, [pc, #100]	@ (8025120 <ShLoop+0xa0>)
 80250ba:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80250be:	fb01 f303 	mul.w	r3, r1, r3
 80250c2:	4413      	add	r3, r2
 80250c4:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 80250c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80250cc:	601a      	str	r2, [r3, #0]
 80250ce:	e00b      	b.n	80250e8 <ShLoop+0x68>
			}
			else
			{
				ScriptNest[CurrentScript].LoopCount = cnt;
 80250d0:	4b12      	ldr	r3, [pc, #72]	@ (802511c <ShLoop+0x9c>)
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	4a12      	ldr	r2, [pc, #72]	@ (8025120 <ShLoop+0xa0>)
 80250d6:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80250da:	fb01 f303 	mul.w	r3, r1, r3
 80250de:	4413      	add	r3, r2
 80250e0:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 80250e4:	697a      	ldr	r2, [r7, #20]
 80250e6:	601a      	str	r2, [r3, #0]
			}
			ScriptNest[CurrentScript].LoopPosition = ScriptNest[CurrentScript].Scriptfp.fptr;
 80250e8:	4b0c      	ldr	r3, [pc, #48]	@ (802511c <ShLoop+0x9c>)
 80250ea:	681a      	ldr	r2, [r3, #0]
 80250ec:	4b0b      	ldr	r3, [pc, #44]	@ (802511c <ShLoop+0x9c>)
 80250ee:	681b      	ldr	r3, [r3, #0]
 80250f0:	490b      	ldr	r1, [pc, #44]	@ (8025120 <ShLoop+0xa0>)
 80250f2:	f44f 7066 	mov.w	r0, #920	@ 0x398
 80250f6:	fb00 f202 	mul.w	r2, r0, r2
 80250fa:	440a      	add	r2, r1
 80250fc:	3218      	adds	r2, #24
 80250fe:	6812      	ldr	r2, [r2, #0]
 8025100:	4907      	ldr	r1, [pc, #28]	@ (8025120 <ShLoop+0xa0>)
 8025102:	f44f 7066 	mov.w	r0, #920	@ 0x398
 8025106:	fb00 f303 	mul.w	r3, r0, r3
 802510a:	440b      	add	r3, r1
 802510c:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 8025110:	601a      	str	r2, [r3, #0]
		}
	}
	return CMD_OK;
 8025112:	2300      	movs	r3, #0
}
 8025114:	4618      	mov	r0, r3
 8025116:	3718      	adds	r7, #24
 8025118:	46bd      	mov	sp, r7
 802511a:	bd80      	pop	{r7, pc}
 802511c:	20001898 	.word	0x20001898
 8025120:	2001eacc 	.word	0x2001eacc

08025124 <ShEndLoop>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShEndLoop(uint8_t bPort, int argc, char *argv[])
{
 8025124:	b580      	push	{r7, lr}
 8025126:	b084      	sub	sp, #16
 8025128:	af00      	add	r7, sp, #0
 802512a:	4603      	mov	r3, r0
 802512c:	60b9      	str	r1, [r7, #8]
 802512e:	607a      	str	r2, [r7, #4]
 8025130:	73fb      	strb	r3, [r7, #15]

	if(CurrentScript != -1)
 8025132:	4b2f      	ldr	r3, [pc, #188]	@ (80251f0 <ShEndLoop+0xcc>)
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	f1b3 3fff 	cmp.w	r3, #4294967295
 802513a:	d054      	beq.n	80251e6 <ShEndLoop+0xc2>
	{
		if(ScriptNest[CurrentScript].LoopCount)
 802513c:	4b2c      	ldr	r3, [pc, #176]	@ (80251f0 <ShEndLoop+0xcc>)
 802513e:	681b      	ldr	r3, [r3, #0]
 8025140:	4a2c      	ldr	r2, [pc, #176]	@ (80251f4 <ShEndLoop+0xd0>)
 8025142:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8025146:	fb01 f303 	mul.w	r3, r1, r3
 802514a:	4413      	add	r3, r2
 802514c:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8025150:	681b      	ldr	r3, [r3, #0]
 8025152:	2b00      	cmp	r3, #0
 8025154:	d047      	beq.n	80251e6 <ShEndLoop+0xc2>
		{
			if(ScriptNest[CurrentScript].LoopCount != LOOP_FOREVER)
 8025156:	4b26      	ldr	r3, [pc, #152]	@ (80251f0 <ShEndLoop+0xcc>)
 8025158:	681b      	ldr	r3, [r3, #0]
 802515a:	4a26      	ldr	r2, [pc, #152]	@ (80251f4 <ShEndLoop+0xd0>)
 802515c:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8025160:	fb01 f303 	mul.w	r3, r1, r3
 8025164:	4413      	add	r3, r2
 8025166:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 802516a:	681b      	ldr	r3, [r3, #0]
 802516c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8025170:	4293      	cmp	r3, r2
 8025172:	d014      	beq.n	802519e <ShEndLoop+0x7a>
			{
				ScriptNest[CurrentScript].LoopCount--;
 8025174:	4b1e      	ldr	r3, [pc, #120]	@ (80251f0 <ShEndLoop+0xcc>)
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	491e      	ldr	r1, [pc, #120]	@ (80251f4 <ShEndLoop+0xd0>)
 802517a:	f44f 7266 	mov.w	r2, #920	@ 0x398
 802517e:	fb03 f202 	mul.w	r2, r3, r2
 8025182:	440a      	add	r2, r1
 8025184:	f502 725d 	add.w	r2, r2, #884	@ 0x374
 8025188:	6812      	ldr	r2, [r2, #0]
 802518a:	3a01      	subs	r2, #1
 802518c:	4919      	ldr	r1, [pc, #100]	@ (80251f4 <ShEndLoop+0xd0>)
 802518e:	f44f 7066 	mov.w	r0, #920	@ 0x398
 8025192:	fb00 f303 	mul.w	r3, r0, r3
 8025196:	440b      	add	r3, r1
 8025198:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 802519c:	601a      	str	r2, [r3, #0]
			}
			if(ScriptNest[CurrentScript].LoopCount != 0)
 802519e:	4b14      	ldr	r3, [pc, #80]	@ (80251f0 <ShEndLoop+0xcc>)
 80251a0:	681b      	ldr	r3, [r3, #0]
 80251a2:	4a14      	ldr	r2, [pc, #80]	@ (80251f4 <ShEndLoop+0xd0>)
 80251a4:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80251a8:	fb01 f303 	mul.w	r3, r1, r3
 80251ac:	4413      	add	r3, r2
 80251ae:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 80251b2:	681b      	ldr	r3, [r3, #0]
 80251b4:	2b00      	cmp	r3, #0
 80251b6:	d016      	beq.n	80251e6 <ShEndLoop+0xc2>
			{
                f_lseek(&ScriptNest[CurrentScript].Scriptfp, ScriptNest[CurrentScript].LoopPosition);	// Move file pointer to the captured position
 80251b8:	4b0d      	ldr	r3, [pc, #52]	@ (80251f0 <ShEndLoop+0xcc>)
 80251ba:	681b      	ldr	r3, [r3, #0]
 80251bc:	f44f 7266 	mov.w	r2, #920	@ 0x398
 80251c0:	fb02 f303 	mul.w	r3, r2, r3
 80251c4:	4a0b      	ldr	r2, [pc, #44]	@ (80251f4 <ShEndLoop+0xd0>)
 80251c6:	441a      	add	r2, r3
 80251c8:	4b09      	ldr	r3, [pc, #36]	@ (80251f0 <ShEndLoop+0xcc>)
 80251ca:	681b      	ldr	r3, [r3, #0]
 80251cc:	4909      	ldr	r1, [pc, #36]	@ (80251f4 <ShEndLoop+0xd0>)
 80251ce:	f44f 7066 	mov.w	r0, #920	@ 0x398
 80251d2:	fb00 f303 	mul.w	r3, r0, r3
 80251d6:	440b      	add	r3, r1
 80251d8:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 80251dc:	681b      	ldr	r3, [r3, #0]
 80251de:	4619      	mov	r1, r3
 80251e0:	4610      	mov	r0, r2
 80251e2:	f7f5 fd54 	bl	801ac8e <f_lseek>
			}
		}
	}
	return CMD_OK;
 80251e6:	2300      	movs	r3, #0
}
 80251e8:	4618      	mov	r0, r3
 80251ea:	3710      	adds	r7, #16
 80251ec:	46bd      	mov	sp, r7
 80251ee:	bd80      	pop	{r7, pc}
 80251f0:	20001898 	.word	0x20001898
 80251f4:	2001eacc 	.word	0x2001eacc

080251f8 <ShBreak>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShBreak(uint8_t bPort, int argc, char *argv[])
{
 80251f8:	b480      	push	{r7}
 80251fa:	b085      	sub	sp, #20
 80251fc:	af00      	add	r7, sp, #0
 80251fe:	4603      	mov	r3, r0
 8025200:	60b9      	str	r1, [r7, #8]
 8025202:	607a      	str	r2, [r7, #4]
 8025204:	73fb      	strb	r3, [r7, #15]

	if(CurrentScript != -1)
 8025206:	4b0c      	ldr	r3, [pc, #48]	@ (8025238 <ShBreak+0x40>)
 8025208:	681b      	ldr	r3, [r3, #0]
 802520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802520e:	d00b      	beq.n	8025228 <ShBreak+0x30>
	{
		ScriptNest[CurrentScript].LoopCount = 0;
 8025210:	4b09      	ldr	r3, [pc, #36]	@ (8025238 <ShBreak+0x40>)
 8025212:	681b      	ldr	r3, [r3, #0]
 8025214:	4a09      	ldr	r2, [pc, #36]	@ (802523c <ShBreak+0x44>)
 8025216:	f44f 7166 	mov.w	r1, #920	@ 0x398
 802521a:	fb01 f303 	mul.w	r3, r1, r3
 802521e:	4413      	add	r3, r2
 8025220:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8025224:	2200      	movs	r2, #0
 8025226:	601a      	str	r2, [r3, #0]
	}
	return SKIP_LOOP;
 8025228:	2304      	movs	r3, #4
}
 802522a:	4618      	mov	r0, r3
 802522c:	3714      	adds	r7, #20
 802522e:	46bd      	mov	sp, r7
 8025230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025234:	4770      	bx	lr
 8025236:	bf00      	nop
 8025238:	20001898 	.word	0x20001898
 802523c:	2001eacc 	.word	0x2001eacc

08025240 <ShPrompt>:
*
* @return	CMD_RETURN - shell result
*
*********************************************************************/
CMD_RETURN ShPrompt(uint8_t bPort, int argc, char *argv[])
{
 8025240:	b580      	push	{r7, lr}
 8025242:	b084      	sub	sp, #16
 8025244:	af00      	add	r7, sp, #0
 8025246:	4603      	mov	r3, r0
 8025248:	60b9      	str	r1, [r7, #8]
 802524a:	607a      	str	r2, [r7, #4]
 802524c:	73fb      	strb	r3, [r7, #15]

	Prompt(bPort);
 802524e:	7bfb      	ldrb	r3, [r7, #15]
 8025250:	4618      	mov	r0, r3
 8025252:	f7fe f80f 	bl	8023274 <Prompt>
	return CMD_OK;
 8025256:	2300      	movs	r3, #0
}
 8025258:	4618      	mov	r0, r3
 802525a:	3710      	adds	r7, #16
 802525c:	46bd      	mov	sp, r7
 802525e:	bd80      	pop	{r7, pc}

08025260 <GetLoopCount>:
	return CMD_OK;
}


unsigned int GetLoopCount(void)
{
 8025260:	b480      	push	{r7}
 8025262:	af00      	add	r7, sp, #0
	if(CurrentScript != -1)
 8025264:	4b0b      	ldr	r3, [pc, #44]	@ (8025294 <GetLoopCount+0x34>)
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	f1b3 3fff 	cmp.w	r3, #4294967295
 802526c:	d00b      	beq.n	8025286 <GetLoopCount+0x26>
	{
		return ScriptNest[CurrentScript].LoopCount;
 802526e:	4b09      	ldr	r3, [pc, #36]	@ (8025294 <GetLoopCount+0x34>)
 8025270:	681b      	ldr	r3, [r3, #0]
 8025272:	4a09      	ldr	r2, [pc, #36]	@ (8025298 <GetLoopCount+0x38>)
 8025274:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8025278:	fb01 f303 	mul.w	r3, r1, r3
 802527c:	4413      	add	r3, r2
 802527e:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8025282:	681b      	ldr	r3, [r3, #0]
 8025284:	e001      	b.n	802528a <GetLoopCount+0x2a>
	}
	return 0xffff;
 8025286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 802528a:	4618      	mov	r0, r3
 802528c:	46bd      	mov	sp, r7
 802528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025292:	4770      	bx	lr
 8025294:	20001898 	.word	0x20001898
 8025298:	2001eacc 	.word	0x2001eacc

0802529c <strsep>:
	/* NOTREACHED */
}


char * strsep(char **stringp, const char *delim)
{
 802529c:	b480      	push	{r7}
 802529e:	b08b      	sub	sp, #44	@ 0x2c
 80252a0:	af00      	add	r7, sp, #0
 80252a2:	6078      	str	r0, [r7, #4]
 80252a4:	6039      	str	r1, [r7, #0]
	char *s;
	const char *spanp;
	int c, sc;
	char *tok;
	int inQuote = 0;
 80252a6:	2300      	movs	r3, #0
 80252a8:	61fb      	str	r3, [r7, #28]
	char quote[] = "\r\n\"";
 80252aa:	4b22      	ldr	r3, [pc, #136]	@ (8025334 <strsep+0x98>)
 80252ac:	60fb      	str	r3, [r7, #12]

	if ((s = *stringp) == NULL)
 80252ae:	687b      	ldr	r3, [r7, #4]
 80252b0:	681b      	ldr	r3, [r3, #0]
 80252b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80252b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252b6:	2b00      	cmp	r3, #0
 80252b8:	d101      	bne.n	80252be <strsep+0x22>
	{
		return (NULL);
 80252ba:	2300      	movs	r3, #0
 80252bc:	e034      	b.n	8025328 <strsep+0x8c>
	}

	if(*s == '"')
 80252be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252c0:	781b      	ldrb	r3, [r3, #0]
 80252c2:	2b22      	cmp	r3, #34	@ 0x22
 80252c4:	d104      	bne.n	80252d0 <strsep+0x34>
	{
		inQuote = 1;
 80252c6:	2301      	movs	r3, #1
 80252c8:	61fb      	str	r3, [r7, #28]
		s++;
 80252ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252cc:	3301      	adds	r3, #1
 80252ce:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	for (tok = s;;)
 80252d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252d2:	61bb      	str	r3, [r7, #24]
	{
		c = *s++;
 80252d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80252d6:	1c5a      	adds	r2, r3, #1
 80252d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80252da:	781b      	ldrb	r3, [r3, #0]
 80252dc:	617b      	str	r3, [r7, #20]
		if(inQuote)
 80252de:	69fb      	ldr	r3, [r7, #28]
 80252e0:	2b00      	cmp	r3, #0
 80252e2:	d003      	beq.n	80252ec <strsep+0x50>
		{
			spanp = quote;	// only look to eol and the end quote
 80252e4:	f107 030c 	add.w	r3, r7, #12
 80252e8:	623b      	str	r3, [r7, #32]
 80252ea:	e001      	b.n	80252f0 <strsep+0x54>
		}
		else
		{
			spanp = delim;
 80252ec:	683b      	ldr	r3, [r7, #0]
 80252ee:	623b      	str	r3, [r7, #32]
		}
		do
		{
			if ((sc = *spanp++) == c)
 80252f0:	6a3b      	ldr	r3, [r7, #32]
 80252f2:	1c5a      	adds	r2, r3, #1
 80252f4:	623a      	str	r2, [r7, #32]
 80252f6:	781b      	ldrb	r3, [r3, #0]
 80252f8:	613b      	str	r3, [r7, #16]
 80252fa:	693a      	ldr	r2, [r7, #16]
 80252fc:	697b      	ldr	r3, [r7, #20]
 80252fe:	429a      	cmp	r2, r3
 8025300:	d10e      	bne.n	8025320 <strsep+0x84>
			{
				if (c == 0)
 8025302:	697b      	ldr	r3, [r7, #20]
 8025304:	2b00      	cmp	r3, #0
 8025306:	d102      	bne.n	802530e <strsep+0x72>
				{
					s = NULL;
 8025308:	2300      	movs	r3, #0
 802530a:	627b      	str	r3, [r7, #36]	@ 0x24
 802530c:	e003      	b.n	8025316 <strsep+0x7a>
				}
				else
				{
					s[-1] = 0;
 802530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025310:	3b01      	subs	r3, #1
 8025312:	2200      	movs	r2, #0
 8025314:	701a      	strb	r2, [r3, #0]
				}
				*stringp = s;
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802531a:	601a      	str	r2, [r3, #0]
				return (tok);
 802531c:	69bb      	ldr	r3, [r7, #24]
 802531e:	e003      	b.n	8025328 <strsep+0x8c>
			}
		} while (sc != 0);
 8025320:	693b      	ldr	r3, [r7, #16]
 8025322:	2b00      	cmp	r3, #0
 8025324:	d1e4      	bne.n	80252f0 <strsep+0x54>
		c = *s++;
 8025326:	e7d5      	b.n	80252d4 <strsep+0x38>
	}
	/* NOTREACHED */
}
 8025328:	4618      	mov	r0, r3
 802532a:	372c      	adds	r7, #44	@ 0x2c
 802532c:	46bd      	mov	sp, r7
 802532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025332:	4770      	bx	lr
 8025334:	00220a0d 	.word	0x00220a0d

08025338 <_ZdaPv>:
 8025338:	f000 b802 	b.w	8025340 <_ZdlPv>

0802533c <_Znaj>:
 802533c:	f000 b802 	b.w	8025344 <_Znwj>

08025340 <_ZdlPv>:
 8025340:	f000 b864 	b.w	802540c <free>

08025344 <_Znwj>:
 8025344:	2801      	cmp	r0, #1
 8025346:	bf38      	it	cc
 8025348:	2001      	movcc	r0, #1
 802534a:	b510      	push	{r4, lr}
 802534c:	4604      	mov	r4, r0
 802534e:	4620      	mov	r0, r4
 8025350:	f000 f854 	bl	80253fc <malloc>
 8025354:	b100      	cbz	r0, 8025358 <_Znwj+0x14>
 8025356:	bd10      	pop	{r4, pc}
 8025358:	f000 f806 	bl	8025368 <_ZSt15get_new_handlerv>
 802535c:	b908      	cbnz	r0, 8025362 <_Znwj+0x1e>
 802535e:	f000 f809 	bl	8025374 <abort>
 8025362:	4780      	blx	r0
 8025364:	e7f3      	b.n	802534e <_Znwj+0xa>
	...

08025368 <_ZSt15get_new_handlerv>:
 8025368:	4b01      	ldr	r3, [pc, #4]	@ (8025370 <_ZSt15get_new_handlerv+0x8>)
 802536a:	e8d3 0faf 	lda	r0, [r3]
 802536e:	4770      	bx	lr
 8025370:	2001f594 	.word	0x2001f594

08025374 <abort>:
 8025374:	2006      	movs	r0, #6
 8025376:	b508      	push	{r3, lr}
 8025378:	f000 ffe4 	bl	8026344 <raise>
 802537c:	2001      	movs	r0, #1
 802537e:	f7e6 fa69 	bl	800b854 <_exit>
	...

08025384 <__assert_func>:
 8025384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025386:	4614      	mov	r4, r2
 8025388:	461a      	mov	r2, r3
 802538a:	4b09      	ldr	r3, [pc, #36]	@ (80253b0 <__assert_func+0x2c>)
 802538c:	4605      	mov	r5, r0
 802538e:	681b      	ldr	r3, [r3, #0]
 8025390:	68d8      	ldr	r0, [r3, #12]
 8025392:	b954      	cbnz	r4, 80253aa <__assert_func+0x26>
 8025394:	4b07      	ldr	r3, [pc, #28]	@ (80253b4 <__assert_func+0x30>)
 8025396:	461c      	mov	r4, r3
 8025398:	9100      	str	r1, [sp, #0]
 802539a:	4907      	ldr	r1, [pc, #28]	@ (80253b8 <__assert_func+0x34>)
 802539c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80253a0:	462b      	mov	r3, r5
 80253a2:	f000 fdc7 	bl	8025f34 <fiprintf>
 80253a6:	f7ff ffe5 	bl	8025374 <abort>
 80253aa:	4b04      	ldr	r3, [pc, #16]	@ (80253bc <__assert_func+0x38>)
 80253ac:	e7f4      	b.n	8025398 <__assert_func+0x14>
 80253ae:	bf00      	nop
 80253b0:	200018c8 	.word	0x200018c8
 80253b4:	0802c3aa 	.word	0x0802c3aa
 80253b8:	0802c37c 	.word	0x0802c37c
 80253bc:	0802c36f 	.word	0x0802c36f

080253c0 <atoi>:
 80253c0:	220a      	movs	r2, #10
 80253c2:	2100      	movs	r1, #0
 80253c4:	f000 b946 	b.w	8025654 <strtol>

080253c8 <__itoa>:
 80253c8:	1e93      	subs	r3, r2, #2
 80253ca:	2b22      	cmp	r3, #34	@ 0x22
 80253cc:	b510      	push	{r4, lr}
 80253ce:	460c      	mov	r4, r1
 80253d0:	d904      	bls.n	80253dc <__itoa+0x14>
 80253d2:	2300      	movs	r3, #0
 80253d4:	461c      	mov	r4, r3
 80253d6:	700b      	strb	r3, [r1, #0]
 80253d8:	4620      	mov	r0, r4
 80253da:	bd10      	pop	{r4, pc}
 80253dc:	2a0a      	cmp	r2, #10
 80253de:	d109      	bne.n	80253f4 <__itoa+0x2c>
 80253e0:	2800      	cmp	r0, #0
 80253e2:	da07      	bge.n	80253f4 <__itoa+0x2c>
 80253e4:	232d      	movs	r3, #45	@ 0x2d
 80253e6:	4240      	negs	r0, r0
 80253e8:	700b      	strb	r3, [r1, #0]
 80253ea:	2101      	movs	r1, #1
 80253ec:	4421      	add	r1, r4
 80253ee:	f000 f93b 	bl	8025668 <__utoa>
 80253f2:	e7f1      	b.n	80253d8 <__itoa+0x10>
 80253f4:	2100      	movs	r1, #0
 80253f6:	e7f9      	b.n	80253ec <__itoa+0x24>

080253f8 <itoa>:
 80253f8:	f7ff bfe6 	b.w	80253c8 <__itoa>

080253fc <malloc>:
 80253fc:	4b02      	ldr	r3, [pc, #8]	@ (8025408 <malloc+0xc>)
 80253fe:	4601      	mov	r1, r0
 8025400:	6818      	ldr	r0, [r3, #0]
 8025402:	f000 b82d 	b.w	8025460 <_malloc_r>
 8025406:	bf00      	nop
 8025408:	200018c8 	.word	0x200018c8

0802540c <free>:
 802540c:	4b02      	ldr	r3, [pc, #8]	@ (8025418 <free+0xc>)
 802540e:	4601      	mov	r1, r0
 8025410:	6818      	ldr	r0, [r3, #0]
 8025412:	f001 b849 	b.w	80264a8 <_free_r>
 8025416:	bf00      	nop
 8025418:	200018c8 	.word	0x200018c8

0802541c <sbrk_aligned>:
 802541c:	b570      	push	{r4, r5, r6, lr}
 802541e:	4e0f      	ldr	r6, [pc, #60]	@ (802545c <sbrk_aligned+0x40>)
 8025420:	460c      	mov	r4, r1
 8025422:	4605      	mov	r5, r0
 8025424:	6831      	ldr	r1, [r6, #0]
 8025426:	b911      	cbnz	r1, 802542e <sbrk_aligned+0x12>
 8025428:	f7f9 fdf8 	bl	801f01c <_sbrk_r>
 802542c:	6030      	str	r0, [r6, #0]
 802542e:	4621      	mov	r1, r4
 8025430:	4628      	mov	r0, r5
 8025432:	f7f9 fdf3 	bl	801f01c <_sbrk_r>
 8025436:	1c43      	adds	r3, r0, #1
 8025438:	d103      	bne.n	8025442 <sbrk_aligned+0x26>
 802543a:	f04f 34ff 	mov.w	r4, #4294967295
 802543e:	4620      	mov	r0, r4
 8025440:	bd70      	pop	{r4, r5, r6, pc}
 8025442:	1cc4      	adds	r4, r0, #3
 8025444:	f024 0403 	bic.w	r4, r4, #3
 8025448:	42a0      	cmp	r0, r4
 802544a:	d0f8      	beq.n	802543e <sbrk_aligned+0x22>
 802544c:	1a21      	subs	r1, r4, r0
 802544e:	4628      	mov	r0, r5
 8025450:	f7f9 fde4 	bl	801f01c <_sbrk_r>
 8025454:	3001      	adds	r0, #1
 8025456:	d1f2      	bne.n	802543e <sbrk_aligned+0x22>
 8025458:	e7ef      	b.n	802543a <sbrk_aligned+0x1e>
 802545a:	bf00      	nop
 802545c:	2001f598 	.word	0x2001f598

08025460 <_malloc_r>:
 8025460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025464:	1ccd      	adds	r5, r1, #3
 8025466:	4606      	mov	r6, r0
 8025468:	f025 0503 	bic.w	r5, r5, #3
 802546c:	3508      	adds	r5, #8
 802546e:	2d0c      	cmp	r5, #12
 8025470:	bf38      	it	cc
 8025472:	250c      	movcc	r5, #12
 8025474:	2d00      	cmp	r5, #0
 8025476:	db01      	blt.n	802547c <_malloc_r+0x1c>
 8025478:	42a9      	cmp	r1, r5
 802547a:	d904      	bls.n	8025486 <_malloc_r+0x26>
 802547c:	230c      	movs	r3, #12
 802547e:	6033      	str	r3, [r6, #0]
 8025480:	2000      	movs	r0, #0
 8025482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802555c <_malloc_r+0xfc>
 802548a:	f7f9 fe23 	bl	801f0d4 <__malloc_lock>
 802548e:	f8d8 3000 	ldr.w	r3, [r8]
 8025492:	461c      	mov	r4, r3
 8025494:	bb44      	cbnz	r4, 80254e8 <_malloc_r+0x88>
 8025496:	4629      	mov	r1, r5
 8025498:	4630      	mov	r0, r6
 802549a:	f7ff ffbf 	bl	802541c <sbrk_aligned>
 802549e:	1c43      	adds	r3, r0, #1
 80254a0:	4604      	mov	r4, r0
 80254a2:	d158      	bne.n	8025556 <_malloc_r+0xf6>
 80254a4:	f8d8 4000 	ldr.w	r4, [r8]
 80254a8:	4627      	mov	r7, r4
 80254aa:	2f00      	cmp	r7, #0
 80254ac:	d143      	bne.n	8025536 <_malloc_r+0xd6>
 80254ae:	2c00      	cmp	r4, #0
 80254b0:	d04b      	beq.n	802554a <_malloc_r+0xea>
 80254b2:	6823      	ldr	r3, [r4, #0]
 80254b4:	4639      	mov	r1, r7
 80254b6:	4630      	mov	r0, r6
 80254b8:	eb04 0903 	add.w	r9, r4, r3
 80254bc:	f7f9 fdae 	bl	801f01c <_sbrk_r>
 80254c0:	4581      	cmp	r9, r0
 80254c2:	d142      	bne.n	802554a <_malloc_r+0xea>
 80254c4:	6821      	ldr	r1, [r4, #0]
 80254c6:	4630      	mov	r0, r6
 80254c8:	1a6d      	subs	r5, r5, r1
 80254ca:	4629      	mov	r1, r5
 80254cc:	f7ff ffa6 	bl	802541c <sbrk_aligned>
 80254d0:	3001      	adds	r0, #1
 80254d2:	d03a      	beq.n	802554a <_malloc_r+0xea>
 80254d4:	6823      	ldr	r3, [r4, #0]
 80254d6:	442b      	add	r3, r5
 80254d8:	6023      	str	r3, [r4, #0]
 80254da:	f8d8 3000 	ldr.w	r3, [r8]
 80254de:	685a      	ldr	r2, [r3, #4]
 80254e0:	bb62      	cbnz	r2, 802553c <_malloc_r+0xdc>
 80254e2:	f8c8 7000 	str.w	r7, [r8]
 80254e6:	e00f      	b.n	8025508 <_malloc_r+0xa8>
 80254e8:	6822      	ldr	r2, [r4, #0]
 80254ea:	1b52      	subs	r2, r2, r5
 80254ec:	d420      	bmi.n	8025530 <_malloc_r+0xd0>
 80254ee:	2a0b      	cmp	r2, #11
 80254f0:	d917      	bls.n	8025522 <_malloc_r+0xc2>
 80254f2:	1961      	adds	r1, r4, r5
 80254f4:	42a3      	cmp	r3, r4
 80254f6:	6025      	str	r5, [r4, #0]
 80254f8:	bf18      	it	ne
 80254fa:	6059      	strne	r1, [r3, #4]
 80254fc:	6863      	ldr	r3, [r4, #4]
 80254fe:	bf08      	it	eq
 8025500:	f8c8 1000 	streq.w	r1, [r8]
 8025504:	5162      	str	r2, [r4, r5]
 8025506:	604b      	str	r3, [r1, #4]
 8025508:	4630      	mov	r0, r6
 802550a:	f7f9 fe0d 	bl	801f128 <__malloc_unlock>
 802550e:	f104 000b 	add.w	r0, r4, #11
 8025512:	1d23      	adds	r3, r4, #4
 8025514:	f020 0007 	bic.w	r0, r0, #7
 8025518:	1ac2      	subs	r2, r0, r3
 802551a:	bf1c      	itt	ne
 802551c:	1a1b      	subne	r3, r3, r0
 802551e:	50a3      	strne	r3, [r4, r2]
 8025520:	e7af      	b.n	8025482 <_malloc_r+0x22>
 8025522:	6862      	ldr	r2, [r4, #4]
 8025524:	42a3      	cmp	r3, r4
 8025526:	bf0c      	ite	eq
 8025528:	f8c8 2000 	streq.w	r2, [r8]
 802552c:	605a      	strne	r2, [r3, #4]
 802552e:	e7eb      	b.n	8025508 <_malloc_r+0xa8>
 8025530:	4623      	mov	r3, r4
 8025532:	6864      	ldr	r4, [r4, #4]
 8025534:	e7ae      	b.n	8025494 <_malloc_r+0x34>
 8025536:	463c      	mov	r4, r7
 8025538:	687f      	ldr	r7, [r7, #4]
 802553a:	e7b6      	b.n	80254aa <_malloc_r+0x4a>
 802553c:	461a      	mov	r2, r3
 802553e:	685b      	ldr	r3, [r3, #4]
 8025540:	42a3      	cmp	r3, r4
 8025542:	d1fb      	bne.n	802553c <_malloc_r+0xdc>
 8025544:	2300      	movs	r3, #0
 8025546:	6053      	str	r3, [r2, #4]
 8025548:	e7de      	b.n	8025508 <_malloc_r+0xa8>
 802554a:	230c      	movs	r3, #12
 802554c:	4630      	mov	r0, r6
 802554e:	6033      	str	r3, [r6, #0]
 8025550:	f7f9 fdea 	bl	801f128 <__malloc_unlock>
 8025554:	e794      	b.n	8025480 <_malloc_r+0x20>
 8025556:	6005      	str	r5, [r0, #0]
 8025558:	e7d6      	b.n	8025508 <_malloc_r+0xa8>
 802555a:	bf00      	nop
 802555c:	2001f59c 	.word	0x2001f59c

08025560 <_strtol_l.constprop.0>:
 8025560:	2b24      	cmp	r3, #36	@ 0x24
 8025562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025566:	4686      	mov	lr, r0
 8025568:	4690      	mov	r8, r2
 802556a:	d801      	bhi.n	8025570 <_strtol_l.constprop.0+0x10>
 802556c:	2b01      	cmp	r3, #1
 802556e:	d106      	bne.n	802557e <_strtol_l.constprop.0+0x1e>
 8025570:	f000 ff4a 	bl	8026408 <__errno>
 8025574:	2316      	movs	r3, #22
 8025576:	6003      	str	r3, [r0, #0]
 8025578:	2000      	movs	r0, #0
 802557a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802557e:	460d      	mov	r5, r1
 8025580:	4833      	ldr	r0, [pc, #204]	@ (8025650 <_strtol_l.constprop.0+0xf0>)
 8025582:	462a      	mov	r2, r5
 8025584:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025588:	5d06      	ldrb	r6, [r0, r4]
 802558a:	f016 0608 	ands.w	r6, r6, #8
 802558e:	d1f8      	bne.n	8025582 <_strtol_l.constprop.0+0x22>
 8025590:	2c2d      	cmp	r4, #45	@ 0x2d
 8025592:	d12d      	bne.n	80255f0 <_strtol_l.constprop.0+0x90>
 8025594:	782c      	ldrb	r4, [r5, #0]
 8025596:	2601      	movs	r6, #1
 8025598:	1c95      	adds	r5, r2, #2
 802559a:	f033 0210 	bics.w	r2, r3, #16
 802559e:	d109      	bne.n	80255b4 <_strtol_l.constprop.0+0x54>
 80255a0:	2c30      	cmp	r4, #48	@ 0x30
 80255a2:	d12a      	bne.n	80255fa <_strtol_l.constprop.0+0x9a>
 80255a4:	782a      	ldrb	r2, [r5, #0]
 80255a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80255aa:	2a58      	cmp	r2, #88	@ 0x58
 80255ac:	d125      	bne.n	80255fa <_strtol_l.constprop.0+0x9a>
 80255ae:	786c      	ldrb	r4, [r5, #1]
 80255b0:	2310      	movs	r3, #16
 80255b2:	3502      	adds	r5, #2
 80255b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80255b8:	2200      	movs	r2, #0
 80255ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80255be:	4610      	mov	r0, r2
 80255c0:	fbbc f9f3 	udiv	r9, ip, r3
 80255c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80255c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80255cc:	2f09      	cmp	r7, #9
 80255ce:	d81b      	bhi.n	8025608 <_strtol_l.constprop.0+0xa8>
 80255d0:	463c      	mov	r4, r7
 80255d2:	42a3      	cmp	r3, r4
 80255d4:	dd27      	ble.n	8025626 <_strtol_l.constprop.0+0xc6>
 80255d6:	1c57      	adds	r7, r2, #1
 80255d8:	d007      	beq.n	80255ea <_strtol_l.constprop.0+0x8a>
 80255da:	4581      	cmp	r9, r0
 80255dc:	d320      	bcc.n	8025620 <_strtol_l.constprop.0+0xc0>
 80255de:	d101      	bne.n	80255e4 <_strtol_l.constprop.0+0x84>
 80255e0:	45a2      	cmp	sl, r4
 80255e2:	db1d      	blt.n	8025620 <_strtol_l.constprop.0+0xc0>
 80255e4:	fb00 4003 	mla	r0, r0, r3, r4
 80255e8:	2201      	movs	r2, #1
 80255ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80255ee:	e7eb      	b.n	80255c8 <_strtol_l.constprop.0+0x68>
 80255f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80255f2:	bf04      	itt	eq
 80255f4:	782c      	ldrbeq	r4, [r5, #0]
 80255f6:	1c95      	addeq	r5, r2, #2
 80255f8:	e7cf      	b.n	802559a <_strtol_l.constprop.0+0x3a>
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	d1da      	bne.n	80255b4 <_strtol_l.constprop.0+0x54>
 80255fe:	2c30      	cmp	r4, #48	@ 0x30
 8025600:	bf0c      	ite	eq
 8025602:	2308      	moveq	r3, #8
 8025604:	230a      	movne	r3, #10
 8025606:	e7d5      	b.n	80255b4 <_strtol_l.constprop.0+0x54>
 8025608:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802560c:	2f19      	cmp	r7, #25
 802560e:	d801      	bhi.n	8025614 <_strtol_l.constprop.0+0xb4>
 8025610:	3c37      	subs	r4, #55	@ 0x37
 8025612:	e7de      	b.n	80255d2 <_strtol_l.constprop.0+0x72>
 8025614:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8025618:	2f19      	cmp	r7, #25
 802561a:	d804      	bhi.n	8025626 <_strtol_l.constprop.0+0xc6>
 802561c:	3c57      	subs	r4, #87	@ 0x57
 802561e:	e7d8      	b.n	80255d2 <_strtol_l.constprop.0+0x72>
 8025620:	f04f 32ff 	mov.w	r2, #4294967295
 8025624:	e7e1      	b.n	80255ea <_strtol_l.constprop.0+0x8a>
 8025626:	1c53      	adds	r3, r2, #1
 8025628:	d108      	bne.n	802563c <_strtol_l.constprop.0+0xdc>
 802562a:	2322      	movs	r3, #34	@ 0x22
 802562c:	4660      	mov	r0, ip
 802562e:	f8ce 3000 	str.w	r3, [lr]
 8025632:	f1b8 0f00 	cmp.w	r8, #0
 8025636:	d0a0      	beq.n	802557a <_strtol_l.constprop.0+0x1a>
 8025638:	1e69      	subs	r1, r5, #1
 802563a:	e006      	b.n	802564a <_strtol_l.constprop.0+0xea>
 802563c:	b106      	cbz	r6, 8025640 <_strtol_l.constprop.0+0xe0>
 802563e:	4240      	negs	r0, r0
 8025640:	f1b8 0f00 	cmp.w	r8, #0
 8025644:	d099      	beq.n	802557a <_strtol_l.constprop.0+0x1a>
 8025646:	2a00      	cmp	r2, #0
 8025648:	d1f6      	bne.n	8025638 <_strtol_l.constprop.0+0xd8>
 802564a:	f8c8 1000 	str.w	r1, [r8]
 802564e:	e794      	b.n	802557a <_strtol_l.constprop.0+0x1a>
 8025650:	0802c3d1 	.word	0x0802c3d1

08025654 <strtol>:
 8025654:	4613      	mov	r3, r2
 8025656:	460a      	mov	r2, r1
 8025658:	4601      	mov	r1, r0
 802565a:	4802      	ldr	r0, [pc, #8]	@ (8025664 <strtol+0x10>)
 802565c:	6800      	ldr	r0, [r0, #0]
 802565e:	f7ff bf7f 	b.w	8025560 <_strtol_l.constprop.0>
 8025662:	bf00      	nop
 8025664:	200018c8 	.word	0x200018c8

08025668 <__utoa>:
 8025668:	b5f0      	push	{r4, r5, r6, r7, lr}
 802566a:	4c1f      	ldr	r4, [pc, #124]	@ (80256e8 <__utoa+0x80>)
 802566c:	b08b      	sub	sp, #44	@ 0x2c
 802566e:	4605      	mov	r5, r0
 8025670:	460b      	mov	r3, r1
 8025672:	466e      	mov	r6, sp
 8025674:	f104 0c20 	add.w	ip, r4, #32
 8025678:	6820      	ldr	r0, [r4, #0]
 802567a:	3408      	adds	r4, #8
 802567c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8025680:	4637      	mov	r7, r6
 8025682:	4564      	cmp	r4, ip
 8025684:	c703      	stmia	r7!, {r0, r1}
 8025686:	463e      	mov	r6, r7
 8025688:	d1f6      	bne.n	8025678 <__utoa+0x10>
 802568a:	7921      	ldrb	r1, [r4, #4]
 802568c:	6820      	ldr	r0, [r4, #0]
 802568e:	7139      	strb	r1, [r7, #4]
 8025690:	1e91      	subs	r1, r2, #2
 8025692:	6038      	str	r0, [r7, #0]
 8025694:	2922      	cmp	r1, #34	@ 0x22
 8025696:	f04f 0100 	mov.w	r1, #0
 802569a:	d904      	bls.n	80256a6 <__utoa+0x3e>
 802569c:	7019      	strb	r1, [r3, #0]
 802569e:	460b      	mov	r3, r1
 80256a0:	4618      	mov	r0, r3
 80256a2:	b00b      	add	sp, #44	@ 0x2c
 80256a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80256a6:	1e58      	subs	r0, r3, #1
 80256a8:	4684      	mov	ip, r0
 80256aa:	460c      	mov	r4, r1
 80256ac:	3101      	adds	r1, #1
 80256ae:	fbb5 f7f2 	udiv	r7, r5, r2
 80256b2:	fb02 5617 	mls	r6, r2, r7, r5
 80256b6:	3628      	adds	r6, #40	@ 0x28
 80256b8:	446e      	add	r6, sp
 80256ba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80256be:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80256c2:	462e      	mov	r6, r5
 80256c4:	463d      	mov	r5, r7
 80256c6:	42b2      	cmp	r2, r6
 80256c8:	d9ef      	bls.n	80256aa <__utoa+0x42>
 80256ca:	2200      	movs	r2, #0
 80256cc:	545a      	strb	r2, [r3, r1]
 80256ce:	1919      	adds	r1, r3, r4
 80256d0:	1aa5      	subs	r5, r4, r2
 80256d2:	42aa      	cmp	r2, r5
 80256d4:	dae4      	bge.n	80256a0 <__utoa+0x38>
 80256d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80256da:	3201      	adds	r2, #1
 80256dc:	780e      	ldrb	r6, [r1, #0]
 80256de:	7006      	strb	r6, [r0, #0]
 80256e0:	f801 5901 	strb.w	r5, [r1], #-1
 80256e4:	e7f4      	b.n	80256d0 <__utoa+0x68>
 80256e6:	bf00      	nop
 80256e8:	0802c3ab 	.word	0x0802c3ab

080256ec <__sfputc_r>:
 80256ec:	6893      	ldr	r3, [r2, #8]
 80256ee:	3b01      	subs	r3, #1
 80256f0:	2b00      	cmp	r3, #0
 80256f2:	6093      	str	r3, [r2, #8]
 80256f4:	b410      	push	{r4}
 80256f6:	da08      	bge.n	802570a <__sfputc_r+0x1e>
 80256f8:	6994      	ldr	r4, [r2, #24]
 80256fa:	42a3      	cmp	r3, r4
 80256fc:	db01      	blt.n	8025702 <__sfputc_r+0x16>
 80256fe:	290a      	cmp	r1, #10
 8025700:	d103      	bne.n	802570a <__sfputc_r+0x1e>
 8025702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025706:	f000 bcdc 	b.w	80260c2 <__swbuf_r>
 802570a:	6813      	ldr	r3, [r2, #0]
 802570c:	1c58      	adds	r0, r3, #1
 802570e:	6010      	str	r0, [r2, #0]
 8025710:	4608      	mov	r0, r1
 8025712:	7019      	strb	r1, [r3, #0]
 8025714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025718:	4770      	bx	lr

0802571a <__sfputs_r>:
 802571a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802571c:	4606      	mov	r6, r0
 802571e:	460f      	mov	r7, r1
 8025720:	4614      	mov	r4, r2
 8025722:	18d5      	adds	r5, r2, r3
 8025724:	42ac      	cmp	r4, r5
 8025726:	d101      	bne.n	802572c <__sfputs_r+0x12>
 8025728:	2000      	movs	r0, #0
 802572a:	e007      	b.n	802573c <__sfputs_r+0x22>
 802572c:	463a      	mov	r2, r7
 802572e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025732:	4630      	mov	r0, r6
 8025734:	f7ff ffda 	bl	80256ec <__sfputc_r>
 8025738:	1c43      	adds	r3, r0, #1
 802573a:	d1f3      	bne.n	8025724 <__sfputs_r+0xa>
 802573c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025740 <_vfiprintf_r>:
 8025740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025744:	460d      	mov	r5, r1
 8025746:	b09d      	sub	sp, #116	@ 0x74
 8025748:	4614      	mov	r4, r2
 802574a:	4698      	mov	r8, r3
 802574c:	4606      	mov	r6, r0
 802574e:	b118      	cbz	r0, 8025758 <_vfiprintf_r+0x18>
 8025750:	6a03      	ldr	r3, [r0, #32]
 8025752:	b90b      	cbnz	r3, 8025758 <_vfiprintf_r+0x18>
 8025754:	f000 fbd6 	bl	8025f04 <__sinit>
 8025758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802575a:	07d9      	lsls	r1, r3, #31
 802575c:	d405      	bmi.n	802576a <_vfiprintf_r+0x2a>
 802575e:	89ab      	ldrh	r3, [r5, #12]
 8025760:	059a      	lsls	r2, r3, #22
 8025762:	d402      	bmi.n	802576a <_vfiprintf_r+0x2a>
 8025764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025766:	f000 fe7a 	bl	802645e <__retarget_lock_acquire_recursive>
 802576a:	89ab      	ldrh	r3, [r5, #12]
 802576c:	071b      	lsls	r3, r3, #28
 802576e:	d501      	bpl.n	8025774 <_vfiprintf_r+0x34>
 8025770:	692b      	ldr	r3, [r5, #16]
 8025772:	b99b      	cbnz	r3, 802579c <_vfiprintf_r+0x5c>
 8025774:	4629      	mov	r1, r5
 8025776:	4630      	mov	r0, r6
 8025778:	f000 fce2 	bl	8026140 <__swsetup_r>
 802577c:	b170      	cbz	r0, 802579c <_vfiprintf_r+0x5c>
 802577e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025780:	07dc      	lsls	r4, r3, #31
 8025782:	d504      	bpl.n	802578e <_vfiprintf_r+0x4e>
 8025784:	f04f 30ff 	mov.w	r0, #4294967295
 8025788:	b01d      	add	sp, #116	@ 0x74
 802578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802578e:	89ab      	ldrh	r3, [r5, #12]
 8025790:	0598      	lsls	r0, r3, #22
 8025792:	d4f7      	bmi.n	8025784 <_vfiprintf_r+0x44>
 8025794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025796:	f000 fe63 	bl	8026460 <__retarget_lock_release_recursive>
 802579a:	e7f3      	b.n	8025784 <_vfiprintf_r+0x44>
 802579c:	2300      	movs	r3, #0
 802579e:	f8cd 800c 	str.w	r8, [sp, #12]
 80257a2:	f04f 0901 	mov.w	r9, #1
 80257a6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802595c <_vfiprintf_r+0x21c>
 80257aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80257ac:	2320      	movs	r3, #32
 80257ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80257b2:	2330      	movs	r3, #48	@ 0x30
 80257b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80257b8:	4623      	mov	r3, r4
 80257ba:	469a      	mov	sl, r3
 80257bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80257c0:	b10a      	cbz	r2, 80257c6 <_vfiprintf_r+0x86>
 80257c2:	2a25      	cmp	r2, #37	@ 0x25
 80257c4:	d1f9      	bne.n	80257ba <_vfiprintf_r+0x7a>
 80257c6:	ebba 0b04 	subs.w	fp, sl, r4
 80257ca:	d00b      	beq.n	80257e4 <_vfiprintf_r+0xa4>
 80257cc:	465b      	mov	r3, fp
 80257ce:	4622      	mov	r2, r4
 80257d0:	4629      	mov	r1, r5
 80257d2:	4630      	mov	r0, r6
 80257d4:	f7ff ffa1 	bl	802571a <__sfputs_r>
 80257d8:	3001      	adds	r0, #1
 80257da:	f000 80a7 	beq.w	802592c <_vfiprintf_r+0x1ec>
 80257de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80257e0:	445a      	add	r2, fp
 80257e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80257e4:	f89a 3000 	ldrb.w	r3, [sl]
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	f000 809f 	beq.w	802592c <_vfiprintf_r+0x1ec>
 80257ee:	2300      	movs	r3, #0
 80257f0:	f04f 32ff 	mov.w	r2, #4294967295
 80257f4:	f10a 0a01 	add.w	sl, sl, #1
 80257f8:	9304      	str	r3, [sp, #16]
 80257fa:	9307      	str	r3, [sp, #28]
 80257fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025800:	931a      	str	r3, [sp, #104]	@ 0x68
 8025802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025806:	4654      	mov	r4, sl
 8025808:	2205      	movs	r2, #5
 802580a:	4854      	ldr	r0, [pc, #336]	@ (802595c <_vfiprintf_r+0x21c>)
 802580c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025810:	f000 fe2f 	bl	8026472 <memchr>
 8025814:	9a04      	ldr	r2, [sp, #16]
 8025816:	b9d8      	cbnz	r0, 8025850 <_vfiprintf_r+0x110>
 8025818:	06d1      	lsls	r1, r2, #27
 802581a:	bf44      	itt	mi
 802581c:	2320      	movmi	r3, #32
 802581e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025822:	0713      	lsls	r3, r2, #28
 8025824:	bf44      	itt	mi
 8025826:	232b      	movmi	r3, #43	@ 0x2b
 8025828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802582c:	f89a 3000 	ldrb.w	r3, [sl]
 8025830:	2b2a      	cmp	r3, #42	@ 0x2a
 8025832:	d015      	beq.n	8025860 <_vfiprintf_r+0x120>
 8025834:	9a07      	ldr	r2, [sp, #28]
 8025836:	4654      	mov	r4, sl
 8025838:	2000      	movs	r0, #0
 802583a:	f04f 0c0a 	mov.w	ip, #10
 802583e:	4621      	mov	r1, r4
 8025840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025844:	3b30      	subs	r3, #48	@ 0x30
 8025846:	2b09      	cmp	r3, #9
 8025848:	d94b      	bls.n	80258e2 <_vfiprintf_r+0x1a2>
 802584a:	b1b0      	cbz	r0, 802587a <_vfiprintf_r+0x13a>
 802584c:	9207      	str	r2, [sp, #28]
 802584e:	e014      	b.n	802587a <_vfiprintf_r+0x13a>
 8025850:	eba0 0308 	sub.w	r3, r0, r8
 8025854:	46a2      	mov	sl, r4
 8025856:	fa09 f303 	lsl.w	r3, r9, r3
 802585a:	4313      	orrs	r3, r2
 802585c:	9304      	str	r3, [sp, #16]
 802585e:	e7d2      	b.n	8025806 <_vfiprintf_r+0xc6>
 8025860:	9b03      	ldr	r3, [sp, #12]
 8025862:	1d19      	adds	r1, r3, #4
 8025864:	681b      	ldr	r3, [r3, #0]
 8025866:	2b00      	cmp	r3, #0
 8025868:	9103      	str	r1, [sp, #12]
 802586a:	bfbb      	ittet	lt
 802586c:	425b      	neglt	r3, r3
 802586e:	f042 0202 	orrlt.w	r2, r2, #2
 8025872:	9307      	strge	r3, [sp, #28]
 8025874:	9307      	strlt	r3, [sp, #28]
 8025876:	bfb8      	it	lt
 8025878:	9204      	strlt	r2, [sp, #16]
 802587a:	7823      	ldrb	r3, [r4, #0]
 802587c:	2b2e      	cmp	r3, #46	@ 0x2e
 802587e:	d10a      	bne.n	8025896 <_vfiprintf_r+0x156>
 8025880:	7863      	ldrb	r3, [r4, #1]
 8025882:	2b2a      	cmp	r3, #42	@ 0x2a
 8025884:	d132      	bne.n	80258ec <_vfiprintf_r+0x1ac>
 8025886:	9b03      	ldr	r3, [sp, #12]
 8025888:	3402      	adds	r4, #2
 802588a:	1d1a      	adds	r2, r3, #4
 802588c:	681b      	ldr	r3, [r3, #0]
 802588e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025892:	9203      	str	r2, [sp, #12]
 8025894:	9305      	str	r3, [sp, #20]
 8025896:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802596c <_vfiprintf_r+0x22c>
 802589a:	2203      	movs	r2, #3
 802589c:	7821      	ldrb	r1, [r4, #0]
 802589e:	4650      	mov	r0, sl
 80258a0:	f000 fde7 	bl	8026472 <memchr>
 80258a4:	b138      	cbz	r0, 80258b6 <_vfiprintf_r+0x176>
 80258a6:	eba0 000a 	sub.w	r0, r0, sl
 80258aa:	2240      	movs	r2, #64	@ 0x40
 80258ac:	9b04      	ldr	r3, [sp, #16]
 80258ae:	3401      	adds	r4, #1
 80258b0:	4082      	lsls	r2, r0
 80258b2:	4313      	orrs	r3, r2
 80258b4:	9304      	str	r3, [sp, #16]
 80258b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80258ba:	2206      	movs	r2, #6
 80258bc:	4828      	ldr	r0, [pc, #160]	@ (8025960 <_vfiprintf_r+0x220>)
 80258be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80258c2:	f000 fdd6 	bl	8026472 <memchr>
 80258c6:	2800      	cmp	r0, #0
 80258c8:	d03f      	beq.n	802594a <_vfiprintf_r+0x20a>
 80258ca:	4b26      	ldr	r3, [pc, #152]	@ (8025964 <_vfiprintf_r+0x224>)
 80258cc:	bb1b      	cbnz	r3, 8025916 <_vfiprintf_r+0x1d6>
 80258ce:	9b03      	ldr	r3, [sp, #12]
 80258d0:	3307      	adds	r3, #7
 80258d2:	f023 0307 	bic.w	r3, r3, #7
 80258d6:	3308      	adds	r3, #8
 80258d8:	9303      	str	r3, [sp, #12]
 80258da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258dc:	443b      	add	r3, r7
 80258de:	9309      	str	r3, [sp, #36]	@ 0x24
 80258e0:	e76a      	b.n	80257b8 <_vfiprintf_r+0x78>
 80258e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80258e6:	460c      	mov	r4, r1
 80258e8:	2001      	movs	r0, #1
 80258ea:	e7a8      	b.n	802583e <_vfiprintf_r+0xfe>
 80258ec:	2300      	movs	r3, #0
 80258ee:	3401      	adds	r4, #1
 80258f0:	f04f 0c0a 	mov.w	ip, #10
 80258f4:	4619      	mov	r1, r3
 80258f6:	9305      	str	r3, [sp, #20]
 80258f8:	4620      	mov	r0, r4
 80258fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80258fe:	3a30      	subs	r2, #48	@ 0x30
 8025900:	2a09      	cmp	r2, #9
 8025902:	d903      	bls.n	802590c <_vfiprintf_r+0x1cc>
 8025904:	2b00      	cmp	r3, #0
 8025906:	d0c6      	beq.n	8025896 <_vfiprintf_r+0x156>
 8025908:	9105      	str	r1, [sp, #20]
 802590a:	e7c4      	b.n	8025896 <_vfiprintf_r+0x156>
 802590c:	fb0c 2101 	mla	r1, ip, r1, r2
 8025910:	4604      	mov	r4, r0
 8025912:	2301      	movs	r3, #1
 8025914:	e7f0      	b.n	80258f8 <_vfiprintf_r+0x1b8>
 8025916:	ab03      	add	r3, sp, #12
 8025918:	462a      	mov	r2, r5
 802591a:	a904      	add	r1, sp, #16
 802591c:	4630      	mov	r0, r6
 802591e:	9300      	str	r3, [sp, #0]
 8025920:	4b11      	ldr	r3, [pc, #68]	@ (8025968 <_vfiprintf_r+0x228>)
 8025922:	f3af 8000 	nop.w
 8025926:	4607      	mov	r7, r0
 8025928:	1c78      	adds	r0, r7, #1
 802592a:	d1d6      	bne.n	80258da <_vfiprintf_r+0x19a>
 802592c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802592e:	07d9      	lsls	r1, r3, #31
 8025930:	d405      	bmi.n	802593e <_vfiprintf_r+0x1fe>
 8025932:	89ab      	ldrh	r3, [r5, #12]
 8025934:	059a      	lsls	r2, r3, #22
 8025936:	d402      	bmi.n	802593e <_vfiprintf_r+0x1fe>
 8025938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802593a:	f000 fd91 	bl	8026460 <__retarget_lock_release_recursive>
 802593e:	89ab      	ldrh	r3, [r5, #12]
 8025940:	065b      	lsls	r3, r3, #25
 8025942:	f53f af1f 	bmi.w	8025784 <_vfiprintf_r+0x44>
 8025946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025948:	e71e      	b.n	8025788 <_vfiprintf_r+0x48>
 802594a:	ab03      	add	r3, sp, #12
 802594c:	462a      	mov	r2, r5
 802594e:	a904      	add	r1, sp, #16
 8025950:	4630      	mov	r0, r6
 8025952:	9300      	str	r3, [sp, #0]
 8025954:	4b04      	ldr	r3, [pc, #16]	@ (8025968 <_vfiprintf_r+0x228>)
 8025956:	f000 f87d 	bl	8025a54 <_printf_i>
 802595a:	e7e4      	b.n	8025926 <_vfiprintf_r+0x1e6>
 802595c:	0802c4d1 	.word	0x0802c4d1
 8025960:	0802c4db 	.word	0x0802c4db
 8025964:	00000000 	.word	0x00000000
 8025968:	0802571b 	.word	0x0802571b
 802596c:	0802c4d7 	.word	0x0802c4d7

08025970 <_printf_common>:
 8025970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025974:	4616      	mov	r6, r2
 8025976:	4698      	mov	r8, r3
 8025978:	688a      	ldr	r2, [r1, #8]
 802597a:	4607      	mov	r7, r0
 802597c:	690b      	ldr	r3, [r1, #16]
 802597e:	460c      	mov	r4, r1
 8025980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025984:	4293      	cmp	r3, r2
 8025986:	bfb8      	it	lt
 8025988:	4613      	movlt	r3, r2
 802598a:	6033      	str	r3, [r6, #0]
 802598c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025990:	b10a      	cbz	r2, 8025996 <_printf_common+0x26>
 8025992:	3301      	adds	r3, #1
 8025994:	6033      	str	r3, [r6, #0]
 8025996:	6823      	ldr	r3, [r4, #0]
 8025998:	0699      	lsls	r1, r3, #26
 802599a:	bf42      	ittt	mi
 802599c:	6833      	ldrmi	r3, [r6, #0]
 802599e:	3302      	addmi	r3, #2
 80259a0:	6033      	strmi	r3, [r6, #0]
 80259a2:	6825      	ldr	r5, [r4, #0]
 80259a4:	f015 0506 	ands.w	r5, r5, #6
 80259a8:	d106      	bne.n	80259b8 <_printf_common+0x48>
 80259aa:	f104 0a19 	add.w	sl, r4, #25
 80259ae:	68e3      	ldr	r3, [r4, #12]
 80259b0:	6832      	ldr	r2, [r6, #0]
 80259b2:	1a9b      	subs	r3, r3, r2
 80259b4:	42ab      	cmp	r3, r5
 80259b6:	dc2b      	bgt.n	8025a10 <_printf_common+0xa0>
 80259b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80259bc:	6822      	ldr	r2, [r4, #0]
 80259be:	3b00      	subs	r3, #0
 80259c0:	bf18      	it	ne
 80259c2:	2301      	movne	r3, #1
 80259c4:	0692      	lsls	r2, r2, #26
 80259c6:	d430      	bmi.n	8025a2a <_printf_common+0xba>
 80259c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80259cc:	4641      	mov	r1, r8
 80259ce:	4638      	mov	r0, r7
 80259d0:	47c8      	blx	r9
 80259d2:	3001      	adds	r0, #1
 80259d4:	d023      	beq.n	8025a1e <_printf_common+0xae>
 80259d6:	6823      	ldr	r3, [r4, #0]
 80259d8:	341a      	adds	r4, #26
 80259da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80259de:	f003 0306 	and.w	r3, r3, #6
 80259e2:	2b04      	cmp	r3, #4
 80259e4:	bf0a      	itet	eq
 80259e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80259ea:	2500      	movne	r5, #0
 80259ec:	6833      	ldreq	r3, [r6, #0]
 80259ee:	f04f 0600 	mov.w	r6, #0
 80259f2:	bf08      	it	eq
 80259f4:	1aed      	subeq	r5, r5, r3
 80259f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80259fa:	bf08      	it	eq
 80259fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025a00:	4293      	cmp	r3, r2
 8025a02:	bfc4      	itt	gt
 8025a04:	1a9b      	subgt	r3, r3, r2
 8025a06:	18ed      	addgt	r5, r5, r3
 8025a08:	42b5      	cmp	r5, r6
 8025a0a:	d11a      	bne.n	8025a42 <_printf_common+0xd2>
 8025a0c:	2000      	movs	r0, #0
 8025a0e:	e008      	b.n	8025a22 <_printf_common+0xb2>
 8025a10:	2301      	movs	r3, #1
 8025a12:	4652      	mov	r2, sl
 8025a14:	4641      	mov	r1, r8
 8025a16:	4638      	mov	r0, r7
 8025a18:	47c8      	blx	r9
 8025a1a:	3001      	adds	r0, #1
 8025a1c:	d103      	bne.n	8025a26 <_printf_common+0xb6>
 8025a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8025a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a26:	3501      	adds	r5, #1
 8025a28:	e7c1      	b.n	80259ae <_printf_common+0x3e>
 8025a2a:	18e1      	adds	r1, r4, r3
 8025a2c:	1c5a      	adds	r2, r3, #1
 8025a2e:	2030      	movs	r0, #48	@ 0x30
 8025a30:	3302      	adds	r3, #2
 8025a32:	4422      	add	r2, r4
 8025a34:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025a40:	e7c2      	b.n	80259c8 <_printf_common+0x58>
 8025a42:	2301      	movs	r3, #1
 8025a44:	4622      	mov	r2, r4
 8025a46:	4641      	mov	r1, r8
 8025a48:	4638      	mov	r0, r7
 8025a4a:	47c8      	blx	r9
 8025a4c:	3001      	adds	r0, #1
 8025a4e:	d0e6      	beq.n	8025a1e <_printf_common+0xae>
 8025a50:	3601      	adds	r6, #1
 8025a52:	e7d9      	b.n	8025a08 <_printf_common+0x98>

08025a54 <_printf_i>:
 8025a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025a58:	7e0f      	ldrb	r7, [r1, #24]
 8025a5a:	4691      	mov	r9, r2
 8025a5c:	4680      	mov	r8, r0
 8025a5e:	460c      	mov	r4, r1
 8025a60:	2f78      	cmp	r7, #120	@ 0x78
 8025a62:	469a      	mov	sl, r3
 8025a64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025a66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8025a6a:	d807      	bhi.n	8025a7c <_printf_i+0x28>
 8025a6c:	2f62      	cmp	r7, #98	@ 0x62
 8025a6e:	d80a      	bhi.n	8025a86 <_printf_i+0x32>
 8025a70:	2f00      	cmp	r7, #0
 8025a72:	f000 80d2 	beq.w	8025c1a <_printf_i+0x1c6>
 8025a76:	2f58      	cmp	r7, #88	@ 0x58
 8025a78:	f000 80b9 	beq.w	8025bee <_printf_i+0x19a>
 8025a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025a80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025a84:	e03a      	b.n	8025afc <_printf_i+0xa8>
 8025a86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025a8a:	2b15      	cmp	r3, #21
 8025a8c:	d8f6      	bhi.n	8025a7c <_printf_i+0x28>
 8025a8e:	a101      	add	r1, pc, #4	@ (adr r1, 8025a94 <_printf_i+0x40>)
 8025a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025a94:	08025aed 	.word	0x08025aed
 8025a98:	08025b01 	.word	0x08025b01
 8025a9c:	08025a7d 	.word	0x08025a7d
 8025aa0:	08025a7d 	.word	0x08025a7d
 8025aa4:	08025a7d 	.word	0x08025a7d
 8025aa8:	08025a7d 	.word	0x08025a7d
 8025aac:	08025b01 	.word	0x08025b01
 8025ab0:	08025a7d 	.word	0x08025a7d
 8025ab4:	08025a7d 	.word	0x08025a7d
 8025ab8:	08025a7d 	.word	0x08025a7d
 8025abc:	08025a7d 	.word	0x08025a7d
 8025ac0:	08025c01 	.word	0x08025c01
 8025ac4:	08025b2b 	.word	0x08025b2b
 8025ac8:	08025bbb 	.word	0x08025bbb
 8025acc:	08025a7d 	.word	0x08025a7d
 8025ad0:	08025a7d 	.word	0x08025a7d
 8025ad4:	08025c23 	.word	0x08025c23
 8025ad8:	08025a7d 	.word	0x08025a7d
 8025adc:	08025b2b 	.word	0x08025b2b
 8025ae0:	08025a7d 	.word	0x08025a7d
 8025ae4:	08025a7d 	.word	0x08025a7d
 8025ae8:	08025bc3 	.word	0x08025bc3
 8025aec:	6833      	ldr	r3, [r6, #0]
 8025aee:	1d1a      	adds	r2, r3, #4
 8025af0:	681b      	ldr	r3, [r3, #0]
 8025af2:	6032      	str	r2, [r6, #0]
 8025af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025af8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025afc:	2301      	movs	r3, #1
 8025afe:	e09d      	b.n	8025c3c <_printf_i+0x1e8>
 8025b00:	6833      	ldr	r3, [r6, #0]
 8025b02:	6820      	ldr	r0, [r4, #0]
 8025b04:	1d19      	adds	r1, r3, #4
 8025b06:	6031      	str	r1, [r6, #0]
 8025b08:	0606      	lsls	r6, r0, #24
 8025b0a:	d501      	bpl.n	8025b10 <_printf_i+0xbc>
 8025b0c:	681d      	ldr	r5, [r3, #0]
 8025b0e:	e003      	b.n	8025b18 <_printf_i+0xc4>
 8025b10:	0645      	lsls	r5, r0, #25
 8025b12:	d5fb      	bpl.n	8025b0c <_printf_i+0xb8>
 8025b14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025b18:	2d00      	cmp	r5, #0
 8025b1a:	da03      	bge.n	8025b24 <_printf_i+0xd0>
 8025b1c:	232d      	movs	r3, #45	@ 0x2d
 8025b1e:	426d      	negs	r5, r5
 8025b20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025b24:	4859      	ldr	r0, [pc, #356]	@ (8025c8c <_printf_i+0x238>)
 8025b26:	230a      	movs	r3, #10
 8025b28:	e011      	b.n	8025b4e <_printf_i+0xfa>
 8025b2a:	6821      	ldr	r1, [r4, #0]
 8025b2c:	6833      	ldr	r3, [r6, #0]
 8025b2e:	0608      	lsls	r0, r1, #24
 8025b30:	f853 5b04 	ldr.w	r5, [r3], #4
 8025b34:	d402      	bmi.n	8025b3c <_printf_i+0xe8>
 8025b36:	0649      	lsls	r1, r1, #25
 8025b38:	bf48      	it	mi
 8025b3a:	b2ad      	uxthmi	r5, r5
 8025b3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8025b3e:	6033      	str	r3, [r6, #0]
 8025b40:	4852      	ldr	r0, [pc, #328]	@ (8025c8c <_printf_i+0x238>)
 8025b42:	bf14      	ite	ne
 8025b44:	230a      	movne	r3, #10
 8025b46:	2308      	moveq	r3, #8
 8025b48:	2100      	movs	r1, #0
 8025b4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025b4e:	6866      	ldr	r6, [r4, #4]
 8025b50:	2e00      	cmp	r6, #0
 8025b52:	60a6      	str	r6, [r4, #8]
 8025b54:	bfa2      	ittt	ge
 8025b56:	6821      	ldrge	r1, [r4, #0]
 8025b58:	f021 0104 	bicge.w	r1, r1, #4
 8025b5c:	6021      	strge	r1, [r4, #0]
 8025b5e:	b90d      	cbnz	r5, 8025b64 <_printf_i+0x110>
 8025b60:	2e00      	cmp	r6, #0
 8025b62:	d04b      	beq.n	8025bfc <_printf_i+0x1a8>
 8025b64:	4616      	mov	r6, r2
 8025b66:	fbb5 f1f3 	udiv	r1, r5, r3
 8025b6a:	fb03 5711 	mls	r7, r3, r1, r5
 8025b6e:	5dc7      	ldrb	r7, [r0, r7]
 8025b70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025b74:	462f      	mov	r7, r5
 8025b76:	460d      	mov	r5, r1
 8025b78:	42bb      	cmp	r3, r7
 8025b7a:	d9f4      	bls.n	8025b66 <_printf_i+0x112>
 8025b7c:	2b08      	cmp	r3, #8
 8025b7e:	d10b      	bne.n	8025b98 <_printf_i+0x144>
 8025b80:	6823      	ldr	r3, [r4, #0]
 8025b82:	07df      	lsls	r7, r3, #31
 8025b84:	d508      	bpl.n	8025b98 <_printf_i+0x144>
 8025b86:	6923      	ldr	r3, [r4, #16]
 8025b88:	6861      	ldr	r1, [r4, #4]
 8025b8a:	4299      	cmp	r1, r3
 8025b8c:	bfde      	ittt	le
 8025b8e:	2330      	movle	r3, #48	@ 0x30
 8025b90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025b94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025b98:	1b92      	subs	r2, r2, r6
 8025b9a:	6122      	str	r2, [r4, #16]
 8025b9c:	464b      	mov	r3, r9
 8025b9e:	aa03      	add	r2, sp, #12
 8025ba0:	4621      	mov	r1, r4
 8025ba2:	4640      	mov	r0, r8
 8025ba4:	f8cd a000 	str.w	sl, [sp]
 8025ba8:	f7ff fee2 	bl	8025970 <_printf_common>
 8025bac:	3001      	adds	r0, #1
 8025bae:	d14a      	bne.n	8025c46 <_printf_i+0x1f2>
 8025bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8025bb4:	b004      	add	sp, #16
 8025bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025bba:	6823      	ldr	r3, [r4, #0]
 8025bbc:	f043 0320 	orr.w	r3, r3, #32
 8025bc0:	6023      	str	r3, [r4, #0]
 8025bc2:	2778      	movs	r7, #120	@ 0x78
 8025bc4:	4832      	ldr	r0, [pc, #200]	@ (8025c90 <_printf_i+0x23c>)
 8025bc6:	6823      	ldr	r3, [r4, #0]
 8025bc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025bcc:	061f      	lsls	r7, r3, #24
 8025bce:	6831      	ldr	r1, [r6, #0]
 8025bd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8025bd4:	d402      	bmi.n	8025bdc <_printf_i+0x188>
 8025bd6:	065f      	lsls	r7, r3, #25
 8025bd8:	bf48      	it	mi
 8025bda:	b2ad      	uxthmi	r5, r5
 8025bdc:	6031      	str	r1, [r6, #0]
 8025bde:	07d9      	lsls	r1, r3, #31
 8025be0:	bf44      	itt	mi
 8025be2:	f043 0320 	orrmi.w	r3, r3, #32
 8025be6:	6023      	strmi	r3, [r4, #0]
 8025be8:	b11d      	cbz	r5, 8025bf2 <_printf_i+0x19e>
 8025bea:	2310      	movs	r3, #16
 8025bec:	e7ac      	b.n	8025b48 <_printf_i+0xf4>
 8025bee:	4827      	ldr	r0, [pc, #156]	@ (8025c8c <_printf_i+0x238>)
 8025bf0:	e7e9      	b.n	8025bc6 <_printf_i+0x172>
 8025bf2:	6823      	ldr	r3, [r4, #0]
 8025bf4:	f023 0320 	bic.w	r3, r3, #32
 8025bf8:	6023      	str	r3, [r4, #0]
 8025bfa:	e7f6      	b.n	8025bea <_printf_i+0x196>
 8025bfc:	4616      	mov	r6, r2
 8025bfe:	e7bd      	b.n	8025b7c <_printf_i+0x128>
 8025c00:	6833      	ldr	r3, [r6, #0]
 8025c02:	6825      	ldr	r5, [r4, #0]
 8025c04:	1d18      	adds	r0, r3, #4
 8025c06:	6961      	ldr	r1, [r4, #20]
 8025c08:	6030      	str	r0, [r6, #0]
 8025c0a:	062e      	lsls	r6, r5, #24
 8025c0c:	681b      	ldr	r3, [r3, #0]
 8025c0e:	d501      	bpl.n	8025c14 <_printf_i+0x1c0>
 8025c10:	6019      	str	r1, [r3, #0]
 8025c12:	e002      	b.n	8025c1a <_printf_i+0x1c6>
 8025c14:	0668      	lsls	r0, r5, #25
 8025c16:	d5fb      	bpl.n	8025c10 <_printf_i+0x1bc>
 8025c18:	8019      	strh	r1, [r3, #0]
 8025c1a:	2300      	movs	r3, #0
 8025c1c:	4616      	mov	r6, r2
 8025c1e:	6123      	str	r3, [r4, #16]
 8025c20:	e7bc      	b.n	8025b9c <_printf_i+0x148>
 8025c22:	6833      	ldr	r3, [r6, #0]
 8025c24:	2100      	movs	r1, #0
 8025c26:	1d1a      	adds	r2, r3, #4
 8025c28:	6032      	str	r2, [r6, #0]
 8025c2a:	681e      	ldr	r6, [r3, #0]
 8025c2c:	6862      	ldr	r2, [r4, #4]
 8025c2e:	4630      	mov	r0, r6
 8025c30:	f000 fc1f 	bl	8026472 <memchr>
 8025c34:	b108      	cbz	r0, 8025c3a <_printf_i+0x1e6>
 8025c36:	1b80      	subs	r0, r0, r6
 8025c38:	6060      	str	r0, [r4, #4]
 8025c3a:	6863      	ldr	r3, [r4, #4]
 8025c3c:	6123      	str	r3, [r4, #16]
 8025c3e:	2300      	movs	r3, #0
 8025c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025c44:	e7aa      	b.n	8025b9c <_printf_i+0x148>
 8025c46:	6923      	ldr	r3, [r4, #16]
 8025c48:	4632      	mov	r2, r6
 8025c4a:	4649      	mov	r1, r9
 8025c4c:	4640      	mov	r0, r8
 8025c4e:	47d0      	blx	sl
 8025c50:	3001      	adds	r0, #1
 8025c52:	d0ad      	beq.n	8025bb0 <_printf_i+0x15c>
 8025c54:	6823      	ldr	r3, [r4, #0]
 8025c56:	079b      	lsls	r3, r3, #30
 8025c58:	d413      	bmi.n	8025c82 <_printf_i+0x22e>
 8025c5a:	68e0      	ldr	r0, [r4, #12]
 8025c5c:	9b03      	ldr	r3, [sp, #12]
 8025c5e:	4298      	cmp	r0, r3
 8025c60:	bfb8      	it	lt
 8025c62:	4618      	movlt	r0, r3
 8025c64:	e7a6      	b.n	8025bb4 <_printf_i+0x160>
 8025c66:	2301      	movs	r3, #1
 8025c68:	4632      	mov	r2, r6
 8025c6a:	4649      	mov	r1, r9
 8025c6c:	4640      	mov	r0, r8
 8025c6e:	47d0      	blx	sl
 8025c70:	3001      	adds	r0, #1
 8025c72:	d09d      	beq.n	8025bb0 <_printf_i+0x15c>
 8025c74:	3501      	adds	r5, #1
 8025c76:	68e3      	ldr	r3, [r4, #12]
 8025c78:	9903      	ldr	r1, [sp, #12]
 8025c7a:	1a5b      	subs	r3, r3, r1
 8025c7c:	42ab      	cmp	r3, r5
 8025c7e:	dcf2      	bgt.n	8025c66 <_printf_i+0x212>
 8025c80:	e7eb      	b.n	8025c5a <_printf_i+0x206>
 8025c82:	2500      	movs	r5, #0
 8025c84:	f104 0619 	add.w	r6, r4, #25
 8025c88:	e7f5      	b.n	8025c76 <_printf_i+0x222>
 8025c8a:	bf00      	nop
 8025c8c:	0802c4e2 	.word	0x0802c4e2
 8025c90:	0802c4f3 	.word	0x0802c4f3

08025c94 <__sflush_r>:
 8025c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c9c:	0716      	lsls	r6, r2, #28
 8025c9e:	4605      	mov	r5, r0
 8025ca0:	460c      	mov	r4, r1
 8025ca2:	d454      	bmi.n	8025d4e <__sflush_r+0xba>
 8025ca4:	684b      	ldr	r3, [r1, #4]
 8025ca6:	2b00      	cmp	r3, #0
 8025ca8:	dc02      	bgt.n	8025cb0 <__sflush_r+0x1c>
 8025caa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025cac:	2b00      	cmp	r3, #0
 8025cae:	dd48      	ble.n	8025d42 <__sflush_r+0xae>
 8025cb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025cb2:	2e00      	cmp	r6, #0
 8025cb4:	d045      	beq.n	8025d42 <__sflush_r+0xae>
 8025cb6:	2300      	movs	r3, #0
 8025cb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025cbc:	682f      	ldr	r7, [r5, #0]
 8025cbe:	6a21      	ldr	r1, [r4, #32]
 8025cc0:	602b      	str	r3, [r5, #0]
 8025cc2:	d030      	beq.n	8025d26 <__sflush_r+0x92>
 8025cc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025cc6:	89a3      	ldrh	r3, [r4, #12]
 8025cc8:	0759      	lsls	r1, r3, #29
 8025cca:	d505      	bpl.n	8025cd8 <__sflush_r+0x44>
 8025ccc:	6863      	ldr	r3, [r4, #4]
 8025cce:	1ad2      	subs	r2, r2, r3
 8025cd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025cd2:	b10b      	cbz	r3, 8025cd8 <__sflush_r+0x44>
 8025cd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025cd6:	1ad2      	subs	r2, r2, r3
 8025cd8:	2300      	movs	r3, #0
 8025cda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025cdc:	6a21      	ldr	r1, [r4, #32]
 8025cde:	4628      	mov	r0, r5
 8025ce0:	47b0      	blx	r6
 8025ce2:	1c43      	adds	r3, r0, #1
 8025ce4:	89a3      	ldrh	r3, [r4, #12]
 8025ce6:	d106      	bne.n	8025cf6 <__sflush_r+0x62>
 8025ce8:	6829      	ldr	r1, [r5, #0]
 8025cea:	291d      	cmp	r1, #29
 8025cec:	d82b      	bhi.n	8025d46 <__sflush_r+0xb2>
 8025cee:	4a2a      	ldr	r2, [pc, #168]	@ (8025d98 <__sflush_r+0x104>)
 8025cf0:	410a      	asrs	r2, r1
 8025cf2:	07d6      	lsls	r6, r2, #31
 8025cf4:	d427      	bmi.n	8025d46 <__sflush_r+0xb2>
 8025cf6:	2200      	movs	r2, #0
 8025cf8:	04d9      	lsls	r1, r3, #19
 8025cfa:	6062      	str	r2, [r4, #4]
 8025cfc:	6922      	ldr	r2, [r4, #16]
 8025cfe:	6022      	str	r2, [r4, #0]
 8025d00:	d504      	bpl.n	8025d0c <__sflush_r+0x78>
 8025d02:	1c42      	adds	r2, r0, #1
 8025d04:	d101      	bne.n	8025d0a <__sflush_r+0x76>
 8025d06:	682b      	ldr	r3, [r5, #0]
 8025d08:	b903      	cbnz	r3, 8025d0c <__sflush_r+0x78>
 8025d0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8025d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025d0e:	602f      	str	r7, [r5, #0]
 8025d10:	b1b9      	cbz	r1, 8025d42 <__sflush_r+0xae>
 8025d12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025d16:	4299      	cmp	r1, r3
 8025d18:	d002      	beq.n	8025d20 <__sflush_r+0x8c>
 8025d1a:	4628      	mov	r0, r5
 8025d1c:	f000 fbc4 	bl	80264a8 <_free_r>
 8025d20:	2300      	movs	r3, #0
 8025d22:	6363      	str	r3, [r4, #52]	@ 0x34
 8025d24:	e00d      	b.n	8025d42 <__sflush_r+0xae>
 8025d26:	2301      	movs	r3, #1
 8025d28:	4628      	mov	r0, r5
 8025d2a:	47b0      	blx	r6
 8025d2c:	4602      	mov	r2, r0
 8025d2e:	1c50      	adds	r0, r2, #1
 8025d30:	d1c9      	bne.n	8025cc6 <__sflush_r+0x32>
 8025d32:	682b      	ldr	r3, [r5, #0]
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	d0c6      	beq.n	8025cc6 <__sflush_r+0x32>
 8025d38:	2b1d      	cmp	r3, #29
 8025d3a:	d001      	beq.n	8025d40 <__sflush_r+0xac>
 8025d3c:	2b16      	cmp	r3, #22
 8025d3e:	d11d      	bne.n	8025d7c <__sflush_r+0xe8>
 8025d40:	602f      	str	r7, [r5, #0]
 8025d42:	2000      	movs	r0, #0
 8025d44:	e021      	b.n	8025d8a <__sflush_r+0xf6>
 8025d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025d4a:	b21b      	sxth	r3, r3
 8025d4c:	e01a      	b.n	8025d84 <__sflush_r+0xf0>
 8025d4e:	690f      	ldr	r7, [r1, #16]
 8025d50:	2f00      	cmp	r7, #0
 8025d52:	d0f6      	beq.n	8025d42 <__sflush_r+0xae>
 8025d54:	0793      	lsls	r3, r2, #30
 8025d56:	680e      	ldr	r6, [r1, #0]
 8025d58:	600f      	str	r7, [r1, #0]
 8025d5a:	bf0c      	ite	eq
 8025d5c:	694b      	ldreq	r3, [r1, #20]
 8025d5e:	2300      	movne	r3, #0
 8025d60:	eba6 0807 	sub.w	r8, r6, r7
 8025d64:	608b      	str	r3, [r1, #8]
 8025d66:	f1b8 0f00 	cmp.w	r8, #0
 8025d6a:	ddea      	ble.n	8025d42 <__sflush_r+0xae>
 8025d6c:	4643      	mov	r3, r8
 8025d6e:	463a      	mov	r2, r7
 8025d70:	6a21      	ldr	r1, [r4, #32]
 8025d72:	4628      	mov	r0, r5
 8025d74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8025d76:	47b0      	blx	r6
 8025d78:	2800      	cmp	r0, #0
 8025d7a:	dc08      	bgt.n	8025d8e <__sflush_r+0xfa>
 8025d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025d84:	f04f 30ff 	mov.w	r0, #4294967295
 8025d88:	81a3      	strh	r3, [r4, #12]
 8025d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d8e:	4407      	add	r7, r0
 8025d90:	eba8 0800 	sub.w	r8, r8, r0
 8025d94:	e7e7      	b.n	8025d66 <__sflush_r+0xd2>
 8025d96:	bf00      	nop
 8025d98:	dfbffffe 	.word	0xdfbffffe

08025d9c <_fflush_r>:
 8025d9c:	b538      	push	{r3, r4, r5, lr}
 8025d9e:	690b      	ldr	r3, [r1, #16]
 8025da0:	4605      	mov	r5, r0
 8025da2:	460c      	mov	r4, r1
 8025da4:	b913      	cbnz	r3, 8025dac <_fflush_r+0x10>
 8025da6:	2500      	movs	r5, #0
 8025da8:	4628      	mov	r0, r5
 8025daa:	bd38      	pop	{r3, r4, r5, pc}
 8025dac:	b118      	cbz	r0, 8025db6 <_fflush_r+0x1a>
 8025dae:	6a03      	ldr	r3, [r0, #32]
 8025db0:	b90b      	cbnz	r3, 8025db6 <_fflush_r+0x1a>
 8025db2:	f000 f8a7 	bl	8025f04 <__sinit>
 8025db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025dba:	2b00      	cmp	r3, #0
 8025dbc:	d0f3      	beq.n	8025da6 <_fflush_r+0xa>
 8025dbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8025dc0:	07d0      	lsls	r0, r2, #31
 8025dc2:	d404      	bmi.n	8025dce <_fflush_r+0x32>
 8025dc4:	0599      	lsls	r1, r3, #22
 8025dc6:	d402      	bmi.n	8025dce <_fflush_r+0x32>
 8025dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025dca:	f000 fb48 	bl	802645e <__retarget_lock_acquire_recursive>
 8025dce:	4628      	mov	r0, r5
 8025dd0:	4621      	mov	r1, r4
 8025dd2:	f7ff ff5f 	bl	8025c94 <__sflush_r>
 8025dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025dd8:	4605      	mov	r5, r0
 8025dda:	07da      	lsls	r2, r3, #31
 8025ddc:	d4e4      	bmi.n	8025da8 <_fflush_r+0xc>
 8025dde:	89a3      	ldrh	r3, [r4, #12]
 8025de0:	059b      	lsls	r3, r3, #22
 8025de2:	d4e1      	bmi.n	8025da8 <_fflush_r+0xc>
 8025de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025de6:	f000 fb3b 	bl	8026460 <__retarget_lock_release_recursive>
 8025dea:	e7dd      	b.n	8025da8 <_fflush_r+0xc>

08025dec <std>:
 8025dec:	2300      	movs	r3, #0
 8025dee:	b510      	push	{r4, lr}
 8025df0:	4604      	mov	r4, r0
 8025df2:	6083      	str	r3, [r0, #8]
 8025df4:	8181      	strh	r1, [r0, #12]
 8025df6:	4619      	mov	r1, r3
 8025df8:	6643      	str	r3, [r0, #100]	@ 0x64
 8025dfa:	81c2      	strh	r2, [r0, #14]
 8025dfc:	2208      	movs	r2, #8
 8025dfe:	6183      	str	r3, [r0, #24]
 8025e00:	e9c0 3300 	strd	r3, r3, [r0]
 8025e04:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025e08:	305c      	adds	r0, #92	@ 0x5c
 8025e0a:	f000 fa09 	bl	8026220 <memset>
 8025e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8025e44 <std+0x58>)
 8025e10:	6224      	str	r4, [r4, #32]
 8025e12:	6263      	str	r3, [r4, #36]	@ 0x24
 8025e14:	4b0c      	ldr	r3, [pc, #48]	@ (8025e48 <std+0x5c>)
 8025e16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025e18:	4b0c      	ldr	r3, [pc, #48]	@ (8025e4c <std+0x60>)
 8025e1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8025e50 <std+0x64>)
 8025e1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8025e20:	4b0c      	ldr	r3, [pc, #48]	@ (8025e54 <std+0x68>)
 8025e22:	429c      	cmp	r4, r3
 8025e24:	d006      	beq.n	8025e34 <std+0x48>
 8025e26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8025e2a:	4294      	cmp	r4, r2
 8025e2c:	d002      	beq.n	8025e34 <std+0x48>
 8025e2e:	33d0      	adds	r3, #208	@ 0xd0
 8025e30:	429c      	cmp	r4, r3
 8025e32:	d105      	bne.n	8025e40 <std+0x54>
 8025e34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e3c:	f000 bb0e 	b.w	802645c <__retarget_lock_init_recursive>
 8025e40:	bd10      	pop	{r4, pc}
 8025e42:	bf00      	nop
 8025e44:	0802603d 	.word	0x0802603d
 8025e48:	0802605f 	.word	0x0802605f
 8025e4c:	08026097 	.word	0x08026097
 8025e50:	080260bb 	.word	0x080260bb
 8025e54:	2001f5a0 	.word	0x2001f5a0

08025e58 <stdio_exit_handler>:
 8025e58:	4a02      	ldr	r2, [pc, #8]	@ (8025e64 <stdio_exit_handler+0xc>)
 8025e5a:	4903      	ldr	r1, [pc, #12]	@ (8025e68 <stdio_exit_handler+0x10>)
 8025e5c:	4803      	ldr	r0, [pc, #12]	@ (8025e6c <stdio_exit_handler+0x14>)
 8025e5e:	f000 b87b 	b.w	8025f58 <_fwalk_sglue>
 8025e62:	bf00      	nop
 8025e64:	200018bc 	.word	0x200018bc
 8025e68:	08025d9d 	.word	0x08025d9d
 8025e6c:	200018cc 	.word	0x200018cc

08025e70 <cleanup_stdio>:
 8025e70:	6841      	ldr	r1, [r0, #4]
 8025e72:	4b0c      	ldr	r3, [pc, #48]	@ (8025ea4 <cleanup_stdio+0x34>)
 8025e74:	4299      	cmp	r1, r3
 8025e76:	b510      	push	{r4, lr}
 8025e78:	4604      	mov	r4, r0
 8025e7a:	d001      	beq.n	8025e80 <cleanup_stdio+0x10>
 8025e7c:	f7ff ff8e 	bl	8025d9c <_fflush_r>
 8025e80:	68a1      	ldr	r1, [r4, #8]
 8025e82:	4b09      	ldr	r3, [pc, #36]	@ (8025ea8 <cleanup_stdio+0x38>)
 8025e84:	4299      	cmp	r1, r3
 8025e86:	d002      	beq.n	8025e8e <cleanup_stdio+0x1e>
 8025e88:	4620      	mov	r0, r4
 8025e8a:	f7ff ff87 	bl	8025d9c <_fflush_r>
 8025e8e:	68e1      	ldr	r1, [r4, #12]
 8025e90:	4b06      	ldr	r3, [pc, #24]	@ (8025eac <cleanup_stdio+0x3c>)
 8025e92:	4299      	cmp	r1, r3
 8025e94:	d004      	beq.n	8025ea0 <cleanup_stdio+0x30>
 8025e96:	4620      	mov	r0, r4
 8025e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e9c:	f7ff bf7e 	b.w	8025d9c <_fflush_r>
 8025ea0:	bd10      	pop	{r4, pc}
 8025ea2:	bf00      	nop
 8025ea4:	2001f5a0 	.word	0x2001f5a0
 8025ea8:	2001f608 	.word	0x2001f608
 8025eac:	2001f670 	.word	0x2001f670

08025eb0 <global_stdio_init.part.0>:
 8025eb0:	b510      	push	{r4, lr}
 8025eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8025ee0 <global_stdio_init.part.0+0x30>)
 8025eb4:	2104      	movs	r1, #4
 8025eb6:	4c0b      	ldr	r4, [pc, #44]	@ (8025ee4 <global_stdio_init.part.0+0x34>)
 8025eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8025ee8 <global_stdio_init.part.0+0x38>)
 8025eba:	4620      	mov	r0, r4
 8025ebc:	601a      	str	r2, [r3, #0]
 8025ebe:	2200      	movs	r2, #0
 8025ec0:	f7ff ff94 	bl	8025dec <std>
 8025ec4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025ec8:	2201      	movs	r2, #1
 8025eca:	2109      	movs	r1, #9
 8025ecc:	f7ff ff8e 	bl	8025dec <std>
 8025ed0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025ed4:	2202      	movs	r2, #2
 8025ed6:	2112      	movs	r1, #18
 8025ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025edc:	f7ff bf86 	b.w	8025dec <std>
 8025ee0:	2001f6d8 	.word	0x2001f6d8
 8025ee4:	2001f5a0 	.word	0x2001f5a0
 8025ee8:	08025e59 	.word	0x08025e59

08025eec <__sfp_lock_acquire>:
 8025eec:	4801      	ldr	r0, [pc, #4]	@ (8025ef4 <__sfp_lock_acquire+0x8>)
 8025eee:	f000 bab6 	b.w	802645e <__retarget_lock_acquire_recursive>
 8025ef2:	bf00      	nop
 8025ef4:	2001f6dc 	.word	0x2001f6dc

08025ef8 <__sfp_lock_release>:
 8025ef8:	4801      	ldr	r0, [pc, #4]	@ (8025f00 <__sfp_lock_release+0x8>)
 8025efa:	f000 bab1 	b.w	8026460 <__retarget_lock_release_recursive>
 8025efe:	bf00      	nop
 8025f00:	2001f6dc 	.word	0x2001f6dc

08025f04 <__sinit>:
 8025f04:	b510      	push	{r4, lr}
 8025f06:	4604      	mov	r4, r0
 8025f08:	f7ff fff0 	bl	8025eec <__sfp_lock_acquire>
 8025f0c:	6a23      	ldr	r3, [r4, #32]
 8025f0e:	b11b      	cbz	r3, 8025f18 <__sinit+0x14>
 8025f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f14:	f7ff bff0 	b.w	8025ef8 <__sfp_lock_release>
 8025f18:	4b04      	ldr	r3, [pc, #16]	@ (8025f2c <__sinit+0x28>)
 8025f1a:	6223      	str	r3, [r4, #32]
 8025f1c:	4b04      	ldr	r3, [pc, #16]	@ (8025f30 <__sinit+0x2c>)
 8025f1e:	681b      	ldr	r3, [r3, #0]
 8025f20:	2b00      	cmp	r3, #0
 8025f22:	d1f5      	bne.n	8025f10 <__sinit+0xc>
 8025f24:	f7ff ffc4 	bl	8025eb0 <global_stdio_init.part.0>
 8025f28:	e7f2      	b.n	8025f10 <__sinit+0xc>
 8025f2a:	bf00      	nop
 8025f2c:	08025e71 	.word	0x08025e71
 8025f30:	2001f6d8 	.word	0x2001f6d8

08025f34 <fiprintf>:
 8025f34:	b40e      	push	{r1, r2, r3}
 8025f36:	b503      	push	{r0, r1, lr}
 8025f38:	ab03      	add	r3, sp, #12
 8025f3a:	4601      	mov	r1, r0
 8025f3c:	4805      	ldr	r0, [pc, #20]	@ (8025f54 <fiprintf+0x20>)
 8025f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8025f42:	6800      	ldr	r0, [r0, #0]
 8025f44:	9301      	str	r3, [sp, #4]
 8025f46:	f7ff fbfb 	bl	8025740 <_vfiprintf_r>
 8025f4a:	b002      	add	sp, #8
 8025f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025f50:	b003      	add	sp, #12
 8025f52:	4770      	bx	lr
 8025f54:	200018c8 	.word	0x200018c8

08025f58 <_fwalk_sglue>:
 8025f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025f5c:	4607      	mov	r7, r0
 8025f5e:	4688      	mov	r8, r1
 8025f60:	4614      	mov	r4, r2
 8025f62:	2600      	movs	r6, #0
 8025f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025f68:	f1b9 0901 	subs.w	r9, r9, #1
 8025f6c:	d505      	bpl.n	8025f7a <_fwalk_sglue+0x22>
 8025f6e:	6824      	ldr	r4, [r4, #0]
 8025f70:	2c00      	cmp	r4, #0
 8025f72:	d1f7      	bne.n	8025f64 <_fwalk_sglue+0xc>
 8025f74:	4630      	mov	r0, r6
 8025f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025f7a:	89ab      	ldrh	r3, [r5, #12]
 8025f7c:	2b01      	cmp	r3, #1
 8025f7e:	d907      	bls.n	8025f90 <_fwalk_sglue+0x38>
 8025f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025f84:	3301      	adds	r3, #1
 8025f86:	d003      	beq.n	8025f90 <_fwalk_sglue+0x38>
 8025f88:	4629      	mov	r1, r5
 8025f8a:	4638      	mov	r0, r7
 8025f8c:	47c0      	blx	r8
 8025f8e:	4306      	orrs	r6, r0
 8025f90:	3568      	adds	r5, #104	@ 0x68
 8025f92:	e7e9      	b.n	8025f68 <_fwalk_sglue+0x10>

08025f94 <sniprintf>:
 8025f94:	b40c      	push	{r2, r3}
 8025f96:	4b18      	ldr	r3, [pc, #96]	@ (8025ff8 <sniprintf+0x64>)
 8025f98:	b530      	push	{r4, r5, lr}
 8025f9a:	1e0c      	subs	r4, r1, #0
 8025f9c:	b09d      	sub	sp, #116	@ 0x74
 8025f9e:	681d      	ldr	r5, [r3, #0]
 8025fa0:	da08      	bge.n	8025fb4 <sniprintf+0x20>
 8025fa2:	238b      	movs	r3, #139	@ 0x8b
 8025fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8025fa8:	602b      	str	r3, [r5, #0]
 8025faa:	b01d      	add	sp, #116	@ 0x74
 8025fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025fb0:	b002      	add	sp, #8
 8025fb2:	4770      	bx	lr
 8025fb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025fb8:	9002      	str	r0, [sp, #8]
 8025fba:	9006      	str	r0, [sp, #24]
 8025fbc:	a902      	add	r1, sp, #8
 8025fbe:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025fc2:	bf14      	ite	ne
 8025fc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025fc8:	4623      	moveq	r3, r4
 8025fca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025fcc:	4628      	mov	r0, r5
 8025fce:	9304      	str	r3, [sp, #16]
 8025fd0:	9307      	str	r3, [sp, #28]
 8025fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025fd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025fda:	ab21      	add	r3, sp, #132	@ 0x84
 8025fdc:	9301      	str	r3, [sp, #4]
 8025fde:	f000 fb37 	bl	8026650 <_svfiprintf_r>
 8025fe2:	1c43      	adds	r3, r0, #1
 8025fe4:	bfbc      	itt	lt
 8025fe6:	238b      	movlt	r3, #139	@ 0x8b
 8025fe8:	602b      	strlt	r3, [r5, #0]
 8025fea:	2c00      	cmp	r4, #0
 8025fec:	d0dd      	beq.n	8025faa <sniprintf+0x16>
 8025fee:	9b02      	ldr	r3, [sp, #8]
 8025ff0:	2200      	movs	r2, #0
 8025ff2:	701a      	strb	r2, [r3, #0]
 8025ff4:	e7d9      	b.n	8025faa <sniprintf+0x16>
 8025ff6:	bf00      	nop
 8025ff8:	200018c8 	.word	0x200018c8

08025ffc <siprintf>:
 8025ffc:	b40e      	push	{r1, r2, r3}
 8025ffe:	b500      	push	{lr}
 8026000:	b09c      	sub	sp, #112	@ 0x70
 8026002:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8026006:	ab1d      	add	r3, sp, #116	@ 0x74
 8026008:	9002      	str	r0, [sp, #8]
 802600a:	9006      	str	r0, [sp, #24]
 802600c:	9107      	str	r1, [sp, #28]
 802600e:	9104      	str	r1, [sp, #16]
 8026010:	4808      	ldr	r0, [pc, #32]	@ (8026034 <siprintf+0x38>)
 8026012:	4909      	ldr	r1, [pc, #36]	@ (8026038 <siprintf+0x3c>)
 8026014:	f853 2b04 	ldr.w	r2, [r3], #4
 8026018:	9105      	str	r1, [sp, #20]
 802601a:	a902      	add	r1, sp, #8
 802601c:	6800      	ldr	r0, [r0, #0]
 802601e:	9301      	str	r3, [sp, #4]
 8026020:	f000 fb16 	bl	8026650 <_svfiprintf_r>
 8026024:	9b02      	ldr	r3, [sp, #8]
 8026026:	2200      	movs	r2, #0
 8026028:	701a      	strb	r2, [r3, #0]
 802602a:	b01c      	add	sp, #112	@ 0x70
 802602c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026030:	b003      	add	sp, #12
 8026032:	4770      	bx	lr
 8026034:	200018c8 	.word	0x200018c8
 8026038:	ffff0208 	.word	0xffff0208

0802603c <__sread>:
 802603c:	b510      	push	{r4, lr}
 802603e:	460c      	mov	r4, r1
 8026040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026044:	f000 f9a8 	bl	8026398 <_read_r>
 8026048:	2800      	cmp	r0, #0
 802604a:	bfab      	itete	ge
 802604c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802604e:	89a3      	ldrhlt	r3, [r4, #12]
 8026050:	181b      	addge	r3, r3, r0
 8026052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8026056:	bfac      	ite	ge
 8026058:	6563      	strge	r3, [r4, #84]	@ 0x54
 802605a:	81a3      	strhlt	r3, [r4, #12]
 802605c:	bd10      	pop	{r4, pc}

0802605e <__swrite>:
 802605e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026062:	461f      	mov	r7, r3
 8026064:	898b      	ldrh	r3, [r1, #12]
 8026066:	4605      	mov	r5, r0
 8026068:	460c      	mov	r4, r1
 802606a:	05db      	lsls	r3, r3, #23
 802606c:	4616      	mov	r6, r2
 802606e:	d505      	bpl.n	802607c <__swrite+0x1e>
 8026070:	2302      	movs	r3, #2
 8026072:	2200      	movs	r2, #0
 8026074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026078:	f000 f97c 	bl	8026374 <_lseek_r>
 802607c:	89a3      	ldrh	r3, [r4, #12]
 802607e:	4632      	mov	r2, r6
 8026080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026084:	4628      	mov	r0, r5
 8026086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802608a:	81a3      	strh	r3, [r4, #12]
 802608c:	463b      	mov	r3, r7
 802608e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026092:	f000 b9a7 	b.w	80263e4 <_write_r>

08026096 <__sseek>:
 8026096:	b510      	push	{r4, lr}
 8026098:	460c      	mov	r4, r1
 802609a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802609e:	f000 f969 	bl	8026374 <_lseek_r>
 80260a2:	1c43      	adds	r3, r0, #1
 80260a4:	89a3      	ldrh	r3, [r4, #12]
 80260a6:	bf15      	itete	ne
 80260a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80260aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80260ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80260b2:	81a3      	strheq	r3, [r4, #12]
 80260b4:	bf18      	it	ne
 80260b6:	81a3      	strhne	r3, [r4, #12]
 80260b8:	bd10      	pop	{r4, pc}

080260ba <__sclose>:
 80260ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80260be:	f000 b949 	b.w	8026354 <_close_r>

080260c2 <__swbuf_r>:
 80260c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80260c4:	460e      	mov	r6, r1
 80260c6:	4614      	mov	r4, r2
 80260c8:	4605      	mov	r5, r0
 80260ca:	b118      	cbz	r0, 80260d4 <__swbuf_r+0x12>
 80260cc:	6a03      	ldr	r3, [r0, #32]
 80260ce:	b90b      	cbnz	r3, 80260d4 <__swbuf_r+0x12>
 80260d0:	f7ff ff18 	bl	8025f04 <__sinit>
 80260d4:	69a3      	ldr	r3, [r4, #24]
 80260d6:	60a3      	str	r3, [r4, #8]
 80260d8:	89a3      	ldrh	r3, [r4, #12]
 80260da:	071a      	lsls	r2, r3, #28
 80260dc:	d501      	bpl.n	80260e2 <__swbuf_r+0x20>
 80260de:	6923      	ldr	r3, [r4, #16]
 80260e0:	b943      	cbnz	r3, 80260f4 <__swbuf_r+0x32>
 80260e2:	4621      	mov	r1, r4
 80260e4:	4628      	mov	r0, r5
 80260e6:	f000 f82b 	bl	8026140 <__swsetup_r>
 80260ea:	b118      	cbz	r0, 80260f4 <__swbuf_r+0x32>
 80260ec:	f04f 37ff 	mov.w	r7, #4294967295
 80260f0:	4638      	mov	r0, r7
 80260f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80260f4:	6823      	ldr	r3, [r4, #0]
 80260f6:	b2f6      	uxtb	r6, r6
 80260f8:	6922      	ldr	r2, [r4, #16]
 80260fa:	4637      	mov	r7, r6
 80260fc:	1a98      	subs	r0, r3, r2
 80260fe:	6963      	ldr	r3, [r4, #20]
 8026100:	4283      	cmp	r3, r0
 8026102:	dc05      	bgt.n	8026110 <__swbuf_r+0x4e>
 8026104:	4621      	mov	r1, r4
 8026106:	4628      	mov	r0, r5
 8026108:	f7ff fe48 	bl	8025d9c <_fflush_r>
 802610c:	2800      	cmp	r0, #0
 802610e:	d1ed      	bne.n	80260ec <__swbuf_r+0x2a>
 8026110:	68a3      	ldr	r3, [r4, #8]
 8026112:	3b01      	subs	r3, #1
 8026114:	60a3      	str	r3, [r4, #8]
 8026116:	6823      	ldr	r3, [r4, #0]
 8026118:	1c5a      	adds	r2, r3, #1
 802611a:	6022      	str	r2, [r4, #0]
 802611c:	701e      	strb	r6, [r3, #0]
 802611e:	1c43      	adds	r3, r0, #1
 8026120:	6962      	ldr	r2, [r4, #20]
 8026122:	429a      	cmp	r2, r3
 8026124:	d004      	beq.n	8026130 <__swbuf_r+0x6e>
 8026126:	89a3      	ldrh	r3, [r4, #12]
 8026128:	07db      	lsls	r3, r3, #31
 802612a:	d5e1      	bpl.n	80260f0 <__swbuf_r+0x2e>
 802612c:	2e0a      	cmp	r6, #10
 802612e:	d1df      	bne.n	80260f0 <__swbuf_r+0x2e>
 8026130:	4621      	mov	r1, r4
 8026132:	4628      	mov	r0, r5
 8026134:	f7ff fe32 	bl	8025d9c <_fflush_r>
 8026138:	2800      	cmp	r0, #0
 802613a:	d0d9      	beq.n	80260f0 <__swbuf_r+0x2e>
 802613c:	e7d6      	b.n	80260ec <__swbuf_r+0x2a>
	...

08026140 <__swsetup_r>:
 8026140:	b538      	push	{r3, r4, r5, lr}
 8026142:	4b29      	ldr	r3, [pc, #164]	@ (80261e8 <__swsetup_r+0xa8>)
 8026144:	4605      	mov	r5, r0
 8026146:	460c      	mov	r4, r1
 8026148:	6818      	ldr	r0, [r3, #0]
 802614a:	b118      	cbz	r0, 8026154 <__swsetup_r+0x14>
 802614c:	6a03      	ldr	r3, [r0, #32]
 802614e:	b90b      	cbnz	r3, 8026154 <__swsetup_r+0x14>
 8026150:	f7ff fed8 	bl	8025f04 <__sinit>
 8026154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026158:	0719      	lsls	r1, r3, #28
 802615a:	d422      	bmi.n	80261a2 <__swsetup_r+0x62>
 802615c:	06da      	lsls	r2, r3, #27
 802615e:	d407      	bmi.n	8026170 <__swsetup_r+0x30>
 8026160:	2209      	movs	r2, #9
 8026162:	602a      	str	r2, [r5, #0]
 8026164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026168:	f04f 30ff 	mov.w	r0, #4294967295
 802616c:	81a3      	strh	r3, [r4, #12]
 802616e:	e033      	b.n	80261d8 <__swsetup_r+0x98>
 8026170:	0758      	lsls	r0, r3, #29
 8026172:	d512      	bpl.n	802619a <__swsetup_r+0x5a>
 8026174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026176:	b141      	cbz	r1, 802618a <__swsetup_r+0x4a>
 8026178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802617c:	4299      	cmp	r1, r3
 802617e:	d002      	beq.n	8026186 <__swsetup_r+0x46>
 8026180:	4628      	mov	r0, r5
 8026182:	f000 f991 	bl	80264a8 <_free_r>
 8026186:	2300      	movs	r3, #0
 8026188:	6363      	str	r3, [r4, #52]	@ 0x34
 802618a:	89a3      	ldrh	r3, [r4, #12]
 802618c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026190:	81a3      	strh	r3, [r4, #12]
 8026192:	2300      	movs	r3, #0
 8026194:	6063      	str	r3, [r4, #4]
 8026196:	6923      	ldr	r3, [r4, #16]
 8026198:	6023      	str	r3, [r4, #0]
 802619a:	89a3      	ldrh	r3, [r4, #12]
 802619c:	f043 0308 	orr.w	r3, r3, #8
 80261a0:	81a3      	strh	r3, [r4, #12]
 80261a2:	6923      	ldr	r3, [r4, #16]
 80261a4:	b94b      	cbnz	r3, 80261ba <__swsetup_r+0x7a>
 80261a6:	89a3      	ldrh	r3, [r4, #12]
 80261a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80261ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80261b0:	d003      	beq.n	80261ba <__swsetup_r+0x7a>
 80261b2:	4621      	mov	r1, r4
 80261b4:	4628      	mov	r0, r5
 80261b6:	f000 fb6c 	bl	8026892 <__smakebuf_r>
 80261ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261be:	f013 0201 	ands.w	r2, r3, #1
 80261c2:	d00a      	beq.n	80261da <__swsetup_r+0x9a>
 80261c4:	2200      	movs	r2, #0
 80261c6:	60a2      	str	r2, [r4, #8]
 80261c8:	6962      	ldr	r2, [r4, #20]
 80261ca:	4252      	negs	r2, r2
 80261cc:	61a2      	str	r2, [r4, #24]
 80261ce:	6922      	ldr	r2, [r4, #16]
 80261d0:	b942      	cbnz	r2, 80261e4 <__swsetup_r+0xa4>
 80261d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80261d6:	d1c5      	bne.n	8026164 <__swsetup_r+0x24>
 80261d8:	bd38      	pop	{r3, r4, r5, pc}
 80261da:	0799      	lsls	r1, r3, #30
 80261dc:	bf58      	it	pl
 80261de:	6962      	ldrpl	r2, [r4, #20]
 80261e0:	60a2      	str	r2, [r4, #8]
 80261e2:	e7f4      	b.n	80261ce <__swsetup_r+0x8e>
 80261e4:	2000      	movs	r0, #0
 80261e6:	e7f7      	b.n	80261d8 <__swsetup_r+0x98>
 80261e8:	200018c8 	.word	0x200018c8

080261ec <memmove>:
 80261ec:	4288      	cmp	r0, r1
 80261ee:	b510      	push	{r4, lr}
 80261f0:	eb01 0402 	add.w	r4, r1, r2
 80261f4:	d902      	bls.n	80261fc <memmove+0x10>
 80261f6:	4284      	cmp	r4, r0
 80261f8:	4623      	mov	r3, r4
 80261fa:	d807      	bhi.n	802620c <memmove+0x20>
 80261fc:	1e43      	subs	r3, r0, #1
 80261fe:	42a1      	cmp	r1, r4
 8026200:	d008      	beq.n	8026214 <memmove+0x28>
 8026202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026206:	f803 2f01 	strb.w	r2, [r3, #1]!
 802620a:	e7f8      	b.n	80261fe <memmove+0x12>
 802620c:	4402      	add	r2, r0
 802620e:	4601      	mov	r1, r0
 8026210:	428a      	cmp	r2, r1
 8026212:	d100      	bne.n	8026216 <memmove+0x2a>
 8026214:	bd10      	pop	{r4, pc}
 8026216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802621a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802621e:	e7f7      	b.n	8026210 <memmove+0x24>

08026220 <memset>:
 8026220:	4402      	add	r2, r0
 8026222:	4603      	mov	r3, r0
 8026224:	4293      	cmp	r3, r2
 8026226:	d100      	bne.n	802622a <memset+0xa>
 8026228:	4770      	bx	lr
 802622a:	f803 1b01 	strb.w	r1, [r3], #1
 802622e:	e7f9      	b.n	8026224 <memset+0x4>

08026230 <strcat>:
 8026230:	4602      	mov	r2, r0
 8026232:	b510      	push	{r4, lr}
 8026234:	7814      	ldrb	r4, [r2, #0]
 8026236:	4613      	mov	r3, r2
 8026238:	3201      	adds	r2, #1
 802623a:	2c00      	cmp	r4, #0
 802623c:	d1fa      	bne.n	8026234 <strcat+0x4>
 802623e:	3b01      	subs	r3, #1
 8026240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026244:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026248:	2a00      	cmp	r2, #0
 802624a:	d1f9      	bne.n	8026240 <strcat+0x10>
 802624c:	bd10      	pop	{r4, pc}

0802624e <strchr>:
 802624e:	b2c9      	uxtb	r1, r1
 8026250:	4603      	mov	r3, r0
 8026252:	4618      	mov	r0, r3
 8026254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026258:	b112      	cbz	r2, 8026260 <strchr+0x12>
 802625a:	428a      	cmp	r2, r1
 802625c:	d1f9      	bne.n	8026252 <strchr+0x4>
 802625e:	4770      	bx	lr
 8026260:	2900      	cmp	r1, #0
 8026262:	bf18      	it	ne
 8026264:	2000      	movne	r0, #0
 8026266:	4770      	bx	lr

08026268 <strncasecmp>:
 8026268:	b570      	push	{r4, r5, r6, lr}
 802626a:	440a      	add	r2, r1
 802626c:	4605      	mov	r5, r0
 802626e:	4e0d      	ldr	r6, [pc, #52]	@ (80262a4 <strncasecmp+0x3c>)
 8026270:	428a      	cmp	r2, r1
 8026272:	d101      	bne.n	8026278 <strncasecmp+0x10>
 8026274:	2000      	movs	r0, #0
 8026276:	e013      	b.n	80262a0 <strncasecmp+0x38>
 8026278:	f815 3b01 	ldrb.w	r3, [r5], #1
 802627c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026280:	5cf0      	ldrb	r0, [r6, r3]
 8026282:	f000 0003 	and.w	r0, r0, #3
 8026286:	2801      	cmp	r0, #1
 8026288:	5d30      	ldrb	r0, [r6, r4]
 802628a:	f000 0003 	and.w	r0, r0, #3
 802628e:	bf08      	it	eq
 8026290:	3320      	addeq	r3, #32
 8026292:	2801      	cmp	r0, #1
 8026294:	bf08      	it	eq
 8026296:	3420      	addeq	r4, #32
 8026298:	1b18      	subs	r0, r3, r4
 802629a:	d101      	bne.n	80262a0 <strncasecmp+0x38>
 802629c:	2c00      	cmp	r4, #0
 802629e:	d1e7      	bne.n	8026270 <strncasecmp+0x8>
 80262a0:	bd70      	pop	{r4, r5, r6, pc}
 80262a2:	bf00      	nop
 80262a4:	0802c3d1 	.word	0x0802c3d1

080262a8 <strncmp>:
 80262a8:	b510      	push	{r4, lr}
 80262aa:	b16a      	cbz	r2, 80262c8 <strncmp+0x20>
 80262ac:	3901      	subs	r1, #1
 80262ae:	1884      	adds	r4, r0, r2
 80262b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80262b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80262b8:	429a      	cmp	r2, r3
 80262ba:	d103      	bne.n	80262c4 <strncmp+0x1c>
 80262bc:	42a0      	cmp	r0, r4
 80262be:	d001      	beq.n	80262c4 <strncmp+0x1c>
 80262c0:	2a00      	cmp	r2, #0
 80262c2:	d1f5      	bne.n	80262b0 <strncmp+0x8>
 80262c4:	1ad0      	subs	r0, r2, r3
 80262c6:	bd10      	pop	{r4, pc}
 80262c8:	4610      	mov	r0, r2
 80262ca:	e7fc      	b.n	80262c6 <strncmp+0x1e>

080262cc <strncpy>:
 80262cc:	3901      	subs	r1, #1
 80262ce:	4603      	mov	r3, r0
 80262d0:	b510      	push	{r4, lr}
 80262d2:	b132      	cbz	r2, 80262e2 <strncpy+0x16>
 80262d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80262d8:	3a01      	subs	r2, #1
 80262da:	f803 4b01 	strb.w	r4, [r3], #1
 80262de:	2c00      	cmp	r4, #0
 80262e0:	d1f7      	bne.n	80262d2 <strncpy+0x6>
 80262e2:	441a      	add	r2, r3
 80262e4:	2100      	movs	r1, #0
 80262e6:	4293      	cmp	r3, r2
 80262e8:	d100      	bne.n	80262ec <strncpy+0x20>
 80262ea:	bd10      	pop	{r4, pc}
 80262ec:	f803 1b01 	strb.w	r1, [r3], #1
 80262f0:	e7f9      	b.n	80262e6 <strncpy+0x1a>

080262f2 <_raise_r>:
 80262f2:	291f      	cmp	r1, #31
 80262f4:	b538      	push	{r3, r4, r5, lr}
 80262f6:	4605      	mov	r5, r0
 80262f8:	460c      	mov	r4, r1
 80262fa:	d904      	bls.n	8026306 <_raise_r+0x14>
 80262fc:	2316      	movs	r3, #22
 80262fe:	6003      	str	r3, [r0, #0]
 8026300:	f04f 30ff 	mov.w	r0, #4294967295
 8026304:	bd38      	pop	{r3, r4, r5, pc}
 8026306:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8026308:	b112      	cbz	r2, 8026310 <_raise_r+0x1e>
 802630a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802630e:	b94b      	cbnz	r3, 8026324 <_raise_r+0x32>
 8026310:	4628      	mov	r0, r5
 8026312:	f000 f865 	bl	80263e0 <_getpid_r>
 8026316:	4622      	mov	r2, r4
 8026318:	4601      	mov	r1, r0
 802631a:	4628      	mov	r0, r5
 802631c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026320:	f000 b84c 	b.w	80263bc <_kill_r>
 8026324:	2b01      	cmp	r3, #1
 8026326:	d00a      	beq.n	802633e <_raise_r+0x4c>
 8026328:	1c59      	adds	r1, r3, #1
 802632a:	d103      	bne.n	8026334 <_raise_r+0x42>
 802632c:	2316      	movs	r3, #22
 802632e:	6003      	str	r3, [r0, #0]
 8026330:	2001      	movs	r0, #1
 8026332:	e7e7      	b.n	8026304 <_raise_r+0x12>
 8026334:	2100      	movs	r1, #0
 8026336:	4620      	mov	r0, r4
 8026338:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802633c:	4798      	blx	r3
 802633e:	2000      	movs	r0, #0
 8026340:	e7e0      	b.n	8026304 <_raise_r+0x12>
	...

08026344 <raise>:
 8026344:	4b02      	ldr	r3, [pc, #8]	@ (8026350 <raise+0xc>)
 8026346:	4601      	mov	r1, r0
 8026348:	6818      	ldr	r0, [r3, #0]
 802634a:	f7ff bfd2 	b.w	80262f2 <_raise_r>
 802634e:	bf00      	nop
 8026350:	200018c8 	.word	0x200018c8

08026354 <_close_r>:
 8026354:	b538      	push	{r3, r4, r5, lr}
 8026356:	2300      	movs	r3, #0
 8026358:	4d05      	ldr	r5, [pc, #20]	@ (8026370 <_close_r+0x1c>)
 802635a:	4604      	mov	r4, r0
 802635c:	4608      	mov	r0, r1
 802635e:	602b      	str	r3, [r5, #0]
 8026360:	f7e5 fabc 	bl	800b8dc <_close>
 8026364:	1c43      	adds	r3, r0, #1
 8026366:	d102      	bne.n	802636e <_close_r+0x1a>
 8026368:	682b      	ldr	r3, [r5, #0]
 802636a:	b103      	cbz	r3, 802636e <_close_r+0x1a>
 802636c:	6023      	str	r3, [r4, #0]
 802636e:	bd38      	pop	{r3, r4, r5, pc}
 8026370:	2001d5f4 	.word	0x2001d5f4

08026374 <_lseek_r>:
 8026374:	b538      	push	{r3, r4, r5, lr}
 8026376:	4604      	mov	r4, r0
 8026378:	4d06      	ldr	r5, [pc, #24]	@ (8026394 <_lseek_r+0x20>)
 802637a:	4608      	mov	r0, r1
 802637c:	4611      	mov	r1, r2
 802637e:	2200      	movs	r2, #0
 8026380:	602a      	str	r2, [r5, #0]
 8026382:	461a      	mov	r2, r3
 8026384:	f7e5 fad1 	bl	800b92a <_lseek>
 8026388:	1c43      	adds	r3, r0, #1
 802638a:	d102      	bne.n	8026392 <_lseek_r+0x1e>
 802638c:	682b      	ldr	r3, [r5, #0]
 802638e:	b103      	cbz	r3, 8026392 <_lseek_r+0x1e>
 8026390:	6023      	str	r3, [r4, #0]
 8026392:	bd38      	pop	{r3, r4, r5, pc}
 8026394:	2001d5f4 	.word	0x2001d5f4

08026398 <_read_r>:
 8026398:	b538      	push	{r3, r4, r5, lr}
 802639a:	4604      	mov	r4, r0
 802639c:	4d06      	ldr	r5, [pc, #24]	@ (80263b8 <_read_r+0x20>)
 802639e:	4608      	mov	r0, r1
 80263a0:	4611      	mov	r1, r2
 80263a2:	2200      	movs	r2, #0
 80263a4:	602a      	str	r2, [r5, #0]
 80263a6:	461a      	mov	r2, r3
 80263a8:	f7e5 fa5f 	bl	800b86a <_read>
 80263ac:	1c43      	adds	r3, r0, #1
 80263ae:	d102      	bne.n	80263b6 <_read_r+0x1e>
 80263b0:	682b      	ldr	r3, [r5, #0]
 80263b2:	b103      	cbz	r3, 80263b6 <_read_r+0x1e>
 80263b4:	6023      	str	r3, [r4, #0]
 80263b6:	bd38      	pop	{r3, r4, r5, pc}
 80263b8:	2001d5f4 	.word	0x2001d5f4

080263bc <_kill_r>:
 80263bc:	b538      	push	{r3, r4, r5, lr}
 80263be:	2300      	movs	r3, #0
 80263c0:	4d06      	ldr	r5, [pc, #24]	@ (80263dc <_kill_r+0x20>)
 80263c2:	4604      	mov	r4, r0
 80263c4:	4608      	mov	r0, r1
 80263c6:	4611      	mov	r1, r2
 80263c8:	602b      	str	r3, [r5, #0]
 80263ca:	f7e5 fa33 	bl	800b834 <_kill>
 80263ce:	1c43      	adds	r3, r0, #1
 80263d0:	d102      	bne.n	80263d8 <_kill_r+0x1c>
 80263d2:	682b      	ldr	r3, [r5, #0]
 80263d4:	b103      	cbz	r3, 80263d8 <_kill_r+0x1c>
 80263d6:	6023      	str	r3, [r4, #0]
 80263d8:	bd38      	pop	{r3, r4, r5, pc}
 80263da:	bf00      	nop
 80263dc:	2001d5f4 	.word	0x2001d5f4

080263e0 <_getpid_r>:
 80263e0:	f7e5 ba20 	b.w	800b824 <_getpid>

080263e4 <_write_r>:
 80263e4:	b538      	push	{r3, r4, r5, lr}
 80263e6:	4604      	mov	r4, r0
 80263e8:	4d06      	ldr	r5, [pc, #24]	@ (8026404 <_write_r+0x20>)
 80263ea:	4608      	mov	r0, r1
 80263ec:	4611      	mov	r1, r2
 80263ee:	2200      	movs	r2, #0
 80263f0:	602a      	str	r2, [r5, #0]
 80263f2:	461a      	mov	r2, r3
 80263f4:	f7e5 fa56 	bl	800b8a4 <_write>
 80263f8:	1c43      	adds	r3, r0, #1
 80263fa:	d102      	bne.n	8026402 <_write_r+0x1e>
 80263fc:	682b      	ldr	r3, [r5, #0]
 80263fe:	b103      	cbz	r3, 8026402 <_write_r+0x1e>
 8026400:	6023      	str	r3, [r4, #0]
 8026402:	bd38      	pop	{r3, r4, r5, pc}
 8026404:	2001d5f4 	.word	0x2001d5f4

08026408 <__errno>:
 8026408:	4b01      	ldr	r3, [pc, #4]	@ (8026410 <__errno+0x8>)
 802640a:	6818      	ldr	r0, [r3, #0]
 802640c:	4770      	bx	lr
 802640e:	bf00      	nop
 8026410:	200018c8 	.word	0x200018c8

08026414 <__libc_init_array>:
 8026414:	b570      	push	{r4, r5, r6, lr}
 8026416:	4d0d      	ldr	r5, [pc, #52]	@ (802644c <__libc_init_array+0x38>)
 8026418:	2600      	movs	r6, #0
 802641a:	4c0d      	ldr	r4, [pc, #52]	@ (8026450 <__libc_init_array+0x3c>)
 802641c:	1b64      	subs	r4, r4, r5
 802641e:	10a4      	asrs	r4, r4, #2
 8026420:	42a6      	cmp	r6, r4
 8026422:	d109      	bne.n	8026438 <__libc_init_array+0x24>
 8026424:	4d0b      	ldr	r5, [pc, #44]	@ (8026454 <__libc_init_array+0x40>)
 8026426:	2600      	movs	r6, #0
 8026428:	4c0b      	ldr	r4, [pc, #44]	@ (8026458 <__libc_init_array+0x44>)
 802642a:	f000 fa99 	bl	8026960 <_init>
 802642e:	1b64      	subs	r4, r4, r5
 8026430:	10a4      	asrs	r4, r4, #2
 8026432:	42a6      	cmp	r6, r4
 8026434:	d105      	bne.n	8026442 <__libc_init_array+0x2e>
 8026436:	bd70      	pop	{r4, r5, r6, pc}
 8026438:	f855 3b04 	ldr.w	r3, [r5], #4
 802643c:	3601      	adds	r6, #1
 802643e:	4798      	blx	r3
 8026440:	e7ee      	b.n	8026420 <__libc_init_array+0xc>
 8026442:	f855 3b04 	ldr.w	r3, [r5], #4
 8026446:	3601      	adds	r6, #1
 8026448:	4798      	blx	r3
 802644a:	e7f2      	b.n	8026432 <__libc_init_array+0x1e>
 802644c:	0802c50c 	.word	0x0802c50c
 8026450:	0802c50c 	.word	0x0802c50c
 8026454:	0802c50c 	.word	0x0802c50c
 8026458:	0802c51c 	.word	0x0802c51c

0802645c <__retarget_lock_init_recursive>:
 802645c:	4770      	bx	lr

0802645e <__retarget_lock_acquire_recursive>:
 802645e:	4770      	bx	lr

08026460 <__retarget_lock_release_recursive>:
 8026460:	4770      	bx	lr

08026462 <strcpy>:
 8026462:	4603      	mov	r3, r0
 8026464:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026468:	f803 2b01 	strb.w	r2, [r3], #1
 802646c:	2a00      	cmp	r2, #0
 802646e:	d1f9      	bne.n	8026464 <strcpy+0x2>
 8026470:	4770      	bx	lr

08026472 <memchr>:
 8026472:	b2c9      	uxtb	r1, r1
 8026474:	4603      	mov	r3, r0
 8026476:	4402      	add	r2, r0
 8026478:	b510      	push	{r4, lr}
 802647a:	4293      	cmp	r3, r2
 802647c:	4618      	mov	r0, r3
 802647e:	d101      	bne.n	8026484 <memchr+0x12>
 8026480:	2000      	movs	r0, #0
 8026482:	e003      	b.n	802648c <memchr+0x1a>
 8026484:	7804      	ldrb	r4, [r0, #0]
 8026486:	3301      	adds	r3, #1
 8026488:	428c      	cmp	r4, r1
 802648a:	d1f6      	bne.n	802647a <memchr+0x8>
 802648c:	bd10      	pop	{r4, pc}

0802648e <memcpy>:
 802648e:	440a      	add	r2, r1
 8026490:	1e43      	subs	r3, r0, #1
 8026492:	4291      	cmp	r1, r2
 8026494:	d100      	bne.n	8026498 <memcpy+0xa>
 8026496:	4770      	bx	lr
 8026498:	b510      	push	{r4, lr}
 802649a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802649e:	4291      	cmp	r1, r2
 80264a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80264a4:	d1f9      	bne.n	802649a <memcpy+0xc>
 80264a6:	bd10      	pop	{r4, pc}

080264a8 <_free_r>:
 80264a8:	b538      	push	{r3, r4, r5, lr}
 80264aa:	4605      	mov	r5, r0
 80264ac:	2900      	cmp	r1, #0
 80264ae:	d041      	beq.n	8026534 <_free_r+0x8c>
 80264b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80264b4:	1f0c      	subs	r4, r1, #4
 80264b6:	2b00      	cmp	r3, #0
 80264b8:	bfb8      	it	lt
 80264ba:	18e4      	addlt	r4, r4, r3
 80264bc:	f7f8 fe0a 	bl	801f0d4 <__malloc_lock>
 80264c0:	4a1d      	ldr	r2, [pc, #116]	@ (8026538 <_free_r+0x90>)
 80264c2:	6813      	ldr	r3, [r2, #0]
 80264c4:	b933      	cbnz	r3, 80264d4 <_free_r+0x2c>
 80264c6:	6063      	str	r3, [r4, #4]
 80264c8:	6014      	str	r4, [r2, #0]
 80264ca:	4628      	mov	r0, r5
 80264cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80264d0:	f7f8 be2a 	b.w	801f128 <__malloc_unlock>
 80264d4:	42a3      	cmp	r3, r4
 80264d6:	d908      	bls.n	80264ea <_free_r+0x42>
 80264d8:	6820      	ldr	r0, [r4, #0]
 80264da:	1821      	adds	r1, r4, r0
 80264dc:	428b      	cmp	r3, r1
 80264de:	bf01      	itttt	eq
 80264e0:	6819      	ldreq	r1, [r3, #0]
 80264e2:	685b      	ldreq	r3, [r3, #4]
 80264e4:	1809      	addeq	r1, r1, r0
 80264e6:	6021      	streq	r1, [r4, #0]
 80264e8:	e7ed      	b.n	80264c6 <_free_r+0x1e>
 80264ea:	461a      	mov	r2, r3
 80264ec:	685b      	ldr	r3, [r3, #4]
 80264ee:	b10b      	cbz	r3, 80264f4 <_free_r+0x4c>
 80264f0:	42a3      	cmp	r3, r4
 80264f2:	d9fa      	bls.n	80264ea <_free_r+0x42>
 80264f4:	6811      	ldr	r1, [r2, #0]
 80264f6:	1850      	adds	r0, r2, r1
 80264f8:	42a0      	cmp	r0, r4
 80264fa:	d10b      	bne.n	8026514 <_free_r+0x6c>
 80264fc:	6820      	ldr	r0, [r4, #0]
 80264fe:	4401      	add	r1, r0
 8026500:	1850      	adds	r0, r2, r1
 8026502:	6011      	str	r1, [r2, #0]
 8026504:	4283      	cmp	r3, r0
 8026506:	d1e0      	bne.n	80264ca <_free_r+0x22>
 8026508:	6818      	ldr	r0, [r3, #0]
 802650a:	685b      	ldr	r3, [r3, #4]
 802650c:	4408      	add	r0, r1
 802650e:	6053      	str	r3, [r2, #4]
 8026510:	6010      	str	r0, [r2, #0]
 8026512:	e7da      	b.n	80264ca <_free_r+0x22>
 8026514:	d902      	bls.n	802651c <_free_r+0x74>
 8026516:	230c      	movs	r3, #12
 8026518:	602b      	str	r3, [r5, #0]
 802651a:	e7d6      	b.n	80264ca <_free_r+0x22>
 802651c:	6820      	ldr	r0, [r4, #0]
 802651e:	1821      	adds	r1, r4, r0
 8026520:	428b      	cmp	r3, r1
 8026522:	bf02      	ittt	eq
 8026524:	6819      	ldreq	r1, [r3, #0]
 8026526:	685b      	ldreq	r3, [r3, #4]
 8026528:	1809      	addeq	r1, r1, r0
 802652a:	6063      	str	r3, [r4, #4]
 802652c:	bf08      	it	eq
 802652e:	6021      	streq	r1, [r4, #0]
 8026530:	6054      	str	r4, [r2, #4]
 8026532:	e7ca      	b.n	80264ca <_free_r+0x22>
 8026534:	bd38      	pop	{r3, r4, r5, pc}
 8026536:	bf00      	nop
 8026538:	2001f59c 	.word	0x2001f59c

0802653c <_realloc_r>:
 802653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026540:	4680      	mov	r8, r0
 8026542:	4615      	mov	r5, r2
 8026544:	460c      	mov	r4, r1
 8026546:	b921      	cbnz	r1, 8026552 <_realloc_r+0x16>
 8026548:	4611      	mov	r1, r2
 802654a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802654e:	f7fe bf87 	b.w	8025460 <_malloc_r>
 8026552:	b92a      	cbnz	r2, 8026560 <_realloc_r+0x24>
 8026554:	f7ff ffa8 	bl	80264a8 <_free_r>
 8026558:	2400      	movs	r4, #0
 802655a:	4620      	mov	r0, r4
 802655c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026560:	f000 f9f6 	bl	8026950 <_malloc_usable_size_r>
 8026564:	4285      	cmp	r5, r0
 8026566:	4606      	mov	r6, r0
 8026568:	d802      	bhi.n	8026570 <_realloc_r+0x34>
 802656a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802656e:	d8f4      	bhi.n	802655a <_realloc_r+0x1e>
 8026570:	4629      	mov	r1, r5
 8026572:	4640      	mov	r0, r8
 8026574:	f7fe ff74 	bl	8025460 <_malloc_r>
 8026578:	4607      	mov	r7, r0
 802657a:	2800      	cmp	r0, #0
 802657c:	d0ec      	beq.n	8026558 <_realloc_r+0x1c>
 802657e:	42b5      	cmp	r5, r6
 8026580:	462a      	mov	r2, r5
 8026582:	4621      	mov	r1, r4
 8026584:	bf28      	it	cs
 8026586:	4632      	movcs	r2, r6
 8026588:	f7ff ff81 	bl	802648e <memcpy>
 802658c:	4621      	mov	r1, r4
 802658e:	4640      	mov	r0, r8
 8026590:	463c      	mov	r4, r7
 8026592:	f7ff ff89 	bl	80264a8 <_free_r>
 8026596:	e7e0      	b.n	802655a <_realloc_r+0x1e>

08026598 <__ssputs_r>:
 8026598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802659c:	461f      	mov	r7, r3
 802659e:	688e      	ldr	r6, [r1, #8]
 80265a0:	4682      	mov	sl, r0
 80265a2:	460c      	mov	r4, r1
 80265a4:	42be      	cmp	r6, r7
 80265a6:	4690      	mov	r8, r2
 80265a8:	680b      	ldr	r3, [r1, #0]
 80265aa:	d82d      	bhi.n	8026608 <__ssputs_r+0x70>
 80265ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80265b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80265b4:	d026      	beq.n	8026604 <__ssputs_r+0x6c>
 80265b6:	6965      	ldr	r5, [r4, #20]
 80265b8:	6909      	ldr	r1, [r1, #16]
 80265ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80265be:	eba3 0901 	sub.w	r9, r3, r1
 80265c2:	1c7b      	adds	r3, r7, #1
 80265c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80265c8:	444b      	add	r3, r9
 80265ca:	106d      	asrs	r5, r5, #1
 80265cc:	429d      	cmp	r5, r3
 80265ce:	bf38      	it	cc
 80265d0:	461d      	movcc	r5, r3
 80265d2:	0553      	lsls	r3, r2, #21
 80265d4:	d527      	bpl.n	8026626 <__ssputs_r+0x8e>
 80265d6:	4629      	mov	r1, r5
 80265d8:	f7fe ff42 	bl	8025460 <_malloc_r>
 80265dc:	4606      	mov	r6, r0
 80265de:	b360      	cbz	r0, 802663a <__ssputs_r+0xa2>
 80265e0:	464a      	mov	r2, r9
 80265e2:	6921      	ldr	r1, [r4, #16]
 80265e4:	f7ff ff53 	bl	802648e <memcpy>
 80265e8:	89a3      	ldrh	r3, [r4, #12]
 80265ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80265ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80265f2:	81a3      	strh	r3, [r4, #12]
 80265f4:	6126      	str	r6, [r4, #16]
 80265f6:	444e      	add	r6, r9
 80265f8:	6165      	str	r5, [r4, #20]
 80265fa:	eba5 0509 	sub.w	r5, r5, r9
 80265fe:	6026      	str	r6, [r4, #0]
 8026600:	463e      	mov	r6, r7
 8026602:	60a5      	str	r5, [r4, #8]
 8026604:	42be      	cmp	r6, r7
 8026606:	d900      	bls.n	802660a <__ssputs_r+0x72>
 8026608:	463e      	mov	r6, r7
 802660a:	4632      	mov	r2, r6
 802660c:	4641      	mov	r1, r8
 802660e:	6820      	ldr	r0, [r4, #0]
 8026610:	f7ff fdec 	bl	80261ec <memmove>
 8026614:	68a3      	ldr	r3, [r4, #8]
 8026616:	2000      	movs	r0, #0
 8026618:	1b9b      	subs	r3, r3, r6
 802661a:	60a3      	str	r3, [r4, #8]
 802661c:	6823      	ldr	r3, [r4, #0]
 802661e:	4433      	add	r3, r6
 8026620:	6023      	str	r3, [r4, #0]
 8026622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026626:	462a      	mov	r2, r5
 8026628:	f7ff ff88 	bl	802653c <_realloc_r>
 802662c:	4606      	mov	r6, r0
 802662e:	2800      	cmp	r0, #0
 8026630:	d1e0      	bne.n	80265f4 <__ssputs_r+0x5c>
 8026632:	6921      	ldr	r1, [r4, #16]
 8026634:	4650      	mov	r0, sl
 8026636:	f7ff ff37 	bl	80264a8 <_free_r>
 802663a:	230c      	movs	r3, #12
 802663c:	f04f 30ff 	mov.w	r0, #4294967295
 8026640:	f8ca 3000 	str.w	r3, [sl]
 8026644:	89a3      	ldrh	r3, [r4, #12]
 8026646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802664a:	81a3      	strh	r3, [r4, #12]
 802664c:	e7e9      	b.n	8026622 <__ssputs_r+0x8a>
	...

08026650 <_svfiprintf_r>:
 8026650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026654:	4698      	mov	r8, r3
 8026656:	898b      	ldrh	r3, [r1, #12]
 8026658:	b09d      	sub	sp, #116	@ 0x74
 802665a:	4607      	mov	r7, r0
 802665c:	061b      	lsls	r3, r3, #24
 802665e:	460d      	mov	r5, r1
 8026660:	4614      	mov	r4, r2
 8026662:	d510      	bpl.n	8026686 <_svfiprintf_r+0x36>
 8026664:	690b      	ldr	r3, [r1, #16]
 8026666:	b973      	cbnz	r3, 8026686 <_svfiprintf_r+0x36>
 8026668:	2140      	movs	r1, #64	@ 0x40
 802666a:	f7fe fef9 	bl	8025460 <_malloc_r>
 802666e:	6028      	str	r0, [r5, #0]
 8026670:	6128      	str	r0, [r5, #16]
 8026672:	b930      	cbnz	r0, 8026682 <_svfiprintf_r+0x32>
 8026674:	230c      	movs	r3, #12
 8026676:	603b      	str	r3, [r7, #0]
 8026678:	f04f 30ff 	mov.w	r0, #4294967295
 802667c:	b01d      	add	sp, #116	@ 0x74
 802667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026682:	2340      	movs	r3, #64	@ 0x40
 8026684:	616b      	str	r3, [r5, #20]
 8026686:	2300      	movs	r3, #0
 8026688:	f8cd 800c 	str.w	r8, [sp, #12]
 802668c:	f04f 0901 	mov.w	r9, #1
 8026690:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8026834 <_svfiprintf_r+0x1e4>
 8026694:	9309      	str	r3, [sp, #36]	@ 0x24
 8026696:	2320      	movs	r3, #32
 8026698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802669c:	2330      	movs	r3, #48	@ 0x30
 802669e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80266a2:	4623      	mov	r3, r4
 80266a4:	469a      	mov	sl, r3
 80266a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80266aa:	b10a      	cbz	r2, 80266b0 <_svfiprintf_r+0x60>
 80266ac:	2a25      	cmp	r2, #37	@ 0x25
 80266ae:	d1f9      	bne.n	80266a4 <_svfiprintf_r+0x54>
 80266b0:	ebba 0b04 	subs.w	fp, sl, r4
 80266b4:	d00b      	beq.n	80266ce <_svfiprintf_r+0x7e>
 80266b6:	465b      	mov	r3, fp
 80266b8:	4622      	mov	r2, r4
 80266ba:	4629      	mov	r1, r5
 80266bc:	4638      	mov	r0, r7
 80266be:	f7ff ff6b 	bl	8026598 <__ssputs_r>
 80266c2:	3001      	adds	r0, #1
 80266c4:	f000 80a7 	beq.w	8026816 <_svfiprintf_r+0x1c6>
 80266c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80266ca:	445a      	add	r2, fp
 80266cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80266ce:	f89a 3000 	ldrb.w	r3, [sl]
 80266d2:	2b00      	cmp	r3, #0
 80266d4:	f000 809f 	beq.w	8026816 <_svfiprintf_r+0x1c6>
 80266d8:	2300      	movs	r3, #0
 80266da:	f04f 32ff 	mov.w	r2, #4294967295
 80266de:	f10a 0a01 	add.w	sl, sl, #1
 80266e2:	9304      	str	r3, [sp, #16]
 80266e4:	9307      	str	r3, [sp, #28]
 80266e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80266ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80266ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80266f0:	4654      	mov	r4, sl
 80266f2:	2205      	movs	r2, #5
 80266f4:	484f      	ldr	r0, [pc, #316]	@ (8026834 <_svfiprintf_r+0x1e4>)
 80266f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80266fa:	f7ff feba 	bl	8026472 <memchr>
 80266fe:	9a04      	ldr	r2, [sp, #16]
 8026700:	b9d8      	cbnz	r0, 802673a <_svfiprintf_r+0xea>
 8026702:	06d0      	lsls	r0, r2, #27
 8026704:	bf44      	itt	mi
 8026706:	2320      	movmi	r3, #32
 8026708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802670c:	0711      	lsls	r1, r2, #28
 802670e:	bf44      	itt	mi
 8026710:	232b      	movmi	r3, #43	@ 0x2b
 8026712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026716:	f89a 3000 	ldrb.w	r3, [sl]
 802671a:	2b2a      	cmp	r3, #42	@ 0x2a
 802671c:	d015      	beq.n	802674a <_svfiprintf_r+0xfa>
 802671e:	9a07      	ldr	r2, [sp, #28]
 8026720:	4654      	mov	r4, sl
 8026722:	2000      	movs	r0, #0
 8026724:	f04f 0c0a 	mov.w	ip, #10
 8026728:	4621      	mov	r1, r4
 802672a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802672e:	3b30      	subs	r3, #48	@ 0x30
 8026730:	2b09      	cmp	r3, #9
 8026732:	d94b      	bls.n	80267cc <_svfiprintf_r+0x17c>
 8026734:	b1b0      	cbz	r0, 8026764 <_svfiprintf_r+0x114>
 8026736:	9207      	str	r2, [sp, #28]
 8026738:	e014      	b.n	8026764 <_svfiprintf_r+0x114>
 802673a:	eba0 0308 	sub.w	r3, r0, r8
 802673e:	46a2      	mov	sl, r4
 8026740:	fa09 f303 	lsl.w	r3, r9, r3
 8026744:	4313      	orrs	r3, r2
 8026746:	9304      	str	r3, [sp, #16]
 8026748:	e7d2      	b.n	80266f0 <_svfiprintf_r+0xa0>
 802674a:	9b03      	ldr	r3, [sp, #12]
 802674c:	1d19      	adds	r1, r3, #4
 802674e:	681b      	ldr	r3, [r3, #0]
 8026750:	2b00      	cmp	r3, #0
 8026752:	9103      	str	r1, [sp, #12]
 8026754:	bfbb      	ittet	lt
 8026756:	425b      	neglt	r3, r3
 8026758:	f042 0202 	orrlt.w	r2, r2, #2
 802675c:	9307      	strge	r3, [sp, #28]
 802675e:	9307      	strlt	r3, [sp, #28]
 8026760:	bfb8      	it	lt
 8026762:	9204      	strlt	r2, [sp, #16]
 8026764:	7823      	ldrb	r3, [r4, #0]
 8026766:	2b2e      	cmp	r3, #46	@ 0x2e
 8026768:	d10a      	bne.n	8026780 <_svfiprintf_r+0x130>
 802676a:	7863      	ldrb	r3, [r4, #1]
 802676c:	2b2a      	cmp	r3, #42	@ 0x2a
 802676e:	d132      	bne.n	80267d6 <_svfiprintf_r+0x186>
 8026770:	9b03      	ldr	r3, [sp, #12]
 8026772:	3402      	adds	r4, #2
 8026774:	1d1a      	adds	r2, r3, #4
 8026776:	681b      	ldr	r3, [r3, #0]
 8026778:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802677c:	9203      	str	r2, [sp, #12]
 802677e:	9305      	str	r3, [sp, #20]
 8026780:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8026844 <_svfiprintf_r+0x1f4>
 8026784:	2203      	movs	r2, #3
 8026786:	7821      	ldrb	r1, [r4, #0]
 8026788:	4650      	mov	r0, sl
 802678a:	f7ff fe72 	bl	8026472 <memchr>
 802678e:	b138      	cbz	r0, 80267a0 <_svfiprintf_r+0x150>
 8026790:	eba0 000a 	sub.w	r0, r0, sl
 8026794:	2240      	movs	r2, #64	@ 0x40
 8026796:	9b04      	ldr	r3, [sp, #16]
 8026798:	3401      	adds	r4, #1
 802679a:	4082      	lsls	r2, r0
 802679c:	4313      	orrs	r3, r2
 802679e:	9304      	str	r3, [sp, #16]
 80267a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80267a4:	2206      	movs	r2, #6
 80267a6:	4824      	ldr	r0, [pc, #144]	@ (8026838 <_svfiprintf_r+0x1e8>)
 80267a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80267ac:	f7ff fe61 	bl	8026472 <memchr>
 80267b0:	2800      	cmp	r0, #0
 80267b2:	d036      	beq.n	8026822 <_svfiprintf_r+0x1d2>
 80267b4:	4b21      	ldr	r3, [pc, #132]	@ (802683c <_svfiprintf_r+0x1ec>)
 80267b6:	bb1b      	cbnz	r3, 8026800 <_svfiprintf_r+0x1b0>
 80267b8:	9b03      	ldr	r3, [sp, #12]
 80267ba:	3307      	adds	r3, #7
 80267bc:	f023 0307 	bic.w	r3, r3, #7
 80267c0:	3308      	adds	r3, #8
 80267c2:	9303      	str	r3, [sp, #12]
 80267c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80267c6:	4433      	add	r3, r6
 80267c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80267ca:	e76a      	b.n	80266a2 <_svfiprintf_r+0x52>
 80267cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80267d0:	460c      	mov	r4, r1
 80267d2:	2001      	movs	r0, #1
 80267d4:	e7a8      	b.n	8026728 <_svfiprintf_r+0xd8>
 80267d6:	2300      	movs	r3, #0
 80267d8:	3401      	adds	r4, #1
 80267da:	f04f 0c0a 	mov.w	ip, #10
 80267de:	4619      	mov	r1, r3
 80267e0:	9305      	str	r3, [sp, #20]
 80267e2:	4620      	mov	r0, r4
 80267e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80267e8:	3a30      	subs	r2, #48	@ 0x30
 80267ea:	2a09      	cmp	r2, #9
 80267ec:	d903      	bls.n	80267f6 <_svfiprintf_r+0x1a6>
 80267ee:	2b00      	cmp	r3, #0
 80267f0:	d0c6      	beq.n	8026780 <_svfiprintf_r+0x130>
 80267f2:	9105      	str	r1, [sp, #20]
 80267f4:	e7c4      	b.n	8026780 <_svfiprintf_r+0x130>
 80267f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80267fa:	4604      	mov	r4, r0
 80267fc:	2301      	movs	r3, #1
 80267fe:	e7f0      	b.n	80267e2 <_svfiprintf_r+0x192>
 8026800:	ab03      	add	r3, sp, #12
 8026802:	462a      	mov	r2, r5
 8026804:	a904      	add	r1, sp, #16
 8026806:	4638      	mov	r0, r7
 8026808:	9300      	str	r3, [sp, #0]
 802680a:	4b0d      	ldr	r3, [pc, #52]	@ (8026840 <_svfiprintf_r+0x1f0>)
 802680c:	f3af 8000 	nop.w
 8026810:	1c42      	adds	r2, r0, #1
 8026812:	4606      	mov	r6, r0
 8026814:	d1d6      	bne.n	80267c4 <_svfiprintf_r+0x174>
 8026816:	89ab      	ldrh	r3, [r5, #12]
 8026818:	065b      	lsls	r3, r3, #25
 802681a:	f53f af2d 	bmi.w	8026678 <_svfiprintf_r+0x28>
 802681e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026820:	e72c      	b.n	802667c <_svfiprintf_r+0x2c>
 8026822:	ab03      	add	r3, sp, #12
 8026824:	462a      	mov	r2, r5
 8026826:	a904      	add	r1, sp, #16
 8026828:	4638      	mov	r0, r7
 802682a:	9300      	str	r3, [sp, #0]
 802682c:	4b04      	ldr	r3, [pc, #16]	@ (8026840 <_svfiprintf_r+0x1f0>)
 802682e:	f7ff f911 	bl	8025a54 <_printf_i>
 8026832:	e7ed      	b.n	8026810 <_svfiprintf_r+0x1c0>
 8026834:	0802c4d1 	.word	0x0802c4d1
 8026838:	0802c4db 	.word	0x0802c4db
 802683c:	00000000 	.word	0x00000000
 8026840:	08026599 	.word	0x08026599
 8026844:	0802c4d7 	.word	0x0802c4d7

08026848 <__swhatbuf_r>:
 8026848:	b570      	push	{r4, r5, r6, lr}
 802684a:	460c      	mov	r4, r1
 802684c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026850:	b096      	sub	sp, #88	@ 0x58
 8026852:	4615      	mov	r5, r2
 8026854:	2900      	cmp	r1, #0
 8026856:	461e      	mov	r6, r3
 8026858:	da0c      	bge.n	8026874 <__swhatbuf_r+0x2c>
 802685a:	89a3      	ldrh	r3, [r4, #12]
 802685c:	2100      	movs	r1, #0
 802685e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026862:	bf14      	ite	ne
 8026864:	2340      	movne	r3, #64	@ 0x40
 8026866:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802686a:	2000      	movs	r0, #0
 802686c:	6031      	str	r1, [r6, #0]
 802686e:	602b      	str	r3, [r5, #0]
 8026870:	b016      	add	sp, #88	@ 0x58
 8026872:	bd70      	pop	{r4, r5, r6, pc}
 8026874:	466a      	mov	r2, sp
 8026876:	f000 f849 	bl	802690c <_fstat_r>
 802687a:	2800      	cmp	r0, #0
 802687c:	dbed      	blt.n	802685a <__swhatbuf_r+0x12>
 802687e:	9901      	ldr	r1, [sp, #4]
 8026880:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026884:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026888:	4259      	negs	r1, r3
 802688a:	4159      	adcs	r1, r3
 802688c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026890:	e7eb      	b.n	802686a <__swhatbuf_r+0x22>

08026892 <__smakebuf_r>:
 8026892:	898b      	ldrh	r3, [r1, #12]
 8026894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026896:	079d      	lsls	r5, r3, #30
 8026898:	4606      	mov	r6, r0
 802689a:	460c      	mov	r4, r1
 802689c:	d507      	bpl.n	80268ae <__smakebuf_r+0x1c>
 802689e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80268a2:	6023      	str	r3, [r4, #0]
 80268a4:	6123      	str	r3, [r4, #16]
 80268a6:	2301      	movs	r3, #1
 80268a8:	6163      	str	r3, [r4, #20]
 80268aa:	b003      	add	sp, #12
 80268ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80268ae:	ab01      	add	r3, sp, #4
 80268b0:	466a      	mov	r2, sp
 80268b2:	f7ff ffc9 	bl	8026848 <__swhatbuf_r>
 80268b6:	9f00      	ldr	r7, [sp, #0]
 80268b8:	4605      	mov	r5, r0
 80268ba:	4630      	mov	r0, r6
 80268bc:	4639      	mov	r1, r7
 80268be:	f7fe fdcf 	bl	8025460 <_malloc_r>
 80268c2:	b948      	cbnz	r0, 80268d8 <__smakebuf_r+0x46>
 80268c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80268c8:	059a      	lsls	r2, r3, #22
 80268ca:	d4ee      	bmi.n	80268aa <__smakebuf_r+0x18>
 80268cc:	f023 0303 	bic.w	r3, r3, #3
 80268d0:	f043 0302 	orr.w	r3, r3, #2
 80268d4:	81a3      	strh	r3, [r4, #12]
 80268d6:	e7e2      	b.n	802689e <__smakebuf_r+0xc>
 80268d8:	89a3      	ldrh	r3, [r4, #12]
 80268da:	6020      	str	r0, [r4, #0]
 80268dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80268e0:	81a3      	strh	r3, [r4, #12]
 80268e2:	9b01      	ldr	r3, [sp, #4]
 80268e4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80268e8:	b15b      	cbz	r3, 8026902 <__smakebuf_r+0x70>
 80268ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80268ee:	4630      	mov	r0, r6
 80268f0:	f000 f81e 	bl	8026930 <_isatty_r>
 80268f4:	b128      	cbz	r0, 8026902 <__smakebuf_r+0x70>
 80268f6:	89a3      	ldrh	r3, [r4, #12]
 80268f8:	f023 0303 	bic.w	r3, r3, #3
 80268fc:	f043 0301 	orr.w	r3, r3, #1
 8026900:	81a3      	strh	r3, [r4, #12]
 8026902:	89a3      	ldrh	r3, [r4, #12]
 8026904:	431d      	orrs	r5, r3
 8026906:	81a5      	strh	r5, [r4, #12]
 8026908:	e7cf      	b.n	80268aa <__smakebuf_r+0x18>
	...

0802690c <_fstat_r>:
 802690c:	b538      	push	{r3, r4, r5, lr}
 802690e:	2300      	movs	r3, #0
 8026910:	4d06      	ldr	r5, [pc, #24]	@ (802692c <_fstat_r+0x20>)
 8026912:	4604      	mov	r4, r0
 8026914:	4608      	mov	r0, r1
 8026916:	4611      	mov	r1, r2
 8026918:	602b      	str	r3, [r5, #0]
 802691a:	f7e4 ffeb 	bl	800b8f4 <_fstat>
 802691e:	1c43      	adds	r3, r0, #1
 8026920:	d102      	bne.n	8026928 <_fstat_r+0x1c>
 8026922:	682b      	ldr	r3, [r5, #0]
 8026924:	b103      	cbz	r3, 8026928 <_fstat_r+0x1c>
 8026926:	6023      	str	r3, [r4, #0]
 8026928:	bd38      	pop	{r3, r4, r5, pc}
 802692a:	bf00      	nop
 802692c:	2001d5f4 	.word	0x2001d5f4

08026930 <_isatty_r>:
 8026930:	b538      	push	{r3, r4, r5, lr}
 8026932:	2300      	movs	r3, #0
 8026934:	4d05      	ldr	r5, [pc, #20]	@ (802694c <_isatty_r+0x1c>)
 8026936:	4604      	mov	r4, r0
 8026938:	4608      	mov	r0, r1
 802693a:	602b      	str	r3, [r5, #0]
 802693c:	f7e4 ffea 	bl	800b914 <_isatty>
 8026940:	1c43      	adds	r3, r0, #1
 8026942:	d102      	bne.n	802694a <_isatty_r+0x1a>
 8026944:	682b      	ldr	r3, [r5, #0]
 8026946:	b103      	cbz	r3, 802694a <_isatty_r+0x1a>
 8026948:	6023      	str	r3, [r4, #0]
 802694a:	bd38      	pop	{r3, r4, r5, pc}
 802694c:	2001d5f4 	.word	0x2001d5f4

08026950 <_malloc_usable_size_r>:
 8026950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026954:	1f18      	subs	r0, r3, #4
 8026956:	2b00      	cmp	r3, #0
 8026958:	bfbc      	itt	lt
 802695a:	580b      	ldrlt	r3, [r1, r0]
 802695c:	18c0      	addlt	r0, r0, r3
 802695e:	4770      	bx	lr

08026960 <_init>:
 8026960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026962:	bf00      	nop
 8026964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026966:	bc08      	pop	{r3}
 8026968:	469e      	mov	lr, r3
 802696a:	4770      	bx	lr

0802696c <_fini>:
 802696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802696e:	bf00      	nop
 8026970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026972:	bc08      	pop	{r3}
 8026974:	469e      	mov	lr, r3
 8026976:	4770      	bx	lr
